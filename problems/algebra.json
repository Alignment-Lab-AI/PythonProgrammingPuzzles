[
  {
    "name": "QuadraticRoot_0",
    "sat": "def sat(x: float, coeffs: List[float]=[2.5, 1.3, -0.5]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.5, 1.3, -0.5]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.5, 1.3, -0.5]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_1",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.02594949198759851, 4.446531071872568, 1.3753336407819672]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.02594949198759851, 4.446531071872568, 1.3753336407819672]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.02594949198759851, 4.446531071872568, 1.3753336407819672]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_2",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.944385008053097, 0.36615224054270373, 1.4935226216174675]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.944385008053097, 0.36615224054270373, 1.4935226216174675]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.944385008053097, 0.36615224054270373, 1.4935226216174675]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_3",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.628239486906232, -13.602730413345855, -2.404441810616588]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.628239486906232, -13.602730413345855, -2.404441810616588]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.628239486906232, -13.602730413345855, -2.404441810616588]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_4",
    "sat": "def sat(x: float, coeffs: List[float]=[1.2739654714795383, 0.21125441653587332, -0.07556481262706893]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2739654714795383, 0.21125441653587332, -0.07556481262706893]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.2739654714795383, 0.21125441653587332, -0.07556481262706893]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_5",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.7597041805603966, 11.472736092713452, -0.45073410652592905]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.7597041805603966, 11.472736092713452, -0.45073410652592905]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.7597041805603966, 11.472736092713452, -0.45073410652592905]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_6",
    "sat": "def sat(x: float, coeffs: List[float]=[0.25030982730798024, -3.110775258534664, -1.92322244410389]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.25030982730798024, -3.110775258534664, -1.92322244410389]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.25030982730798024, -3.110775258534664, -1.92322244410389]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_7",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.0509005839779774, -2.505987240951752, 26850.718956273195]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0509005839779774, -2.505987240951752, 26850.718956273195]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.0509005839779774, -2.505987240951752, 26850.718956273195]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_8",
    "sat": "def sat(x: float, coeffs: List[float]=[0.016400383619349073, 0.37717487206938244, 2.087222894700811]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.016400383619349073, 0.37717487206938244, 2.087222894700811]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.016400383619349073, 0.37717487206938244, 2.087222894700811]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_9",
    "sat": "def sat(x: float, coeffs: List[float]=[3.5275661471956883, -48.91394818774358, -84944.07300084886]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.5275661471956883, -48.91394818774358, -84944.07300084886]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.5275661471956883, -48.91394818774358, -84944.07300084886]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_10",
    "sat": "def sat(x: float, coeffs: List[float]=[0.10642209727983946, 0.052791379283444906, -0.0020826534264528837]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.10642209727983946, 0.052791379283444906, -0.0020826534264528837]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.10642209727983946, 0.052791379283444906, -0.0020826534264528837]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_11",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1091547997599523, -3.9488159659251, -0.07817122928796245]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1091547997599523, -3.9488159659251, -0.07817122928796245]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.1091547997599523, -3.9488159659251, -0.07817122928796245]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_12",
    "sat": "def sat(x: float, coeffs: List[float]=[0.9528998872679934, -1.7632067387795731, -12.060755845541053]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9528998872679934, -1.7632067387795731, -12.060755845541053]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.9528998872679934, -1.7632067387795731, -12.060755845541053]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_13",
    "sat": "def sat(x: float, coeffs: List[float]=[-16.783618029458452, 0.9196438579773226, 1.132865758719414]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.783618029458452, 0.9196438579773226, 1.132865758719414]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-16.783618029458452, 0.9196438579773226, 1.132865758719414]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_14",
    "sat": "def sat(x: float, coeffs: List[float]=[5.0834702973510595, -5.3758622535682905, 1.313527926355551]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.0834702973510595, -5.3758622535682905, 1.313527926355551]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[5.0834702973510595, -5.3758622535682905, 1.313527926355551]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_15",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1916247612605093, 0.15528269339796275, 16722.192143585882]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1916247612605093, 0.15528269339796275, 16722.192143585882]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.1916247612605093, 0.15528269339796275, 16722.192143585882]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_16",
    "sat": "def sat(x: float, coeffs: List[float]=[-11.583206936928514, 0.19986836795198126, 20057.7265970644]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.583206936928514, 0.19986836795198126, 20057.7265970644]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-11.583206936928514, 0.19986836795198126, 20057.7265970644]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_17",
    "sat": "def sat(x: float, coeffs: List[float]=[0.19896644006130323, 3.410579649523974, 1.7026711972146715]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.19896644006130323, 3.410579649523974, 1.7026711972146715]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.19896644006130323, 3.410579649523974, 1.7026711972146715]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_18",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6099968038158584, -0.7639306474929489, -0.8403758406700981]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6099968038158584, -0.7639306474929489, -0.8403758406700981]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.6099968038158584, -0.7639306474929489, -0.8403758406700981]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_19",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5647972017409276, -0.8615922384021348, 0.025164421247119272]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5647972017409276, -0.8615922384021348, 0.025164421247119272]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5647972017409276, -0.8615922384021348, 0.025164421247119272]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_20",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.4053175594755696, -5.477663892247439, -1.5747574933487778]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.4053175594755696, -5.477663892247439, -1.5747574933487778]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.4053175594755696, -5.477663892247439, -1.5747574933487778]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_21",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8259177348233738, 0.4727899487029476, 0.06681808989334093]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8259177348233738, 0.4727899487029476, 0.06681808989334093]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.8259177348233738, 0.4727899487029476, 0.06681808989334093]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_22",
    "sat": "def sat(x: float, coeffs: List[float]=[0.29898446093735953, -1.0855740354953063, -2.029132634264055]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.29898446093735953, -1.0855740354953063, -2.029132634264055]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.29898446093735953, -1.0855740354953063, -2.029132634264055]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_23",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3120125195784398, -0.2920609628201667, 473.3687512531099]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3120125195784398, -0.2920609628201667, 473.3687512531099]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.3120125195784398, -0.2920609628201667, 473.3687512531099]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_24",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.11285570200213783, -12.430836413365453, 22.321405750129433]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11285570200213783, -12.430836413365453, 22.321405750129433]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.11285570200213783, -12.430836413365453, 22.321405750129433]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_25",
    "sat": "def sat(x: float, coeffs: List[float]=[3.7243132021176053, -2.145435725647069, -5500.514746357927]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.7243132021176053, -2.145435725647069, -5500.514746357927]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.7243132021176053, -2.145435725647069, -5500.514746357927]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_26",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5059409249653041, 0.7107842168591595, -0.23461994487533752]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5059409249653041, 0.7107842168591595, -0.23461994487533752]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5059409249653041, 0.7107842168591595, -0.23461994487533752]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_27",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.0737677523997406, -13.556767707729511, 4663.000302477837]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0737677523997406, -13.556767707729511, 4663.000302477837]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.0737677523997406, -13.556767707729511, 4663.000302477837]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_28",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.4590455904379844, -0.09801881027653225, 0.25880833384289825]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.4590455904379844, -0.09801881027653225, 0.25880833384289825]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.4590455904379844, -0.09801881027653225, 0.25880833384289825]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_29",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.2208021838872654, 23.762697854070638, -41.71205710966069]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.2208021838872654, 23.762697854070638, -41.71205710966069]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.2208021838872654, 23.762697854070638, -41.71205710966069]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_30",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.025094748168202303, -5.4993129890636, -5.0526503452507345]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.025094748168202303, -5.4993129890636, -5.0526503452507345]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.025094748168202303, -5.4993129890636, -5.0526503452507345]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_31",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.13815458940458267, 0.04822966934801953, 1.473128003610811]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.13815458940458267, 0.04822966934801953, 1.473128003610811]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.13815458940458267, 0.04822966934801953, 1.473128003610811]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_32",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.22723364716533015, -2.947459230897594, -3.7640478535588793]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.22723364716533015, -2.947459230897594, -3.7640478535588793]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.22723364716533015, -2.947459230897594, -3.7640478535588793]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_33",
    "sat": "def sat(x: float, coeffs: List[float]=[0.28359137712105076, -0.7897251409579741, -0.6482711573011863]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.28359137712105076, -0.7897251409579741, -0.6482711573011863]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.28359137712105076, -0.7897251409579741, -0.6482711573011863]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_34",
    "sat": "def sat(x: float, coeffs: List[float]=[4.2281368116141245, -0.8893956363155294, -306.4254285144874]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.2281368116141245, -0.8893956363155294, -306.4254285144874]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[4.2281368116141245, -0.8893956363155294, -306.4254285144874]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_35",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.1584595335342587, -0.17321233239096268, 542.5509617954903]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.1584595335342587, -0.17321233239096268, 542.5509617954903]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.1584595335342587, -0.17321233239096268, 542.5509617954903]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_36",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8426794809110717, 591.9932833245488, -302.0940159110804]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8426794809110717, 591.9932833245488, -302.0940159110804]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.8426794809110717, 591.9932833245488, -302.0940159110804]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_37",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.00525437630205, -14.780541989338674, -39.61804099299928]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.00525437630205, -14.780541989338674, -39.61804099299928]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.00525437630205, -14.780541989338674, -39.61804099299928]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_38",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.16460832302357273, -43.02989194537053, 39.32473305052239]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.16460832302357273, -43.02989194537053, 39.32473305052239]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.16460832302357273, -43.02989194537053, 39.32473305052239]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_39",
    "sat": "def sat(x: float, coeffs: List[float]=[127.51761646119286, -13.658745480306658, -1931.3501121419245]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[127.51761646119286, -13.658745480306658, -1931.3501121419245]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[127.51761646119286, -13.658745480306658, -1931.3501121419245]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_40",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.2161829151667825, -0.8613623547537702, 2.9207263581819274]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2161829151667825, -0.8613623547537702, 2.9207263581819274]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.2161829151667825, -0.8613623547537702, 2.9207263581819274]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_41",
    "sat": "def sat(x: float, coeffs: List[float]=[541.3777385307939, 3.2952372852112677, -1213.5122256345273]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[541.3777385307939, 3.2952372852112677, -1213.5122256345273]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[541.3777385307939, 3.2952372852112677, -1213.5122256345273]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_42",
    "sat": "def sat(x: float, coeffs: List[float]=[0.22214702015316176, 18.08945442629953, -2.7807388202783785]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.22214702015316176, 18.08945442629953, -2.7807388202783785]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.22214702015316176, 18.08945442629953, -2.7807388202783785]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_43",
    "sat": "def sat(x: float, coeffs: List[float]=[0.08517287447851718, 50.378396792955876, 48.2092314528994]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08517287447851718, 50.378396792955876, 48.2092314528994]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.08517287447851718, 50.378396792955876, 48.2092314528994]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_44",
    "sat": "def sat(x: float, coeffs: List[float]=[0.9505610920853899, -0.5518981058801669, -0.24133093135436917]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9505610920853899, -0.5518981058801669, -0.24133093135436917]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.9505610920853899, -0.5518981058801669, -0.24133093135436917]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_45",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8782690073169156, 11.044125600820829, -2.80210332210639]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8782690073169156, 11.044125600820829, -2.80210332210639]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.8782690073169156, 11.044125600820829, -2.80210332210639]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_46",
    "sat": "def sat(x: float, coeffs: List[float]=[0.11164061491981192, 31.509688760689002, 40.09581752850506]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.11164061491981192, 31.509688760689002, 40.09581752850506]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.11164061491981192, 31.509688760689002, 40.09581752850506]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_47",
    "sat": "def sat(x: float, coeffs: List[float]=[12.342279081197828, 0.09565215923700632, -41.653177101419224]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.342279081197828, 0.09565215923700632, -41.653177101419224]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[12.342279081197828, 0.09565215923700632, -41.653177101419224]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_48",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8600865566173027, -5.840607194566549, -62.47175062739821]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8600865566173027, -5.840607194566549, -62.47175062739821]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.8600865566173027, -5.840607194566549, -62.47175062739821]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_49",
    "sat": "def sat(x: float, coeffs: List[float]=[0.32319810713515923, -0.491236380564309, -0.22856309302828073]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.32319810713515923, -0.491236380564309, -0.22856309302828073]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.32319810713515923, -0.491236380564309, -0.22856309302828073]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_50",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5376706401141611, -6.920342564610617, 20.86933213014707]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5376706401141611, -6.920342564610617, 20.86933213014707]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5376706401141611, -6.920342564610617, 20.86933213014707]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_51",
    "sat": "def sat(x: float, coeffs: List[float]=[-55.90000969169264, -0.12024739410169112, 5.924527808160676]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-55.90000969169264, -0.12024739410169112, 5.924527808160676]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-55.90000969169264, -0.12024739410169112, 5.924527808160676]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_52",
    "sat": "def sat(x: float, coeffs: List[float]=[-19.590118981153207, 0.041341321648885966, 0.8620854425420105]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-19.590118981153207, 0.041341321648885966, 0.8620854425420105]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-19.590118981153207, 0.041341321648885966, 0.8620854425420105]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_53",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3254656741044164, 0.5238450422596412, -0.006206999812511225]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3254656741044164, 0.5238450422596412, -0.006206999812511225]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.3254656741044164, 0.5238450422596412, -0.006206999812511225]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_54",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.4547101786326355, 0.8334015494317809, 0.21760736071520131]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4547101786326355, 0.8334015494317809, 0.21760736071520131]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.4547101786326355, 0.8334015494317809, 0.21760736071520131]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_55",
    "sat": "def sat(x: float, coeffs: List[float]=[0.03348585202220944, 0.18287255792458113, -0.3210703749945458]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.03348585202220944, 0.18287255792458113, -0.3210703749945458]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.03348585202220944, 0.18287255792458113, -0.3210703749945458]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_56",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.22683259020062238, -0.40352089818179654, 4.7684327124984245]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.22683259020062238, -0.40352089818179654, 4.7684327124984245]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.22683259020062238, -0.40352089818179654, 4.7684327124984245]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_57",
    "sat": "def sat(x: float, coeffs: List[float]=[-224.26493664196224, 0.36179884205598095, 539308.5357185107]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-224.26493664196224, 0.36179884205598095, 539308.5357185107]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-224.26493664196224, 0.36179884205598095, 539308.5357185107]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_58",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.33832275995192623, -0.3907974244602686, 1.0708886148646362]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.33832275995192623, -0.3907974244602686, 1.0708886148646362]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.33832275995192623, -0.3907974244602686, 1.0708886148646362]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_59",
    "sat": "def sat(x: float, coeffs: List[float]=[1.0504740585513048, -51.38730041737738, -9178.058027461098]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0504740585513048, -51.38730041737738, -9178.058027461098]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.0504740585513048, -51.38730041737738, -9178.058027461098]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_60",
    "sat": "def sat(x: float, coeffs: List[float]=[1.29488408407095, 0.4069668693195985, -34.665226091858514]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.29488408407095, 0.4069668693195985, -34.665226091858514]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.29488408407095, 0.4069668693195985, -34.665226091858514]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_61",
    "sat": "def sat(x: float, coeffs: List[float]=[2.7048175822341407, 443.34716757235475, 181.74637472700726]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.7048175822341407, 443.34716757235475, 181.74637472700726]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.7048175822341407, 443.34716757235475, 181.74637472700726]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_62",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7397485947118815, 180.931559392145, 15332.896566988842]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7397485947118815, 180.931559392145, 15332.896566988842]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.7397485947118815, 180.931559392145, 15332.896566988842]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_63",
    "sat": "def sat(x: float, coeffs: List[float]=[0.13263669107469492, -1.1055273385450086, -0.8233744943600209]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.13263669107469492, -1.1055273385450086, -0.8233744943600209]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.13263669107469492, -1.1055273385450086, -0.8233744943600209]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_64",
    "sat": "def sat(x: float, coeffs: List[float]=[1.284662515274433, 0.6453331821785927, -0.8596456146625434]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.284662515274433, 0.6453331821785927, -0.8596456146625434]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.284662515274433, 0.6453331821785927, -0.8596456146625434]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_65",
    "sat": "def sat(x: float, coeffs: List[float]=[0.06021348783945779, -0.1646508262005136, -0.023748177574264475]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06021348783945779, -0.1646508262005136, -0.023748177574264475]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.06021348783945779, -0.1646508262005136, -0.023748177574264475]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_66",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.1642428671338665, -0.1665410041377655, -0.005831732719093287]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1642428671338665, -0.1665410041377655, -0.005831732719093287]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.1642428671338665, -0.1665410041377655, -0.005831732719093287]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_67",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.648729213692245, -0.9443675854135075, 7.697054029683643]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.648729213692245, -0.9443675854135075, 7.697054029683643]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-5.648729213692245, -0.9443675854135075, 7.697054029683643]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_68",
    "sat": "def sat(x: float, coeffs: List[float]=[0.17375171217344695, -2.2610909259340475, -1.789887838992595]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.17375171217344695, -2.2610909259340475, -1.789887838992595]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.17375171217344695, -2.2610909259340475, -1.789887838992595]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_69",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7919268551981494, -0.9837592871777683, -0.12378852604502094]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7919268551981494, -0.9837592871777683, -0.12378852604502094]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.7919268551981494, -0.9837592871777683, -0.12378852604502094]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_70",
    "sat": "def sat(x: float, coeffs: List[float]=[0.051010768229960535, -0.1390192624925981, -3.740635710988787]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.051010768229960535, -0.1390192624925981, -3.740635710988787]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.051010768229960535, -0.1390192624925981, -3.740635710988787]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_71",
    "sat": "def sat(x: float, coeffs: List[float]=[0.18771424775041892, -0.12207680631399602, -0.007499249857812638]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.18771424775041892, -0.12207680631399602, -0.007499249857812638]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.18771424775041892, -0.12207680631399602, -0.007499249857812638]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_72",
    "sat": "def sat(x: float, coeffs: List[float]=[0.42800292611372875, 0.08112637823365694, -0.016621608751330216]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.42800292611372875, 0.08112637823365694, -0.016621608751330216]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.42800292611372875, 0.08112637823365694, -0.016621608751330216]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_73",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.17001953799278935, -0.05992111637166553, -0.005234841787325063]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.17001953799278935, -0.05992111637166553, -0.005234841787325063]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.17001953799278935, -0.05992111637166553, -0.005234841787325063]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_74",
    "sat": "def sat(x: float, coeffs: List[float]=[0.10047637089388517, 75.78069947852337, 67.46716102832725]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.10047637089388517, 75.78069947852337, 67.46716102832725]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.10047637089388517, 75.78069947852337, 67.46716102832725]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_75",
    "sat": "def sat(x: float, coeffs: List[float]=[2.673930067423339, 6.862926814854056, 2.969663146226809]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.673930067423339, 6.862926814854056, 2.969663146226809]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.673930067423339, 6.862926814854056, 2.969663146226809]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_76",
    "sat": "def sat(x: float, coeffs: List[float]=[-25.001854912376587, 0.195744472351408, 0.061798960626665386]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-25.001854912376587, 0.195744472351408, 0.061798960626665386]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-25.001854912376587, 0.195744472351408, 0.061798960626665386]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_77",
    "sat": "def sat(x: float, coeffs: List[float]=[-7.394136861231946, 0.47786201015199986, 0.29934983596242526]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.394136861231946, 0.47786201015199986, 0.29934983596242526]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-7.394136861231946, 0.47786201015199986, 0.29934983596242526]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_78",
    "sat": "def sat(x: float, coeffs: List[float]=[0.22842645952645171, 1.2507507659538752, -21.432055348475863]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.22842645952645171, 1.2507507659538752, -21.432055348475863]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.22842645952645171, 1.2507507659538752, -21.432055348475863]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_79",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.008549207918145582, -0.07656991509386739, -0.16731847525417762]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.008549207918145582, -0.07656991509386739, -0.16731847525417762]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.008549207918145582, -0.07656991509386739, -0.16731847525417762]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_80",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.7701865634451603, 3.5013244246665054, 17.255352752940457]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.7701865634451603, 3.5013244246665054, 17.255352752940457]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.7701865634451603, 3.5013244246665054, 17.255352752940457]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_81",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.2989782926391027, -0.5138441692355514, 0.11585103004472205]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.2989782926391027, -0.5138441692355514, 0.11585103004472205]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.2989782926391027, -0.5138441692355514, 0.11585103004472205]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_82",
    "sat": "def sat(x: float, coeffs: List[float]=[0.41275210607399043, 0.06433875336492949, -4.790731050160553]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.41275210607399043, 0.06433875336492949, -4.790731050160553]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.41275210607399043, 0.06433875336492949, -4.790731050160553]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_83",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2605950152678689, 0.3783611814705366, -0.5481846148537834]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2605950152678689, 0.3783611814705366, -0.5481846148537834]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.2605950152678689, 0.3783611814705366, -0.5481846148537834]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_84",
    "sat": "def sat(x: float, coeffs: List[float]=[-234.9724422898374, 0.2871411056195612, 16857.836545635982]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-234.9724422898374, 0.2871411056195612, 16857.836545635982]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-234.9724422898374, 0.2871411056195612, 16857.836545635982]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_85",
    "sat": "def sat(x: float, coeffs: List[float]=[1.2114863611634454, 1.8714389235776296, 0.5775802298283973]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2114863611634454, 1.8714389235776296, 0.5775802298283973]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.2114863611634454, 1.8714389235776296, 0.5775802298283973]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_86",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1829546418169091, 0.141788680323933, -65.92459826412265]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1829546418169091, 0.141788680323933, -65.92459826412265]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.1829546418169091, 0.141788680323933, -65.92459826412265]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_87",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.002671141276742839, 0.2793844468400901, -3.5366982844139057]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.002671141276742839, 0.2793844468400901, -3.5366982844139057]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.002671141276742839, 0.2793844468400901, -3.5366982844139057]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_88",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5037740394950648, -19.845508069860184, -5.556270135222997]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5037740394950648, -19.845508069860184, -5.556270135222997]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5037740394950648, -19.845508069860184, -5.556270135222997]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_89",
    "sat": "def sat(x: float, coeffs: List[float]=[0.20768323707107986, -10.143514833460733, 4.970736355556858]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.20768323707107986, -10.143514833460733, 4.970736355556858]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.20768323707107986, -10.143514833460733, 4.970736355556858]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_90",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8185107213945949, -3.004108914520048, 26132.173081852132]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8185107213945949, -3.004108914520048, 26132.173081852132]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.8185107213945949, -3.004108914520048, 26132.173081852132]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_91",
    "sat": "def sat(x: float, coeffs: List[float]=[0.700720646360122, -63.54212769847436, 29.663627907543283]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.700720646360122, -63.54212769847436, 29.663627907543283]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.700720646360122, -63.54212769847436, 29.663627907543283]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_92",
    "sat": "def sat(x: float, coeffs: List[float]=[12.47305978558524, -0.22974449436773123, -0.18853444135539923]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.47305978558524, -0.22974449436773123, -0.18853444135539923]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[12.47305978558524, -0.22974449436773123, -0.18853444135539923]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_93",
    "sat": "def sat(x: float, coeffs: List[float]=[13.81963911162437, 0.005766645045709525, -1.4234055804485624]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[13.81963911162437, 0.005766645045709525, -1.4234055804485624]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[13.81963911162437, 0.005766645045709525, -1.4234055804485624]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_94",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.28173575809622137, 0.030943598643532095, 2.059261023298312]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.28173575809622137, 0.030943598643532095, 2.059261023298312]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.28173575809622137, 0.030943598643532095, 2.059261023298312]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_95",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.80487330141809, -0.08614274060295779, 12.801533667006375]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.80487330141809, -0.08614274060295779, 12.801533667006375]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-4.80487330141809, -0.08614274060295779, 12.801533667006375]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_96",
    "sat": "def sat(x: float, coeffs: List[float]=[6.8152142746914, -2.2170820159375855, -51.528340794633955]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.8152142746914, -2.2170820159375855, -51.528340794633955]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[6.8152142746914, -2.2170820159375855, -51.528340794633955]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_97",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4774695791769834, 0.7630775990581024, -0.30357276099708386]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4774695791769834, 0.7630775990581024, -0.30357276099708386]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.4774695791769834, 0.7630775990581024, -0.30357276099708386]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_98",
    "sat": "def sat(x: float, coeffs: List[float]=[0.43579510570240093, -5.898193160177416, 2.3767760857845133]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.43579510570240093, -5.898193160177416, 2.3767760857845133]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.43579510570240093, -5.898193160177416, 2.3767760857845133]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_99",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.5984551644672926, -39.190126548069834, -72.11055108101462]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.5984551644672926, -39.190126548069834, -72.11055108101462]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.5984551644672926, -39.190126548069834, -72.11055108101462]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_100",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6660236945338919, 0.05375440006433093, 0.5344727367951992]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6660236945338919, 0.05375440006433093, 0.5344727367951992]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.6660236945338919, 0.05375440006433093, 0.5344727367951992]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_101",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.091144208237149, -0.08665105400604974, 255.5047342568854]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.091144208237149, -0.08665105400604974, 255.5047342568854]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-5.091144208237149, -0.08665105400604974, 255.5047342568854]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_102",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7936791709593147, 0.08742180101590098, 0.03745387797724275]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7936791709593147, 0.08742180101590098, 0.03745387797724275]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.7936791709593147, 0.08742180101590098, 0.03745387797724275]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_103",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5663658190346591, -0.14772853532238908, 0.8371747972827593]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5663658190346591, -0.14772853532238908, 0.8371747972827593]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5663658190346591, -0.14772853532238908, 0.8371747972827593]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_104",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.20641103163131821, -28.01954686104617, -18.865168715734207]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.20641103163131821, -28.01954686104617, -18.865168715734207]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.20641103163131821, -28.01954686104617, -18.865168715734207]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_105",
    "sat": "def sat(x: float, coeffs: List[float]=[0.25828149680899104, -17.27293089584707, -748.2088284521608]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.25828149680899104, -17.27293089584707, -748.2088284521608]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.25828149680899104, -17.27293089584707, -748.2088284521608]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_106",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4595809416198275, 0.8696696074965264, 1.6529600302506942]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4595809416198275, 0.8696696074965264, 1.6529600302506942]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.4595809416198275, 0.8696696074965264, 1.6529600302506942]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_107",
    "sat": "def sat(x: float, coeffs: List[float]=[-30.74011544475309, 4.676105125528067, 37.97546759270507]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-30.74011544475309, 4.676105125528067, 37.97546759270507]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-30.74011544475309, 4.676105125528067, 37.97546759270507]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_108",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.033975460337526554, 0.25879207805269616, 6.320812266762003]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.033975460337526554, 0.25879207805269616, 6.320812266762003]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.033975460337526554, 0.25879207805269616, 6.320812266762003]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_109",
    "sat": "def sat(x: float, coeffs: List[float]=[7.656054213650745, 0.01953989214157777, -502779.8412739047]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.656054213650745, 0.01953989214157777, -502779.8412739047]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[7.656054213650745, 0.01953989214157777, -502779.8412739047]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_110",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.009307937580323111, 28.699782063772457, -49.9327426489966]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.009307937580323111, 28.699782063772457, -49.9327426489966]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.009307937580323111, 28.699782063772457, -49.9327426489966]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_111",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1553794023559457, 1.1346774913214503, 0.7203525337860199]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1553794023559457, 1.1346774913214503, 0.7203525337860199]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.1553794023559457, 1.1346774913214503, 0.7203525337860199]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_112",
    "sat": "def sat(x: float, coeffs: List[float]=[6.06238644658265, -0.15989266439280567, -311.04882646564783]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.06238644658265, -0.15989266439280567, -311.04882646564783]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[6.06238644658265, -0.15989266439280567, -311.04882646564783]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_113",
    "sat": "def sat(x: float, coeffs: List[float]=[0.09728678113882612, 0.1849086612208702, 0.06289037582241572]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.09728678113882612, 0.1849086612208702, 0.06289037582241572]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.09728678113882612, 0.1849086612208702, 0.06289037582241572]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_114",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.011040014799245027, -0.10005598389294128, 0.011124807926271406]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.011040014799245027, -0.10005598389294128, 0.011124807926271406]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.011040014799245027, -0.10005598389294128, 0.011124807926271406]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_115",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.14055472796498805, 5.8818315369522844, -28.57582447878133]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.14055472796498805, 5.8818315369522844, -28.57582447878133]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.14055472796498805, 5.8818315369522844, -28.57582447878133]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_116",
    "sat": "def sat(x: float, coeffs: List[float]=[7.563587313440906, -2.618627382176436, -604.1833820489278]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.563587313440906, -2.618627382176436, -604.1833820489278]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[7.563587313440906, -2.618627382176436, -604.1833820489278]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_117",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.2945292707393727, 1.2204209564934627, 0.02703579158638436]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2945292707393727, 1.2204209564934627, 0.02703579158638436]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.2945292707393727, 1.2204209564934627, 0.02703579158638436]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_118",
    "sat": "def sat(x: float, coeffs: List[float]=[2.046847564328986, -0.09320054188931966, -0.48231421767424937]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.046847564328986, -0.09320054188931966, -0.48231421767424937]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.046847564328986, -0.09320054188931966, -0.48231421767424937]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_119",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.18728878795143192, -0.0011305796675294595, 0.013200594350685622]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.18728878795143192, -0.0011305796675294595, 0.013200594350685622]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.18728878795143192, -0.0011305796675294595, 0.013200594350685622]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_120",
    "sat": "def sat(x: float, coeffs: List[float]=[11.249625914523902, -0.03948835434952643, -0.00040285417533137145]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.249625914523902, -0.03948835434952643, -0.00040285417533137145]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[11.249625914523902, -0.03948835434952643, -0.00040285417533137145]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_121",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.84630364167927, 0.26345559074207436, 1.7977041670600133]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.84630364167927, 0.26345559074207436, 1.7977041670600133]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.84630364167927, 0.26345559074207436, 1.7977041670600133]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_122",
    "sat": "def sat(x: float, coeffs: List[float]=[17.547696550283778, -0.6657584217904908, -607.7252455818069]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[17.547696550283778, -0.6657584217904908, -607.7252455818069]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[17.547696550283778, -0.6657584217904908, -607.7252455818069]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_123",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3525086394994637, -0.690861990493294, 0.05526329846268571]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3525086394994637, -0.690861990493294, 0.05526329846268571]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.3525086394994637, -0.690861990493294, 0.05526329846268571]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_124",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2565040069077182, -0.6289984353012071, 0.10363915471288293]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2565040069077182, -0.6289984353012071, 0.10363915471288293]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.2565040069077182, -0.6289984353012071, 0.10363915471288293]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_125",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.09106607744978, -871.6916345595758, 1051.4268019187652]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.09106607744978, -871.6916345595758, 1051.4268019187652]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.09106607744978, -871.6916345595758, 1051.4268019187652]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_126",
    "sat": "def sat(x: float, coeffs: List[float]=[0.030332111749125385, -0.22457656213643676, -0.05389946897881254]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.030332111749125385, -0.22457656213643676, -0.05389946897881254]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.030332111749125385, -0.22457656213643676, -0.05389946897881254]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_127",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5056561192381276, 0.30298505138166276, 101.36931599556091]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5056561192381276, 0.30298505138166276, 101.36931599556091]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5056561192381276, 0.30298505138166276, 101.36931599556091]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_128",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7909990617786821, 0.7824017533167603, -41.324151372295326]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7909990617786821, 0.7824017533167603, -41.324151372295326]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.7909990617786821, 0.7824017533167603, -41.324151372295326]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_129",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.5679426336359907, -0.00253821940100322, 1010.0380018387275]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.5679426336359907, -0.00253821940100322, 1010.0380018387275]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.5679426336359907, -0.00253821940100322, 1010.0380018387275]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_130",
    "sat": "def sat(x: float, coeffs: List[float]=[0.05799267724486771, -0.025985103473619892, -0.00045878201998796926]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.05799267724486771, -0.025985103473619892, -0.00045878201998796926]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.05799267724486771, -0.025985103473619892, -0.00045878201998796926]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_131",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5347603129112501, -198.6423523359459, -343.2410140345004]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5347603129112501, -198.6423523359459, -343.2410140345004]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5347603129112501, -198.6423523359459, -343.2410140345004]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_132",
    "sat": "def sat(x: float, coeffs: List[float]=[2.308240877972945, 91.10361592965982, -177.0539922881274]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.308240877972945, 91.10361592965982, -177.0539922881274]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.308240877972945, 91.10361592965982, -177.0539922881274]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_133",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6234571590766738, -0.16982602787129478, -20.357298728855582]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6234571590766738, -0.16982602787129478, -20.357298728855582]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.6234571590766738, -0.16982602787129478, -20.357298728855582]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_134",
    "sat": "def sat(x: float, coeffs: List[float]=[7.011986677339354, -1.458859015564731, -3.6674974269070395]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.011986677339354, -1.458859015564731, -3.6674974269070395]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[7.011986677339354, -1.458859015564731, -3.6674974269070395]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_135",
    "sat": "def sat(x: float, coeffs: List[float]=[-7.943572719988026, 0.6471486970331036, 0.4694508428652605]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.943572719988026, 0.6471486970331036, 0.4694508428652605]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-7.943572719988026, 0.6471486970331036, 0.4694508428652605]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_136",
    "sat": "def sat(x: float, coeffs: List[float]=[-88.3393274479861, 0.1973459418899021, 260360.58976916832]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-88.3393274479861, 0.1973459418899021, 260360.58976916832]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-88.3393274479861, 0.1973459418899021, 260360.58976916832]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_137",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.774531841779299, 2.5778987600614367, 4.196313756070839]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.774531841779299, 2.5778987600614367, 4.196313756070839]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.774531841779299, 2.5778987600614367, 4.196313756070839]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_138",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.211899901421449, -1.6723750325372315, -0.2825999903564078]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.211899901421449, -1.6723750325372315, -0.2825999903564078]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.211899901421449, -1.6723750325372315, -0.2825999903564078]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_139",
    "sat": "def sat(x: float, coeffs: List[float]=[0.470550323031045, 21.87592642547378, -37.95870933675747]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.470550323031045, 21.87592642547378, -37.95870933675747]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.470550323031045, 21.87592642547378, -37.95870933675747]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_140",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.6489154792540766, 5.442231862950631, 10620.03724830483]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.6489154792540766, 5.442231862950631, 10620.03724830483]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.6489154792540766, 5.442231862950631, 10620.03724830483]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_141",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2720850315233064, 8.043818878995713, 4.8981949691697775]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2720850315233064, 8.043818878995713, 4.8981949691697775]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.2720850315233064, 8.043818878995713, 4.8981949691697775]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_142",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.0232064579172648, 1.2129052600357981, 244407.08999268844]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0232064579172648, 1.2129052600357981, 244407.08999268844]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.0232064579172648, 1.2129052600357981, 244407.08999268844]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_143",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1132811414636381, -0.04177660555243542, 0.004026878153696786]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1132811414636381, -0.04177660555243542, 0.004026878153696786]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.1132811414636381, -0.04177660555243542, 0.004026878153696786]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_144",
    "sat": "def sat(x: float, coeffs: List[float]=[1.7041486876043834, 0.6924222082143983, -419309.2538450558]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7041486876043834, 0.6924222082143983, -419309.2538450558]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.7041486876043834, 0.6924222082143983, -419309.2538450558]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_145",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.885946604362457, 0.9999347957112716, 0.036012898810059896]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.885946604362457, 0.9999347957112716, 0.036012898810059896]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-4.885946604362457, 0.9999347957112716, 0.036012898810059896]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_146",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5678944670253602, 0.48345155232228104, 0.04159422628108045]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5678944670253602, 0.48345155232228104, 0.04159422628108045]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5678944670253602, 0.48345155232228104, 0.04159422628108045]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_147",
    "sat": "def sat(x: float, coeffs: List[float]=[0.9230737968656398, 0.18919084832566094, -0.04268491331116582]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9230737968656398, 0.18919084832566094, -0.04268491331116582]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.9230737968656398, 0.18919084832566094, -0.04268491331116582]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_148",
    "sat": "def sat(x: float, coeffs: List[float]=[5.96971437138392, 1.1195008220398224, -1666.3718369013839]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.96971437138392, 1.1195008220398224, -1666.3718369013839]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[5.96971437138392, 1.1195008220398224, -1666.3718369013839]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_149",
    "sat": "def sat(x: float, coeffs: List[float]=[-6.094957766671702, -21.805321448984245, 9.536593330410778]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.094957766671702, -21.805321448984245, 9.536593330410778]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-6.094957766671702, -21.805321448984245, 9.536593330410778]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_150",
    "sat": "def sat(x: float, coeffs: List[float]=[40.56294756238644, 0.012884133205640044, -1494.6526927957343]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[40.56294756238644, 0.012884133205640044, -1494.6526927957343]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[40.56294756238644, 0.012884133205640044, -1494.6526927957343]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_151",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.6112805900135423, 1.097994645894967, 1.355062098300496]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.6112805900135423, 1.097994645894967, 1.355062098300496]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.6112805900135423, 1.097994645894967, 1.355062098300496]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_152",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.1533657598668619, -3.8377172028615334, -0.04762609866085117]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1533657598668619, -3.8377172028615334, -0.04762609866085117]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.1533657598668619, -3.8377172028615334, -0.04762609866085117]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_153",
    "sat": "def sat(x: float, coeffs: List[float]=[97.07186011914945, 1.1153423723611668, -11.801122482694952]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[97.07186011914945, 1.1153423723611668, -11.801122482694952]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[97.07186011914945, 1.1153423723611668, -11.801122482694952]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_154",
    "sat": "def sat(x: float, coeffs: List[float]=[7.41388402694626, 2.7612090100400875, -146.87648347184722]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.41388402694626, 2.7612090100400875, -146.87648347184722]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[7.41388402694626, 2.7612090100400875, -146.87648347184722]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_155",
    "sat": "def sat(x: float, coeffs: List[float]=[8.87385117134962, 0.6778144869858149, -0.47776770670497754]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.87385117134962, 0.6778144869858149, -0.47776770670497754]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[8.87385117134962, 0.6778144869858149, -0.47776770670497754]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_156",
    "sat": "def sat(x: float, coeffs: List[float]=[-11.903258780732457, -1.4202481977582642, 170.3683429193196]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.903258780732457, -1.4202481977582642, 170.3683429193196]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-11.903258780732457, -1.4202481977582642, 170.3683429193196]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_157",
    "sat": "def sat(x: float, coeffs: List[float]=[6.397328064547906, -0.39310695481680513, -182.74475202754257]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.397328064547906, -0.39310695481680513, -182.74475202754257]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[6.397328064547906, -0.39310695481680513, -182.74475202754257]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_158",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.12153507342675196, -397.2247251586768, -68.07189993649112]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.12153507342675196, -397.2247251586768, -68.07189993649112]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.12153507342675196, -397.2247251586768, -68.07189993649112]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_159",
    "sat": "def sat(x: float, coeffs: List[float]=[14.095653514743558, 0.40932983291875935, -0.35325996196637405]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[14.095653514743558, 0.40932983291875935, -0.35325996196637405]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[14.095653514743558, 0.40932983291875935, -0.35325996196637405]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_160",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4035567814615512, 1.5152503853210317, 18573.747843075344]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4035567814615512, 1.5152503853210317, 18573.747843075344]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.4035567814615512, 1.5152503853210317, 18573.747843075344]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_161",
    "sat": "def sat(x: float, coeffs: List[float]=[5.411857585990006, -0.24265493899290477, -0.0071371036899803226]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.411857585990006, -0.24265493899290477, -0.0071371036899803226]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[5.411857585990006, -0.24265493899290477, -0.0071371036899803226]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_162",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.456456817103577, 4.490343295868862, 1284.5930996281115]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.456456817103577, 4.490343295868862, 1284.5930996281115]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.456456817103577, 4.490343295868862, 1284.5930996281115]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_163",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.11739735872515904, 1.6034172529735244, -0.6959254218398162]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11739735872515904, 1.6034172529735244, -0.6959254218398162]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.11739735872515904, 1.6034172529735244, -0.6959254218398162]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_164",
    "sat": "def sat(x: float, coeffs: List[float]=[1.7563260251728094, -0.06965263670943485, -0.04028184695151942]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7563260251728094, -0.06965263670943485, -0.04028184695151942]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.7563260251728094, -0.06965263670943485, -0.04028184695151942]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_165",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3031685795304451, 0.6526590919983993, 3.227825942198977]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3031685795304451, 0.6526590919983993, 3.227825942198977]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.3031685795304451, 0.6526590919983993, 3.227825942198977]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_166",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1324109560754585, -0.10126776354661533, -0.011373016764506971]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1324109560754585, -0.10126776354661533, -0.011373016764506971]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.1324109560754585, -0.10126776354661533, -0.011373016764506971]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_167",
    "sat": "def sat(x: float, coeffs: List[float]=[0.42845851325987994, -0.11668238972800715, -0.004679712495581026]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.42845851325987994, -0.11668238972800715, -0.004679712495581026]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.42845851325987994, -0.11668238972800715, -0.004679712495581026]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_168",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.889827439442451, -83.37256928836553, -6.532624153976042]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.889827439442451, -83.37256928836553, -6.532624153976042]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.889827439442451, -83.37256928836553, -6.532624153976042]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_169",
    "sat": "def sat(x: float, coeffs: List[float]=[2.0146508885849195, 1.165831102725431, -108.64267649558835]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.0146508885849195, 1.165831102725431, -108.64267649558835]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.0146508885849195, 1.165831102725431, -108.64267649558835]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_170",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8682175771967705, 3.7791513277654416, -2.338283235357706]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8682175771967705, 3.7791513277654416, -2.338283235357706]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.8682175771967705, 3.7791513277654416, -2.338283235357706]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_171",
    "sat": "def sat(x: float, coeffs: List[float]=[27.523411110073837, -7.678486043318671, -1.8921568554901096]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[27.523411110073837, -7.678486043318671, -1.8921568554901096]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[27.523411110073837, -7.678486043318671, -1.8921568554901096]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_172",
    "sat": "def sat(x: float, coeffs: List[float]=[3.9704305203334473, -1.8255324538809496, -0.23760828757415198]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.9704305203334473, -1.8255324538809496, -0.23760828757415198]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.9704305203334473, -1.8255324538809496, -0.23760828757415198]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_173",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.9705488424778835, 0.01582041028944725, 0.025898508583515358]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9705488424778835, 0.01582041028944725, 0.025898508583515358]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.9705488424778835, 0.01582041028944725, 0.025898508583515358]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_174",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.12092930705972949, 2.48816340193606, -0.07002486598563115]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.12092930705972949, 2.48816340193606, -0.07002486598563115]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.12092930705972949, 2.48816340193606, -0.07002486598563115]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_175",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.190788429433556, -11.804939317094332, 973.9020169753053]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.190788429433556, -11.804939317094332, 973.9020169753053]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-5.190788429433556, -11.804939317094332, 973.9020169753053]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_176",
    "sat": "def sat(x: float, coeffs: List[float]=[15.80063409077937, 3.091043786916782, -418.92939839188034]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[15.80063409077937, 3.091043786916782, -418.92939839188034]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[15.80063409077937, 3.091043786916782, -418.92939839188034]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_177",
    "sat": "def sat(x: float, coeffs: List[float]=[0.20366118463830118, -0.29749927257605174, 0.10306194070392556]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.20366118463830118, -0.29749927257605174, 0.10306194070392556]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.20366118463830118, -0.29749927257605174, 0.10306194070392556]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_178",
    "sat": "def sat(x: float, coeffs: List[float]=[0.40611187718219294, -3.763564628628906, 8.550530554074138]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.40611187718219294, -3.763564628628906, 8.550530554074138]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.40611187718219294, -3.763564628628906, 8.550530554074138]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_179",
    "sat": "def sat(x: float, coeffs: List[float]=[0.22855650250160142, 217.59448525708535, -5524.512966281238]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.22855650250160142, 217.59448525708535, -5524.512966281238]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.22855650250160142, 217.59448525708535, -5524.512966281238]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_180",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.01917959395049455, 0.0013799950690332647, 33.53051107542196]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.01917959395049455, 0.0013799950690332647, 33.53051107542196]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.01917959395049455, 0.0013799950690332647, 33.53051107542196]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_181",
    "sat": "def sat(x: float, coeffs: List[float]=[10.8973123633951, 1.2778284654365983, -0.8166185551470988]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.8973123633951, 1.2778284654365983, -0.8166185551470988]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[10.8973123633951, 1.2778284654365983, -0.8166185551470988]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_182",
    "sat": "def sat(x: float, coeffs: List[float]=[3.6830002719312134, -1.4193820761013856, -85010.3981982329]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.6830002719312134, -1.4193820761013856, -85010.3981982329]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.6830002719312134, -1.4193820761013856, -85010.3981982329]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_183",
    "sat": "def sat(x: float, coeffs: List[float]=[2.5010294034999263, 0.5974991481138492, -0.00850932325948775]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.5010294034999263, 0.5974991481138492, -0.00850932325948775]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.5010294034999263, 0.5974991481138492, -0.00850932325948775]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_184",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1585522224561018, -0.9496112884864839, 0.03754332468085893]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1585522224561018, -0.9496112884864839, 0.03754332468085893]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.1585522224561018, -0.9496112884864839, 0.03754332468085893]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_185",
    "sat": "def sat(x: float, coeffs: List[float]=[1.9913011794612785, 8.999838545731285, -6.424066058924939]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.9913011794612785, 8.999838545731285, -6.424066058924939]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.9913011794612785, 8.999838545731285, -6.424066058924939]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_186",
    "sat": "def sat(x: float, coeffs: List[float]=[0.122935002671177, -17.960447918784592, -4.28885086274082]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.122935002671177, -17.960447918784592, -4.28885086274082]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.122935002671177, -17.960447918784592, -4.28885086274082]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_187",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.34213284328657867, 0.22251752623598842, -0.028403064602951972]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.34213284328657867, 0.22251752623598842, -0.028403064602951972]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.34213284328657867, 0.22251752623598842, -0.028403064602951972]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_188",
    "sat": "def sat(x: float, coeffs: List[float]=[0.23642879304865647, -0.12960580249077344, -0.3630939595495921]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.23642879304865647, -0.12960580249077344, -0.3630939595495921]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.23642879304865647, -0.12960580249077344, -0.3630939595495921]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_189",
    "sat": "def sat(x: float, coeffs: List[float]=[6.92864568951133, 0.8559606718592511, -67.17625395579401]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.92864568951133, 0.8559606718592511, -67.17625395579401]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[6.92864568951133, 0.8559606718592511, -67.17625395579401]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_190",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.02307166708638982, -6.138356284167106, 24905.323022859673]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.02307166708638982, -6.138356284167106, 24905.323022859673]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.02307166708638982, -6.138356284167106, 24905.323022859673]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_191",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.981167203875448, -0.0712320006929817, 2045.0010692071842]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.981167203875448, -0.0712320006929817, 2045.0010692071842]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-4.981167203875448, -0.0712320006929817, 2045.0010692071842]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_192",
    "sat": "def sat(x: float, coeffs: List[float]=[1.283262607723243, -7.170192972881303, 6.152644870901187]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.283262607723243, -7.170192972881303, 6.152644870901187]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.283262607723243, -7.170192972881303, 6.152644870901187]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_193",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4545293668481906, -0.36529277410117417, -0.9799247142619092]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4545293668481906, -0.36529277410117417, -0.9799247142619092]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.4545293668481906, -0.36529277410117417, -0.9799247142619092]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_194",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.05854142366109505, -14.7825250429751, 435.90784574235704]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.05854142366109505, -14.7825250429751, 435.90784574235704]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.05854142366109505, -14.7825250429751, 435.90784574235704]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_195",
    "sat": "def sat(x: float, coeffs: List[float]=[-18.991974047385376, 0.5856047212097, 1.6654016377416003]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-18.991974047385376, 0.5856047212097, 1.6654016377416003]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-18.991974047385376, 0.5856047212097, 1.6654016377416003]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_196",
    "sat": "def sat(x: float, coeffs: List[float]=[0.10982275791381883, 0.39032416882961113, -0.16284940363755776]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.10982275791381883, 0.39032416882961113, -0.16284940363755776]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.10982275791381883, 0.39032416882961113, -0.16284940363755776]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_197",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8377897584866395, -0.7379547430132526, 0.2051158066017057]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8377897584866395, -0.7379547430132526, 0.2051158066017057]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.8377897584866395, -0.7379547430132526, 0.2051158066017057]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_198",
    "sat": "def sat(x: float, coeffs: List[float]=[2.2833333018626747, 1.0826849606201518, 0.12683502974382999]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.2833333018626747, 1.0826849606201518, 0.12683502974382999]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.2833333018626747, 1.0826849606201518, 0.12683502974382999]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_199",
    "sat": "def sat(x: float, coeffs: List[float]=[32.942710053464566, -1.0261836103400903, -3.7740694049631216]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[32.942710053464566, -1.0261836103400903, -3.7740694049631216]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[32.942710053464566, -1.0261836103400903, -3.7740694049631216]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_200",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.05731056225750556, -0.003149239468934454, 0.033454445413428915]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.05731056225750556, -0.003149239468934454, 0.033454445413428915]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.05731056225750556, -0.003149239468934454, 0.033454445413428915]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_201",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8971267589385797, 10.657145623729404, 40.26615525637951]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8971267589385797, 10.657145623729404, 40.26615525637951]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.8971267589385797, 10.657145623729404, 40.26615525637951]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_202",
    "sat": "def sat(x: float, coeffs: List[float]=[0.06719402762178246, -3.0558284674312897, 2.0766745251795005]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06719402762178246, -3.0558284674312897, 2.0766745251795005]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.06719402762178246, -3.0558284674312897, 2.0766745251795005]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_203",
    "sat": "def sat(x: float, coeffs: List[float]=[-19.70944924278387, 0.43820664455178465, 417.12215892412405]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-19.70944924278387, 0.43820664455178465, 417.12215892412405]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-19.70944924278387, 0.43820664455178465, 417.12215892412405]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_204",
    "sat": "def sat(x: float, coeffs: List[float]=[22.012364365525343, 2.842556312769892, -35.34478792337343]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[22.012364365525343, 2.842556312769892, -35.34478792337343]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[22.012364365525343, 2.842556312769892, -35.34478792337343]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_205",
    "sat": "def sat(x: float, coeffs: List[float]=[0.347951796778372, 0.0080285161230537, -6.916977596994412]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.347951796778372, 0.0080285161230537, -6.916977596994412]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.347951796778372, 0.0080285161230537, -6.916977596994412]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_206",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1290442290753837, 0.46848811743724994, 0.2331329257924964]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1290442290753837, 0.46848811743724994, 0.2331329257924964]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.1290442290753837, 0.46848811743724994, 0.2331329257924964]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_207",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5338066196608421, 38.36974296868302, -3.2035535865163376]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5338066196608421, 38.36974296868302, -3.2035535865163376]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5338066196608421, 38.36974296868302, -3.2035535865163376]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_208",
    "sat": "def sat(x: float, coeffs: List[float]=[-133.14474617811518, 80.04481669857255, 1268.7629881262837]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-133.14474617811518, 80.04481669857255, 1268.7629881262837]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-133.14474617811518, 80.04481669857255, 1268.7629881262837]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_209",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3491732929516272, 3.9577444980723597, 10.553125179689086]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3491732929516272, 3.9577444980723597, 10.553125179689086]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.3491732929516272, 3.9577444980723597, 10.553125179689086]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_210",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.2588861527106576, -0.14895825127534668, 0.7797730427390052]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2588861527106576, -0.14895825127534668, 0.7797730427390052]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.2588861527106576, -0.14895825127534668, 0.7797730427390052]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_211",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3380919258450015, 0.07352427549993701, 0.0038983917960356963]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3380919258450015, 0.07352427549993701, 0.0038983917960356963]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.3380919258450015, 0.07352427549993701, 0.0038983917960356963]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_212",
    "sat": "def sat(x: float, coeffs: List[float]=[0.17076437827207003, 3.74894208264622, 0.8325561876122433]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.17076437827207003, 3.74894208264622, 0.8325561876122433]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.17076437827207003, 3.74894208264622, 0.8325561876122433]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_213",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.05979496480331714, -1.1264808884057642, 87.60962359898203]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.05979496480331714, -1.1264808884057642, 87.60962359898203]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.05979496480331714, -1.1264808884057642, 87.60962359898203]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_214",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.018021010075736976, -2.753769499676427, -1.0110996099674803]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.018021010075736976, -2.753769499676427, -1.0110996099674803]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.018021010075736976, -2.753769499676427, -1.0110996099674803]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_215",
    "sat": "def sat(x: float, coeffs: List[float]=[26.01803702389631, -0.2925371656952768, -1759.4941446464047]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[26.01803702389631, -0.2925371656952768, -1759.4941446464047]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[26.01803702389631, -0.2925371656952768, -1759.4941446464047]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_216",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6407212671989706, -0.22915164866452362, -7.723117622893351]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6407212671989706, -0.22915164866452362, -7.723117622893351]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.6407212671989706, -0.22915164866452362, -7.723117622893351]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_217",
    "sat": "def sat(x: float, coeffs: List[float]=[229.98468817030664, 2.800281457497947, -2.1836180190276298]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[229.98468817030664, 2.800281457497947, -2.1836180190276298]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[229.98468817030664, 2.800281457497947, -2.1836180190276298]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_218",
    "sat": "def sat(x: float, coeffs: List[float]=[0.0988906145148601, 405.88549044326095, -77.86246520166348]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0988906145148601, 405.88549044326095, -77.86246520166348]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.0988906145148601, 405.88549044326095, -77.86246520166348]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_219",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.486213248842331, 3.5670632767411905, 0.08567215359423869]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.486213248842331, 3.5670632767411905, 0.08567215359423869]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.486213248842331, 3.5670632767411905, 0.08567215359423869]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_220",
    "sat": "def sat(x: float, coeffs: List[float]=[0.010104672765882228, -0.0005495383046070224, -0.44482519633768197]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.010104672765882228, -0.0005495383046070224, -0.44482519633768197]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.010104672765882228, -0.0005495383046070224, -0.44482519633768197]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_221",
    "sat": "def sat(x: float, coeffs: List[float]=[-111.10555895238747, 0.013954592675040919, 162607.43442544673]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-111.10555895238747, 0.013954592675040919, 162607.43442544673]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-111.10555895238747, 0.013954592675040919, 162607.43442544673]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_222",
    "sat": "def sat(x: float, coeffs: List[float]=[0.36820618180083287, 0.5978794931576221, 0.2044908389735517]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.36820618180083287, 0.5978794931576221, 0.2044908389735517]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.36820618180083287, 0.5978794931576221, 0.2044908389735517]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_223",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.0246391352664237, -0.17372029918530538, 0.010502397065755897]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0246391352664237, -0.17372029918530538, 0.010502397065755897]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.0246391352664237, -0.17372029918530538, 0.010502397065755897]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_224",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5730721706450935, 1.0343481805417591, -1.6252019234147914]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5730721706450935, 1.0343481805417591, -1.6252019234147914]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5730721706450935, 1.0343481805417591, -1.6252019234147914]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_225",
    "sat": "def sat(x: float, coeffs: List[float]=[0.04139551427027525, 0.32961239780940876, -0.01201848972207617]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.04139551427027525, 0.32961239780940876, -0.01201848972207617]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.04139551427027525, 0.32961239780940876, -0.01201848972207617]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_226",
    "sat": "def sat(x: float, coeffs: List[float]=[-28.37158060951431, -23.321526755989396, 1196.422150168587]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-28.37158060951431, -23.321526755989396, 1196.422150168587]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-28.37158060951431, -23.321526755989396, 1196.422150168587]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_227",
    "sat": "def sat(x: float, coeffs: List[float]=[0.15060523456282957, 0.9311400026601908, 0.9996621845845892]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.15060523456282957, 0.9311400026601908, 0.9996621845845892]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.15060523456282957, 0.9311400026601908, 0.9996621845845892]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_228",
    "sat": "def sat(x: float, coeffs: List[float]=[-13.27591183554035, -0.06988989336179811, 202.55954085865795]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-13.27591183554035, -0.06988989336179811, 202.55954085865795]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-13.27591183554035, -0.06988989336179811, 202.55954085865795]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_229",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.9975767802437999, -0.3458652761789354, 1.0386576810406134]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9975767802437999, -0.3458652761789354, 1.0386576810406134]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.9975767802437999, -0.3458652761789354, 1.0386576810406134]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_230",
    "sat": "def sat(x: float, coeffs: List[float]=[0.030850157834886538, -0.30475828439404756, 0.03232482394067526]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.030850157834886538, -0.30475828439404756, 0.03232482394067526]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.030850157834886538, -0.30475828439404756, 0.03232482394067526]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_231",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4743643073028137, -0.8353075420436412, -0.3516372107513467]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4743643073028137, -0.8353075420436412, -0.3516372107513467]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.4743643073028137, -0.8353075420436412, -0.3516372107513467]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_232",
    "sat": "def sat(x: float, coeffs: List[float]=[1.7105684149816949, 1.5257428121177892, 0.18774401364867002]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7105684149816949, 1.5257428121177892, 0.18774401364867002]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.7105684149816949, 1.5257428121177892, 0.18774401364867002]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_233",
    "sat": "def sat(x: float, coeffs: List[float]=[1.8983627600476396, 0.34508563135870807, -22031.90946528805]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8983627600476396, 0.34508563135870807, -22031.90946528805]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.8983627600476396, 0.34508563135870807, -22031.90946528805]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_234",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5744631448687268, 282.9513594368241, 420401.8599917198]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5744631448687268, 282.9513594368241, 420401.8599917198]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5744631448687268, 282.9513594368241, 420401.8599917198]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_235",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3294598382122875, -70.70148468492249, -3469.099243442131]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3294598382122875, -70.70148468492249, -3469.099243442131]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.3294598382122875, -70.70148468492249, -3469.099243442131]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_236",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.327141865097921, -0.4013115020657014, 0.06837339240574593]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.327141865097921, -0.4013115020657014, 0.06837339240574593]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.327141865097921, -0.4013115020657014, 0.06837339240574593]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_237",
    "sat": "def sat(x: float, coeffs: List[float]=[0.27129689379390537, -1.676022673296326, -0.05116941972549527]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.27129689379390537, -1.676022673296326, -0.05116941972549527]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.27129689379390537, -1.676022673296326, -0.05116941972549527]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_238",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.166918651832671, 0.45661532351334255, 51.80789593011728]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.166918651832671, 0.45661532351334255, 51.80789593011728]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-4.166918651832671, 0.45661532351334255, 51.80789593011728]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_239",
    "sat": "def sat(x: float, coeffs: List[float]=[1.6182174318114884, 6.886348553364891, -32.147315313964576]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6182174318114884, 6.886348553364891, -32.147315313964576]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.6182174318114884, 6.886348553364891, -32.147315313964576]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_240",
    "sat": "def sat(x: float, coeffs: List[float]=[-8.7256956092994, 0.029980444297118176, 55829.62797196209]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.7256956092994, 0.029980444297118176, 55829.62797196209]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-8.7256956092994, 0.029980444297118176, 55829.62797196209]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_241",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3242902202229558, 0.11686056483020539, -301.2706101092645]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3242902202229558, 0.11686056483020539, -301.2706101092645]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.3242902202229558, 0.11686056483020539, -301.2706101092645]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_242",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4678163972253208, 15.975184975749896, 4.698021533920772]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4678163972253208, 15.975184975749896, 4.698021533920772]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.4678163972253208, 15.975184975749896, 4.698021533920772]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_243",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.548299852356325, 0.7597212132130592, 4.862471316808442]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.548299852356325, 0.7597212132130592, 4.862471316808442]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.548299852356325, 0.7597212132130592, 4.862471316808442]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_244",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8990352734239434, -0.6391800463267617, 0.026843716064381795]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8990352734239434, -0.6391800463267617, 0.026843716064381795]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.8990352734239434, -0.6391800463267617, 0.026843716064381795]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_245",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4082764261370257, 1.361360108285674, -2.0103639184647157]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4082764261370257, 1.361360108285674, -2.0103639184647157]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.4082764261370257, 1.361360108285674, -2.0103639184647157]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_246",
    "sat": "def sat(x: float, coeffs: List[float]=[24.92363340282743, -0.025609620659440797, -8.872021160979966]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[24.92363340282743, -0.025609620659440797, -8.872021160979966]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[24.92363340282743, -0.025609620659440797, -8.872021160979966]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_247",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.045447943281553625, 0.009414651606565702, 0.014952830607000516]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.045447943281553625, 0.009414651606565702, 0.014952830607000516]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.045447943281553625, 0.009414651606565702, 0.014952830607000516]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_248",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.08088241476421569, -4.265069033410571, 20.759655529879147]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.08088241476421569, -4.265069033410571, 20.759655529879147]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.08088241476421569, -4.265069033410571, 20.759655529879147]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_249",
    "sat": "def sat(x: float, coeffs: List[float]=[0.39873907378282886, 0.3360601207422649, -1.56440701127868]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.39873907378282886, 0.3360601207422649, -1.56440701127868]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.39873907378282886, 0.3360601207422649, -1.56440701127868]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_250",
    "sat": "def sat(x: float, coeffs: List[float]=[7.2659913320452825, 0.39292759237148056, -82572.05410165165]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.2659913320452825, 0.39292759237148056, -82572.05410165165]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[7.2659913320452825, 0.39292759237148056, -82572.05410165165]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_251",
    "sat": "def sat(x: float, coeffs: List[float]=[0.38426177355826246, 0.18180130012199971, 0.015860460221502642]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.38426177355826246, 0.18180130012199971, 0.015860460221502642]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.38426177355826246, 0.18180130012199971, 0.015860460221502642]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_252",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.343932636089418, 2.3914633234860023, -0.3432376645653618]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.343932636089418, 2.3914633234860023, -0.3432376645653618]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.343932636089418, 2.3914633234860023, -0.3432376645653618]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_253",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.30482368449304387, 0.027524923742585045, 0.0531021674610541]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.30482368449304387, 0.027524923742585045, 0.0531021674610541]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.30482368449304387, 0.027524923742585045, 0.0531021674610541]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_254",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3304334959500663, -0.4870545720734931, 0.05883747695048708]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3304334959500663, -0.4870545720734931, 0.05883747695048708]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.3304334959500663, -0.4870545720734931, 0.05883747695048708]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_255",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.17110175692432375, 1.4227309327106854, -2.7215047327719732]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.17110175692432375, 1.4227309327106854, -2.7215047327719732]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.17110175692432375, 1.4227309327106854, -2.7215047327719732]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_256",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.5656768023669727, -4.480222553046846, 6437.263232030438]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.5656768023669727, -4.480222553046846, 6437.263232030438]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.5656768023669727, -4.480222553046846, 6437.263232030438]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_257",
    "sat": "def sat(x: float, coeffs: List[float]=[0.15086557138302412, -1.5515910451906632, 0.004253327957781559]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.15086557138302412, -1.5515910451906632, 0.004253327957781559]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.15086557138302412, -1.5515910451906632, 0.004253327957781559]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_258",
    "sat": "def sat(x: float, coeffs: List[float]=[13.580865648623513, 0.254157981365442, -19.988115541513384]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[13.580865648623513, 0.254157981365442, -19.988115541513384]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[13.580865648623513, 0.254157981365442, -19.988115541513384]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_259",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.469651849024246, -1.3296320534763257, 0.41203695584550226]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.469651849024246, -1.3296320534763257, 0.41203695584550226]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.469651849024246, -1.3296320534763257, 0.41203695584550226]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_260",
    "sat": "def sat(x: float, coeffs: List[float]=[0.15915030065657146, -0.09100724461320642, -3.540099396933406]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.15915030065657146, -0.09100724461320642, -3.540099396933406]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.15915030065657146, -0.09100724461320642, -3.540099396933406]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_261",
    "sat": "def sat(x: float, coeffs: List[float]=[0.11899520733296758, -6.629292121457595, 1.1334743441561108]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.11899520733296758, -6.629292121457595, 1.1334743441561108]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.11899520733296758, -6.629292121457595, 1.1334743441561108]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_262",
    "sat": "def sat(x: float, coeffs: List[float]=[38.933751348779374, 0.3724384631491004, -4447.240638534299]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[38.933751348779374, 0.3724384631491004, -4447.240638534299]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[38.933751348779374, 0.3724384631491004, -4447.240638534299]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_263",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.15020551271184743, -0.030260840964815888, 0.7763781743865201]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.15020551271184743, -0.030260840964815888, 0.7763781743865201]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.15020551271184743, -0.030260840964815888, 0.7763781743865201]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_264",
    "sat": "def sat(x: float, coeffs: List[float]=[-43.823015594502074, 0.0002401392619624243, 0.002257018089615555]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-43.823015594502074, 0.0002401392619624243, 0.002257018089615555]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-43.823015594502074, 0.0002401392619624243, 0.002257018089615555]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_265",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.864682949852301, -39.556743350524826, 571.9287557199998]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.864682949852301, -39.556743350524826, 571.9287557199998]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.864682949852301, -39.556743350524826, 571.9287557199998]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_266",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8260912404356576, 4.2694903786812235, 728.4881766289147]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8260912404356576, 4.2694903786812235, 728.4881766289147]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.8260912404356576, 4.2694903786812235, 728.4881766289147]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_267",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7048055774900776, -0.9444494690453276, -0.36605953331727265]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7048055774900776, -0.9444494690453276, -0.36605953331727265]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.7048055774900776, -0.9444494690453276, -0.36605953331727265]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_268",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.640763918163553, 0.5466687288130196, 49.16884629598252]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.640763918163553, 0.5466687288130196, 49.16884629598252]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-5.640763918163553, 0.5466687288130196, 49.16884629598252]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_269",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4683549943275067, 1.6752425678071825, -5.667584597006881]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4683549943275067, 1.6752425678071825, -5.667584597006881]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.4683549943275067, 1.6752425678071825, -5.667584597006881]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_270",
    "sat": "def sat(x: float, coeffs: List[float]=[0.0937317957403158, 0.24381293004873564, -4.0676782660956676e-05]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0937317957403158, 0.24381293004873564, -4.0676782660956676e-05]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.0937317957403158, 0.24381293004873564, -4.0676782660956676e-05]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_271",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1506812132775935, -1.1604685091041291, 33.10917614298026]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1506812132775935, -1.1604685091041291, 33.10917614298026]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.1506812132775935, -1.1604685091041291, 33.10917614298026]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_272",
    "sat": "def sat(x: float, coeffs: List[float]=[0.10643008226012769, -0.0017335779438562386, -0.0008255465944566941]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.10643008226012769, -0.0017335779438562386, -0.0008255465944566941]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.10643008226012769, -0.0017335779438562386, -0.0008255465944566941]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_273",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.116475223223718, -3.323183885278564, 16382.207357666319]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.116475223223718, -3.323183885278564, 16382.207357666319]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.116475223223718, -3.323183885278564, 16382.207357666319]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_274",
    "sat": "def sat(x: float, coeffs: List[float]=[-94.19457012522518, 0.021764376738241015, 7.7370128664863875]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-94.19457012522518, 0.021764376738241015, 7.7370128664863875]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-94.19457012522518, 0.021764376738241015, 7.7370128664863875]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_275",
    "sat": "def sat(x: float, coeffs: List[float]=[-10.597443308860889, -32.5598230333813, 3772.1937050401393]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-10.597443308860889, -32.5598230333813, 3772.1937050401393]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-10.597443308860889, -32.5598230333813, 3772.1937050401393]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_276",
    "sat": "def sat(x: float, coeffs: List[float]=[58.91848584228668, -8.619813615544002, -4.15210039507483]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[58.91848584228668, -8.619813615544002, -4.15210039507483]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[58.91848584228668, -8.619813615544002, -4.15210039507483]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_277",
    "sat": "def sat(x: float, coeffs: List[float]=[-170.24813498428782, 1.0166627514420565, 64.19226115080762]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-170.24813498428782, 1.0166627514420565, 64.19226115080762]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-170.24813498428782, 1.0166627514420565, 64.19226115080762]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_278",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.23899776995464136, -90.33978027020036, 6422.498011568727]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.23899776995464136, -90.33978027020036, 6422.498011568727]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.23899776995464136, -90.33978027020036, 6422.498011568727]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_279",
    "sat": "def sat(x: float, coeffs: List[float]=[252.8931042931982, -1.25031690145211, -0.010580255006648604]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[252.8931042931982, -1.25031690145211, -0.010580255006648604]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[252.8931042931982, -1.25031690145211, -0.010580255006648604]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_280",
    "sat": "def sat(x: float, coeffs: List[float]=[0.19876142005718545, -1.0135843029876623, 0.2145459219828345]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.19876142005718545, -1.0135843029876623, 0.2145459219828345]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.19876142005718545, -1.0135843029876623, 0.2145459219828345]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_281",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.19619310222672573, 0.1345530296929848, 0.8254613433747005]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.19619310222672573, 0.1345530296929848, 0.8254613433747005]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.19619310222672573, 0.1345530296929848, 0.8254613433747005]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_282",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.85083793142778, 3.8910357401275912, 3.9683459071252978]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.85083793142778, 3.8910357401275912, 3.9683459071252978]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.85083793142778, 3.8910357401275912, 3.9683459071252978]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_283",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.089900494633599, -1.2968748293562342, 0.525433361373586]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.089900494633599, -1.2968748293562342, 0.525433361373586]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.089900494633599, -1.2968748293562342, 0.525433361373586]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_284",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.503650839522578, 4.737425512926078, 11.158506067230425]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.503650839522578, 4.737425512926078, 11.158506067230425]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-4.503650839522578, 4.737425512926078, 11.158506067230425]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_285",
    "sat": "def sat(x: float, coeffs: List[float]=[0.799818456993266, 0.08777930281121009, -0.8988615349753938]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.799818456993266, 0.08777930281121009, -0.8988615349753938]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.799818456993266, 0.08777930281121009, -0.8988615349753938]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_286",
    "sat": "def sat(x: float, coeffs: List[float]=[-20.06209190355484, 0.2452807871581598, 0.07522656272599391]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-20.06209190355484, 0.2452807871581598, 0.07522656272599391]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-20.06209190355484, 0.2452807871581598, 0.07522656272599391]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_287",
    "sat": "def sat(x: float, coeffs: List[float]=[-569.3310950734898, -6.624135896472262, 10.723279218694412]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-569.3310950734898, -6.624135896472262, 10.723279218694412]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-569.3310950734898, -6.624135896472262, 10.723279218694412]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_288",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1877752792841806, -1.6189499583673277, 9.29652970967489]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1877752792841806, -1.6189499583673277, 9.29652970967489]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.1877752792841806, -1.6189499583673277, 9.29652970967489]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_289",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.12477875977624293, -8.225709348558498, -0.07598109365296044]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.12477875977624293, -8.225709348558498, -0.07598109365296044]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.12477875977624293, -8.225709348558498, -0.07598109365296044]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_290",
    "sat": "def sat(x: float, coeffs: List[float]=[1.6529428845309682, -0.19684153292334816, -47.9033488140632]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6529428845309682, -0.19684153292334816, -47.9033488140632]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.6529428845309682, -0.19684153292334816, -47.9033488140632]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_291",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.476544279869574, -3.1572130907034253, 1.664565871132751]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.476544279869574, -3.1572130907034253, 1.664565871132751]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.476544279869574, -3.1572130907034253, 1.664565871132751]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_292",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5144988677055745, -1.1004604722258424, -0.03093514339246216]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5144988677055745, -1.1004604722258424, -0.03093514339246216]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5144988677055745, -1.1004604722258424, -0.03093514339246216]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_293",
    "sat": "def sat(x: float, coeffs: List[float]=[144.70512771581625, 6.7210009289545205, -168.85030476603956]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[144.70512771581625, 6.7210009289545205, -168.85030476603956]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[144.70512771581625, 6.7210009289545205, -168.85030476603956]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_294",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6300739284556255, -0.02927025254334333, 0.10960941355242158]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6300739284556255, -0.02927025254334333, 0.10960941355242158]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.6300739284556255, -0.02927025254334333, 0.10960941355242158]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_295",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.069202877969828, -0.25814387254716314, 0.011775150133783073]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.069202877969828, -0.25814387254716314, 0.011775150133783073]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.069202877969828, -0.25814387254716314, 0.011775150133783073]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_296",
    "sat": "def sat(x: float, coeffs: List[float]=[0.658845973487065, 0.8960673950393866, -180.0935905058807]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.658845973487065, 0.8960673950393866, -180.0935905058807]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.658845973487065, 0.8960673950393866, -180.0935905058807]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_297",
    "sat": "def sat(x: float, coeffs: List[float]=[-18.409861609714923, -27.92463825386928, 0.04726970325806392]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-18.409861609714923, -27.92463825386928, 0.04726970325806392]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-18.409861609714923, -27.92463825386928, 0.04726970325806392]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_298",
    "sat": "def sat(x: float, coeffs: List[float]=[0.06517483503291688, -0.3638493349526861, 0.015435021517238695]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06517483503291688, -0.3638493349526861, 0.015435021517238695]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.06517483503291688, -0.3638493349526861, 0.015435021517238695]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_299",
    "sat": "def sat(x: float, coeffs: List[float]=[-81.00168867807099, 2.1053198884408455, 0.19352716313236834]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-81.00168867807099, 2.1053198884408455, 0.19352716313236834]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-81.00168867807099, 2.1053198884408455, 0.19352716313236834]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_300",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.45017789351259374, 24.80660461896268, -144.45609350710043]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.45017789351259374, 24.80660461896268, -144.45609350710043]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.45017789351259374, 24.80660461896268, -144.45609350710043]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_301",
    "sat": "def sat(x: float, coeffs: List[float]=[-740.2973328182801, -0.06850750289998671, 20.17416881839176]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-740.2973328182801, -0.06850750289998671, 20.17416881839176]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-740.2973328182801, -0.06850750289998671, 20.17416881839176]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_302",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.006329857092262081, -4.83946826787925, 0.23491997251764676]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.006329857092262081, -4.83946826787925, 0.23491997251764676]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.006329857092262081, -4.83946826787925, 0.23491997251764676]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_303",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.7082516696081407, -0.12419727546695203, 2307613.213256804]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.7082516696081407, -0.12419727546695203, 2307613.213256804]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.7082516696081407, -0.12419727546695203, 2307613.213256804]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_304",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.1521346094012965, -0.26315694739110757, 3.271398141740396e-05]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1521346094012965, -0.26315694739110757, 3.271398141740396e-05]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.1521346094012965, -0.26315694739110757, 3.271398141740396e-05]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_305",
    "sat": "def sat(x: float, coeffs: List[float]=[1.2397597566026537, 0.2605942358750719, -38122.503170102755]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2397597566026537, 0.2605942358750719, -38122.503170102755]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.2397597566026537, 0.2605942358750719, -38122.503170102755]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_306",
    "sat": "def sat(x: float, coeffs: List[float]=[0.08872731020213902, 2.3882902034491664, -334.76248739449954]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08872731020213902, 2.3882902034491664, -334.76248739449954]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.08872731020213902, 2.3882902034491664, -334.76248739449954]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_307",
    "sat": "def sat(x: float, coeffs: List[float]=[-38.23910007279925, -92.7700019730184, 1726.4768860828644]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-38.23910007279925, -92.7700019730184, 1726.4768860828644]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-38.23910007279925, -92.7700019730184, 1726.4768860828644]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_308",
    "sat": "def sat(x: float, coeffs: List[float]=[0.22330735383948985, -3.986905201155661, -0.6835121383102187]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.22330735383948985, -3.986905201155661, -0.6835121383102187]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.22330735383948985, -3.986905201155661, -0.6835121383102187]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_309",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6695697892944269, -0.07695741548928374, -1.3201392899826527]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6695697892944269, -0.07695741548928374, -1.3201392899826527]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.6695697892944269, -0.07695741548928374, -1.3201392899826527]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_310",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.09915423536508872, -2.3059875936044, -0.3477617355118229]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.09915423536508872, -2.3059875936044, -0.3477617355118229]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.09915423536508872, -2.3059875936044, -0.3477617355118229]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_311",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5599983331435466, -0.30583464135254795, 0.014465217816077708]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5599983331435466, -0.30583464135254795, 0.014465217816077708]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5599983331435466, -0.30583464135254795, 0.014465217816077708]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_312",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8332396307235395, -2.6923066846310824, 1.873060292480369]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8332396307235395, -2.6923066846310824, 1.873060292480369]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.8332396307235395, -2.6923066846310824, 1.873060292480369]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_313",
    "sat": "def sat(x: float, coeffs: List[float]=[32.01225147130173, 0.3843945301564184, -0.04346743616607087]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[32.01225147130173, 0.3843945301564184, -0.04346743616607087]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[32.01225147130173, 0.3843945301564184, -0.04346743616607087]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_314",
    "sat": "def sat(x: float, coeffs: List[float]=[26.389353206051222, -0.4778989404745255, -469.9727597185974]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[26.389353206051222, -0.4778989404745255, -469.9727597185974]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[26.389353206051222, -0.4778989404745255, -469.9727597185974]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_315",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.06606196989517447, -1.0489470876824152, 0.4882411540895412]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06606196989517447, -1.0489470876824152, 0.4882411540895412]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.06606196989517447, -1.0489470876824152, 0.4882411540895412]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_316",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.070267287215513, 2.538536368241683, -0.37032256683901155]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.070267287215513, 2.538536368241683, -0.37032256683901155]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-4.070267287215513, 2.538536368241683, -0.37032256683901155]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_317",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.07818663539784791, 4.992842082239514, -25.077767152546635]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.07818663539784791, 4.992842082239514, -25.077767152546635]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.07818663539784791, 4.992842082239514, -25.077767152546635]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_318",
    "sat": "def sat(x: float, coeffs: List[float]=[62.695675602812024, -9.541895517912533, 0.02288474301391207]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[62.695675602812024, -9.541895517912533, 0.02288474301391207]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[62.695675602812024, -9.541895517912533, 0.02288474301391207]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_319",
    "sat": "def sat(x: float, coeffs: List[float]=[1.535504284454561, -0.4390618611544402, -1.9601585651112339]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.535504284454561, -0.4390618611544402, -1.9601585651112339]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.535504284454561, -0.4390618611544402, -1.9601585651112339]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_320",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6353441229177926, -0.06201141220709627, -107.68040403680625]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6353441229177926, -0.06201141220709627, -107.68040403680625]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.6353441229177926, -0.06201141220709627, -107.68040403680625]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_321",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.1771803237103693, 0.4560927747237633, 4265.960142084009]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1771803237103693, 0.4560927747237633, 4265.960142084009]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.1771803237103693, 0.4560927747237633, 4265.960142084009]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_322",
    "sat": "def sat(x: float, coeffs: List[float]=[8.671737182085705, 0.06544194588671814, -23.084381030599644]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.671737182085705, 0.06544194588671814, -23.084381030599644]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[8.671737182085705, 0.06544194588671814, -23.084381030599644]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_323",
    "sat": "def sat(x: float, coeffs: List[float]=[-8.943598254751718, 1.206618975818686, 0.22901736219359986]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.943598254751718, 1.206618975818686, 0.22901736219359986]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-8.943598254751718, 1.206618975818686, 0.22901736219359986]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_324",
    "sat": "def sat(x: float, coeffs: List[float]=[0.18196997129698045, -1.0083761233295256, -2.111790214062429]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.18196997129698045, -1.0083761233295256, -2.111790214062429]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.18196997129698045, -1.0083761233295256, -2.111790214062429]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_325",
    "sat": "def sat(x: float, coeffs: List[float]=[12.54405832569598, 0.16564775964461145, -0.8049072503374953]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.54405832569598, 0.16564775964461145, -0.8049072503374953]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[12.54405832569598, 0.16564775964461145, -0.8049072503374953]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_326",
    "sat": "def sat(x: float, coeffs: List[float]=[5.341089504226077, -0.7544927970409198, -6022.797985344441]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.341089504226077, -0.7544927970409198, -6022.797985344441]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[5.341089504226077, -0.7544927970409198, -6022.797985344441]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_327",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1832038428623283, 0.1608924244585123, 0.03283191869538103]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1832038428623283, 0.1608924244585123, 0.03283191869538103]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.1832038428623283, 0.1608924244585123, 0.03283191869538103]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_328",
    "sat": "def sat(x: float, coeffs: List[float]=[0.24995109955610975, -1.4066490717345346, -8640.342355592355]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.24995109955610975, -1.4066490717345346, -8640.342355592355]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.24995109955610975, -1.4066490717345346, -8640.342355592355]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_329",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.747266264794866, 0.09893748070635071, 1004.0902121952729]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.747266264794866, 0.09893748070635071, 1004.0902121952729]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.747266264794866, 0.09893748070635071, 1004.0902121952729]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_330",
    "sat": "def sat(x: float, coeffs: List[float]=[1.4516621563802994, -0.22234804001954508, 0.002709320388389178]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.4516621563802994, -0.22234804001954508, 0.002709320388389178]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.4516621563802994, -0.22234804001954508, 0.002709320388389178]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_331",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3209151977593762, -0.29502619453436446, 0.05007900012434088]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3209151977593762, -0.29502619453436446, 0.05007900012434088]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.3209151977593762, -0.29502619453436446, 0.05007900012434088]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_332",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2949047108089344, -0.4780029578087901, -28.02908523601595]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2949047108089344, -0.4780029578087901, -28.02908523601595]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.2949047108089344, -0.4780029578087901, -28.02908523601595]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_333",
    "sat": "def sat(x: float, coeffs: List[float]=[-6.841057153290336, -3.4990776493332576, 4.10698313332216]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.841057153290336, -3.4990776493332576, 4.10698313332216]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-6.841057153290336, -3.4990776493332576, 4.10698313332216]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_334",
    "sat": "def sat(x: float, coeffs: List[float]=[1.1931608237948546, -635.805354478805, 251.84827711769844]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1931608237948546, -635.805354478805, 251.84827711769844]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.1931608237948546, -635.805354478805, 251.84827711769844]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_335",
    "sat": "def sat(x: float, coeffs: List[float]=[-123.01880178686093, -0.6070540535748791, 92.28021872001983]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-123.01880178686093, -0.6070540535748791, 92.28021872001983]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-123.01880178686093, -0.6070540535748791, 92.28021872001983]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_336",
    "sat": "def sat(x: float, coeffs: List[float]=[3.284549255006731, 306.23390820877427, 6784.23617406418]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.284549255006731, 306.23390820877427, 6784.23617406418]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.284549255006731, 306.23390820877427, 6784.23617406418]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_337",
    "sat": "def sat(x: float, coeffs: List[float]=[0.18736812209172435, -2.705179068549835, 1.2533180960473305]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.18736812209172435, -2.705179068549835, 1.2533180960473305]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.18736812209172435, -2.705179068549835, 1.2533180960473305]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_338",
    "sat": "def sat(x: float, coeffs: List[float]=[0.07072427339965048, 7.279120982936218, 2.340298815441875]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.07072427339965048, 7.279120982936218, 2.340298815441875]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.07072427339965048, 7.279120982936218, 2.340298815441875]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_339",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.23775675967239188, 7.038757577427831, 69.09542478337842]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.23775675967239188, 7.038757577427831, 69.09542478337842]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.23775675967239188, 7.038757577427831, 69.09542478337842]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_340",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6867518095113682, -24.716286351195265, 8.485860918967761]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6867518095113682, -24.716286351195265, 8.485860918967761]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.6867518095113682, -24.716286351195265, 8.485860918967761]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_341",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.885175307305886, -1.5996378084594254, 0.20930133869738698]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.885175307305886, -1.5996378084594254, 0.20930133869738698]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.885175307305886, -1.5996378084594254, 0.20930133869738698]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_342",
    "sat": "def sat(x: float, coeffs: List[float]=[3.20133298893465, -3.514500438847168, -16560.41342928506]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.20133298893465, -3.514500438847168, -16560.41342928506]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.20133298893465, -3.514500438847168, -16560.41342928506]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_343",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4418204053121874, 0.2410499579149954, -7.880609629773099]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4418204053121874, 0.2410499579149954, -7.880609629773099]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.4418204053121874, 0.2410499579149954, -7.880609629773099]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_344",
    "sat": "def sat(x: float, coeffs: List[float]=[5.231922126294555, 26.044151922131935, -4.010380713014971]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.231922126294555, 26.044151922131935, -4.010380713014971]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[5.231922126294555, 26.044151922131935, -4.010380713014971]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_345",
    "sat": "def sat(x: float, coeffs: List[float]=[18.397495173921413, -0.20938543065003712, -6.64179865753586]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[18.397495173921413, -0.20938543065003712, -6.64179865753586]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[18.397495173921413, -0.20938543065003712, -6.64179865753586]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_346",
    "sat": "def sat(x: float, coeffs: List[float]=[0.21706718345178913, -0.6682995820222706, -65.48126865776885]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.21706718345178913, -0.6682995820222706, -65.48126865776885]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.21706718345178913, -0.6682995820222706, -65.48126865776885]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_347",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.1987717846965973, 1.6247618116547444, -0.24723777462146243]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1987717846965973, 1.6247618116547444, -0.24723777462146243]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.1987717846965973, 1.6247618116547444, -0.24723777462146243]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_348",
    "sat": "def sat(x: float, coeffs: List[float]=[146.02441254151304, -0.14990131114055805, -20.074089781157657]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[146.02441254151304, -0.14990131114055805, -20.074089781157657]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[146.02441254151304, -0.14990131114055805, -20.074089781157657]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_349",
    "sat": "def sat(x: float, coeffs: List[float]=[-356.45011364497776, -42.35638963417708, 172.67243297519988]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-356.45011364497776, -42.35638963417708, 172.67243297519988]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-356.45011364497776, -42.35638963417708, 172.67243297519988]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_350",
    "sat": "def sat(x: float, coeffs: List[float]=[-254.35270794280396, -0.8814825173275681, 0.6422924183195572]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-254.35270794280396, -0.8814825173275681, 0.6422924183195572]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-254.35270794280396, -0.8814825173275681, 0.6422924183195572]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_351",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.03518901391506768, -79.42979412119261, 321.5568519753398]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.03518901391506768, -79.42979412119261, 321.5568519753398]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.03518901391506768, -79.42979412119261, 321.5568519753398]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_352",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.21693529927784838, -0.878436463231147, 0.5738641428133502]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.21693529927784838, -0.878436463231147, 0.5738641428133502]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.21693529927784838, -0.878436463231147, 0.5738641428133502]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_353",
    "sat": "def sat(x: float, coeffs: List[float]=[16.40897899177591, 8.9869873201617, -3.9175945168954227]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[16.40897899177591, 8.9869873201617, -3.9175945168954227]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[16.40897899177591, 8.9869873201617, -3.9175945168954227]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_354",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8164886722511806, -0.639067466686064, 0.01741894630053241]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8164886722511806, -0.639067466686064, 0.01741894630053241]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.8164886722511806, -0.639067466686064, 0.01741894630053241]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_355",
    "sat": "def sat(x: float, coeffs: List[float]=[0.31055553607578307, -0.7494289682775123, -1.5733863249172]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.31055553607578307, -0.7494289682775123, -1.5733863249172]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.31055553607578307, -0.7494289682775123, -1.5733863249172]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_356",
    "sat": "def sat(x: float, coeffs: List[float]=[0.05761595717483825, -1.7654216108512175, 0.06033643576276457]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.05761595717483825, -1.7654216108512175, 0.06033643576276457]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.05761595717483825, -1.7654216108512175, 0.06033643576276457]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_357",
    "sat": "def sat(x: float, coeffs: List[float]=[-437.65043456708855, -0.39029198911636814, 809.0173381150632]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-437.65043456708855, -0.39029198911636814, 809.0173381150632]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-437.65043456708855, -0.39029198911636814, 809.0173381150632]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_358",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4006632660302407, -13.50101176952092, -1.5217203431946527]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4006632660302407, -13.50101176952092, -1.5217203431946527]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.4006632660302407, -13.50101176952092, -1.5217203431946527]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_359",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6484271667362776, -0.20619862912654088, 8.036058221766483]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6484271667362776, -0.20619862912654088, 8.036058221766483]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.6484271667362776, -0.20619862912654088, 8.036058221766483]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_360",
    "sat": "def sat(x: float, coeffs: List[float]=[1.7050239788625745, 0.5197665696118093, -0.056416710977547094]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7050239788625745, 0.5197665696118093, -0.056416710977547094]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.7050239788625745, 0.5197665696118093, -0.056416710977547094]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_361",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4821173288004463, -0.12289853249306848, 0.06971470658207884]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4821173288004463, -0.12289853249306848, 0.06971470658207884]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.4821173288004463, -0.12289853249306848, 0.06971470658207884]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_362",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6688508132672076, 0.6685029694461401, -421.7633033152251]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6688508132672076, 0.6685029694461401, -421.7633033152251]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.6688508132672076, 0.6685029694461401, -421.7633033152251]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_363",
    "sat": "def sat(x: float, coeffs: List[float]=[0.43882180397013243, 3.2977307598314956, -1.036280611433807]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.43882180397013243, 3.2977307598314956, -1.036280611433807]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.43882180397013243, 3.2977307598314956, -1.036280611433807]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_364",
    "sat": "def sat(x: float, coeffs: List[float]=[30.125460903798345, -1.9193982125978992, -0.27219536749115314]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[30.125460903798345, -1.9193982125978992, -0.27219536749115314]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[30.125460903798345, -1.9193982125978992, -0.27219536749115314]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_365",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.43592956469740357, 0.41462767639211434, 2.8159925398876737]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.43592956469740357, 0.41462767639211434, 2.8159925398876737]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.43592956469740357, 0.41462767639211434, 2.8159925398876737]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_366",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.29217835966903966, -6.442123466888716, -7.840802773353575]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.29217835966903966, -6.442123466888716, -7.840802773353575]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.29217835966903966, -6.442123466888716, -7.840802773353575]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_367",
    "sat": "def sat(x: float, coeffs: List[float]=[0.02972734092471363, -0.682190682153183, -11.277292982837732]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.02972734092471363, -0.682190682153183, -11.277292982837732]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.02972734092471363, -0.682190682153183, -11.277292982837732]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_368",
    "sat": "def sat(x: float, coeffs: List[float]=[3.737573961461868, -2.2755279470221508, -3.3519286333954748]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.737573961461868, -2.2755279470221508, -3.3519286333954748]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.737573961461868, -2.2755279470221508, -3.3519286333954748]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_369",
    "sat": "def sat(x: float, coeffs: List[float]=[1.4152033320635857, 0.16617712681613775, -0.5581157506149164]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.4152033320635857, 0.16617712681613775, -0.5581157506149164]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.4152033320635857, 0.16617712681613775, -0.5581157506149164]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_370",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5883103608802823, 3.821226609850101, 4.8634603785927695]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5883103608802823, 3.821226609850101, 4.8634603785927695]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5883103608802823, 3.821226609850101, 4.8634603785927695]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_371",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1871873135334047, 179.8301600901768, -27.044138618032523]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1871873135334047, 179.8301600901768, -27.044138618032523]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.1871873135334047, 179.8301600901768, -27.044138618032523]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_372",
    "sat": "def sat(x: float, coeffs: List[float]=[1.7714928731058512, 0.24237633524101487, -0.08079774602577114]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7714928731058512, 0.24237633524101487, -0.08079774602577114]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.7714928731058512, 0.24237633524101487, -0.08079774602577114]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_373",
    "sat": "def sat(x: float, coeffs: List[float]=[-7.4790187500614245, -0.9635576128138567, 0.5841748511722281]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.4790187500614245, -0.9635576128138567, 0.5841748511722281]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-7.4790187500614245, -0.9635576128138567, 0.5841748511722281]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_374",
    "sat": "def sat(x: float, coeffs: List[float]=[0.05831588030440623, -13.882772586841895, -0.7706743498574747]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.05831588030440623, -13.882772586841895, -0.7706743498574747]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.05831588030440623, -13.882772586841895, -0.7706743498574747]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_375",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5713651344361103, 0.08017757865071877, 0.38474751855335987]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5713651344361103, 0.08017757865071877, 0.38474751855335987]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5713651344361103, 0.08017757865071877, 0.38474751855335987]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_376",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.2710075420244025, 2.3412020639416706, 3.310907584416346]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2710075420244025, 2.3412020639416706, 3.310907584416346]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.2710075420244025, 2.3412020639416706, 3.310907584416346]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_377",
    "sat": "def sat(x: float, coeffs: List[float]=[1.8478575354963942, 0.24769327783525955, -25.379223339192308]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8478575354963942, 0.24769327783525955, -25.379223339192308]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.8478575354963942, 0.24769327783525955, -25.379223339192308]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_378",
    "sat": "def sat(x: float, coeffs: List[float]=[-9.505818588509763, -9.756699443485893, 1.526527864750748]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.505818588509763, -9.756699443485893, 1.526527864750748]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-9.505818588509763, -9.756699443485893, 1.526527864750748]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_379",
    "sat": "def sat(x: float, coeffs: List[float]=[5.1671218834048815, -0.1683800272426612, -0.024825281277144277]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.1671218834048815, -0.1683800272426612, -0.024825281277144277]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[5.1671218834048815, -0.1683800272426612, -0.024825281277144277]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_380",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.970525408532752, -2.9507953279951136, -0.42037180449166134]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.970525408532752, -2.9507953279951136, -0.42037180449166134]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-4.970525408532752, -2.9507953279951136, -0.42037180449166134]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_381",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.0995411806382142, 0.43035056546902, -0.06597886839858443]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0995411806382142, 0.43035056546902, -0.06597886839858443]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.0995411806382142, 0.43035056546902, -0.06597886839858443]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_382",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4434070323881934, 0.3460247017404301, -18.65635838508325]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4434070323881934, 0.3460247017404301, -18.65635838508325]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.4434070323881934, 0.3460247017404301, -18.65635838508325]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_383",
    "sat": "def sat(x: float, coeffs: List[float]=[2.6657354222744405, 0.22467028337729, -11.38573039896061]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.6657354222744405, 0.22467028337729, -11.38573039896061]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.6657354222744405, 0.22467028337729, -11.38573039896061]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_384",
    "sat": "def sat(x: float, coeffs: List[float]=[-19.78133303030555, 1.1510405382066289, 1.884738699969937]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-19.78133303030555, 1.1510405382066289, 1.884738699969937]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-19.78133303030555, 1.1510405382066289, 1.884738699969937]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_385",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.06316348900291084, 0.0956380678430541, 18295.9178144588]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06316348900291084, 0.0956380678430541, 18295.9178144588]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.06316348900291084, 0.0956380678430541, 18295.9178144588]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_386",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5314293926266479, -52.83362118309117, 238.18370340267654]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5314293926266479, -52.83362118309117, 238.18370340267654]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5314293926266479, -52.83362118309117, 238.18370340267654]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_387",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.08822745963853618, 29.86317860103596, -9.31708086736434]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.08822745963853618, 29.86317860103596, -9.31708086736434]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.08822745963853618, 29.86317860103596, -9.31708086736434]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_388",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.04854182329129945, 0.06517517273438404, 0.2011935968577172]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.04854182329129945, 0.06517517273438404, 0.2011935968577172]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.04854182329129945, 0.06517517273438404, 0.2011935968577172]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_389",
    "sat": "def sat(x: float, coeffs: List[float]=[1.4447353065766346, -0.23514313414985213, -0.039986799621932356]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.4447353065766346, -0.23514313414985213, -0.039986799621932356]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.4447353065766346, -0.23514313414985213, -0.039986799621932356]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_390",
    "sat": "def sat(x: float, coeffs: List[float]=[-9.33162021307413, 4.734038632186696, 14.957105427351973]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.33162021307413, 4.734038632186696, 14.957105427351973]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-9.33162021307413, 4.734038632186696, 14.957105427351973]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_391",
    "sat": "def sat(x: float, coeffs: List[float]=[0.9469238452509305, -8.272599178386253, -256425.22875434769]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9469238452509305, -8.272599178386253, -256425.22875434769]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.9469238452509305, -8.272599178386253, -256425.22875434769]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_392",
    "sat": "def sat(x: float, coeffs: List[float]=[-70.65697988968647, -0.5432006707408581, 1287.1694962420638]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-70.65697988968647, -0.5432006707408581, 1287.1694962420638]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-70.65697988968647, -0.5432006707408581, 1287.1694962420638]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_393",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4474207959829144, -2.580733023283091, -3.6722358407688285]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4474207959829144, -2.580733023283091, -3.6722358407688285]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.4474207959829144, -2.580733023283091, -3.6722358407688285]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_394",
    "sat": "def sat(x: float, coeffs: List[float]=[36.441991085709205, -2.5742529237437655, -0.6307537566086304]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[36.441991085709205, -2.5742529237437655, -0.6307537566086304]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[36.441991085709205, -2.5742529237437655, -0.6307537566086304]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_395",
    "sat": "def sat(x: float, coeffs: List[float]=[0.9187158165325551, 2.286882312840595, -2.8883008849795306]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9187158165325551, 2.286882312840595, -2.8883008849795306]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.9187158165325551, 2.286882312840595, -2.8883008849795306]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_396",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.2630225932055639, -9.093510740803595, 63.898074283534626]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2630225932055639, -9.093510740803595, 63.898074283534626]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.2630225932055639, -9.093510740803595, 63.898074283534626]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_397",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8469334948150012, 13.38747178906826, -209.67277722126687]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8469334948150012, 13.38747178906826, -209.67277722126687]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.8469334948150012, 13.38747178906826, -209.67277722126687]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_398",
    "sat": "def sat(x: float, coeffs: List[float]=[-162.7426707103469, -0.17872097950746713, 6.418129984992381]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-162.7426707103469, -0.17872097950746713, 6.418129984992381]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-162.7426707103469, -0.17872097950746713, 6.418129984992381]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_399",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7961120118560565, -0.4422716168384082, 47.30596053825449]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7961120118560565, -0.4422716168384082, 47.30596053825449]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.7961120118560565, -0.4422716168384082, 47.30596053825449]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_400",
    "sat": "def sat(x: float, coeffs: List[float]=[2.189741730634067, -17.083054015861517, 13.356055488926167]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.189741730634067, -17.083054015861517, 13.356055488926167]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.189741730634067, -17.083054015861517, 13.356055488926167]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_401",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.017507966999908236, -6.637565330410072, 19.935531626945014]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.017507966999908236, -6.637565330410072, 19.935531626945014]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.017507966999908236, -6.637565330410072, 19.935531626945014]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_402",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.0038218361188653, 9.899482687654062, 1.3010369792532184]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0038218361188653, 9.899482687654062, 1.3010369792532184]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.0038218361188653, 9.899482687654062, 1.3010369792532184]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_403",
    "sat": "def sat(x: float, coeffs: List[float]=[-32.364453553353854, -14.810301520953223, 126.28582259441811]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-32.364453553353854, -14.810301520953223, 126.28582259441811]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-32.364453553353854, -14.810301520953223, 126.28582259441811]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_404",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.17930333946199628, -0.004158824363171165, 0.27159294431255054]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.17930333946199628, -0.004158824363171165, 0.27159294431255054]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.17930333946199628, -0.004158824363171165, 0.27159294431255054]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_405",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1663700357703989, -0.609727699290171, -0.4051591534409802]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1663700357703989, -0.609727699290171, -0.4051591534409802]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.1663700357703989, -0.609727699290171, -0.4051591534409802]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_406",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.26416391813029244, 0.1365788700131736, 45243.87524325612]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.26416391813029244, 0.1365788700131736, 45243.87524325612]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.26416391813029244, 0.1365788700131736, 45243.87524325612]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_407",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.01107844406175921, 1.0634948137949447, 3.6366249678832285]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.01107844406175921, 1.0634948137949447, 3.6366249678832285]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.01107844406175921, 1.0634948137949447, 3.6366249678832285]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_408",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.28827704643418284, -0.05630222651580352, 0.6436765166608742]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.28827704643418284, -0.05630222651580352, 0.6436765166608742]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.28827704643418284, -0.05630222651580352, 0.6436765166608742]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_409",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.5467890847282355, 0.5707063130681708, 0.015411363878188339]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5467890847282355, 0.5707063130681708, 0.015411363878188339]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.5467890847282355, 0.5707063130681708, 0.015411363878188339]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_410",
    "sat": "def sat(x: float, coeffs: List[float]=[0.0417612449304264, 6.949988723956138, 1.9786523400355833]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0417612449304264, 6.949988723956138, 1.9786523400355833]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.0417612449304264, 6.949988723956138, 1.9786523400355833]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_411",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6818402162255807, -0.03787430834454283, 0.020156971793986976]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6818402162255807, -0.03787430834454283, 0.020156971793986976]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.6818402162255807, -0.03787430834454283, 0.020156971793986976]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_412",
    "sat": "def sat(x: float, coeffs: List[float]=[2.558165943129467, 0.4755926183512494, -3.193656248170043]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.558165943129467, 0.4755926183512494, -3.193656248170043]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.558165943129467, 0.4755926183512494, -3.193656248170043]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_413",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.326279459441932, -1.4990387206844724, 0.5944156343339915]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.326279459441932, -1.4990387206844724, 0.5944156343339915]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-4.326279459441932, -1.4990387206844724, 0.5944156343339915]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_414",
    "sat": "def sat(x: float, coeffs: List[float]=[119.76742094658647, 2.0783461388331155, -9228.324242591098]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[119.76742094658647, 2.0783461388331155, -9228.324242591098]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[119.76742094658647, 2.0783461388331155, -9228.324242591098]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_415",
    "sat": "def sat(x: float, coeffs: List[float]=[-10.521421315283206, 0.005821632809767848, 0.004736853900182739]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-10.521421315283206, 0.005821632809767848, 0.004736853900182739]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-10.521421315283206, 0.005821632809767848, 0.004736853900182739]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_416",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5625115191063265, 0.19208691854528062, 3.556745023754408]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5625115191063265, 0.19208691854528062, 3.556745023754408]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5625115191063265, 0.19208691854528062, 3.556745023754408]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_417",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.21309352129010395, 0.8663707992964484, 0.013139440743965097]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.21309352129010395, 0.8663707992964484, 0.013139440743965097]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.21309352129010395, 0.8663707992964484, 0.013139440743965097]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_418",
    "sat": "def sat(x: float, coeffs: List[float]=[-19.39068048668545, -0.06960262225839076, 42.12777522046948]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-19.39068048668545, -0.06960262225839076, 42.12777522046948]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-19.39068048668545, -0.06960262225839076, 42.12777522046948]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_419",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7306193770758732, 0.3165137465710799, 0.012120142707047544]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7306193770758732, 0.3165137465710799, 0.012120142707047544]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.7306193770758732, 0.3165137465710799, 0.012120142707047544]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_420",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.6457453761771563, 0.45327070591157526, 0.8483379981875315]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.6457453761771563, 0.45327070591157526, 0.8483379981875315]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.6457453761771563, 0.45327070591157526, 0.8483379981875315]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_421",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5859205250753786, -0.19295162630778262, 0.5487628500130689]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5859205250753786, -0.19295162630778262, 0.5487628500130689]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5859205250753786, -0.19295162630778262, 0.5487628500130689]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_422",
    "sat": "def sat(x: float, coeffs: List[float]=[-11.89048405688397, 0.10435195964570802, 10.88271935330459]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.89048405688397, 0.10435195964570802, 10.88271935330459]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-11.89048405688397, 0.10435195964570802, 10.88271935330459]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_423",
    "sat": "def sat(x: float, coeffs: List[float]=[0.9986511419709148, 13.817659075365773, 1.6655787294783253]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9986511419709148, 13.817659075365773, 1.6655787294783253]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.9986511419709148, 13.817659075365773, 1.6655787294783253]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_424",
    "sat": "def sat(x: float, coeffs: List[float]=[4.872589490309248, 0.3012729562608342, -442.927278068429]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.872589490309248, 0.3012729562608342, -442.927278068429]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[4.872589490309248, 0.3012729562608342, -442.927278068429]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_425",
    "sat": "def sat(x: float, coeffs: List[float]=[1.2068811871783256, -0.08354816745906805, -21.32998544680942]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2068811871783256, -0.08354816745906805, -21.32998544680942]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.2068811871783256, -0.08354816745906805, -21.32998544680942]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_426",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.1486690466796352, 0.3558433138240315, -0.016396567701135636]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1486690466796352, 0.3558433138240315, -0.016396567701135636]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.1486690466796352, 0.3558433138240315, -0.016396567701135636]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_427",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8641224956905528, -73.68792506246699, 91.46714374760334]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8641224956905528, -73.68792506246699, 91.46714374760334]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.8641224956905528, -73.68792506246699, 91.46714374760334]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_428",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.229571977736697, -6.9175307389574305, 0.1868308158124191]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.229571977736697, -6.9175307389574305, 0.1868308158124191]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.229571977736697, -6.9175307389574305, 0.1868308158124191]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_429",
    "sat": "def sat(x: float, coeffs: List[float]=[66.37211856346515, -0.38250335644326805, -0.6703160713481078]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[66.37211856346515, -0.38250335644326805, -0.6703160713481078]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[66.37211856346515, -0.38250335644326805, -0.6703160713481078]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_430",
    "sat": "def sat(x: float, coeffs: List[float]=[0.40505063274840786, 4.707428597917409, 10.010139667030565]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.40505063274840786, 4.707428597917409, 10.010139667030565]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.40505063274840786, 4.707428597917409, 10.010139667030565]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_431",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.56175704160357, 6.5650989408115334, 1.3869730821102777]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.56175704160357, 6.5650989408115334, 1.3869730821102777]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.56175704160357, 6.5650989408115334, 1.3869730821102777]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_432",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5895613936843874, -0.3215398955587867, -7.074257629601977]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5895613936843874, -0.3215398955587867, -7.074257629601977]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5895613936843874, -0.3215398955587867, -7.074257629601977]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_433",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.12788169207275954, 0.6065233482304878, 25844.46702972695]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.12788169207275954, 0.6065233482304878, 25844.46702972695]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.12788169207275954, 0.6065233482304878, 25844.46702972695]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_434",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.17326289973004827, 0.09122850286172457, -0.009206296766181291]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.17326289973004827, 0.09122850286172457, -0.009206296766181291]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.17326289973004827, 0.09122850286172457, -0.009206296766181291]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_435",
    "sat": "def sat(x: float, coeffs: List[float]=[-70.24131439103375, 77.90043189022451, 62455.24132289795]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-70.24131439103375, 77.90043189022451, 62455.24132289795]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-70.24131439103375, 77.90043189022451, 62455.24132289795]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_436",
    "sat": "def sat(x: float, coeffs: List[float]=[1.754605727572148, -0.11468303595494682, -982.4917503775719]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.754605727572148, -0.11468303595494682, -982.4917503775719]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.754605727572148, -0.11468303595494682, -982.4917503775719]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_437",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.022031459204130927, 16.73809946640689, -7.090465898036436]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.022031459204130927, 16.73809946640689, -7.090465898036436]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.022031459204130927, 16.73809946640689, -7.090465898036436]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_438",
    "sat": "def sat(x: float, coeffs: List[float]=[1.9499675010305486, 0.26910918888567764, -60.38907172747236]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.9499675010305486, 0.26910918888567764, -60.38907172747236]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.9499675010305486, 0.26910918888567764, -60.38907172747236]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_439",
    "sat": "def sat(x: float, coeffs: List[float]=[1.1011541321005407, 21.28097387182758, 78.14264484770524]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1011541321005407, 21.28097387182758, 78.14264484770524]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.1011541321005407, 21.28097387182758, 78.14264484770524]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_440",
    "sat": "def sat(x: float, coeffs: List[float]=[-62.264269745282746, 0.39132702072994174, 166.01832767513076]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-62.264269745282746, 0.39132702072994174, 166.01832767513076]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-62.264269745282746, 0.39132702072994174, 166.01832767513076]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_441",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5944126668242568, -4.542909174371417, 0.42884458715678275]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5944126668242568, -4.542909174371417, 0.42884458715678275]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5944126668242568, -4.542909174371417, 0.42884458715678275]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_442",
    "sat": "def sat(x: float, coeffs: List[float]=[18.038078264077427, -0.19454915796548056, -0.001053925805765249]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[18.038078264077427, -0.19454915796548056, -0.001053925805765249]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[18.038078264077427, -0.19454915796548056, -0.001053925805765249]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_443",
    "sat": "def sat(x: float, coeffs: List[float]=[-13.137517881416613, 0.19341319528352288, 1.6032792931916868]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-13.137517881416613, 0.19341319528352288, 1.6032792931916868]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-13.137517881416613, 0.19341319528352288, 1.6032792931916868]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_444",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.9426576127085119, 3.134988538334183, 40.44318855219607]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9426576127085119, 3.134988538334183, 40.44318855219607]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.9426576127085119, 3.134988538334183, 40.44318855219607]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_445",
    "sat": "def sat(x: float, coeffs: List[float]=[1.2951863081758743, 0.3494573017313855, -0.19800199942414606]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2951863081758743, 0.3494573017313855, -0.19800199942414606]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.2951863081758743, 0.3494573017313855, -0.19800199942414606]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_446",
    "sat": "def sat(x: float, coeffs: List[float]=[-319.9336706790041, 0.32085144873229887, 12052.17550725224]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-319.9336706790041, 0.32085144873229887, 12052.17550725224]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-319.9336706790041, 0.32085144873229887, 12052.17550725224]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_447",
    "sat": "def sat(x: float, coeffs: List[float]=[55.23389858908669, -0.1251269437111897, -650247.0684785369]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[55.23389858908669, -0.1251269437111897, -650247.0684785369]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[55.23389858908669, -0.1251269437111897, -650247.0684785369]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_448",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.14648014467687398, -0.33140648535210543, 0.17116590297443912]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.14648014467687398, -0.33140648535210543, 0.17116590297443912]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.14648014467687398, -0.33140648535210543, 0.17116590297443912]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_449",
    "sat": "def sat(x: float, coeffs: List[float]=[0.23033927327286094, -0.2540877779262745, -78.81729185346444]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.23033927327286094, -0.2540877779262745, -78.81729185346444]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.23033927327286094, -0.2540877779262745, -78.81729185346444]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_450",
    "sat": "def sat(x: float, coeffs: List[float]=[319.1239841217705, 36.37333030425838, -49176.97090392175]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[319.1239841217705, 36.37333030425838, -49176.97090392175]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[319.1239841217705, 36.37333030425838, -49176.97090392175]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_451",
    "sat": "def sat(x: float, coeffs: List[float]=[-87.26919311724738, 2.603962759399659, 0.03705468192106043]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-87.26919311724738, 2.603962759399659, 0.03705468192106043]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-87.26919311724738, 2.603962759399659, 0.03705468192106043]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_452",
    "sat": "def sat(x: float, coeffs: List[float]=[-76.93833740319377, -0.15182148938206166, 0.5230708571143704]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-76.93833740319377, -0.15182148938206166, 0.5230708571143704]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-76.93833740319377, -0.15182148938206166, 0.5230708571143704]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_453",
    "sat": "def sat(x: float, coeffs: List[float]=[0.40769939519769754, 1.0845620093776056, -1.5784323533815932]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.40769939519769754, 1.0845620093776056, -1.5784323533815932]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.40769939519769754, 1.0845620093776056, -1.5784323533815932]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_454",
    "sat": "def sat(x: float, coeffs: List[float]=[-10.74567838029491, -7.602364108393012, 401.6508838952193]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-10.74567838029491, -7.602364108393012, 401.6508838952193]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-10.74567838029491, -7.602364108393012, 401.6508838952193]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_455",
    "sat": "def sat(x: float, coeffs: List[float]=[0.446514484604524, 0.4908075534332805, -2.884728791383516]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.446514484604524, 0.4908075534332805, -2.884728791383516]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.446514484604524, 0.4908075534332805, -2.884728791383516]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_456",
    "sat": "def sat(x: float, coeffs: List[float]=[2.3717907856721925, -0.12659342782420135, -0.36551221078990453]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.3717907856721925, -0.12659342782420135, -0.36551221078990453]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.3717907856721925, -0.12659342782420135, -0.36551221078990453]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_457",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.560634608540355, -0.4757630040225032, 12.410720453999247]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.560634608540355, -0.4757630040225032, 12.410720453999247]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.560634608540355, -0.4757630040225032, 12.410720453999247]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_458",
    "sat": "def sat(x: float, coeffs: List[float]=[5.835184267776994, -0.001628698740560634, -917.0976730982858]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.835184267776994, -0.001628698740560634, -917.0976730982858]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[5.835184267776994, -0.001628698740560634, -917.0976730982858]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_459",
    "sat": "def sat(x: float, coeffs: List[float]=[1.519124881386971, -1.4164056442198705, 0.010640099151498106]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.519124881386971, -1.4164056442198705, 0.010640099151498106]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.519124881386971, -1.4164056442198705, 0.010640099151498106]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_460",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.31304667802578234, -7.2242423631043335, -5.333070085295194]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.31304667802578234, -7.2242423631043335, -5.333070085295194]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.31304667802578234, -7.2242423631043335, -5.333070085295194]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_461",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.08557088586351898, -3.810511509316013, 7.001017385738939]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.08557088586351898, -3.810511509316013, 7.001017385738939]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.08557088586351898, -3.810511509316013, 7.001017385738939]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_462",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4947379740983182, 4.707965928831984, -192.28973253725366]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4947379740983182, 4.707965928831984, -192.28973253725366]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.4947379740983182, 4.707965928831984, -192.28973253725366]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_463",
    "sat": "def sat(x: float, coeffs: List[float]=[1.1691670175428541, -0.1277693776969182, -0.05836589352573482]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1691670175428541, -0.1277693776969182, -0.05836589352573482]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.1691670175428541, -0.1277693776969182, -0.05836589352573482]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_464",
    "sat": "def sat(x: float, coeffs: List[float]=[0.048800923840998024, -0.9441572055548973, 0.8427959787690237]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.048800923840998024, -0.9441572055548973, 0.8427959787690237]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.048800923840998024, -0.9441572055548973, 0.8427959787690237]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_465",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1544833866393467, 28.27270167844489, -25.500104171987715]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1544833866393467, 28.27270167844489, -25.500104171987715]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.1544833866393467, 28.27270167844489, -25.500104171987715]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_466",
    "sat": "def sat(x: float, coeffs: List[float]=[0.0057679270715886855, 0.5987099385620622, -1.2039507136659169]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0057679270715886855, 0.5987099385620622, -1.2039507136659169]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.0057679270715886855, 0.5987099385620622, -1.2039507136659169]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_467",
    "sat": "def sat(x: float, coeffs: List[float]=[47.42578336390631, -120.1611825527548, -3.9082709325517144]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[47.42578336390631, -120.1611825527548, -3.9082709325517144]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[47.42578336390631, -120.1611825527548, -3.9082709325517144]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_468",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7645457798510894, 0.6254706999238181, 7.277353033936098]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7645457798510894, 0.6254706999238181, 7.277353033936098]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.7645457798510894, 0.6254706999238181, 7.277353033936098]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_469",
    "sat": "def sat(x: float, coeffs: List[float]=[26.01545617189053, 0.5692125018241762, -1648.9673109803105]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[26.01545617189053, 0.5692125018241762, -1648.9673109803105]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[26.01545617189053, 0.5692125018241762, -1648.9673109803105]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_470",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.9601219703118616, -17.886657622589905, 44.022775901653475]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9601219703118616, -17.886657622589905, 44.022775901653475]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.9601219703118616, -17.886657622589905, 44.022775901653475]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_471",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.014762228412133002, 3.2984058231294813, 32.716713320864024]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.014762228412133002, 3.2984058231294813, 32.716713320864024]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.014762228412133002, 3.2984058231294813, 32.716713320864024]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_472",
    "sat": "def sat(x: float, coeffs: List[float]=[-12.9129796092582, -11.14148440128971, 2.357988172343845]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.9129796092582, -11.14148440128971, 2.357988172343845]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-12.9129796092582, -11.14148440128971, 2.357988172343845]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_473",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.7342308147875767, 1.5111893025667802, 1194.2269348452705]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.7342308147875767, 1.5111893025667802, 1194.2269348452705]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.7342308147875767, 1.5111893025667802, 1194.2269348452705]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_474",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.046704980512276416, 0.6384174335147891, -0.34200953694388303]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.046704980512276416, 0.6384174335147891, -0.34200953694388303]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.046704980512276416, 0.6384174335147891, -0.34200953694388303]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_475",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.33336800213426415, 0.23338732017965644, 79.86766207415253]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.33336800213426415, 0.23338732017965644, 79.86766207415253]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.33336800213426415, 0.23338732017965644, 79.86766207415253]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_476",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.8898763141816413, 1.9573612420939668, 31.988033766161983]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.8898763141816413, 1.9573612420939668, 31.988033766161983]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.8898763141816413, 1.9573612420939668, 31.988033766161983]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_477",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1795090146790823, 0.019295248376358282, 0.36087227640789754]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1795090146790823, 0.019295248376358282, 0.36087227640789754]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.1795090146790823, 0.019295248376358282, 0.36087227640789754]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_478",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.02273340744495796, -0.07188941683848708, 1102.1116429964443]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.02273340744495796, -0.07188941683848708, 1102.1116429964443]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.02273340744495796, -0.07188941683848708, 1102.1116429964443]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_479",
    "sat": "def sat(x: float, coeffs: List[float]=[1.1168206257710802, -0.7465507346365858, -7.037096395704923]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1168206257710802, -0.7465507346365858, -7.037096395704923]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.1168206257710802, -0.7465507346365858, -7.037096395704923]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_480",
    "sat": "def sat(x: float, coeffs: List[float]=[0.31101655761839203, 3.1101834498181673, -100.47159680868981]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.31101655761839203, 3.1101834498181673, -100.47159680868981]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.31101655761839203, 3.1101834498181673, -100.47159680868981]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_481",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.39583891660135845, 1.543847762355844, -0.3728994598474211]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.39583891660135845, 1.543847762355844, -0.3728994598474211]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.39583891660135845, 1.543847762355844, -0.3728994598474211]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_482",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.27691127646001484, -0.9642838956418216, 0.2785228010424047]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.27691127646001484, -0.9642838956418216, 0.2785228010424047]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.27691127646001484, -0.9642838956418216, 0.2785228010424047]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_483",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2550732549902315, 0.2795651310954368, 0.053492602079273865]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2550732549902315, 0.2795651310954368, 0.053492602079273865]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.2550732549902315, 0.2795651310954368, 0.053492602079273865]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_484",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.557229919527854, 0.25331637672345697, 3.5135962913483056]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.557229919527854, 0.25331637672345697, 3.5135962913483056]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.557229919527854, 0.25331637672345697, 3.5135962913483056]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_485",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5728587846539042, -1.0056603169576688, 142.63784009843397]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5728587846539042, -1.0056603169576688, 142.63784009843397]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5728587846539042, -1.0056603169576688, 142.63784009843397]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_486",
    "sat": "def sat(x: float, coeffs: List[float]=[5.107195918249437, -5.142744869705438, -153.61487710645312]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.107195918249437, -5.142744869705438, -153.61487710645312]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[5.107195918249437, -5.142744869705438, -153.61487710645312]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_487",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5262718563271503, -0.8854399330357471, 0.04266665211159841]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5262718563271503, -0.8854399330357471, 0.04266665211159841]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5262718563271503, -0.8854399330357471, 0.04266665211159841]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_488",
    "sat": "def sat(x: float, coeffs: List[float]=[2.9424503740360013, -7.60828316688115, 4.89798593138436]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.9424503740360013, -7.60828316688115, 4.89798593138436]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.9424503740360013, -7.60828316688115, 4.89798593138436]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_489",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7489298921305833, 3.9564151717976244, 4.306673759638366]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7489298921305833, 3.9564151717976244, 4.306673759638366]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.7489298921305833, 3.9564151717976244, 4.306673759638366]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_490",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.48282657494403985, 3.2936053223018185, 8.37584191452138]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.48282657494403985, 3.2936053223018185, 8.37584191452138]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.48282657494403985, 3.2936053223018185, 8.37584191452138]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_491",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.014794225198310492, -1.4949800486101354, -26.07779885021116]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.014794225198310492, -1.4949800486101354, -26.07779885021116]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.014794225198310492, -1.4949800486101354, -26.07779885021116]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_492",
    "sat": "def sat(x: float, coeffs: List[float]=[2.7255023743394204, -0.23778163586204593, -0.8750768952002285]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.7255023743394204, -0.23778163586204593, -0.8750768952002285]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.7255023743394204, -0.23778163586204593, -0.8750768952002285]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_493",
    "sat": "def sat(x: float, coeffs: List[float]=[1.1998014904315084, -0.6394285355436021, 0.08513408929420882]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1998014904315084, -0.6394285355436021, 0.08513408929420882]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.1998014904315084, -0.6394285355436021, 0.08513408929420882]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_494",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.7524623411823166, 2.9106219229254076, 224.38381724963202]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.7524623411823166, 2.9106219229254076, 224.38381724963202]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.7524623411823166, 2.9106219229254076, 224.38381724963202]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_495",
    "sat": "def sat(x: float, coeffs: List[float]=[0.16018615380332255, -0.020966664669277952, -0.8380862546085844]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.16018615380332255, -0.020966664669277952, -0.8380862546085844]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.16018615380332255, -0.020966664669277952, -0.8380862546085844]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_496",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8714620748625403, 8.279970137512535, 0.8173130404363071]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8714620748625403, 8.279970137512535, 0.8173130404363071]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.8714620748625403, 8.279970137512535, 0.8173130404363071]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_497",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2596039472829603, -0.5179975794249979, 0.1828770961978734]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2596039472829603, -0.5179975794249979, 0.1828770961978734]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.2596039472829603, -0.5179975794249979, 0.1828770961978734]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_498",
    "sat": "def sat(x: float, coeffs: List[float]=[3.815145046156353, -3.533274180377038, -2999.507212438965]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.815145046156353, -3.533274180377038, -2999.507212438965]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.815145046156353, -3.533274180377038, -2999.507212438965]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_499",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.22638008207360683, -0.8961893319248122, 0.10286496532093209]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.22638008207360683, -0.8961893319248122, 0.10286496532093209]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.22638008207360683, -0.8961893319248122, 0.10286496532093209]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_500",
    "sat": "def sat(x: float, coeffs: List[float]=[0.31702014608117474, 161.67409970159724, -795.5987855146163]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.31702014608117474, 161.67409970159724, -795.5987855146163]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.31702014608117474, 161.67409970159724, -795.5987855146163]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_501",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.0980021376683549, 5.669620458547974, 399.68087100870764]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0980021376683549, 5.669620458547974, 399.68087100870764]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.0980021376683549, 5.669620458547974, 399.68087100870764]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_502",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1781577025759955, -0.009957906271269948, 0.7422344074752223]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1781577025759955, -0.009957906271269948, 0.7422344074752223]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.1781577025759955, -0.009957906271269948, 0.7422344074752223]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_503",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.0789301023617371, -0.16942409879401077, 0.05768412564702932]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0789301023617371, -0.16942409879401077, 0.05768412564702932]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.0789301023617371, -0.16942409879401077, 0.05768412564702932]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_504",
    "sat": "def sat(x: float, coeffs: List[float]=[0.0747924661369311, -9.5110002681847, 257.5558676531277]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0747924661369311, -9.5110002681847, 257.5558676531277]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.0747924661369311, -9.5110002681847, 257.5558676531277]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_505",
    "sat": "def sat(x: float, coeffs: List[float]=[163.00209382863753, -2.0026137972550178, -11.999918138434758]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[163.00209382863753, -2.0026137972550178, -11.999918138434758]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[163.00209382863753, -2.0026137972550178, -11.999918138434758]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_506",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4383042701151538, 0.11702967180000767, 0.06233991895390411]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4383042701151538, 0.11702967180000767, 0.06233991895390411]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.4383042701151538, 0.11702967180000767, 0.06233991895390411]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_507",
    "sat": "def sat(x: float, coeffs: List[float]=[-444.930109033243, -0.5095911266278415, 1.2372254701943954]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-444.930109033243, -0.5095911266278415, 1.2372254701943954]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-444.930109033243, -0.5095911266278415, 1.2372254701943954]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_508",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.22683735378414852, -1.1415492317397957, 0.5956001194415899]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.22683735378414852, -1.1415492317397957, 0.5956001194415899]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.22683735378414852, -1.1415492317397957, 0.5956001194415899]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_509",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.302439571853009, 24.147684885676483, -20.760383411529922]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.302439571853009, 24.147684885676483, -20.760383411529922]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-4.302439571853009, 24.147684885676483, -20.760383411529922]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_510",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.38674559460297403, -128.61803682725827, 259.4510354083712]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.38674559460297403, -128.61803682725827, 259.4510354083712]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.38674559460297403, -128.61803682725827, 259.4510354083712]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_511",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.06335779535697046, 0.10601139094779362, -0.01552568760691195]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06335779535697046, 0.10601139094779362, -0.01552568760691195]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.06335779535697046, 0.10601139094779362, -0.01552568760691195]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_512",
    "sat": "def sat(x: float, coeffs: List[float]=[0.11664928380962869, 0.8294421444159422, 0.08180461915068786]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.11664928380962869, 0.8294421444159422, 0.08180461915068786]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.11664928380962869, 0.8294421444159422, 0.08180461915068786]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_513",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.10416292863756567, 0.4498357449611885, -0.05534288775631527]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.10416292863756567, 0.4498357449611885, -0.05534288775631527]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.10416292863756567, 0.4498357449611885, -0.05534288775631527]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_514",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.17842666111159847, -5.895647446220281, 20.780414134781097]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.17842666111159847, -5.895647446220281, 20.780414134781097]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.17842666111159847, -5.895647446220281, 20.780414134781097]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_515",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.09056514954480528, -0.22562131785689124, 0.017620633450054646]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.09056514954480528, -0.22562131785689124, 0.017620633450054646]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.09056514954480528, -0.22562131785689124, 0.017620633450054646]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_516",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3975959628334911, -0.5929181460494867, 0.18823005684461327]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3975959628334911, -0.5929181460494867, 0.18823005684461327]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.3975959628334911, -0.5929181460494867, 0.18823005684461327]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_517",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.2720245915980415, -1.681499833072947, 46.901594545586065]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2720245915980415, -1.681499833072947, 46.901594545586065]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.2720245915980415, -1.681499833072947, 46.901594545586065]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_518",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.21832683487712345, 0.6408905016039145, -0.21195568107858928]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.21832683487712345, 0.6408905016039145, -0.21195568107858928]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.21832683487712345, 0.6408905016039145, -0.21195568107858928]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_519",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1708741145032265, 0.7324204371985944, -198.27323243971304]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1708741145032265, 0.7324204371985944, -198.27323243971304]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.1708741145032265, 0.7324204371985944, -198.27323243971304]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_520",
    "sat": "def sat(x: float, coeffs: List[float]=[1.05684636342081, -0.07447443048966051, -1.2169749124499636]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.05684636342081, -0.07447443048966051, -1.2169749124499636]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.05684636342081, -0.07447443048966051, -1.2169749124499636]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_521",
    "sat": "def sat(x: float, coeffs: List[float]=[-199.3259880891841, -67.92267315491428, 1173.0541091525579]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-199.3259880891841, -67.92267315491428, 1173.0541091525579]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-199.3259880891841, -67.92267315491428, 1173.0541091525579]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_522",
    "sat": "def sat(x: float, coeffs: List[float]=[0.05686782322011341, 18.41182785785001, -9.07353265412809]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.05686782322011341, 18.41182785785001, -9.07353265412809]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.05686782322011341, 18.41182785785001, -9.07353265412809]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_523",
    "sat": "def sat(x: float, coeffs: List[float]=[77.5485536292129, -0.34030982971051965, -123669.10907828606]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[77.5485536292129, -0.34030982971051965, -123669.10907828606]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[77.5485536292129, -0.34030982971051965, -123669.10907828606]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_524",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.041428333594144, 0.48529431151808405, -0.0057434376295808776]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.041428333594144, 0.48529431151808405, -0.0057434376295808776]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.041428333594144, 0.48529431151808405, -0.0057434376295808776]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_525",
    "sat": "def sat(x: float, coeffs: List[float]=[0.020906022038181076, -13.31042893753911, -72.90637542186585]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.020906022038181076, -13.31042893753911, -72.90637542186585]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.020906022038181076, -13.31042893753911, -72.90637542186585]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_526",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7213517826776624, 0.7366443470051899, -0.8448950913955358]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7213517826776624, 0.7366443470051899, -0.8448950913955358]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.7213517826776624, 0.7366443470051899, -0.8448950913955358]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_527",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.059354407221018736, 0.010922526023665466, 0.9136532607895087]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.059354407221018736, 0.010922526023665466, 0.9136532607895087]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.059354407221018736, 0.010922526023665466, 0.9136532607895087]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_528",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8433027331687416, -1.9448948182688737, -15.24589780642205]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8433027331687416, -1.9448948182688737, -15.24589780642205]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.8433027331687416, -1.9448948182688737, -15.24589780642205]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_529",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6857410263927587, -1.9144734200447067, -2.039682365739359]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6857410263927587, -1.9144734200447067, -2.039682365739359]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.6857410263927587, -1.9144734200447067, -2.039682365739359]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_530",
    "sat": "def sat(x: float, coeffs: List[float]=[-10.912531890741777, -0.6490045587101085, 13.384910433451122]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-10.912531890741777, -0.6490045587101085, 13.384910433451122]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-10.912531890741777, -0.6490045587101085, 13.384910433451122]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_531",
    "sat": "def sat(x: float, coeffs: List[float]=[-9.687056231115479, -0.20643707262157954, 0.06168398782217943]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.687056231115479, -0.20643707262157954, 0.06168398782217943]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-9.687056231115479, -0.20643707262157954, 0.06168398782217943]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_532",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.0977649212070617, -0.6678360609254766, -0.3503069585853585]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0977649212070617, -0.6678360609254766, -0.3503069585853585]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.0977649212070617, -0.6678360609254766, -0.3503069585853585]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_533",
    "sat": "def sat(x: float, coeffs: List[float]=[0.769908810432199, 19.656762263203372, -65.39319318790271]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.769908810432199, 19.656762263203372, -65.39319318790271]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.769908810432199, 19.656762263203372, -65.39319318790271]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_534",
    "sat": "def sat(x: float, coeffs: List[float]=[50.370344674801515, 0.18132908347800578, -3.7369245627317733]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[50.370344674801515, 0.18132908347800578, -3.7369245627317733]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[50.370344674801515, 0.18132908347800578, -3.7369245627317733]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_535",
    "sat": "def sat(x: float, coeffs: List[float]=[2.660576816249834, 0.5993452239807874, -18.037034650220562]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.660576816249834, 0.5993452239807874, -18.037034650220562]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.660576816249834, 0.5993452239807874, -18.037034650220562]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_536",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3813653087928275, -4.484970474530028, 13.183413367935257]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3813653087928275, -4.484970474530028, 13.183413367935257]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.3813653087928275, -4.484970474530028, 13.183413367935257]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_537",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.09363151345304772, -0.41660404285778263, -0.026191351666970456]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.09363151345304772, -0.41660404285778263, -0.026191351666970456]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.09363151345304772, -0.41660404285778263, -0.026191351666970456]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_538",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.5655498541867696, 1.5008653923637223, 17.439399729390825]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.5655498541867696, 1.5008653923637223, 17.439399729390825]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.5655498541867696, 1.5008653923637223, 17.439399729390825]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_539",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3280854926621328, 1.5972457253512726, -44.80023821735121]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3280854926621328, 1.5972457253512726, -44.80023821735121]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.3280854926621328, 1.5972457253512726, -44.80023821735121]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_540",
    "sat": "def sat(x: float, coeffs: List[float]=[-51.62749244223479, -0.9937646204641936, 0.5813331140153708]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-51.62749244223479, -0.9937646204641936, 0.5813331140153708]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-51.62749244223479, -0.9937646204641936, 0.5813331140153708]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_541",
    "sat": "def sat(x: float, coeffs: List[float]=[-33.666713227596475, 125.10341781454453, 164.3726546470613]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-33.666713227596475, 125.10341781454453, 164.3726546470613]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-33.666713227596475, 125.10341781454453, 164.3726546470613]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_542",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.00889280573810051, 1.9487310658780492, -2.9580576068203204]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.00889280573810051, 1.9487310658780492, -2.9580576068203204]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.00889280573810051, 1.9487310658780492, -2.9580576068203204]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_543",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.8038120781732303, -0.10819757283884757, 28.794627655885744]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8038120781732303, -0.10819757283884757, 28.794627655885744]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.8038120781732303, -0.10819757283884757, 28.794627655885744]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_544",
    "sat": "def sat(x: float, coeffs: List[float]=[35.378466646738396, 2.6201769596944637, -7.950859490084135]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[35.378466646738396, 2.6201769596944637, -7.950859490084135]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[35.378466646738396, 2.6201769596944637, -7.950859490084135]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_545",
    "sat": "def sat(x: float, coeffs: List[float]=[75.74835264222567, 2.084851855057888, -120589.75220106916]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[75.74835264222567, 2.084851855057888, -120589.75220106916]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[75.74835264222567, 2.084851855057888, -120589.75220106916]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_546",
    "sat": "def sat(x: float, coeffs: List[float]=[0.28484071168175257, 0.5156117821025568, 0.09093812828259193]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.28484071168175257, 0.5156117821025568, 0.09093812828259193]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.28484071168175257, 0.5156117821025568, 0.09093812828259193]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_547",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.2096915267304866, 16.595776305529398, -30.187461809091523]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.2096915267304866, 16.595776305529398, -30.187461809091523]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.2096915267304866, 16.595776305529398, -30.187461809091523]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_548",
    "sat": "def sat(x: float, coeffs: List[float]=[44.75373112078683, 2.0903711016580235, -1.2863353320804887]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[44.75373112078683, 2.0903711016580235, -1.2863353320804887]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[44.75373112078683, 2.0903711016580235, -1.2863353320804887]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_549",
    "sat": "def sat(x: float, coeffs: List[float]=[0.185195459969826, -87.33174850073716, 77.04897010481325]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.185195459969826, -87.33174850073716, 77.04897010481325]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.185195459969826, -87.33174850073716, 77.04897010481325]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_550",
    "sat": "def sat(x: float, coeffs: List[float]=[3.1690199014329825, 461.3221994194041, -32805.263062485516]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.1690199014329825, 461.3221994194041, -32805.263062485516]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.1690199014329825, 461.3221994194041, -32805.263062485516]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_551",
    "sat": "def sat(x: float, coeffs: List[float]=[1.0509562706404703, 0.27982889531074134, -0.009109517865986492]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0509562706404703, 0.27982889531074134, -0.009109517865986492]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.0509562706404703, 0.27982889531074134, -0.009109517865986492]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_552",
    "sat": "def sat(x: float, coeffs: List[float]=[-21.540391719618768, -5.1150103474942314, 13.927138857162603]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-21.540391719618768, -5.1150103474942314, 13.927138857162603]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-21.540391719618768, -5.1150103474942314, 13.927138857162603]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_553",
    "sat": "def sat(x: float, coeffs: List[float]=[241.76240375364077, -9.746766648313756, -8.844787528996223]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[241.76240375364077, -9.746766648313756, -8.844787528996223]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[241.76240375364077, -9.746766648313756, -8.844787528996223]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_554",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5764369804793846, -2.1068234699257053, -0.8214892436996016]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5764369804793846, -2.1068234699257053, -0.8214892436996016]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5764369804793846, -2.1068234699257053, -0.8214892436996016]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_555",
    "sat": "def sat(x: float, coeffs: List[float]=[16.458858554344182, -0.029529585614906335, -80806.38523637742]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[16.458858554344182, -0.029529585614906335, -80806.38523637742]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[16.458858554344182, -0.029529585614906335, -80806.38523637742]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_556",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.200010610932451, -11.467808632564799, 52.008968911143384]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.200010610932451, -11.467808632564799, 52.008968911143384]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-5.200010610932451, -11.467808632564799, 52.008968911143384]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_557",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.47089744067502154, -0.6623741525572481, -0.056220806839352294]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.47089744067502154, -0.6623741525572481, -0.056220806839352294]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.47089744067502154, -0.6623741525572481, -0.056220806839352294]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_558",
    "sat": "def sat(x: float, coeffs: List[float]=[7.410232595926772, -0.5800354154437392, -1.1694009304696347]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.410232595926772, -0.5800354154437392, -1.1694009304696347]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[7.410232595926772, -0.5800354154437392, -1.1694009304696347]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_559",
    "sat": "def sat(x: float, coeffs: List[float]=[1.0195576365956087, 1.6806180017317247, 0.3238638460265433]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0195576365956087, 1.6806180017317247, 0.3238638460265433]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.0195576365956087, 1.6806180017317247, 0.3238638460265433]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_560",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.252950261094792, 15.716110338973536, 1.370351162949854]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.252950261094792, 15.716110338973536, 1.370351162949854]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.252950261094792, 15.716110338973536, 1.370351162949854]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_561",
    "sat": "def sat(x: float, coeffs: List[float]=[2.0643883786807056, 0.543432303468652, -96.37073965681861]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.0643883786807056, 0.543432303468652, -96.37073965681861]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.0643883786807056, 0.543432303468652, -96.37073965681861]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_562",
    "sat": "def sat(x: float, coeffs: List[float]=[-6.570992080883837, 0.17450616895566426, 1.3844665804883978]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.570992080883837, 0.17450616895566426, 1.3844665804883978]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-6.570992080883837, 0.17450616895566426, 1.3844665804883978]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_563",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.9737026934188127, -3.6472920218532106, 3614.816467243784]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.9737026934188127, -3.6472920218532106, 3614.816467243784]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.9737026934188127, -3.6472920218532106, 3614.816467243784]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_564",
    "sat": "def sat(x: float, coeffs: List[float]=[-96.43272359917927, 0.16463987286446202, 1797.8793422566657]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-96.43272359917927, 0.16463987286446202, 1797.8793422566657]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-96.43272359917927, 0.16463987286446202, 1797.8793422566657]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_565",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3940040817562429, -0.23719774051550493, 115.69083829887953]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3940040817562429, -0.23719774051550493, 115.69083829887953]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.3940040817562429, -0.23719774051550493, 115.69083829887953]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_566",
    "sat": "def sat(x: float, coeffs: List[float]=[0.03802086748560848, 0.41162710236686645, -17.567231117818594]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.03802086748560848, 0.41162710236686645, -17.567231117818594]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.03802086748560848, 0.41162710236686645, -17.567231117818594]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_567",
    "sat": "def sat(x: float, coeffs: List[float]=[112.68085927690568, -7.789256993115597, -0.13180637088535502]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[112.68085927690568, -7.789256993115597, -0.13180637088535502]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[112.68085927690568, -7.789256993115597, -0.13180637088535502]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_568",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.14455978617710988, -0.029474039771386334, 0.0015098657057951786]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.14455978617710988, -0.029474039771386334, 0.0015098657057951786]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.14455978617710988, -0.029474039771386334, 0.0015098657057951786]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_569",
    "sat": "def sat(x: float, coeffs: List[float]=[0.12207104894460345, 0.624609193741584, -155.60794739364417]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.12207104894460345, 0.624609193741584, -155.60794739364417]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.12207104894460345, 0.624609193741584, -155.60794739364417]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_570",
    "sat": "def sat(x: float, coeffs: List[float]=[0.09549371740397976, 12.537081704629557, -29695.128874779428]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.09549371740397976, 12.537081704629557, -29695.128874779428]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.09549371740397976, 12.537081704629557, -29695.128874779428]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_571",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.6214144538470256, 3.0605888349575614, -0.173403572177859]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.6214144538470256, 3.0605888349575614, -0.173403572177859]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.6214144538470256, 3.0605888349575614, -0.173403572177859]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_572",
    "sat": "def sat(x: float, coeffs: List[float]=[141.25243835669505, -0.07585718740704823, -112.38253867154451]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[141.25243835669505, -0.07585718740704823, -112.38253867154451]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[141.25243835669505, -0.07585718740704823, -112.38253867154451]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_573",
    "sat": "def sat(x: float, coeffs: List[float]=[-10.860818133826982, 2.2861507324385446, 4044.1163674329696]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-10.860818133826982, 2.2861507324385446, 4044.1163674329696]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-10.860818133826982, 2.2861507324385446, 4044.1163674329696]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_574",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.05024270308374, 0.6549511172791082, 134.70828322380302]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.05024270308374, 0.6549511172791082, 134.70828322380302]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-5.05024270308374, 0.6549511172791082, 134.70828322380302]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_575",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.872529253773415, 0.2749427789715843, 97.09857557761669]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.872529253773415, 0.2749427789715843, 97.09857557761669]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.872529253773415, 0.2749427789715843, 97.09857557761669]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_576",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3075377294714568, -0.0998912870717364, -295.0182777631869]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3075377294714568, -0.0998912870717364, -295.0182777631869]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.3075377294714568, -0.0998912870717364, -295.0182777631869]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_577",
    "sat": "def sat(x: float, coeffs: List[float]=[59.18296500554998, -0.17819174118548275, -1.471920112392436]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[59.18296500554998, -0.17819174118548275, -1.471920112392436]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[59.18296500554998, -0.17819174118548275, -1.471920112392436]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_578",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.6402316059876247, -3.2423923800783343, 104.78575076978152]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.6402316059876247, -3.2423923800783343, 104.78575076978152]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.6402316059876247, -3.2423923800783343, 104.78575076978152]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_579",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.06889319188484921, -1.3836489460558292, 65.00241968174987]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06889319188484921, -1.3836489460558292, 65.00241968174987]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.06889319188484921, -1.3836489460558292, 65.00241968174987]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_580",
    "sat": "def sat(x: float, coeffs: List[float]=[23.763046920163458, -1.7982231940545643, -8782968.604509521]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[23.763046920163458, -1.7982231940545643, -8782968.604509521]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[23.763046920163458, -1.7982231940545643, -8782968.604509521]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_581",
    "sat": "def sat(x: float, coeffs: List[float]=[0.42423942761153155, -0.4902784018569615, -0.040998945768385926]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.42423942761153155, -0.4902784018569615, -0.040998945768385926]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.42423942761153155, -0.4902784018569615, -0.040998945768385926]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_582",
    "sat": "def sat(x: float, coeffs: List[float]=[0.002637028039458681, 0.0260540798539665, -0.0013828497388718483]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.002637028039458681, 0.0260540798539665, -0.0013828497388718483]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.002637028039458681, 0.0260540798539665, -0.0013828497388718483]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_583",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.16187779740795172, 0.05574106102357949, 0.7280161897793307]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.16187779740795172, 0.05574106102357949, 0.7280161897793307]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.16187779740795172, 0.05574106102357949, 0.7280161897793307]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_584",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.955282901145552, -1.2210809717829185, 0.001251857959929891]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.955282901145552, -1.2210809717829185, 0.001251857959929891]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-4.955282901145552, -1.2210809717829185, 0.001251857959929891]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_585",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.2917879803845178, -0.021088185656573815, 0.012086731647649104]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2917879803845178, -0.021088185656573815, 0.012086731647649104]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.2917879803845178, -0.021088185656573815, 0.012086731647649104]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_586",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.5663781713081772, -0.29834943017567145, 0.054476496833538585]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.5663781713081772, -0.29834943017567145, 0.054476496833538585]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.5663781713081772, -0.29834943017567145, 0.054476496833538585]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_587",
    "sat": "def sat(x: float, coeffs: List[float]=[0.007824150939727955, 17.46201820378495, 3.228785683519587]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.007824150939727955, 17.46201820378495, 3.228785683519587]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.007824150939727955, 17.46201820378495, 3.228785683519587]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_588",
    "sat": "def sat(x: float, coeffs: List[float]=[147.60815901402938, -25.253463303624596, -90977265.92903423]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[147.60815901402938, -25.253463303624596, -90977265.92903423]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[147.60815901402938, -25.253463303624596, -90977265.92903423]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_589",
    "sat": "def sat(x: float, coeffs: List[float]=[-7.236390016005505, 1.1617141391983095, 0.005361939621873858]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.236390016005505, 1.1617141391983095, 0.005361939621873858]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-7.236390016005505, 1.1617141391983095, 0.005361939621873858]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_590",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6025355194149907, 35.89379442119303, 25.133185661758368]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6025355194149907, 35.89379442119303, 25.133185661758368]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.6025355194149907, 35.89379442119303, 25.133185661758368]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_591",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.0785187168141097, -2.3896552537327884, 32.206392504822134]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.0785187168141097, -2.3896552537327884, 32.206392504822134]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.0785187168141097, -2.3896552537327884, 32.206392504822134]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_592",
    "sat": "def sat(x: float, coeffs: List[float]=[-11.742952236574242, -0.3509358588713483, 395126.71066020645]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.742952236574242, -0.3509358588713483, 395126.71066020645]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-11.742952236574242, -0.3509358588713483, 395126.71066020645]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_593",
    "sat": "def sat(x: float, coeffs: List[float]=[3.4821741602391607, -1.3705449592223642, 0.11123918326335264]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.4821741602391607, -1.3705449592223642, 0.11123918326335264]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.4821741602391607, -1.3705449592223642, 0.11123918326335264]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_594",
    "sat": "def sat(x: float, coeffs: List[float]=[0.08731713128836516, -10.334798111363348, -27.201875417462986]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08731713128836516, -10.334798111363348, -27.201875417462986]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.08731713128836516, -10.334798111363348, -27.201875417462986]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_595",
    "sat": "def sat(x: float, coeffs: List[float]=[0.09662426472854165, -0.9988906854173233, 0.06107740311126444]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.09662426472854165, -0.9988906854173233, 0.06107740311126444]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.09662426472854165, -0.9988906854173233, 0.06107740311126444]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_596",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.1493462873735507, 13.873227572885993, -18.040166474378353]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.1493462873735507, 13.873227572885993, -18.040166474378353]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.1493462873735507, 13.873227572885993, -18.040166474378353]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_597",
    "sat": "def sat(x: float, coeffs: List[float]=[788.7653478892643, -21.81355545048024, -171.56789864273063]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[788.7653478892643, -21.81355545048024, -171.56789864273063]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[788.7653478892643, -21.81355545048024, -171.56789864273063]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_598",
    "sat": "def sat(x: float, coeffs: List[float]=[0.02772553405774277, -0.8369488435448583, 0.33507560387880886]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.02772553405774277, -0.8369488435448583, 0.33507560387880886]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.02772553405774277, -0.8369488435448583, 0.33507560387880886]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_599",
    "sat": "def sat(x: float, coeffs: List[float]=[0.18665612879999424, 13.811690794419766, -15.071117785309264]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.18665612879999424, 13.811690794419766, -15.071117785309264]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.18665612879999424, 13.811690794419766, -15.071117785309264]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_600",
    "sat": "def sat(x: float, coeffs: List[float]=[6.753004043147396, 286.4438261827315, -3170.4468484162503]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.753004043147396, 286.4438261827315, -3170.4468484162503]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[6.753004043147396, 286.4438261827315, -3170.4468484162503]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_601",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.484325521225713, -0.26366652127630347, 0.15469137025133128]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.484325521225713, -0.26366652127630347, 0.15469137025133128]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-5.484325521225713, -0.26366652127630347, 0.15469137025133128]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_602",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.394714855948402, 1.0460536633470756, 0.5178845722557146]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.394714855948402, 1.0460536633470756, 0.5178845722557146]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.394714855948402, 1.0460536633470756, 0.5178845722557146]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_603",
    "sat": "def sat(x: float, coeffs: List[float]=[63.206935638891885, -0.7085287998055249, -6630.638808793657]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[63.206935638891885, -0.7085287998055249, -6630.638808793657]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[63.206935638891885, -0.7085287998055249, -6630.638808793657]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_604",
    "sat": "def sat(x: float, coeffs: List[float]=[2.833572156468786, 0.8224270407880953, 0.03831311203223131]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.833572156468786, 0.8224270407880953, 0.03831311203223131]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.833572156468786, 0.8224270407880953, 0.03831311203223131]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_605",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2276979253434952, 1.8797606204903516, -1.8523213012113355]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2276979253434952, 1.8797606204903516, -1.8523213012113355]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.2276979253434952, 1.8797606204903516, -1.8523213012113355]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_606",
    "sat": "def sat(x: float, coeffs: List[float]=[4.8513083488968665, 1.1172088212584697, 0.04125803961409424]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.8513083488968665, 1.1172088212584697, 0.04125803961409424]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[4.8513083488968665, 1.1172088212584697, 0.04125803961409424]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_607",
    "sat": "def sat(x: float, coeffs: List[float]=[1.675820148070332, 0.44860292676694674, -7376.066933582394]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.675820148070332, 0.44860292676694674, -7376.066933582394]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.675820148070332, 0.44860292676694674, -7376.066933582394]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_608",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7409964915881843, 5.42828934639175, 0.11803652788885781]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7409964915881843, 5.42828934639175, 0.11803652788885781]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.7409964915881843, 5.42828934639175, 0.11803652788885781]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_609",
    "sat": "def sat(x: float, coeffs: List[float]=[-16.073055929092188, -0.49085123115301704, 6.7767696329498675]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.073055929092188, -0.49085123115301704, 6.7767696329498675]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-16.073055929092188, -0.49085123115301704, 6.7767696329498675]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_610",
    "sat": "def sat(x: float, coeffs: List[float]=[0.0006888684831067119, 769.0361768474592, 2442.634070091505]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0006888684831067119, 769.0361768474592, 2442.634070091505]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.0006888684831067119, 769.0361768474592, 2442.634070091505]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_611",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.053176345730887, 3.0871722473669565, -0.019531932356011923]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.053176345730887, 3.0871722473669565, -0.019531932356011923]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.053176345730887, 3.0871722473669565, -0.019531932356011923]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_612",
    "sat": "def sat(x: float, coeffs: List[float]=[-68.20845144807728, -0.31479230378366857, 0.49580449829878037]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-68.20845144807728, -0.31479230378366857, 0.49580449829878037]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-68.20845144807728, -0.31479230378366857, 0.49580449829878037]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_613",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8233581677605105, -0.14821291966829864, 367.0832569828322]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8233581677605105, -0.14821291966829864, 367.0832569828322]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.8233581677605105, -0.14821291966829864, 367.0832569828322]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_614",
    "sat": "def sat(x: float, coeffs: List[float]=[1.2374413477756752, -1.3787074700112942, 0.15918436003883518]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2374413477756752, -1.3787074700112942, 0.15918436003883518]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.2374413477756752, -1.3787074700112942, 0.15918436003883518]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_615",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.10361070183517788, -812.3023153740188, -93.54482641856288]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.10361070183517788, -812.3023153740188, -93.54482641856288]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.10361070183517788, -812.3023153740188, -93.54482641856288]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_616",
    "sat": "def sat(x: float, coeffs: List[float]=[6.0140539763832175, -0.03269545137926677, -4.450904481730459]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.0140539763832175, -0.03269545137926677, -4.450904481730459]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[6.0140539763832175, -0.03269545137926677, -4.450904481730459]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_617",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.7913624843024696, -1.626857733623171, 4937.768154072164]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.7913624843024696, -1.626857733623171, 4937.768154072164]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.7913624843024696, -1.626857733623171, 4937.768154072164]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_618",
    "sat": "def sat(x: float, coeffs: List[float]=[0.41912113908307447, 0.4897532109284704, -5903.973754305417]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.41912113908307447, 0.4897532109284704, -5903.973754305417]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.41912113908307447, 0.4897532109284704, -5903.973754305417]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_619",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.18789839850473, 12.252802727699711, 27758.701048055602]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.18789839850473, 12.252802727699711, 27758.701048055602]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.18789839850473, 12.252802727699711, 27758.701048055602]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_620",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.684120253122797, 9.884766686986053, -12.235168848782601]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.684120253122797, 9.884766686986053, -12.235168848782601]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.684120253122797, 9.884766686986053, -12.235168848782601]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_621",
    "sat": "def sat(x: float, coeffs: List[float]=[3.1299705818047094, -0.28629814729459674, -91.06892703420266]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.1299705818047094, -0.28629814729459674, -91.06892703420266]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.1299705818047094, -0.28629814729459674, -91.06892703420266]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_622",
    "sat": "def sat(x: float, coeffs: List[float]=[-7.885641570624013, -3.4549035884426633, 405.6509818438327]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.885641570624013, -3.4549035884426633, 405.6509818438327]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-7.885641570624013, -3.4549035884426633, 405.6509818438327]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_623",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.007724594239937617, 6.939931755620296, 42.410361145484394]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.007724594239937617, 6.939931755620296, 42.410361145484394]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.007724594239937617, 6.939931755620296, 42.410361145484394]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_624",
    "sat": "def sat(x: float, coeffs: List[float]=[20.21957295851704, 0.893170831256264, -2.951368898535269]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[20.21957295851704, 0.893170831256264, -2.951368898535269]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[20.21957295851704, 0.893170831256264, -2.951368898535269]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_625",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.864603485100361, -3.563121356281794, 459.77940676637496]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.864603485100361, -3.563121356281794, 459.77940676637496]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.864603485100361, -3.563121356281794, 459.77940676637496]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_626",
    "sat": "def sat(x: float, coeffs: List[float]=[2.0308364827103675, 0.6111151549948778, -45.78985878656022]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.0308364827103675, 0.6111151549948778, -45.78985878656022]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.0308364827103675, 0.6111151549948778, -45.78985878656022]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_627",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5919533206924398, -0.12863254984733477, 0.16280374824914265]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5919533206924398, -0.12863254984733477, 0.16280374824914265]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5919533206924398, -0.12863254984733477, 0.16280374824914265]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_628",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.14862764491421743, -83.70497002539584, -138.1184422152134]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.14862764491421743, -83.70497002539584, -138.1184422152134]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.14862764491421743, -83.70497002539584, -138.1184422152134]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_629",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.017859458260583622, -8.0308777749818, -13.579588317688625]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.017859458260583622, -8.0308777749818, -13.579588317688625]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.017859458260583622, -8.0308777749818, -13.579588317688625]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_630",
    "sat": "def sat(x: float, coeffs: List[float]=[-332.38192103447244, 0.3624335959769837, 7420314.195335061]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-332.38192103447244, 0.3624335959769837, 7420314.195335061]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-332.38192103447244, 0.3624335959769837, 7420314.195335061]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_631",
    "sat": "def sat(x: float, coeffs: List[float]=[48.0689556748435, 9.596792765055776, -9.377141926442217]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[48.0689556748435, 9.596792765055776, -9.377141926442217]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[48.0689556748435, 9.596792765055776, -9.377141926442217]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_632",
    "sat": "def sat(x: float, coeffs: List[float]=[5.903243736436142, 14.03959778109943, 2.6798258926443594]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.903243736436142, 14.03959778109943, 2.6798258926443594]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[5.903243736436142, 14.03959778109943, 2.6798258926443594]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_633",
    "sat": "def sat(x: float, coeffs: List[float]=[0.02026713938946756, -8.375311990961505, 194.60521715152498]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.02026713938946756, -8.375311990961505, 194.60521715152498]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.02026713938946756, -8.375311990961505, 194.60521715152498]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_634",
    "sat": "def sat(x: float, coeffs: List[float]=[3.6522057128183705, -0.024925333887247565, -5.39262209930888]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.6522057128183705, -0.024925333887247565, -5.39262209930888]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.6522057128183705, -0.024925333887247565, -5.39262209930888]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_635",
    "sat": "def sat(x: float, coeffs: List[float]=[133.19815602945383, -4.606938636558494, -1958.0044353194533]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[133.19815602945383, -4.606938636558494, -1958.0044353194533]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[133.19815602945383, -4.606938636558494, -1958.0044353194533]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_636",
    "sat": "def sat(x: float, coeffs: List[float]=[0.19920337498261262, 4.052005821071792, -1238.3689987579594]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.19920337498261262, 4.052005821071792, -1238.3689987579594]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.19920337498261262, 4.052005821071792, -1238.3689987579594]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_637",
    "sat": "def sat(x: float, coeffs: List[float]=[0.04511734452494687, -0.5325656277067568, 1.3204735670321726]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.04511734452494687, -0.5325656277067568, 1.3204735670321726]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.04511734452494687, -0.5325656277067568, 1.3204735670321726]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_638",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.831890932335746, 6.458845085574036, 2.2980356869091754]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.831890932335746, 6.458845085574036, 2.2980356869091754]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-4.831890932335746, 6.458845085574036, 2.2980356869091754]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_639",
    "sat": "def sat(x: float, coeffs: List[float]=[0.45455642100735344, 0.7850230891488533, -820.508753791679]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.45455642100735344, 0.7850230891488533, -820.508753791679]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.45455642100735344, 0.7850230891488533, -820.508753791679]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_640",
    "sat": "def sat(x: float, coeffs: List[float]=[0.014950159933192339, -1.1291450020050489, -11.173548657628356]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.014950159933192339, -1.1291450020050489, -11.173548657628356]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.014950159933192339, -1.1291450020050489, -11.173548657628356]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_641",
    "sat": "def sat(x: float, coeffs: List[float]=[0.11447232301614352, -102.26851999303216, -194.4284227906136]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.11447232301614352, -102.26851999303216, -194.4284227906136]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.11447232301614352, -102.26851999303216, -194.4284227906136]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_642",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.43668360073091445, -13.211538890484404, -23.042021701496296]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.43668360073091445, -13.211538890484404, -23.042021701496296]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.43668360073091445, -13.211538890484404, -23.042021701496296]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_643",
    "sat": "def sat(x: float, coeffs: List[float]=[3.35970052260496, 5.6358267681870124, 1.5945465543806585]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.35970052260496, 5.6358267681870124, 1.5945465543806585]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.35970052260496, 5.6358267681870124, 1.5945465543806585]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_644",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.30886499491420905, -0.44808510048676364, -0.02287606300036981]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.30886499491420905, -0.44808510048676364, -0.02287606300036981]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.30886499491420905, -0.44808510048676364, -0.02287606300036981]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_645",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.9012100987951198, 0.031007882267557168, 8.515270840778916]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9012100987951198, 0.031007882267557168, 8.515270840778916]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.9012100987951198, 0.031007882267557168, 8.515270840778916]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_646",
    "sat": "def sat(x: float, coeffs: List[float]=[1.4803072287161585, -2.166705464739675, -16.359616014894108]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.4803072287161585, -2.166705464739675, -16.359616014894108]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.4803072287161585, -2.166705464739675, -16.359616014894108]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_647",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.30332445642541966, -0.034694868154135104, 0.09516335368553809]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.30332445642541966, -0.034694868154135104, 0.09516335368553809]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.30332445642541966, -0.034694868154135104, 0.09516335368553809]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_648",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.9214919239611572, -13.193451420032007, 10.265944911805706]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.9214919239611572, -13.193451420032007, 10.265944911805706]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.9214919239611572, -13.193451420032007, 10.265944911805706]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_649",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.1210488756775758, -2.425937440954313, 26.76431974844094]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1210488756775758, -2.425937440954313, 26.76431974844094]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.1210488756775758, -2.425937440954313, 26.76431974844094]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_650",
    "sat": "def sat(x: float, coeffs: List[float]=[0.03625911676550464, 1.1772856797399773, -5.74655574731832]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.03625911676550464, 1.1772856797399773, -5.74655574731832]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.03625911676550464, 1.1772856797399773, -5.74655574731832]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_651",
    "sat": "def sat(x: float, coeffs: List[float]=[3.00335314292075, 1.0133722687438622, -67.44393463046069]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.00335314292075, 1.0133722687438622, -67.44393463046069]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.00335314292075, 1.0133722687438622, -67.44393463046069]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_652",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.41786026140289173, 0.19923388299852238, 296.76641267155907]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.41786026140289173, 0.19923388299852238, 296.76641267155907]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.41786026140289173, 0.19923388299852238, 296.76641267155907]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_653",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.2967164355090914, -3.6962373195353124, 53803.60265195435]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.2967164355090914, -3.6962373195353124, 53803.60265195435]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.2967164355090914, -3.6962373195353124, 53803.60265195435]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_654",
    "sat": "def sat(x: float, coeffs: List[float]=[3.693397368018853, -0.05016372840718911, -0.35018252075588924]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.693397368018853, -0.05016372840718911, -0.35018252075588924]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.693397368018853, -0.05016372840718911, -0.35018252075588924]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_655",
    "sat": "def sat(x: float, coeffs: List[float]=[44.4319820181802, -0.6912539554893368, -2159.365603689873]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[44.4319820181802, -0.6912539554893368, -2159.365603689873]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[44.4319820181802, -0.6912539554893368, -2159.365603689873]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_656",
    "sat": "def sat(x: float, coeffs: List[float]=[0.03974939069105895, -4.344049696091022, 2.5401385077109073]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.03974939069105895, -4.344049696091022, 2.5401385077109073]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.03974939069105895, -4.344049696091022, 2.5401385077109073]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_657",
    "sat": "def sat(x: float, coeffs: List[float]=[-167.80381928745956, 1.2106408542451532, 7.959174069453249]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-167.80381928745956, 1.2106408542451532, 7.959174069453249]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-167.80381928745956, 1.2106408542451532, 7.959174069453249]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_658",
    "sat": "def sat(x: float, coeffs: List[float]=[9.381490168518303, 87.03794660084428, 33.6818226039749]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.381490168518303, 87.03794660084428, 33.6818226039749]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[9.381490168518303, 87.03794660084428, 33.6818226039749]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_659",
    "sat": "def sat(x: float, coeffs: List[float]=[0.0694435733926259, 0.1600869905580581, -0.07806769341916886]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0694435733926259, 0.1600869905580581, -0.07806769341916886]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.0694435733926259, 0.1600869905580581, -0.07806769341916886]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_660",
    "sat": "def sat(x: float, coeffs: List[float]=[2.543783291072925, -0.153601166770818, -0.7955137917113412]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.543783291072925, -0.153601166770818, -0.7955137917113412]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.543783291072925, -0.153601166770818, -0.7955137917113412]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_661",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.9101059707603396, -0.40699938453489287, 5.610208622888814]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.9101059707603396, -0.40699938453489287, 5.610208622888814]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.9101059707603396, -0.40699938453489287, 5.610208622888814]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_662",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.017445454347648177, 0.2716418965658673, 0.28652634395383625]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.017445454347648177, 0.2716418965658673, 0.28652634395383625]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.017445454347648177, 0.2716418965658673, 0.28652634395383625]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_663",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.3608671743316594, 0.2776943760539095, 0.019349172963236117]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3608671743316594, 0.2776943760539095, 0.019349172963236117]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.3608671743316594, 0.2776943760539095, 0.019349172963236117]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_664",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.362559657918169, 4.571998902434296, 43.26763048637976]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.362559657918169, 4.571998902434296, 43.26763048637976]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-5.362559657918169, 4.571998902434296, 43.26763048637976]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_665",
    "sat": "def sat(x: float, coeffs: List[float]=[0.12770591309227708, -0.6371059280280925, -0.010466014040139311]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.12770591309227708, -0.6371059280280925, -0.010466014040139311]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.12770591309227708, -0.6371059280280925, -0.010466014040139311]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_666",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5623886511107775, 2.259915672283148, -0.025643495706416594]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5623886511107775, 2.259915672283148, -0.025643495706416594]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5623886511107775, 2.259915672283148, -0.025643495706416594]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_667",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.1998415867805448, 11.72595456536483, 5318.949162377369]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.1998415867805448, 11.72595456536483, 5318.949162377369]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.1998415867805448, 11.72595456536483, 5318.949162377369]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_668",
    "sat": "def sat(x: float, coeffs: List[float]=[4.732744073291162, 9.966663916029168, -5523.8983603219485]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.732744073291162, 9.966663916029168, -5523.8983603219485]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[4.732744073291162, 9.966663916029168, -5523.8983603219485]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_669",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5640033353800997, 0.06342464984366214, -0.0013065872549206966]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5640033353800997, 0.06342464984366214, -0.0013065872549206966]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5640033353800997, 0.06342464984366214, -0.0013065872549206966]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_670",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6653403082422606, -0.6811138125904295, 0.3616976218634439]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6653403082422606, -0.6811138125904295, 0.3616976218634439]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.6653403082422606, -0.6811138125904295, 0.3616976218634439]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_671",
    "sat": "def sat(x: float, coeffs: List[float]=[0.11453489441294303, 0.3475308745329169, 0.07787174210005278]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.11453489441294303, 0.3475308745329169, 0.07787174210005278]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.11453489441294303, 0.3475308745329169, 0.07787174210005278]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_672",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6633161524447061, 0.13672366611721287, -3.2972007687713965]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6633161524447061, 0.13672366611721287, -3.2972007687713965]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.6633161524447061, 0.13672366611721287, -3.2972007687713965]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_673",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.02146111551894, -0.47928292455192595, 0.8831525178897748]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.02146111551894, -0.47928292455192595, 0.8831525178897748]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-4.02146111551894, -0.47928292455192595, 0.8831525178897748]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_674",
    "sat": "def sat(x: float, coeffs: List[float]=[5.654105385355206, -7.294205218970808, 0.019594917293778328]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.654105385355206, -7.294205218970808, 0.019594917293778328]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[5.654105385355206, -7.294205218970808, 0.019594917293778328]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_675",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.680771852445235, -1.6239687383610315, 277.3406891338747]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.680771852445235, -1.6239687383610315, 277.3406891338747]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-4.680771852445235, -1.6239687383610315, 277.3406891338747]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_676",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2689957878452482, -1.7099508369219445, 1.2107139679466457]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2689957878452482, -1.7099508369219445, 1.2107139679466457]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.2689957878452482, -1.7099508369219445, 1.2107139679466457]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_677",
    "sat": "def sat(x: float, coeffs: List[float]=[2.1905593686395917, -0.97422271018188, -1.003868370044701]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.1905593686395917, -0.97422271018188, -1.003868370044701]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.1905593686395917, -0.97422271018188, -1.003868370044701]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_678",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.779414953038628, -0.3540036041906805, 0.9106819000968505]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.779414953038628, -0.3540036041906805, 0.9106819000968505]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.779414953038628, -0.3540036041906805, 0.9106819000968505]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_679",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.41814020180309086, 0.4587632100151005, 0.01708993377082055]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.41814020180309086, 0.4587632100151005, 0.01708993377082055]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.41814020180309086, 0.4587632100151005, 0.01708993377082055]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_680",
    "sat": "def sat(x: float, coeffs: List[float]=[0.08939300952534968, -1.684522437719585, -0.11975077463005708]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08939300952534968, -1.684522437719585, -0.11975077463005708]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.08939300952534968, -1.684522437719585, -0.11975077463005708]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_681",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.13727935722555454, 2.909267042017696, -0.43777518467773974]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.13727935722555454, 2.909267042017696, -0.43777518467773974]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.13727935722555454, 2.909267042017696, -0.43777518467773974]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_682",
    "sat": "def sat(x: float, coeffs: List[float]=[112.42964904124226, 0.3613826727469804, -146.59319088719286]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[112.42964904124226, 0.3613826727469804, -146.59319088719286]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[112.42964904124226, 0.3613826727469804, -146.59319088719286]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_683",
    "sat": "def sat(x: float, coeffs: List[float]=[1.7562759669913417, -0.9081202952289948, 0.06804450314936798]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7562759669913417, -0.9081202952289948, 0.06804450314936798]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.7562759669913417, -0.9081202952289948, 0.06804450314936798]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_684",
    "sat": "def sat(x: float, coeffs: List[float]=[46.51734035254242, -14.504872767024665, -3.611145208981749]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[46.51734035254242, -14.504872767024665, -3.611145208981749]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[46.51734035254242, -14.504872767024665, -3.611145208981749]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_685",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.4835854929702725, 0.11811719050378922, 0.06700365072524793]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4835854929702725, 0.11811719050378922, 0.06700365072524793]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.4835854929702725, 0.11811719050378922, 0.06700365072524793]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_686",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.047444037253098204, 0.4458571243304066, -0.8856616545355966]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.047444037253098204, 0.4458571243304066, -0.8856616545355966]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.047444037253098204, 0.4458571243304066, -0.8856616545355966]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_687",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7209738937013985, -0.07924650910684365, 0.0006187033213500637]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7209738937013985, -0.07924650910684365, 0.0006187033213500637]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.7209738937013985, -0.07924650910684365, 0.0006187033213500637]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_688",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.10039091123144472, -0.292501867720993, -0.0765958753678962]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.10039091123144472, -0.292501867720993, -0.0765958753678962]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.10039091123144472, -0.292501867720993, -0.0765958753678962]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_689",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.051144999878905, -0.07171872583139227, 2941.047830799015]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.051144999878905, -0.07171872583139227, 2941.047830799015]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-4.051144999878905, -0.07171872583139227, 2941.047830799015]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_690",
    "sat": "def sat(x: float, coeffs: List[float]=[7.617824901995288, -0.6089450111696141, -3.353955201610246]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.617824901995288, -0.6089450111696141, -3.353955201610246]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[7.617824901995288, -0.6089450111696141, -3.353955201610246]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_691",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3379140808540127, 0.529713012314657, -0.021893176808179576]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3379140808540127, 0.529713012314657, -0.021893176808179576]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.3379140808540127, 0.529713012314657, -0.021893176808179576]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_692",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.02676782598916024, -0.33613575881069896, -0.2264961079794031]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.02676782598916024, -0.33613575881069896, -0.2264961079794031]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.02676782598916024, -0.33613575881069896, -0.2264961079794031]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_693",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2410049539556304, 6.669024373330706, -42.911481679381104]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2410049539556304, 6.669024373330706, -42.911481679381104]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.2410049539556304, 6.669024373330706, -42.911481679381104]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_694",
    "sat": "def sat(x: float, coeffs: List[float]=[0.24713094502827215, -0.39311845557979835, 0.15198689554218126]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.24713094502827215, -0.39311845557979835, 0.15198689554218126]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.24713094502827215, -0.39311845557979835, 0.15198689554218126]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_695",
    "sat": "def sat(x: float, coeffs: List[float]=[0.43044909094174705, -0.38395163133008187, 0.07950292761663005]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.43044909094174705, -0.38395163133008187, 0.07950292761663005]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.43044909094174705, -0.38395163133008187, 0.07950292761663005]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_696",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.0850619517365194, 1.249649405505114, -0.11906424078696508]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.0850619517365194, 1.249649405505114, -0.11906424078696508]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.0850619517365194, 1.249649405505114, -0.11906424078696508]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_697",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.018870369307836404, -2.111234288637006, -4.386267585539518]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.018870369307836404, -2.111234288637006, -4.386267585539518]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.018870369307836404, -2.111234288637006, -4.386267585539518]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_698",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7368681505080822, 0.07243267472916215, -0.1102228917469446]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7368681505080822, 0.07243267472916215, -0.1102228917469446]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.7368681505080822, 0.07243267472916215, -0.1102228917469446]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_699",
    "sat": "def sat(x: float, coeffs: List[float]=[-8.012146692186436, -0.43332557494617713, 0.4287995315542207]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.012146692186436, -0.43332557494617713, 0.4287995315542207]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-8.012146692186436, -0.43332557494617713, 0.4287995315542207]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_700",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1562295308047527, 0.23720827925159318, 0.03698050831058787]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1562295308047527, 0.23720827925159318, 0.03698050831058787]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.1562295308047527, 0.23720827925159318, 0.03698050831058787]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_701",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7417147447325078, 5.750376641180296, -11.095846707133108]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7417147447325078, 5.750376641180296, -11.095846707133108]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.7417147447325078, 5.750376641180296, -11.095846707133108]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_702",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4035853464364479, -33.265403836255274, 13.674833976062407]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4035853464364479, -33.265403836255274, 13.674833976062407]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.4035853464364479, -33.265403836255274, 13.674833976062407]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_703",
    "sat": "def sat(x: float, coeffs: List[float]=[4.550742484343167, -1.4314158010951885, -335.8875516753999]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.550742484343167, -1.4314158010951885, -335.8875516753999]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[4.550742484343167, -1.4314158010951885, -335.8875516753999]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_704",
    "sat": "def sat(x: float, coeffs: List[float]=[0.10958186154822018, -0.520981949531745, -47.91577595217086]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.10958186154822018, -0.520981949531745, -47.91577595217086]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.10958186154822018, -0.520981949531745, -47.91577595217086]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_705",
    "sat": "def sat(x: float, coeffs: List[float]=[-13.843352929675492, 0.01343697284702102, 8.938949051265002]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-13.843352929675492, 0.01343697284702102, 8.938949051265002]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-13.843352929675492, 0.01343697284702102, 8.938949051265002]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_706",
    "sat": "def sat(x: float, coeffs: List[float]=[-6.710394674771593, 0.1699074162470581, 16.06585542994542]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.710394674771593, 0.1699074162470581, 16.06585542994542]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-6.710394674771593, 0.1699074162470581, 16.06585542994542]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_707",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.6086852934748457, -24.916173943393115, 1.6320638881323797]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.6086852934748457, -24.916173943393115, 1.6320638881323797]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.6086852934748457, -24.916173943393115, 1.6320638881323797]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_708",
    "sat": "def sat(x: float, coeffs: List[float]=[0.046639050432342545, 46.92127682577177, 32.13416663258755]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.046639050432342545, 46.92127682577177, 32.13416663258755]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.046639050432342545, 46.92127682577177, 32.13416663258755]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_709",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2466500546093943, -0.07219381199524373, -1.8303530481939534]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2466500546093943, -0.07219381199524373, -1.8303530481939534]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.2466500546093943, -0.07219381199524373, -1.8303530481939534]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_710",
    "sat": "def sat(x: float, coeffs: List[float]=[0.08514157926288927, -4.894419259836199, -3.5012207208044996]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08514157926288927, -4.894419259836199, -3.5012207208044996]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.08514157926288927, -4.894419259836199, -3.5012207208044996]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_711",
    "sat": "def sat(x: float, coeffs: List[float]=[1.0817885028055523, 0.2619191655622736, -1.6114075495742206]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0817885028055523, 0.2619191655622736, -1.6114075495742206]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.0817885028055523, 0.2619191655622736, -1.6114075495742206]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_712",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6480540613169511, -0.1473251119826561, 0.001064514049647736]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6480540613169511, -0.1473251119826561, 0.001064514049647736]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.6480540613169511, -0.1473251119826561, 0.001064514049647736]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_713",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.35028605389102746, 0.39033742326836807, 5209.85871653993]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.35028605389102746, 0.39033742326836807, 5209.85871653993]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.35028605389102746, 0.39033742326836807, 5209.85871653993]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_714",
    "sat": "def sat(x: float, coeffs: List[float]=[96.15018884644046, -0.22418546150892596, -341.1900869011839]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[96.15018884644046, -0.22418546150892596, -341.1900869011839]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[96.15018884644046, -0.22418546150892596, -341.1900869011839]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_715",
    "sat": "def sat(x: float, coeffs: List[float]=[8.779550471370275, 0.029735146054800616, -5.005117776721429]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.779550471370275, 0.029735146054800616, -5.005117776721429]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[8.779550471370275, 0.029735146054800616, -5.005117776721429]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_716",
    "sat": "def sat(x: float, coeffs: List[float]=[2.6423248439324674, 45.97468357766096, 21.31520133276594]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.6423248439324674, 45.97468357766096, 21.31520133276594]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.6423248439324674, 45.97468357766096, 21.31520133276594]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_717",
    "sat": "def sat(x: float, coeffs: List[float]=[83.12578852189861, 0.06988428307398831, -23.095721500214665]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[83.12578852189861, 0.06988428307398831, -23.095721500214665]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[83.12578852189861, 0.06988428307398831, -23.095721500214665]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_718",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4279078516187127, 2.36438086982111, -1.0997766182967035]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4279078516187127, 2.36438086982111, -1.0997766182967035]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.4279078516187127, 2.36438086982111, -1.0997766182967035]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_719",
    "sat": "def sat(x: float, coeffs: List[float]=[2.4212753062333143, -0.17302381044497714, -9466.097467306448]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.4212753062333143, -0.17302381044497714, -9466.097467306448]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.4212753062333143, -0.17302381044497714, -9466.097467306448]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_720",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2807495237213175, 0.15207972410565462, 0.2829437454184964]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2807495237213175, 0.15207972410565462, 0.2829437454184964]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.2807495237213175, 0.15207972410565462, 0.2829437454184964]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_721",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4449533159434103, 55.47988358258359, 152.70828520835806]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4449533159434103, 55.47988358258359, 152.70828520835806]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.4449533159434103, 55.47988358258359, 152.70828520835806]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_722",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.6499100549548777, 0.052837642929439266, 33.40909113781669]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.6499100549548777, 0.052837642929439266, 33.40909113781669]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.6499100549548777, 0.052837642929439266, 33.40909113781669]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_723",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.17679368131225082, -3.251961438125157, -14.715448015181096]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.17679368131225082, -3.251961438125157, -14.715448015181096]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.17679368131225082, -3.251961438125157, -14.715448015181096]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_724",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6833828826556482, -0.2161508815284531, -94.20034099323831]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6833828826556482, -0.2161508815284531, -94.20034099323831]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.6833828826556482, -0.2161508815284531, -94.20034099323831]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_725",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.4247687712826855, 0.13398549269927007, 12016.824465954536]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.4247687712826855, 0.13398549269927007, 12016.824465954536]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.4247687712826855, 0.13398549269927007, 12016.824465954536]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_726",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.06712406778073965, -0.1797125963095496, 58948.86391188405]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06712406778073965, -0.1797125963095496, 58948.86391188405]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.06712406778073965, -0.1797125963095496, 58948.86391188405]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_727",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.9453670250674393, -35.244818661877034, 57.14148793635712]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9453670250674393, -35.244818661877034, 57.14148793635712]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.9453670250674393, -35.244818661877034, 57.14148793635712]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_728",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3028568299384682, 0.007516750409077548, 292.285751888651]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3028568299384682, 0.007516750409077548, 292.285751888651]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.3028568299384682, 0.007516750409077548, 292.285751888651]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_729",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.8497711907236312, 1.090259869420741, -0.022355115972722252]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8497711907236312, 1.090259869420741, -0.022355115972722252]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.8497711907236312, 1.090259869420741, -0.022355115972722252]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_730",
    "sat": "def sat(x: float, coeffs: List[float]=[-27.127822238021196, 178.63658250512592, 14.312778771316562]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-27.127822238021196, 178.63658250512592, 14.312778771316562]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-27.127822238021196, 178.63658250512592, 14.312778771316562]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_731",
    "sat": "def sat(x: float, coeffs: List[float]=[0.04055167877427072, 0.18200911230700342, -0.3407670785241349]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.04055167877427072, 0.18200911230700342, -0.3407670785241349]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.04055167877427072, 0.18200911230700342, -0.3407670785241349]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_732",
    "sat": "def sat(x: float, coeffs: List[float]=[21.17774902326893, 1.3749570752217775, -914.2700390890457]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[21.17774902326893, 1.3749570752217775, -914.2700390890457]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[21.17774902326893, 1.3749570752217775, -914.2700390890457]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_733",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5444663099213636, -1.00168394690268, 1.101483763287201]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5444663099213636, -1.00168394690268, 1.101483763287201]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5444663099213636, -1.00168394690268, 1.101483763287201]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_734",
    "sat": "def sat(x: float, coeffs: List[float]=[0.44527699347684546, 0.7981433134256867, -0.00519709673468797]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.44527699347684546, 0.7981433134256867, -0.00519709673468797]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.44527699347684546, 0.7981433134256867, -0.00519709673468797]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_735",
    "sat": "def sat(x: float, coeffs: List[float]=[-9.887960226330136, 119.14781852164346, 460.82617731626584]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.887960226330136, 119.14781852164346, 460.82617731626584]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-9.887960226330136, 119.14781852164346, 460.82617731626584]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_736",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3052289430249555, 0.5784379055633219, 0.7168577391884269]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3052289430249555, 0.5784379055633219, 0.7168577391884269]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.3052289430249555, 0.5784379055633219, 0.7168577391884269]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_737",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4508530862865275, -0.43838503097747655, -0.624772412791509]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4508530862865275, -0.43838503097747655, -0.624772412791509]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.4508530862865275, -0.43838503097747655, -0.624772412791509]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_738",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.790398089650955, 0.19129990432613705, 148.36057092960465]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.790398089650955, 0.19129990432613705, 148.36057092960465]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.790398089650955, 0.19129990432613705, 148.36057092960465]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_739",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2362239711514232, 0.4435153576491633, -0.06199892245426064]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2362239711514232, 0.4435153576491633, -0.06199892245426064]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.2362239711514232, 0.4435153576491633, -0.06199892245426064]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_740",
    "sat": "def sat(x: float, coeffs: List[float]=[0.021410260555008536, -17.182090645375062, -184.1335261176533]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.021410260555008536, -17.182090645375062, -184.1335261176533]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.021410260555008536, -17.182090645375062, -184.1335261176533]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_741",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1570278298100527, 0.7552320662312941, -6961.946708961023]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1570278298100527, 0.7552320662312941, -6961.946708961023]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.1570278298100527, 0.7552320662312941, -6961.946708961023]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_742",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.715504074142705, 0.47629380081985423, 2.2415701591308]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.715504074142705, 0.47629380081985423, 2.2415701591308]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-4.715504074142705, 0.47629380081985423, 2.2415701591308]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_743",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1731479934377198, 0.6460017370921024, -0.5949159300891597]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1731479934377198, 0.6460017370921024, -0.5949159300891597]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.1731479934377198, 0.6460017370921024, -0.5949159300891597]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_744",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.310168244396167, -133.79036801537805, 10.83865000915859]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.310168244396167, -133.79036801537805, 10.83865000915859]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-4.310168244396167, -133.79036801537805, 10.83865000915859]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_745",
    "sat": "def sat(x: float, coeffs: List[float]=[4.3052161572589265, -0.10040219091636231, -0.7459785113456158]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.3052161572589265, -0.10040219091636231, -0.7459785113456158]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[4.3052161572589265, -0.10040219091636231, -0.7459785113456158]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_746",
    "sat": "def sat(x: float, coeffs: List[float]=[70.95409044867607, -0.07483498013411334, -3.283106294885829]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[70.95409044867607, -0.07483498013411334, -3.283106294885829]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[70.95409044867607, -0.07483498013411334, -3.283106294885829]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_747",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4902214794639357, 1.2874676367164453, 4.374286919862979]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4902214794639357, 1.2874676367164453, 4.374286919862979]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.4902214794639357, 1.2874676367164453, 4.374286919862979]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_748",
    "sat": "def sat(x: float, coeffs: List[float]=[13.180378871055382, 0.36548188698036305, -0.5032900171051329]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[13.180378871055382, 0.36548188698036305, -0.5032900171051329]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[13.180378871055382, 0.36548188698036305, -0.5032900171051329]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_749",
    "sat": "def sat(x: float, coeffs: List[float]=[4.151666762005022, -0.17969542751174297, -0.07579759586997559]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.151666762005022, -0.17969542751174297, -0.07579759586997559]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[4.151666762005022, -0.17969542751174297, -0.07579759586997559]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_750",
    "sat": "def sat(x: float, coeffs: List[float]=[-31.955777845428837, 0.5676999234586969, 818.5310198553059]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-31.955777845428837, 0.5676999234586969, 818.5310198553059]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-31.955777845428837, 0.5676999234586969, 818.5310198553059]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_751",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4766567036525678, 1.1089011778201525, 121.51574587862478]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4766567036525678, 1.1089011778201525, 121.51574587862478]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.4766567036525678, 1.1089011778201525, 121.51574587862478]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_752",
    "sat": "def sat(x: float, coeffs: List[float]=[40.08313963153362, 0.29503496856239314, -1.5041357670613242]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[40.08313963153362, 0.29503496856239314, -1.5041357670613242]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[40.08313963153362, 0.29503496856239314, -1.5041357670613242]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_753",
    "sat": "def sat(x: float, coeffs: List[float]=[0.24442404640491766, -272.3286884506887, -160.92695899998287]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.24442404640491766, -272.3286884506887, -160.92695899998287]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.24442404640491766, -272.3286884506887, -160.92695899998287]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_754",
    "sat": "def sat(x: float, coeffs: List[float]=[8.76456093256133, -127.81933316805863, -231.17351483863882]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.76456093256133, -127.81933316805863, -231.17351483863882]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[8.76456093256133, -127.81933316805863, -231.17351483863882]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_755",
    "sat": "def sat(x: float, coeffs: List[float]=[2.048581331125332, -0.6830998904388906, -3.0364116402216963]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.048581331125332, -0.6830998904388906, -3.0364116402216963]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.048581331125332, -0.6830998904388906, -3.0364116402216963]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_756",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.15663331368997, 2.2241157386205503, 166364.62569482686]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.15663331368997, 2.2241157386205503, 166364.62569482686]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.15663331368997, 2.2241157386205503, 166364.62569482686]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_757",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7402421865812635, -0.7901738128484587, 0.46590533438297155]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7402421865812635, -0.7901738128484587, 0.46590533438297155]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.7402421865812635, -0.7901738128484587, 0.46590533438297155]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_758",
    "sat": "def sat(x: float, coeffs: List[float]=[0.11357950904411422, -1.064109658192313, 0.332251247487947]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.11357950904411422, -1.064109658192313, 0.332251247487947]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.11357950904411422, -1.064109658192313, 0.332251247487947]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_759",
    "sat": "def sat(x: float, coeffs: List[float]=[0.08863945763699037, 1.7236224334636507, 0.5999336387795384]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08863945763699037, 1.7236224334636507, 0.5999336387795384]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.08863945763699037, 1.7236224334636507, 0.5999336387795384]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_760",
    "sat": "def sat(x: float, coeffs: List[float]=[6.420806172044627, 0.1973839849582799, -0.843691188747304]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.420806172044627, 0.1973839849582799, -0.843691188747304]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[6.420806172044627, 0.1973839849582799, -0.843691188747304]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_761",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.04218731467393155, 2.1229266876089037, 0.49484814399797716]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.04218731467393155, 2.1229266876089037, 0.49484814399797716]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.04218731467393155, 2.1229266876089037, 0.49484814399797716]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_762",
    "sat": "def sat(x: float, coeffs: List[float]=[0.022774681561302135, -0.5932363229254879, 0.019999745040615042]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.022774681561302135, -0.5932363229254879, 0.019999745040615042]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.022774681561302135, -0.5932363229254879, 0.019999745040615042]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_763",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.2538235440137528, 0.991403710154394, -0.194658670745414]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2538235440137528, 0.991403710154394, -0.194658670745414]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.2538235440137528, 0.991403710154394, -0.194658670745414]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_764",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2419186388004632, 7.0239337235871515, 99.06811281681078]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2419186388004632, 7.0239337235871515, 99.06811281681078]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.2419186388004632, 7.0239337235871515, 99.06811281681078]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_765",
    "sat": "def sat(x: float, coeffs: List[float]=[29.511117730341727, -4.904887129086392, 0.1322107041187729]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[29.511117730341727, -4.904887129086392, 0.1322107041187729]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[29.511117730341727, -4.904887129086392, 0.1322107041187729]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_766",
    "sat": "def sat(x: float, coeffs: List[float]=[0.15789113155801315, -0.13738838631601377, -4.3713156767643255]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.15789113155801315, -0.13738838631601377, -4.3713156767643255]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.15789113155801315, -0.13738838631601377, -4.3713156767643255]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_767",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5656413989177388, -1.596989205202763, 2.8752485678147166]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5656413989177388, -1.596989205202763, 2.8752485678147166]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5656413989177388, -1.596989205202763, 2.8752485678147166]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_768",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5275567944240223, 0.1030888611224543, 1456.2975275635736]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5275567944240223, 0.1030888611224543, 1456.2975275635736]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5275567944240223, 0.1030888611224543, 1456.2975275635736]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_769",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.6446123080614625, 0.04180259608840009, 0.10957001138296363]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.6446123080614625, 0.04180259608840009, 0.10957001138296363]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.6446123080614625, 0.04180259608840009, 0.10957001138296363]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_770",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.5318657535173124, -3.4475899363189426, -1.1716660440920517]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.5318657535173124, -3.4475899363189426, -1.1716660440920517]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.5318657535173124, -3.4475899363189426, -1.1716660440920517]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_771",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5073921727645634, -0.010821158613357085, -4.321786359977082]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5073921727645634, -0.010821158613357085, -4.321786359977082]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5073921727645634, -0.010821158613357085, -4.321786359977082]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_772",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.16020557755897089, -22.955692942571215, -0.9250459651088895]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.16020557755897089, -22.955692942571215, -0.9250459651088895]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.16020557755897089, -22.955692942571215, -0.9250459651088895]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_773",
    "sat": "def sat(x: float, coeffs: List[float]=[0.24236449257297724, -0.7025671201561642, 0.38330058997977856]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.24236449257297724, -0.7025671201561642, 0.38330058997977856]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.24236449257297724, -0.7025671201561642, 0.38330058997977856]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_774",
    "sat": "def sat(x: float, coeffs: List[float]=[3.291063831342654, -1.6811550580009251, -3.0589089721471723]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.291063831342654, -1.6811550580009251, -3.0589089721471723]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.291063831342654, -1.6811550580009251, -3.0589089721471723]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_775",
    "sat": "def sat(x: float, coeffs: List[float]=[0.10981553756397162, 1.2032890859210161, -38.423313963517714]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.10981553756397162, 1.2032890859210161, -38.423313963517714]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.10981553756397162, 1.2032890859210161, -38.423313963517714]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_776",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.618467254841069, -10.890084501027728, 365.416081803739]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.618467254841069, -10.890084501027728, 365.416081803739]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-4.618467254841069, -10.890084501027728, 365.416081803739]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_777",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.2349538409133303, -0.8052132673429996, 8.460911910071026]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2349538409133303, -0.8052132673429996, 8.460911910071026]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.2349538409133303, -0.8052132673429996, 8.460911910071026]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_778",
    "sat": "def sat(x: float, coeffs: List[float]=[19.45002387155425, -14.789321477136454, -0.2591066361934956]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[19.45002387155425, -14.789321477136454, -0.2591066361934956]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[19.45002387155425, -14.789321477136454, -0.2591066361934956]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_779",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.18413837767173816, 0.3753891997904284, -0.02342465532279451]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.18413837767173816, 0.3753891997904284, -0.02342465532279451]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.18413837767173816, 0.3753891997904284, -0.02342465532279451]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_780",
    "sat": "def sat(x: float, coeffs: List[float]=[1.2094584577139444, 0.7517960222344137, -0.1215936432180727]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2094584577139444, 0.7517960222344137, -0.1215936432180727]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.2094584577139444, 0.7517960222344137, -0.1215936432180727]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_781",
    "sat": "def sat(x: float, coeffs: List[float]=[45.51880114489057, -0.1024141385918167, -769.1952123677504]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[45.51880114489057, -0.1024141385918167, -769.1952123677504]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[45.51880114489057, -0.1024141385918167, -769.1952123677504]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_782",
    "sat": "def sat(x: float, coeffs: List[float]=[0.16168632117342976, -0.04920601639826113, -1.2398249320707178]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.16168632117342976, -0.04920601639826113, -1.2398249320707178]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.16168632117342976, -0.04920601639826113, -1.2398249320707178]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_783",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.21446072545959996, 239.87818805650303, -189.71465753114356]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.21446072545959996, 239.87818805650303, -189.71465753114356]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.21446072545959996, 239.87818805650303, -189.71465753114356]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_784",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1525273032840632, 19.577531595395918, -4.139659484382839]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1525273032840632, 19.577531595395918, -4.139659484382839]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.1525273032840632, 19.577531595395918, -4.139659484382839]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_785",
    "sat": "def sat(x: float, coeffs: List[float]=[2.350395224459523, 18.256216497122804, -799.143709949738]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.350395224459523, 18.256216497122804, -799.143709949738]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.350395224459523, 18.256216497122804, -799.143709949738]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_786",
    "sat": "def sat(x: float, coeffs: List[float]=[37.346538463685924, 0.23065748100032132, -5527704.607590985]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[37.346538463685924, 0.23065748100032132, -5527704.607590985]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[37.346538463685924, 0.23065748100032132, -5527704.607590985]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_787",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.01988614905157678, 3.1746468552208067, -0.8485120029855636]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.01988614905157678, 3.1746468552208067, -0.8485120029855636]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.01988614905157678, 3.1746468552208067, -0.8485120029855636]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_788",
    "sat": "def sat(x: float, coeffs: List[float]=[2.304542364730208, 11.327076678428257, -4.351463415261856]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.304542364730208, 11.327076678428257, -4.351463415261856]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.304542364730208, 11.327076678428257, -4.351463415261856]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_789",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2940895291185892, -8.498038809870929, -1.5996471356970534]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2940895291185892, -8.498038809870929, -1.5996471356970534]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.2940895291185892, -8.498038809870929, -1.5996471356970534]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_790",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.132635864743057, 2.3431262443496, 26.43681122898632]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.132635864743057, 2.3431262443496, 26.43681122898632]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.132635864743057, 2.3431262443496, 26.43681122898632]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_791",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.029919160287402564, -0.6704220405074953, -0.1703378790361358]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.029919160287402564, -0.6704220405074953, -0.1703378790361358]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.029919160287402564, -0.6704220405074953, -0.1703378790361358]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_792",
    "sat": "def sat(x: float, coeffs: List[float]=[0.013711846286749743, 0.3112109557967751, 0.2943084251438392]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.013711846286749743, 0.3112109557967751, 0.2943084251438392]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.013711846286749743, 0.3112109557967751, 0.2943084251438392]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_793",
    "sat": "def sat(x: float, coeffs: List[float]=[694.5178991436045, 2.3205107470451236, -219.5001962074559]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[694.5178991436045, 2.3205107470451236, -219.5001962074559]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[694.5178991436045, 2.3205107470451236, -219.5001962074559]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_794",
    "sat": "def sat(x: float, coeffs: List[float]=[2.40736205204087, -2.4034963152893583, 0.5754376563338377]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.40736205204087, -2.4034963152893583, 0.5754376563338377]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.40736205204087, -2.4034963152893583, 0.5754376563338377]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_795",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.23159188549232868, -0.7624792900601786, 4.450182586535912]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.23159188549232868, -0.7624792900601786, 4.450182586535912]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.23159188549232868, -0.7624792900601786, 4.450182586535912]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_796",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6151473822706012, 0.454539159107432, -0.036573243995374434]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6151473822706012, 0.454539159107432, -0.036573243995374434]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.6151473822706012, 0.454539159107432, -0.036573243995374434]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_797",
    "sat": "def sat(x: float, coeffs: List[float]=[258.43339231233415, -3.4071279756602677, -951109.0812292844]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[258.43339231233415, -3.4071279756602677, -951109.0812292844]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[258.43339231233415, -3.4071279756602677, -951109.0812292844]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_798",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5262181671041123, -15.864576354238059, 11.480179281788141]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5262181671041123, -15.864576354238059, 11.480179281788141]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5262181671041123, -15.864576354238059, 11.480179281788141]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_799",
    "sat": "def sat(x: float, coeffs: List[float]=[0.26381203306748807, 0.5576287272017577, -0.9805546596803225]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.26381203306748807, 0.5576287272017577, -0.9805546596803225]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.26381203306748807, 0.5576287272017577, -0.9805546596803225]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_800",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5395515482956238, 1.563942945574877, -2.5627134279303623]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5395515482956238, 1.563942945574877, -2.5627134279303623]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5395515482956238, 1.563942945574877, -2.5627134279303623]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_801",
    "sat": "def sat(x: float, coeffs: List[float]=[0.18514760775950392, 3.843463742156519, -0.09458326385480469]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.18514760775950392, 3.843463742156519, -0.09458326385480469]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.18514760775950392, 3.843463742156519, -0.09458326385480469]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_802",
    "sat": "def sat(x: float, coeffs: List[float]=[0.22969517047552435, -0.3939799125797805, -3.100155992091414]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.22969517047552435, -0.3939799125797805, -3.100155992091414]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.22969517047552435, -0.3939799125797805, -3.100155992091414]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_803",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.7154518007080135, 19.263084494153212, 126.23358546579831]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.7154518007080135, 19.263084494153212, 126.23358546579831]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.7154518007080135, 19.263084494153212, 126.23358546579831]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_804",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.125607492971448, 0.3819181796577011, 0.2234702824180827]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.125607492971448, 0.3819181796577011, 0.2234702824180827]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-5.125607492971448, 0.3819181796577011, 0.2234702824180827]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_805",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2355104205864799, -0.18359772886223502, 6.335489346813532]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2355104205864799, -0.18359772886223502, 6.335489346813532]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.2355104205864799, -0.18359772886223502, 6.335489346813532]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_806",
    "sat": "def sat(x: float, coeffs: List[float]=[2.1768502550715287, -2.1098862354073806, -0.3178496814918178]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.1768502550715287, -2.1098862354073806, -0.3178496814918178]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.1768502550715287, -2.1098862354073806, -0.3178496814918178]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_807",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.28414691656403845, 1.8430195111294738, -2.3698230519026167]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.28414691656403845, 1.8430195111294738, -2.3698230519026167]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.28414691656403845, 1.8430195111294738, -2.3698230519026167]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_808",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.5008898279034706, -0.024772247543434583, 0.01273808657425584]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.5008898279034706, -0.024772247543434583, 0.01273808657425584]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.5008898279034706, -0.024772247543434583, 0.01273808657425584]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_809",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1075175325178946, -2.990940197414833, 2.079154079970884]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1075175325178946, -2.990940197414833, 2.079154079970884]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.1075175325178946, -2.990940197414833, 2.079154079970884]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_810",
    "sat": "def sat(x: float, coeffs: List[float]=[0.250320085740474, -0.07376108533640628, -108688.16980562174]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.250320085740474, -0.07376108533640628, -108688.16980562174]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.250320085740474, -0.07376108533640628, -108688.16980562174]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_811",
    "sat": "def sat(x: float, coeffs: List[float]=[94.97982979385898, -1.590611428441943, -27.305696467172382]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[94.97982979385898, -1.590611428441943, -27.305696467172382]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[94.97982979385898, -1.590611428441943, -27.305696467172382]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_812",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7722187081997295, 313.7662149566386, 32.56765070126015]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7722187081997295, 313.7662149566386, 32.56765070126015]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.7722187081997295, 313.7662149566386, 32.56765070126015]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_813",
    "sat": "def sat(x: float, coeffs: List[float]=[6.469092224596967, 0.1051318945783497, -21080.426374800663]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.469092224596967, 0.1051318945783497, -21080.426374800663]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[6.469092224596967, 0.1051318945783497, -21080.426374800663]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_814",
    "sat": "def sat(x: float, coeffs: List[float]=[1.2372474099711086, -13.34362456943635, -6.727358693544215]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2372474099711086, -13.34362456943635, -6.727358693544215]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.2372474099711086, -13.34362456943635, -6.727358693544215]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_815",
    "sat": "def sat(x: float, coeffs: List[float]=[70.5399129390911, -0.4253139831291364, -10930.9090049356]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[70.5399129390911, -0.4253139831291364, -10930.9090049356]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[70.5399129390911, -0.4253139831291364, -10930.9090049356]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_816",
    "sat": "def sat(x: float, coeffs: List[float]=[0.02752717341949003, 0.11234429177084844, 0.016611385613909388]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.02752717341949003, 0.11234429177084844, 0.016611385613909388]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.02752717341949003, 0.11234429177084844, 0.016611385613909388]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_817",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.3878821617151367, -0.25971702087373894, 16541.753678619978]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.3878821617151367, -0.25971702087373894, 16541.753678619978]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.3878821617151367, -0.25971702087373894, 16541.753678619978]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_818",
    "sat": "def sat(x: float, coeffs: List[float]=[0.49207583356696344, 6.353676590451261, 0.27577987793943737]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.49207583356696344, 6.353676590451261, 0.27577987793943737]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.49207583356696344, 6.353676590451261, 0.27577987793943737]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_819",
    "sat": "def sat(x: float, coeffs: List[float]=[14.980103838530928, -0.08256425523944107, -28844.35135283079]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[14.980103838530928, -0.08256425523944107, -28844.35135283079]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[14.980103838530928, -0.08256425523944107, -28844.35135283079]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_820",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.44433687011428685, -9.420718041249465, -0.09468129319197789]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.44433687011428685, -9.420718041249465, -0.09468129319197789]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.44433687011428685, -9.420718041249465, -0.09468129319197789]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_821",
    "sat": "def sat(x: float, coeffs: List[float]=[0.22507934164864904, -0.6577230403728372, -0.020208610806005875]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.22507934164864904, -0.6577230403728372, -0.020208610806005875]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.22507934164864904, -0.6577230403728372, -0.020208610806005875]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_822",
    "sat": "def sat(x: float, coeffs: List[float]=[-44.64630690070833, -0.06818084043258232, 2.1806301196647024]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-44.64630690070833, -0.06818084043258232, 2.1806301196647024]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-44.64630690070833, -0.06818084043258232, 2.1806301196647024]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_823",
    "sat": "def sat(x: float, coeffs: List[float]=[0.010627029678982622, -0.9426870348421631, 0.3853974167517376]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.010627029678982622, -0.9426870348421631, 0.3853974167517376]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.010627029678982622, -0.9426870348421631, 0.3853974167517376]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_824",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.99005299798073, -0.41483205158289554, 2.7102078817655864]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.99005299798073, -0.41483205158289554, 2.7102078817655864]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.99005299798073, -0.41483205158289554, 2.7102078817655864]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_825",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.19802522176511408, -6.866040149268092, -3.062575790081225]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.19802522176511408, -6.866040149268092, -3.062575790081225]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.19802522176511408, -6.866040149268092, -3.062575790081225]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_826",
    "sat": "def sat(x: float, coeffs: List[float]=[-16.4352380750079, 0.185754452842964, 1153.080232519873]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.4352380750079, 0.185754452842964, 1153.080232519873]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-16.4352380750079, 0.185754452842964, 1153.080232519873]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_827",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.45572833283253783, -2.7867048842584996, 4.386928947778938]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.45572833283253783, -2.7867048842584996, 4.386928947778938]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.45572833283253783, -2.7867048842584996, 4.386928947778938]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_828",
    "sat": "def sat(x: float, coeffs: List[float]=[1.4425793072300743, -0.3615484243842671, -88.62892717542103]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.4425793072300743, -0.3615484243842671, -88.62892717542103]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.4425793072300743, -0.3615484243842671, -88.62892717542103]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_829",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6800082694697367, -0.235264108041671, 341.90167462293]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6800082694697367, -0.235264108041671, 341.90167462293]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.6800082694697367, -0.235264108041671, 341.90167462293]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_830",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.15740236506653482, 0.12353836116174007, 0.09031429345768657]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.15740236506653482, 0.12353836116174007, 0.09031429345768657]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.15740236506653482, 0.12353836116174007, 0.09031429345768657]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_831",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5247534873485707, -1.6143696277044002, 606.8964438964283]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5247534873485707, -1.6143696277044002, 606.8964438964283]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5247534873485707, -1.6143696277044002, 606.8964438964283]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_832",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5162180644411554, 0.4280341786370216, -5.213971482689139]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5162180644411554, 0.4280341786370216, -5.213971482689139]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5162180644411554, 0.4280341786370216, -5.213971482689139]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_833",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2620719214797344, -0.2930889860450066, -0.7795018946323774]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2620719214797344, -0.2930889860450066, -0.7795018946323774]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.2620719214797344, -0.2930889860450066, -0.7795018946323774]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_834",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.06572022845265835, -313.18272289862136, 276.8108615228219]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06572022845265835, -313.18272289862136, 276.8108615228219]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.06572022845265835, -313.18272289862136, 276.8108615228219]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_835",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.7847137650384772, -0.1189420722957728, 1.7665406163398436]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.7847137650384772, -0.1189420722957728, 1.7665406163398436]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.7847137650384772, -0.1189420722957728, 1.7665406163398436]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_836",
    "sat": "def sat(x: float, coeffs: List[float]=[485.0904520042836, 4.063410100439811, -1975.8673632833065]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[485.0904520042836, 4.063410100439811, -1975.8673632833065]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[485.0904520042836, 4.063410100439811, -1975.8673632833065]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_837",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.549969201589753, -0.5656463317561808, 0.026197322478786846]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.549969201589753, -0.5656463317561808, 0.026197322478786846]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-5.549969201589753, -0.5656463317561808, 0.026197322478786846]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_838",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3913744015617258, -0.21292382780486196, 3.6443341733033687]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3913744015617258, -0.21292382780486196, 3.6443341733033687]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.3913744015617258, -0.21292382780486196, 3.6443341733033687]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_839",
    "sat": "def sat(x: float, coeffs: List[float]=[-275.15319695957083, -54.982569110223544, 2237.970798424386]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-275.15319695957083, -54.982569110223544, 2237.970798424386]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-275.15319695957083, -54.982569110223544, 2237.970798424386]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_840",
    "sat": "def sat(x: float, coeffs: List[float]=[2.1846569999540866, 0.6924693465198689, -0.09322089395498945]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.1846569999540866, 0.6924693465198689, -0.09322089395498945]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.1846569999540866, 0.6924693465198689, -0.09322089395498945]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_841",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2772376521541677, -12.70400386478371, 2.799698542735308]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2772376521541677, -12.70400386478371, 2.799698542735308]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.2772376521541677, -12.70400386478371, 2.799698542735308]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_842",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8840663604554068, -0.07089189837415666, 0.12952635508831153]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8840663604554068, -0.07089189837415666, 0.12952635508831153]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.8840663604554068, -0.07089189837415666, 0.12952635508831153]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_843",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.8710031244414498, 0.6547695559998742, 9280.144297184925]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8710031244414498, 0.6547695559998742, 9280.144297184925]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.8710031244414498, 0.6547695559998742, 9280.144297184925]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_844",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.19059801945121269, 6.546092998645258, 4.107608807128882]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.19059801945121269, 6.546092998645258, 4.107608807128882]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.19059801945121269, 6.546092998645258, 4.107608807128882]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_845",
    "sat": "def sat(x: float, coeffs: List[float]=[0.330231699381899, -8.135875774678862, 42.33578688970272]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.330231699381899, -8.135875774678862, 42.33578688970272]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.330231699381899, -8.135875774678862, 42.33578688970272]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_846",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.4384636120719898, -0.27203956043542626, 1.844372249133906]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4384636120719898, -0.27203956043542626, 1.844372249133906]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.4384636120719898, -0.27203956043542626, 1.844372249133906]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_847",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.02373222996086133, 0.07557352312579109, 0.7082192910236078]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.02373222996086133, 0.07557352312579109, 0.7082192910236078]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.02373222996086133, 0.07557352312579109, 0.7082192910236078]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_848",
    "sat": "def sat(x: float, coeffs: List[float]=[0.00666387529364824, -0.5621970292000243, 1.980236363155483]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.00666387529364824, -0.5621970292000243, 1.980236363155483]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.00666387529364824, -0.5621970292000243, 1.980236363155483]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_849",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.0664492570523885, 5.668362388194772, 36681.71368915607]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0664492570523885, 5.668362388194772, 36681.71368915607]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.0664492570523885, 5.668362388194772, 36681.71368915607]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_850",
    "sat": "def sat(x: float, coeffs: List[float]=[-17.951404780725035, -0.2386617109742167, 23.562482700266667]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-17.951404780725035, -0.2386617109742167, 23.562482700266667]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-17.951404780725035, -0.2386617109742167, 23.562482700266667]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_851",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.15218355898636826, -1.7096632178114384, -4.791132264598965]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.15218355898636826, -1.7096632178114384, -4.791132264598965]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.15218355898636826, -1.7096632178114384, -4.791132264598965]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_852",
    "sat": "def sat(x: float, coeffs: List[float]=[0.22755126700064335, -2.641916514873293, -22.087405603118075]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.22755126700064335, -2.641916514873293, -22.087405603118075]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.22755126700064335, -2.641916514873293, -22.087405603118075]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_853",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5074736153803072, -1.934782895301103, -0.1029740422536311]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5074736153803072, -1.934782895301103, -0.1029740422536311]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5074736153803072, -1.934782895301103, -0.1029740422536311]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_854",
    "sat": "def sat(x: float, coeffs: List[float]=[70.12243525343992, -153.05334494620004, -129.48608178722455]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[70.12243525343992, -153.05334494620004, -129.48608178722455]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[70.12243525343992, -153.05334494620004, -129.48608178722455]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_855",
    "sat": "def sat(x: float, coeffs: List[float]=[6.602645362770853, -0.1050360490919197, -74181.96519928786]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.602645362770853, -0.1050360490919197, -74181.96519928786]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[6.602645362770853, -0.1050360490919197, -74181.96519928786]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_856",
    "sat": "def sat(x: float, coeffs: List[float]=[0.14650165901578313, 9.63943308810382, 10.489001351298189]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.14650165901578313, 9.63943308810382, 10.489001351298189]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.14650165901578313, 9.63943308810382, 10.489001351298189]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_857",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.2955874726503993, -0.5656875337183759, 244678.01441021037]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2955874726503993, -0.5656875337183759, 244678.01441021037]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.2955874726503993, -0.5656875337183759, 244678.01441021037]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_858",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.07921346081237883, 0.07391657801100233, -0.009933277330728185]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.07921346081237883, 0.07391657801100233, -0.009933277330728185]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.07921346081237883, 0.07391657801100233, -0.009933277330728185]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_859",
    "sat": "def sat(x: float, coeffs: List[float]=[-35.39540750931754, 20.781242258941123, 45.99628116200318]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-35.39540750931754, 20.781242258941123, 45.99628116200318]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-35.39540750931754, 20.781242258941123, 45.99628116200318]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_860",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.11202961052284814, -1.8443695473547785, 2.2468439727922402]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11202961052284814, -1.8443695473547785, 2.2468439727922402]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.11202961052284814, -1.8443695473547785, 2.2468439727922402]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_861",
    "sat": "def sat(x: float, coeffs: List[float]=[285.16113022534483, -0.2695649895133834, -73.36624121970716]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[285.16113022534483, -0.2695649895133834, -73.36624121970716]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[285.16113022534483, -0.2695649895133834, -73.36624121970716]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_862",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.04236014858194329, 0.2590118094844733, 8.971276006751356]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.04236014858194329, 0.2590118094844733, 8.971276006751356]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.04236014858194329, 0.2590118094844733, 8.971276006751356]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_863",
    "sat": "def sat(x: float, coeffs: List[float]=[-18.935355070402466, -0.6513588879386564, 8.474814153439851]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-18.935355070402466, -0.6513588879386564, 8.474814153439851]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-18.935355070402466, -0.6513588879386564, 8.474814153439851]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_864",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.9763880340894358, -0.06923916741738312, 0.00037018056445812766]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.9763880340894358, -0.06923916741738312, 0.00037018056445812766]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.9763880340894358, -0.06923916741738312, 0.00037018056445812766]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_865",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.11073170439163176, -0.25214510172233257, 4828.813462935845]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11073170439163176, -0.25214510172233257, 4828.813462935845]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.11073170439163176, -0.25214510172233257, 4828.813462935845]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_866",
    "sat": "def sat(x: float, coeffs: List[float]=[-9.19821049326328, -0.0018990208238338635, 0.03307149360866827]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.19821049326328, -0.0018990208238338635, 0.03307149360866827]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-9.19821049326328, -0.0018990208238338635, 0.03307149360866827]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_867",
    "sat": "def sat(x: float, coeffs: List[float]=[86.46029957443399, 0.10319214942243911, -5850.118853877379]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[86.46029957443399, 0.10319214942243911, -5850.118853877379]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[86.46029957443399, 0.10319214942243911, -5850.118853877379]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_868",
    "sat": "def sat(x: float, coeffs: List[float]=[55.88302497125639, 1.2575964426639505, -226.20004932602794]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[55.88302497125639, 1.2575964426639505, -226.20004932602794]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[55.88302497125639, 1.2575964426639505, -226.20004932602794]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_869",
    "sat": "def sat(x: float, coeffs: List[float]=[-8.524348858787185, -0.7285217971996502, 0.09319331547843651]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.524348858787185, -0.7285217971996502, 0.09319331547843651]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-8.524348858787185, -0.7285217971996502, 0.09319331547843651]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_870",
    "sat": "def sat(x: float, coeffs: List[float]=[0.43677067769762656, -0.0742261386555545, -37.803238114613215]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.43677067769762656, -0.0742261386555545, -37.803238114613215]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.43677067769762656, -0.0742261386555545, -37.803238114613215]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_871",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3015576488393243, -0.3354714484030243, 0.43584520793717696]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3015576488393243, -0.3354714484030243, 0.43584520793717696]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.3015576488393243, -0.3354714484030243, 0.43584520793717696]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_872",
    "sat": "def sat(x: float, coeffs: List[float]=[7.02354173427074, 7.934365731934754, -13.99890475109422]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.02354173427074, 7.934365731934754, -13.99890475109422]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[7.02354173427074, 7.934365731934754, -13.99890475109422]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_873",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7886016042707062, -0.6029707780588466, 0.5476461257001348]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7886016042707062, -0.6029707780588466, 0.5476461257001348]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.7886016042707062, -0.6029707780588466, 0.5476461257001348]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_874",
    "sat": "def sat(x: float, coeffs: List[float]=[0.46235327160573964, 0.8304605082839265, -78.56801416344038]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.46235327160573964, 0.8304605082839265, -78.56801416344038]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.46235327160573964, 0.8304605082839265, -78.56801416344038]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_875",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.08245235302271887, 376.0569387338208, 241.0106136922083]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.08245235302271887, 376.0569387338208, 241.0106136922083]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.08245235302271887, 376.0569387338208, 241.0106136922083]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_876",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.555268532845839, -0.15427105607844652, 4417.124437839974]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.555268532845839, -0.15427105607844652, 4417.124437839974]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.555268532845839, -0.15427105607844652, 4417.124437839974]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_877",
    "sat": "def sat(x: float, coeffs: List[float]=[-264.434328415058, 3.005048243320454, 19701.71324576655]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-264.434328415058, 3.005048243320454, 19701.71324576655]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-264.434328415058, 3.005048243320454, 19701.71324576655]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_878",
    "sat": "def sat(x: float, coeffs: List[float]=[76.46388341683817, -0.17433863318645715, -40.001388845479234]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[76.46388341683817, -0.17433863318645715, -40.001388845479234]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[76.46388341683817, -0.17433863318645715, -40.001388845479234]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_879",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.008995800428323042, 7.821212159846311, -25.15437974546914]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.008995800428323042, 7.821212159846311, -25.15437974546914]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.008995800428323042, 7.821212159846311, -25.15437974546914]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_880",
    "sat": "def sat(x: float, coeffs: List[float]=[39.98248360252955, 0.05521289588955103, -31.571690786402282]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[39.98248360252955, 0.05521289588955103, -31.571690786402282]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[39.98248360252955, 0.05521289588955103, -31.571690786402282]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_881",
    "sat": "def sat(x: float, coeffs: List[float]=[0.0895426542358746, -1.5445481014708105, 6.647591267128952]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0895426542358746, -1.5445481014708105, 6.647591267128952]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.0895426542358746, -1.5445481014708105, 6.647591267128952]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_882",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6929580364776847, -0.2440456299728281, -0.008755386495301923]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6929580364776847, -0.2440456299728281, -0.008755386495301923]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.6929580364776847, -0.2440456299728281, -0.008755386495301923]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_883",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6976108232222554, 0.7136590978823382, -0.6435122328664387]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6976108232222554, 0.7136590978823382, -0.6435122328664387]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.6976108232222554, 0.7136590978823382, -0.6435122328664387]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_884",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.206461270123812, 0.23978925190877365, 1904.9245186495696]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.206461270123812, 0.23978925190877365, 1904.9245186495696]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.206461270123812, 0.23978925190877365, 1904.9245186495696]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_885",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8958237459369812, 0.37388972211427457, -0.1264361535755142]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8958237459369812, 0.37388972211427457, -0.1264361535755142]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.8958237459369812, 0.37388972211427457, -0.1264361535755142]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_886",
    "sat": "def sat(x: float, coeffs: List[float]=[2.0607640566099885, 1.7512879181806378, 0.09380198765422809]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.0607640566099885, 1.7512879181806378, 0.09380198765422809]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.0607640566099885, 1.7512879181806378, 0.09380198765422809]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_887",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.37317353631363065, 3.421560092962743, 3.980478012998551]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.37317353631363065, 3.421560092962743, 3.980478012998551]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.37317353631363065, 3.421560092962743, 3.980478012998551]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_888",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8985788189836293, -481.6988522534673, -1286.764072240546]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8985788189836293, -481.6988522534673, -1286.764072240546]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.8985788189836293, -481.6988522534673, -1286.764072240546]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_889",
    "sat": "def sat(x: float, coeffs: List[float]=[4.470894066259094, 11.251554921991216, 2.7228509101505978]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.470894066259094, 11.251554921991216, 2.7228509101505978]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[4.470894066259094, 11.251554921991216, 2.7228509101505978]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_890",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.19557228747844654, 0.7048324457471175, 159.69757756862222]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.19557228747844654, 0.7048324457471175, 159.69757756862222]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.19557228747844654, 0.7048324457471175, 159.69757756862222]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_891",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3956976990778913, -0.3356201922103533, 62.98065316184681]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3956976990778913, -0.3356201922103533, 62.98065316184681]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.3956976990778913, -0.3356201922103533, 62.98065316184681]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_892",
    "sat": "def sat(x: float, coeffs: List[float]=[65.07567686556608, 0.8874368147689221, -3643.0373282745577]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[65.07567686556608, 0.8874368147689221, -3643.0373282745577]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[65.07567686556608, 0.8874368147689221, -3643.0373282745577]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_893",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.06060601704716576, 0.6434574146755393, 28.045087454104042]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06060601704716576, 0.6434574146755393, 28.045087454104042]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.06060601704716576, 0.6434574146755393, 28.045087454104042]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_894",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.04871737767772766, 1.5923258103759845, 0.23730188550626632]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.04871737767772766, 1.5923258103759845, 0.23730188550626632]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.04871737767772766, 1.5923258103759845, 0.23730188550626632]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_895",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1643842691496773, -0.53754493446021, 0.04789526010577711]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1643842691496773, -0.53754493446021, 0.04789526010577711]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.1643842691496773, -0.53754493446021, 0.04789526010577711]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_896",
    "sat": "def sat(x: float, coeffs: List[float]=[6.694181861831066, 3.7609096124768673, -110291.53675148074]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.694181861831066, 3.7609096124768673, -110291.53675148074]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[6.694181861831066, 3.7609096124768673, -110291.53675148074]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_897",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.776515112412648, 0.04185752276840097, 0.007786003497838918]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.776515112412648, 0.04185752276840097, 0.007786003497838918]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.776515112412648, 0.04185752276840097, 0.007786003497838918]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_898",
    "sat": "def sat(x: float, coeffs: List[float]=[6.30161694281798, -1.464965116853487, 0.07602302908754127]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.30161694281798, -1.464965116853487, 0.07602302908754127]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[6.30161694281798, -1.464965116853487, 0.07602302908754127]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_899",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2123168224849339, -0.8882489461957914, -0.9277927101342854]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2123168224849339, -0.8882489461957914, -0.9277927101342854]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.2123168224849339, -0.8882489461957914, -0.9277927101342854]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_900",
    "sat": "def sat(x: float, coeffs: List[float]=[-8.90892505654058, 3.391394036676433, 7600.5322087645]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.90892505654058, 3.391394036676433, 7600.5322087645]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-8.90892505654058, 3.391394036676433, 7600.5322087645]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_901",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.07307935045777818, 0.09870765852533858, -0.02702584966030107]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.07307935045777818, 0.09870765852533858, -0.02702584966030107]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.07307935045777818, 0.09870765852533858, -0.02702584966030107]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_902",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.0013275968579225712, -3.5299965644068076, -1.5725376619643552]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0013275968579225712, -3.5299965644068076, -1.5725376619643552]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.0013275968579225712, -3.5299965644068076, -1.5725376619643552]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_903",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5711015802352762, -0.5089622233835459, -443.42119535097646]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5711015802352762, -0.5089622233835459, -443.42119535097646]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5711015802352762, -0.5089622233835459, -443.42119535097646]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_904",
    "sat": "def sat(x: float, coeffs: List[float]=[0.10058402950295735, 0.001011655210768625, -4.2211175563583046e-05]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.10058402950295735, 0.001011655210768625, -4.2211175563583046e-05]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.10058402950295735, 0.001011655210768625, -4.2211175563583046e-05]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_905",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.36970554966781705, -40.223466833832695, 78.48042348075505]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.36970554966781705, -40.223466833832695, 78.48042348075505]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.36970554966781705, -40.223466833832695, 78.48042348075505]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_906",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.289046127218717, -0.003775011888200878, 0.20806709254514122]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.289046127218717, -0.003775011888200878, 0.20806709254514122]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.289046127218717, -0.003775011888200878, 0.20806709254514122]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_907",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2706822376238926, -1.972360513835361, 3.1478006363626116]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2706822376238926, -1.972360513835361, 3.1478006363626116]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.2706822376238926, -1.972360513835361, 3.1478006363626116]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_908",
    "sat": "def sat(x: float, coeffs: List[float]=[24.5570742077693, -44.91158388463045, -295629.4411357004]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[24.5570742077693, -44.91158388463045, -295629.4411357004]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[24.5570742077693, -44.91158388463045, -295629.4411357004]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_909",
    "sat": "def sat(x: float, coeffs: List[float]=[9.587501455293422, -15.468940930264898, 1.9844615445556772]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.587501455293422, -15.468940930264898, 1.9844615445556772]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[9.587501455293422, -15.468940930264898, 1.9844615445556772]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_910",
    "sat": "def sat(x: float, coeffs: List[float]=[9.112508521341296, -2.296884865252071, 0.13846403616570616]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.112508521341296, -2.296884865252071, 0.13846403616570616]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[9.112508521341296, -2.296884865252071, 0.13846403616570616]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_911",
    "sat": "def sat(x: float, coeffs: List[float]=[-33.88209623628519, 145.30444941287246, 930.2287024234549]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-33.88209623628519, 145.30444941287246, 930.2287024234549]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-33.88209623628519, 145.30444941287246, 930.2287024234549]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_912",
    "sat": "def sat(x: float, coeffs: List[float]=[-7.643382416578171, -0.4224858575762518, 381.85410654250796]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.643382416578171, -0.4224858575762518, 381.85410654250796]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-7.643382416578171, -0.4224858575762518, 381.85410654250796]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_913",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8332906098180413, -0.8317920750763205, -771.641192967875]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8332906098180413, -0.8317920750763205, -771.641192967875]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.8332906098180413, -0.8317920750763205, -771.641192967875]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_914",
    "sat": "def sat(x: float, coeffs: List[float]=[2.65208026698925, 0.49993551585919116, -9.194054878148043]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.65208026698925, 0.49993551585919116, -9.194054878148043]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.65208026698925, 0.49993551585919116, -9.194054878148043]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_915",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.35238302592998966, -0.3744912845930067, 1.996580669913131]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.35238302592998966, -0.3744912845930067, 1.996580669913131]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.35238302592998966, -0.3744912845930067, 1.996580669913131]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_916",
    "sat": "def sat(x: float, coeffs: List[float]=[5.468712127156688, 1.236034532623797, -5117.65649814328]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.468712127156688, 1.236034532623797, -5117.65649814328]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[5.468712127156688, 1.236034532623797, -5117.65649814328]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_917",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7132705298368832, -0.10309691993769217, 0.18033055385938743]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7132705298368832, -0.10309691993769217, 0.18033055385938743]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.7132705298368832, -0.10309691993769217, 0.18033055385938743]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_918",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.4039610618525624, -7.959672641908231, -4.651410779671851]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.4039610618525624, -7.959672641908231, -4.651410779671851]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.4039610618525624, -7.959672641908231, -4.651410779671851]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_919",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1675779348320833, -454.707377670417, -320.4484650123958]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1675779348320833, -454.707377670417, -320.4484650123958]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.1675779348320833, -454.707377670417, -320.4484650123958]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_920",
    "sat": "def sat(x: float, coeffs: List[float]=[0.27891904214077196, -0.38629230370669615, -0.36749111997253947]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.27891904214077196, -0.38629230370669615, -0.36749111997253947]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.27891904214077196, -0.38629230370669615, -0.36749111997253947]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_921",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.010567709172265127, 0.20360824226570937, 0.007278057988971974]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.010567709172265127, 0.20360824226570937, 0.007278057988971974]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.010567709172265127, 0.20360824226570937, 0.007278057988971974]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_922",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8251205330336334, 0.5519313691722155, 0.12756144477727033]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8251205330336334, 0.5519313691722155, 0.12756144477727033]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.8251205330336334, 0.5519313691722155, 0.12756144477727033]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_923",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.22339113324779425, 127.06690570701153, -90.50347698542366]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.22339113324779425, 127.06690570701153, -90.50347698542366]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.22339113324779425, 127.06690570701153, -90.50347698542366]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_924",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4092230342002116, 0.20213151042394836, 2517.5879426248116]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4092230342002116, 0.20213151042394836, 2517.5879426248116]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.4092230342002116, 0.20213151042394836, 2517.5879426248116]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_925",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.9867363173897865, 3.804628440722306, 5.541491567585912]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.9867363173897865, 3.804628440722306, 5.541491567585912]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.9867363173897865, 3.804628440722306, 5.541491567585912]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_926",
    "sat": "def sat(x: float, coeffs: List[float]=[4.0588441231707675, 3.36072234642403, 0.6646201037255532]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.0588441231707675, 3.36072234642403, 0.6646201037255532]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[4.0588441231707675, 3.36072234642403, 0.6646201037255532]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_927",
    "sat": "def sat(x: float, coeffs: List[float]=[0.0909224329496523, 0.4076824557453603, 0.020632114583404217]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0909224329496523, 0.4076824557453603, 0.020632114583404217]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.0909224329496523, 0.4076824557453603, 0.020632114583404217]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_928",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.29616981470137005, -54.80798594829246, -3.753230168777394]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.29616981470137005, -54.80798594829246, -3.753230168777394]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.29616981470137005, -54.80798594829246, -3.753230168777394]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_929",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4059846708889947, 6.377029123399622, 0.6723868072677803]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4059846708889947, 6.377029123399622, 0.6723868072677803]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.4059846708889947, 6.377029123399622, 0.6723868072677803]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_930",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7645759394701256, -1.266367183360517, 0.46510139943382733]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7645759394701256, -1.266367183360517, 0.46510139943382733]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.7645759394701256, -1.266367183360517, 0.46510139943382733]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_931",
    "sat": "def sat(x: float, coeffs: List[float]=[0.02584328673654131, 0.3666075060766558, 0.673424910931035]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.02584328673654131, 0.3666075060766558, 0.673424910931035]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.02584328673654131, 0.3666075060766558, 0.673424910931035]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_932",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.09828929456961462, -0.917804460023493, 0.5345825745092396]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.09828929456961462, -0.917804460023493, 0.5345825745092396]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.09828929456961462, -0.917804460023493, 0.5345825745092396]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_933",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8327299809172173, 8.835308972002746, -0.4296621199130858]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8327299809172173, 8.835308972002746, -0.4296621199130858]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.8327299809172173, 8.835308972002746, -0.4296621199130858]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_934",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5197700099267135, -5.859983641326263, 2804.855061708687]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5197700099267135, -5.859983641326263, 2804.855061708687]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5197700099267135, -5.859983641326263, 2804.855061708687]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_935",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.041222920306807, -1.0506684396836496, 155826.90062697677]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.041222920306807, -1.0506684396836496, 155826.90062697677]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.041222920306807, -1.0506684396836496, 155826.90062697677]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_936",
    "sat": "def sat(x: float, coeffs: List[float]=[-37.91400070740469, -0.13753928028495058, 63.94128514859159]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-37.91400070740469, -0.13753928028495058, 63.94128514859159]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-37.91400070740469, -0.13753928028495058, 63.94128514859159]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_937",
    "sat": "def sat(x: float, coeffs: List[float]=[101.93687403646298, 2.577388326434228, -194.94140715302706]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[101.93687403646298, 2.577388326434228, -194.94140715302706]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[101.93687403646298, 2.577388326434228, -194.94140715302706]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_938",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.9611601699923313, -3.548347550151545, 3.7454322117774037]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.9611601699923313, -3.548347550151545, 3.7454322117774037]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.9611601699923313, -3.548347550151545, 3.7454322117774037]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_939",
    "sat": "def sat(x: float, coeffs: List[float]=[10.062611050029053, 0.11678322779955803, -18428.562070744338]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.062611050029053, 0.11678322779955803, -18428.562070744338]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[10.062611050029053, 0.11678322779955803, -18428.562070744338]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_940",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.124645456977582, -0.7973832775155407, 9.8294766560506]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.124645456977582, -0.7973832775155407, 9.8294766560506]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-5.124645456977582, -0.7973832775155407, 9.8294766560506]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_941",
    "sat": "def sat(x: float, coeffs: List[float]=[0.06005765052166464, -141.42510292861846, -50.32923739497208]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06005765052166464, -141.42510292861846, -50.32923739497208]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.06005765052166464, -141.42510292861846, -50.32923739497208]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_942",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3312180745952607, 2.187915900057191, 23.357905929837887]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3312180745952607, 2.187915900057191, 23.357905929837887]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.3312180745952607, 2.187915900057191, 23.357905929837887]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_943",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5035073356649752, -0.11310891254512123, 0.02532733886440617]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5035073356649752, -0.11310891254512123, 0.02532733886440617]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.5035073356649752, -0.11310891254512123, 0.02532733886440617]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_944",
    "sat": "def sat(x: float, coeffs: List[float]=[1.8994658400128548, -0.2244343428829282, -3603.1484337092647]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8994658400128548, -0.2244343428829282, -3603.1484337092647]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.8994658400128548, -0.2244343428829282, -3603.1484337092647]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_945",
    "sat": "def sat(x: float, coeffs: List[float]=[4.4340243812388325, -0.28314137552715923, 0.003062055896976494]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.4340243812388325, -0.28314137552715923, 0.003062055896976494]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[4.4340243812388325, -0.28314137552715923, 0.003062055896976494]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_946",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.11322504462351717, -0.24528847420312153, 1.042613447549464]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11322504462351717, -0.24528847420312153, 1.042613447549464]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.11322504462351717, -0.24528847420312153, 1.042613447549464]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_947",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.44263028333439625, -0.028096795030796356, 0.6654240022840558]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.44263028333439625, -0.028096795030796356, 0.6654240022840558]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.44263028333439625, -0.028096795030796356, 0.6654240022840558]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_948",
    "sat": "def sat(x: float, coeffs: List[float]=[1.1167251338074993, 0.8224064357988747, 0.09476430186597094]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1167251338074993, 0.8224064357988747, 0.09476430186597094]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.1167251338074993, 0.8224064357988747, 0.09476430186597094]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_949",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.0363306968527095, -0.6873261452015001, 0.02581092062825402]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0363306968527095, -0.6873261452015001, 0.02581092062825402]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.0363306968527095, -0.6873261452015001, 0.02581092062825402]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_950",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.619613339732655, 2.0900377218806647, 6.573925331456328]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.619613339732655, 2.0900377218806647, 6.573925331456328]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-4.619613339732655, 2.0900377218806647, 6.573925331456328]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_951",
    "sat": "def sat(x: float, coeffs: List[float]=[-11.416417352993891, 4.456977879751279, 1811488.225422431]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.416417352993891, 4.456977879751279, 1811488.225422431]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-11.416417352993891, 4.456977879751279, 1811488.225422431]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_952",
    "sat": "def sat(x: float, coeffs: List[float]=[0.22428692312577736, -0.26943349333096767, -259.95905130286206]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.22428692312577736, -0.26943349333096767, -259.95905130286206]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.22428692312577736, -0.26943349333096767, -259.95905130286206]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_953",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.15692675638090914, 0.16124594209258958, -0.029058405036115495]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.15692675638090914, 0.16124594209258958, -0.029058405036115495]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.15692675638090914, 0.16124594209258958, -0.029058405036115495]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_954",
    "sat": "def sat(x: float, coeffs: List[float]=[7.630923723317923, -0.10032129903225469, -1.947190393622824]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.630923723317923, -0.10032129903225469, -1.947190393622824]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[7.630923723317923, -0.10032129903225469, -1.947190393622824]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_955",
    "sat": "def sat(x: float, coeffs: List[float]=[-45.68747794490008, -19.150076020125663, -0.3792406751480491]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-45.68747794490008, -19.150076020125663, -0.3792406751480491]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-45.68747794490008, -19.150076020125663, -0.3792406751480491]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_956",
    "sat": "def sat(x: float, coeffs: List[float]=[0.03282014856454148, -0.025694307446288017, -0.5150076812600034]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.03282014856454148, -0.025694307446288017, -0.5150076812600034]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.03282014856454148, -0.025694307446288017, -0.5150076812600034]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_957",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8117811004512857, -2.7180269237906938, -82.62129226530558]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8117811004512857, -2.7180269237906938, -82.62129226530558]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.8117811004512857, -2.7180269237906938, -82.62129226530558]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_958",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5261351305625817, 0.12053525084183662, -0.021548934629135784]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5261351305625817, 0.12053525084183662, -0.021548934629135784]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5261351305625817, 0.12053525084183662, -0.021548934629135784]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_959",
    "sat": "def sat(x: float, coeffs: List[float]=[2.1620950677792647, 0.641719214881141, -0.040761597865090204]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.1620950677792647, 0.641719214881141, -0.040761597865090204]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.1620950677792647, 0.641719214881141, -0.040761597865090204]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_960",
    "sat": "def sat(x: float, coeffs: List[float]=[1.514276516494715, -0.02664624558028376, -0.0016096113824350651]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.514276516494715, -0.02664624558028376, -0.0016096113824350651]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.514276516494715, -0.02664624558028376, -0.0016096113824350651]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_961",
    "sat": "def sat(x: float, coeffs: List[float]=[4.741852663638238, 0.41994992510707024, -4863.315449227412]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.741852663638238, 0.41994992510707024, -4863.315449227412]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[4.741852663638238, 0.41994992510707024, -4863.315449227412]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_962",
    "sat": "def sat(x: float, coeffs: List[float]=[0.06591892945256173, -4.513861774880373, 3.347831303624187]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06591892945256173, -4.513861774880373, 3.347831303624187]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.06591892945256173, -4.513861774880373, 3.347831303624187]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_963",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.03143690757700638, -2.775152152663298, 0.17830055104569983]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.03143690757700638, -2.775152152663298, 0.17830055104569983]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.03143690757700638, -2.775152152663298, 0.17830055104569983]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_964",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.3888380531136466, -230.06761448795476, -33.558657032992855]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.3888380531136466, -230.06761448795476, -33.558657032992855]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.3888380531136466, -230.06761448795476, -33.558657032992855]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_965",
    "sat": "def sat(x: float, coeffs: List[float]=[2.7921390549255904, 0.015075269542405012, -11669.081477298942]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.7921390549255904, 0.015075269542405012, -11669.081477298942]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.7921390549255904, 0.015075269542405012, -11669.081477298942]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_966",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6248129821405349, 25.078326183913713, -2.934677632457069]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6248129821405349, 25.078326183913713, -2.934677632457069]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.6248129821405349, 25.078326183913713, -2.934677632457069]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_967",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2986173803815893, -4.582029779390501, 13.22552680242701]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2986173803815893, -4.582029779390501, 13.22552680242701]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.2986173803815893, -4.582029779390501, 13.22552680242701]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_968",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.39911365020505246, 386.8862909741054, 36714.70648615811]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.39911365020505246, 386.8862909741054, 36714.70648615811]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.39911365020505246, 386.8862909741054, 36714.70648615811]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_969",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.323047191890515, 0.2600574688613026, 0.3444458652271901]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.323047191890515, 0.2600574688613026, 0.3444458652271901]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.323047191890515, 0.2600574688613026, 0.3444458652271901]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_970",
    "sat": "def sat(x: float, coeffs: List[float]=[-7.877441102657912, -0.004424021735269197, 11.3402382608144]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.877441102657912, -0.004424021735269197, 11.3402382608144]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-7.877441102657912, -0.004424021735269197, 11.3402382608144]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_971",
    "sat": "def sat(x: float, coeffs: List[float]=[-55.947793319535585, 0.037413870843388354, 11.189530483336064]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-55.947793319535585, 0.037413870843388354, 11.189530483336064]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-55.947793319535585, 0.037413870843388354, 11.189530483336064]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_972",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.6527422905007316, -102.75936838713136, -27.829070510807256]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.6527422905007316, -102.75936838713136, -27.829070510807256]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.6527422905007316, -102.75936838713136, -27.829070510807256]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_973",
    "sat": "def sat(x: float, coeffs: List[float]=[0.08809187364713633, -0.25052278120321764, -0.7183892773426739]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08809187364713633, -0.25052278120321764, -0.7183892773426739]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.08809187364713633, -0.25052278120321764, -0.7183892773426739]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_974",
    "sat": "def sat(x: float, coeffs: List[float]=[-16.90491825262573, 1.2179245397290417, -0.021547694265221885]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.90491825262573, 1.2179245397290417, -0.021547694265221885]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-16.90491825262573, 1.2179245397290417, -0.021547694265221885]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_975",
    "sat": "def sat(x: float, coeffs: List[float]=[0.0025444203934716914, -0.2527175563748297, -21.13272529662908]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0025444203934716914, -0.2527175563748297, -21.13272529662908]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.0025444203934716914, -0.2527175563748297, -21.13272529662908]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_976",
    "sat": "def sat(x: float, coeffs: List[float]=[1.1164870983821658, 0.011496130077091419, -0.25767979991851697]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1164870983821658, 0.011496130077091419, -0.25767979991851697]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.1164870983821658, 0.011496130077091419, -0.25767979991851697]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_977",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.019174228412239886, -0.5677596611126812, -1.0488981790094878]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.019174228412239886, -0.5677596611126812, -1.0488981790094878]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.019174228412239886, -0.5677596611126812, -1.0488981790094878]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_978",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.18169140060845845, 5.818510786877636, 34.78211598469135]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.18169140060845845, 5.818510786877636, 34.78211598469135]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.18169140060845845, 5.818510786877636, 34.78211598469135]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_979",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.40811019700608764, -0.04863131198141272, 0.6552871560123269]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.40811019700608764, -0.04863131198141272, 0.6552871560123269]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.40811019700608764, -0.04863131198141272, 0.6552871560123269]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_980",
    "sat": "def sat(x: float, coeffs: List[float]=[2.4969046911650623, -0.08812876213157865, -3.072353067352011]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.4969046911650623, -0.08812876213157865, -3.072353067352011]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.4969046911650623, -0.08812876213157865, -3.072353067352011]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_981",
    "sat": "def sat(x: float, coeffs: List[float]=[412.73031832349255, 0.12725280599518474, -1.5051068196901332]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[412.73031832349255, 0.12725280599518474, -1.5051068196901332]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[412.73031832349255, 0.12725280599518474, -1.5051068196901332]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_982",
    "sat": "def sat(x: float, coeffs: List[float]=[3.377288916338317, 0.31261070528214635, -0.001188188564674994]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.377288916338317, 0.31261070528214635, -0.001188188564674994]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.377288916338317, 0.31261070528214635, -0.001188188564674994]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_983",
    "sat": "def sat(x: float, coeffs: List[float]=[0.28543652482165194, 0.9615641915386974, 0.791601467150393]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.28543652482165194, 0.9615641915386974, 0.791601467150393]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.28543652482165194, 0.9615641915386974, 0.791601467150393]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_984",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.16324110070604822, -0.8854518661943804, -1.0661851673560632]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.16324110070604822, -0.8854518661943804, -1.0661851673560632]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.16324110070604822, -0.8854518661943804, -1.0661851673560632]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_985",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.09314038887113973, 3.955594105202762, 39.5871450680782]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.09314038887113973, 3.955594105202762, 39.5871450680782]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.09314038887113973, 3.955594105202762, 39.5871450680782]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_986",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.279652214052426, 5.740345549365284, -4.605176509211903]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.279652214052426, 5.740345549365284, -4.605176509211903]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.279652214052426, 5.740345549365284, -4.605176509211903]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_987",
    "sat": "def sat(x: float, coeffs: List[float]=[-79.92751177477533, -0.07455952908328678, 68915.26845634094]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-79.92751177477533, -0.07455952908328678, 68915.26845634094]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-79.92751177477533, -0.07455952908328678, 68915.26845634094]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_988",
    "sat": "def sat(x: float, coeffs: List[float]=[0.39322148752128444, -2.2733480297241693, 3.2744993426007105]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.39322148752128444, -2.2733480297241693, 3.2744993426007105]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.39322148752128444, -2.2733480297241693, 3.2744993426007105]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_989",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.018822058965368, 0.02279005968769991, 0.051716124155498804]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.018822058965368, 0.02279005968769991, 0.051716124155498804]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.018822058965368, 0.02279005968769991, 0.051716124155498804]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_990",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.853100386443309, 0.10483863999548378, 9.482715315173598]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.853100386443309, 0.10483863999548378, 9.482715315173598]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-5.853100386443309, 0.10483863999548378, 9.482715315173598]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_991",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.376671328072346, 0.834133138919163, 0.6380438874027885]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.376671328072346, 0.834133138919163, 0.6380438874027885]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.376671328072346, 0.834133138919163, 0.6380438874027885]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_992",
    "sat": "def sat(x: float, coeffs: List[float]=[1.327528744344571, -0.8498855000821254, -0.1256201022583134]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.327528744344571, -0.8498855000821254, -0.1256201022583134]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.327528744344571, -0.8498855000821254, -0.1256201022583134]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_993",
    "sat": "def sat(x: float, coeffs: List[float]=[0.21920830209909536, -2.391213922048024, 0.6391327274214461]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.21920830209909536, -2.391213922048024, 0.6391327274214461]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.21920830209909536, -2.391213922048024, 0.6391327274214461]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_994",
    "sat": "def sat(x: float, coeffs: List[float]=[0.34882535939067294, -0.5367226993664453, -31.693050136223743]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.34882535939067294, -0.5367226993664453, -31.693050136223743]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.34882535939067294, -0.5367226993664453, -31.693050136223743]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_995",
    "sat": "def sat(x: float, coeffs: List[float]=[2.170056379767733, 6.733576611762595, 1.5074919556799595]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.170056379767733, 6.733576611762595, 1.5074919556799595]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.170056379767733, 6.733576611762595, 1.5074919556799595]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_996",
    "sat": "def sat(x: float, coeffs: List[float]=[0.014096799410401761, 40.99929897775083, 34.23343262781454]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.014096799410401761, 40.99929897775083, 34.23343262781454]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.014096799410401761, 40.99929897775083, 34.23343262781454]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_997",
    "sat": "def sat(x: float, coeffs: List[float]=[1.3671121505192645, -4.016589833004562, 0.580288769913314]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3671121505192645, -4.016589833004562, 0.580288769913314]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.3671121505192645, -4.016589833004562, 0.580288769913314]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_998",
    "sat": "def sat(x: float, coeffs: List[float]=[0.024410878783343765, -13.282779573287563, -1.3038755823648833]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.024410878783343765, -13.282779573287563, -1.3038755823648833]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.024410878783343765, -13.282779573287563, -1.3038755823648833]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_999",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.112317268788513, -11.295831551364378, 961.4886658958102]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.112317268788513, -11.295831551364378, 961.4886658958102]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-5.112317268788513, -11.295831551364378, 961.4886658958102]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "AllQuadraticRoots_0",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.3, -0.5]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3, -0.5]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_1",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.4883591764389812, -0.04269178817779701]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4883591764389812, -0.04269178817779701]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_2",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.430202468425092, -2.7205642489840134]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.430202468425092, -2.7205642489840134]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_3",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.0663897295343405, -16718.908089477758]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.0663897295343405, -16718.908089477758]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_4",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.03350329203686845, -0.44634672818239335]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.03350329203686845, -0.44634672818239335]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_5",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.802579228809115, -0.12824716809969902]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.802579228809115, -0.12824716809969902]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_6",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7916837918544298, -677.9053645675502]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7916837918544298, -677.9053645675502]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_7",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.2995344344578265, 0.013150623448414195]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2995344344578265, 0.013150623448414195]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_8",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[13.764250547432011, 1.2379827142349586]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[13.764250547432011, 1.2379827142349586]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_9",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.016994529097454098, -0.3941392748174025]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.016994529097454098, -0.3941392748174025]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_10",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6746523261533092, -0.2691877316770924]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6746523261533092, -0.2691877316770924]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_11",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.1436829751481057, -3421.9823058968127]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1436829751481057, -3421.9823058968127]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_12",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-687.9562883626216, -1457.5298968687837]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-687.9562883626216, -1457.5298968687837]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_13",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[123.36975374138694, -2.98823651127739]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[123.36975374138694, -2.98823651127739]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_14",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.1855740527696311, -0.945583562501316]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1855740527696311, -0.945583562501316]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_15",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.1353786029678754, -3.027105938109256]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.1353786029678754, -3.027105938109256]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_16",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.15510272873440897, -951.9674476633012]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.15510272873440897, -951.9674476633012]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_17",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-23.17736275244249, -128.93680570025992]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-23.17736275244249, -128.93680570025992]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_18",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.3675477396771017, -0.8804992249796765]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3675477396771017, -0.8804992249796765]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_19",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.20160760491266183, -0.40407570222024014]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.20160760491266183, -0.40407570222024014]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_20",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.48132350019178477, 0.057419661019500204]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.48132350019178477, 0.057419661019500204]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_21",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.636453021482143, -40.89891017361483]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.636453021482143, -40.89891017361483]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_22",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.09910438416125156, -0.001151651158628947]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.09910438416125156, -0.001151651158628947]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_23",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[13.707583168446115, -22.66339486088194]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[13.707583168446115, -22.66339486088194]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_24",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.11473614042130476, 0.003193893505704727]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.11473614042130476, 0.003193893505704727]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_25",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.1163095446010303, 0.13667696951063624]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1163095446010303, 0.13667696951063624]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_26",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.06719369028131417, -0.008106398096493293]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06719369028131417, -0.008106398096493293]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_27",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.2207632056733093, 0.8083724674525061]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.2207632056733093, 0.8083724674525061]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_28",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.05798143497470254, -2.9302829415559097]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.05798143497470254, -2.9302829415559097]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_29",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.632693852552215, -0.2013546055076868]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.632693852552215, -0.2013546055076868]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_30",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[15.79885325622581, -1.2054735280918687]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[15.79885325622581, -1.2054735280918687]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_31",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.189428898650176, -0.7244293617325729]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.189428898650176, -0.7244293617325729]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_32",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7267502611134479, -0.027492726776481374]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7267502611134479, -0.027492726776481374]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_33",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.103956370134093, -12434.373722652008]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.103956370134093, -12434.373722652008]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_34",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-12.583713443838292, -11.155941323114359]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.583713443838292, -11.155941323114359]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_35",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-21.036284371096343, -53.084416238178]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-21.036284371096343, -53.084416238178]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_36",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.9946023678959464, -24.65390420853619]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.9946023678959464, -24.65390420853619]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_37",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.02018852422853401, -0.15656799663664936]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.02018852422853401, -0.15656799663664936]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_38",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.042104653027301785, -895.1902652768423]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.042104653027301785, -895.1902652768423]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_39",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6025148051114454, 0.06607169097950649]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6025148051114454, 0.06607169097950649]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_40",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.330636919295993, -1066.7960805336565]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.330636919295993, -1066.7960805336565]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_41",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.16211749369565767, -0.03146581301258777]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.16211749369565767, -0.03146581301258777]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_42",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5977692496782884, 0.013942498448020252]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5977692496782884, 0.013942498448020252]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_43",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.818665546611533, -3.575846709103053]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.818665546611533, -3.575846709103053]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_44",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.21636142619456256, -33.20147387745207]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.21636142619456256, -33.20147387745207]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_45",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.632935967067831, 7.511509675728]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.632935967067831, 7.511509675728]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_46",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.0036116214536594526, -102.4439385237057]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0036116214536594526, -102.4439385237057]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_47",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.18093423199807193, -20.48262512477172]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.18093423199807193, -20.48262512477172]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_48",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.9634414273386422, 3.332409791166927]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.9634414273386422, 3.332409791166927]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_49",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[22.858223345618068, -19344.359825021453]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[22.858223345618068, -19344.359825021453]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_50",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.679096880248214, -13.241397656834021]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.679096880248214, -13.241397656834021]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_51",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[18.898108772179203, -22.912811739961953]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[18.898108772179203, -22.912811739961953]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_52",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.10997910766651404, 0.0004344333999321543]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.10997910766651404, 0.0004344333999321543]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_53",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[190.19860657406835, -393.368333900987]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[190.19860657406835, -393.368333900987]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_54",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5714199750100514, -0.02332873075787567]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5714199750100514, -0.02332873075787567]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_55",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.625009058044054, 0.7911014879103426]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.625009058044054, 0.7911014879103426]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_56",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.7242743775910062, -2.863706310683148]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7242743775910062, -2.863706310683148]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_57",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.10579635226190875, -0.019803744980181677]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.10579635226190875, -0.019803744980181677]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_58",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.16976782397788845, -53.685281375716066]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.16976782397788845, -53.685281375716066]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_59",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.597388240994857, -0.2994910064290375]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.597388240994857, -0.2994910064290375]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_60",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.9349618558273344, -960.1468831185695]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9349618558273344, -960.1468831185695]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_61",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5682776402942085, -0.48726391403783564]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5682776402942085, -0.48726391403783564]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_62",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7249646708998969, 0.13123240128061886]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7249646708998969, 0.13123240128061886]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_63",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6026247789849065, -244.9791920251854]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6026247789849065, -244.9791920251854]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_64",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.9095702341101041, -92.6458311030759]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9095702341101041, -92.6458311030759]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_65",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.45465823208804973, -10.58277349450643]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.45465823208804973, -10.58277349450643]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_66",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.021310727023708953, -719.7550213791922]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.021310727023708953, -719.7550213791922]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_67",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.418729851478276, -7298.911314319898]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.418729851478276, -7298.911314319898]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_68",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.699143356434129, 0.8956021877951724]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.699143356434129, 0.8956021877951724]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_69",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.024366398775258997, -1105.6050258243665]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.024366398775258997, -1105.6050258243665]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_70",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.678290959735627, 0.362271426779617]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.678290959735627, 0.362271426779617]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_71",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.522134952539895, -0.20684479552587962]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.522134952539895, -0.20684479552587962]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_72",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[436.70853514027925, -292.18885635645427]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[436.70853514027925, -292.18885635645427]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_73",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.398418201622534, -57.8977673957375]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.398418201622534, -57.8977673957375]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_74",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.944270696270104, 18.729130743810956]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.944270696270104, 18.729130743810956]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_75",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.4138040337556516, -0.08586577257568229]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4138040337556516, -0.08586577257568229]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_76",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.09753153205350766, -372.3535675720161]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.09753153205350766, -372.3535675720161]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_77",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-41.64030552391953, -1.3247159336805667]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-41.64030552391953, -1.3247159336805667]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_78",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.013829444186815865, -12.59243881083689]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.013829444186815865, -12.59243881083689]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_79",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-20.568225913859358, -62.729256339107124]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-20.568225913859358, -62.729256339107124]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_80",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.6998395309585594, -3.303340856733609]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6998395309585594, -3.303340856733609]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_81",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6482675280447344, -21.461199080490196]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6482675280447344, -21.461199080490196]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_82",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5095631597431006, -1448.6929271329004]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5095631597431006, -1448.6929271329004]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_83",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.1932209061291057, -2.0776464832951542]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.1932209061291057, -2.0776464832951542]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_84",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[9.70203748307487, 2.217428043501129]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.70203748307487, 2.217428043501129]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_85",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8260356231854636, -0.09491880964820508]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8260356231854636, -0.09491880964820508]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_86",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[30.32050031983974, 0.2078072753138973]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[30.32050031983974, 0.2078072753138973]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_87",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.0168658107995225, -1.98607105328928]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0168658107995225, -1.98607105328928]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_88",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.44371953768749456, -20751.362290908375]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.44371953768749456, -20751.362290908375]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_89",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.42751789894634706, -16.948660552035737]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.42751789894634706, -16.948660552035737]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_90",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-11.510747103367287, -0.3378896499370978]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.510747103367287, -0.3378896499370978]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_91",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.10505734766632362, -1.1783847345877672]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.10505734766632362, -1.1783847345877672]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_92",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.3699056679941009, -2.2956435235873505]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3699056679941009, -2.2956435235873505]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_93",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3138490777719001, -0.1785834910757689]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3138490777719001, -0.1785834910757689]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_94",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.573843744872974, 1.2581825387694239]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.573843744872974, 1.2581825387694239]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_95",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3177930100716277, -0.27357959638161433]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3177930100716277, -0.27357959638161433]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_96",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[55.43863703211542, -0.9057704038006216]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[55.43863703211542, -0.9057704038006216]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_97",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[10.027325208309616, -19.00640349091701]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.027325208309616, -19.00640349091701]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_98",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5744932980497454, -91.4498419860153]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5744932980497454, -91.4498419860153]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_99",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.0636282172013805, 0.09706052006304054]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.0636282172013805, 0.09706052006304054]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_100",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.9333199128670153, -1879.0132132401768]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.9333199128670153, -1879.0132132401768]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_101",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-47.4140980174411, 75.5862899890292]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-47.4140980174411, 75.5862899890292]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_102",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.0395006250150176, -14.58007958209592]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0395006250150176, -14.58007958209592]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_103",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.1890615076205601, -0.004718395131881631]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1890615076205601, -0.004718395131881631]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_104",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-152.37340564248697, -656.6394261080375]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-152.37340564248697, -656.6394261080375]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_105",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.27127251919049417, -811.559609968209]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.27127251919049417, -811.559609968209]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_106",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[13.39765930465837, 14.168574844885939]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[13.39765930465837, 14.168574844885939]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_107",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.17999510321244294, -0.11590579779546642]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.17999510321244294, -0.11590579779546642]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_108",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.7046653055386245, 0.010025849776294211]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7046653055386245, 0.010025849776294211]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_109",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.22820131604429497, 0.01233005985964008]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.22820131604429497, 0.01233005985964008]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_110",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.027228076370214477, -0.015277743487013357]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.027228076370214477, -0.015277743487013357]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_111",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.04940633353878029, -1.3440193017762703]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.04940633353878029, -1.3440193017762703]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_112",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.08295953188627643, -0.867717863345853]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08295953188627643, -0.867717863345853]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_113",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8234386732879818, -4.170268604880561]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8234386732879818, -4.170268604880561]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_114",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.3547449933418732, -0.24359807657053287]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3547449933418732, -0.24359807657053287]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_115",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.34845895668408494, -2255.681829286703]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.34845895668408494, -2255.681829286703]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_116",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.58297871540264, -26.283721662976177]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.58297871540264, -26.283721662976177]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_117",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.761171428892108, -28617.658060537826]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.761171428892108, -28617.658060537826]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_118",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-17.2772931578051, -7884.498566274474]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-17.2772931578051, -7884.498566274474]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_119",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8032767292990582, -0.05105991569247709]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8032767292990582, -0.05105991569247709]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_120",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.525867098083686, -6.753789782162611]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.525867098083686, -6.753789782162611]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_121",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.4763881310800535, -19.960590588216977]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4763881310800535, -19.960590588216977]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_122",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.2473485134889326, -98.15169571796544]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2473485134889326, -98.15169571796544]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_123",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.18697763920335664, 0.007941571260574811]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.18697763920335664, 0.007941571260574811]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_124",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7063391939566844, 0.037183963439345845]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7063391939566844, 0.037183963439345845]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_125",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.2558927509447184, -213.04612961069975]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2558927509447184, -213.04612961069975]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_126",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-83.50122402127658, -425.21803357153755]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-83.50122402127658, -425.21803357153755]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_127",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6093939749622831, -0.2716493314562763]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6093939749622831, -0.2716493314562763]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_128",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.7615349793961018, -2.794478294108721]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7615349793961018, -2.794478294108721]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_129",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.351037726786112, -0.13280700178688246]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.351037726786112, -0.13280700178688246]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_130",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.1089355278385387, 0.11333386555432888]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1089355278385387, 0.11333386555432888]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_131",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.1380899310492938, -76212.49395280331]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1380899310492938, -76212.49395280331]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_132",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.03923548215772913, -0.5790776668229127]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.03923548215772913, -0.5790776668229127]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_133",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8602706614002534, 0.13760385350999038]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8602706614002534, 0.13760385350999038]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_134",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.2129244084949454, -276.0763354046039]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2129244084949454, -276.0763354046039]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_135",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.1604295807127838, -19.139759724065083]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1604295807127838, -19.139759724065083]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_136",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-18.05596227802761, -572.136925972735]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-18.05596227802761, -572.136925972735]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_137",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.14677432702269066, -0.0010285373533238918]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.14677432702269066, -0.0010285373533238918]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_138",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.04504315167392573, -0.029253279523426233]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.04504315167392573, -0.029253279523426233]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_139",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.2527693841416378, -0.19056089404774829]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2527693841416378, -0.19056089404774829]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_140",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.236040818028519, -0.24560521823328968]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.236040818028519, -0.24560521823328968]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_141",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.649587390754209, -78.2497091363344]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.649587390754209, -78.2497091363344]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_142",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.589174030133721, -1.729237485619515]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.589174030133721, -1.729237485619515]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_143",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.17871208458155, -2.4411006181613866]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.17871208458155, -2.4411006181613866]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_144",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.1460452295890032, -21.02746428492955]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1460452295890032, -21.02746428492955]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_145",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3460456900413811, 0.023789743777794636]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3460456900413811, 0.023789743777794636]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_146",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.531420257475668, -0.11294915536944312]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.531420257475668, -0.11294915536944312]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_147",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.23599403668698868, -0.023255307067839556]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.23599403668698868, -0.023255307067839556]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_148",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.09404692883328807, -1.4779639124782382]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.09404692883328807, -1.4779639124782382]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_149",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-36.18359738757609, -519.3684184967776]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-36.18359738757609, -519.3684184967776]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_150",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.033319249796961214, -8.673839869485393]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.033319249796961214, -8.673839869485393]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_151",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.3503351641632427, 0.02338203974193222]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3503351641632427, 0.02338203974193222]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_152",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.2518981111371796, 0.12771430248035565]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.2518981111371796, 0.12771430248035565]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_153",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.4079963114711713, -5462.111187303777]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.4079963114711713, -5462.111187303777]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_154",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.02661714889260991, -0.1462438685986051]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.02661714889260991, -0.1462438685986051]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_155",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6128987098405849, -187.12450488709607]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6128987098405849, -187.12450488709607]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_156",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.8667442097189495, 0.2088162968494916]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.8667442097189495, 0.2088162968494916]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_157",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.215542162255023, -3.750991525651851]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.215542162255023, -3.750991525651851]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_158",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.23809381499124874, -1.3596143088058972]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.23809381499124874, -1.3596143088058972]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_159",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.17880037258380935, -0.026717324552467725]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.17880037258380935, -0.026717324552467725]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_160",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.3428044669546004, -1.3078053515623926]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.3428044669546004, -1.3078053515623926]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_161",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-63.69690716991847, -9.682824298158886]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-63.69690716991847, -9.682824298158886]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_162",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.07383155456494579, -0.8749829355488065]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.07383155456494579, -0.8749829355488065]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_163",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.22783216784438798, -3.719099651705998]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.22783216784438798, -3.719099651705998]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_164",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.055777393340262625, -0.15754698133759693]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.055777393340262625, -0.15754698133759693]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_165",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.62985476396946, 5.293193473993802]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.62985476396946, 5.293193473993802]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_166",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.1998425994177357, 0.5320797799512573]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.1998425994177357, 0.5320797799512573]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_167",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.12936088863450546, -74.4749164477315]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.12936088863450546, -74.4749164477315]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_168",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5060425207249831, -1.144478748108852]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5060425207249831, -1.144478748108852]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_169",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.1816685710791077, -0.5192713046141366]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.1816685710791077, -0.5192713046141366]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_170",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.0052208693904174375, -2.1254502234149193]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0052208693904174375, -2.1254502234149193]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_171",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7595337526992371, -0.3527531759205896]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7595337526992371, -0.3527531759205896]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_172",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.1518895596967873, -0.09722357162761414]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1518895596967873, -0.09722357162761414]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_173",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.935558221780357, 3.1390970812363492]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.935558221780357, 3.1390970812363492]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_174",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5981358293601641, -254.8059560118673]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5981358293601641, -254.8059560118673]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_175",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.7507288165670727, -0.101038626867068]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.7507288165670727, -0.101038626867068]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_176",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7603876668379582, -13.247103638803582]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7603876668379582, -13.247103638803582]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_177",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.620482876218229, -0.8042406322686625]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.620482876218229, -0.8042406322686625]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_178",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[27.625681853637378, -10.72826308172113]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[27.625681853637378, -10.72826308172113]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_179",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[11.565543979151988, -2.1769436424981703]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.565543979151988, -2.1769436424981703]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_180",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.15968793469297723, -0.07327971558441641]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.15968793469297723, -0.07327971558441641]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_181",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.246204012288516, -0.16372201419474705]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.246204012288516, -0.16372201419474705]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_182",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.026778187433061856, -0.9447825131888589]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.026778187433061856, -0.9447825131888589]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_183",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.08799930371613256, -0.2748948097776077]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.08799930371613256, -0.2748948097776077]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_184",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.1421793847828976, 0.005052348277264774]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1421793847828976, 0.005052348277264774]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_185",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.4460548793536745, -79.3928601698616]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.4460548793536745, -79.3928601698616]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_186",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.12584203596219323, -0.08587335781555024]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.12584203596219323, -0.08587335781555024]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_187",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.0996324421483896, 0.24749397608988358]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0996324421483896, 0.24749397608988358]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_188",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.45391859557139, 1.0589241499390756]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.45391859557139, 1.0589241499390756]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_189",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.08189664181794225, -0.020678778506960878]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.08189664181794225, -0.020678778506960878]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_190",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.1824211209725087, -72.24028112990536]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1824211209725087, -72.24028112990536]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_191",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[104.17419416390503, -724.6307757442072]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[104.17419416390503, -724.6307757442072]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_192",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.524237694421315, -1.5146389479548352]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.524237694421315, -1.5146389479548352]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_193",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.658292328459582, -0.9987371684581252]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.658292328459582, -0.9987371684581252]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_194",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.6674547821535177, 1.314623831791407]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.6674547821535177, 1.314623831791407]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_195",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.06016673587678789, -0.11766704690021901]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06016673587678789, -0.11766704690021901]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_196",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.059956983257153, 0.28132614857711613]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.059956983257153, 0.28132614857711613]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_197",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8544578529118839, -0.4746625230618773]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8544578529118839, -0.4746625230618773]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_198",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.1785675688093399, -0.1503088375802988]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1785675688093399, -0.1503088375802988]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_199",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.00843381050140198, -0.05218239455345775]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.00843381050140198, -0.05218239455345775]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_200",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.3368993027936808, -17.284861363716267]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3368993027936808, -17.284861363716267]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_201",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.29346290022949456, -0.47992957639259004]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.29346290022949456, -0.47992957639259004]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_202",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.991757764178572, -100.16948374464835]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.991757764178572, -100.16948374464835]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_203",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.930178426247022, -7.876909601728034]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.930178426247022, -7.876909601728034]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_204",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.04958977914773829, -3.9310579596412016]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.04958977914773829, -3.9310579596412016]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_205",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.06561413206271453, -6.205749273791529]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06561413206271453, -6.205749273791529]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_206",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.4569708552886262, 0.6039767445157642]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.4569708552886262, 0.6039767445157642]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_207",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.354660511040124, -1.4218292333128266]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.354660511040124, -1.4218292333128266]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_208",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[30.24271302891861, 28.41841540358198]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[30.24271302891861, 28.41841540358198]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_209",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.790362033212052, -1972.5383054896013]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.790362033212052, -1972.5383054896013]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_210",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.1613481537146059, -7.786988165064859]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1613481537146059, -7.786988165064859]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_211",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.3292140873446214, 0.019484346623440226]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3292140873446214, 0.019484346623440226]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_212",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5759273893255039, 0.03204294332235704]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5759273893255039, 0.03204294332235704]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_213",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3994416257303001, -1.9993295349486062]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3994416257303001, -1.9993295349486062]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_214",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.3469687020891777, -0.0010992556520346246]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3469687020891777, -0.0010992556520346246]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_215",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.2897699511249143, -0.6200397781182839]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2897699511249143, -0.6200397781182839]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_216",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.5574657662937827, -3.9066751828384314]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5574657662937827, -3.9066751828384314]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_217",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6877297061199785, 0.014508529842048201]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6877297061199785, 0.014508529842048201]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_218",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-26.27017316725842, -6.618056319592782]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-26.27017316725842, -6.618056319592782]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_219",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5549611252156326, -1.1029372330428504]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5549611252156326, -1.1029372330428504]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_220",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.13120879785200304, 0.00045468432682148997]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.13120879785200304, 0.00045468432682148997]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_221",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8348104617930513, -1.2623048413622517]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8348104617930513, -1.2623048413622517]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_222",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.3373479064432345, -54.54408243418733]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3373479064432345, -54.54408243418733]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_223",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.26867706548611586, -0.8175622439164375]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.26867706548611586, -0.8175622439164375]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_224",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[141.80075212105905, -26.406191337026005]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[141.80075212105905, -26.406191337026005]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_225",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.008470512511149128, -23.803784389226795]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.008470512511149128, -23.803784389226795]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_226",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.7799435716674713, 0.15172960664607454]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7799435716674713, 0.15172960664607454]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_227",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.08055526173422296, -2.0009834262222066]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.08055526173422296, -2.0009834262222066]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_228",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.27953179361459385, -11.719096386019888]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.27953179361459385, -11.719096386019888]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_229",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.4953282395197376, -0.21985017001820534]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4953282395197376, -0.21985017001820534]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_230",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.55974959989879, -403016.57904183684]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.55974959989879, -403016.57904183684]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_231",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[63.7952053905537, 1017.4568555747185]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[63.7952053905537, 1017.4568555747185]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_232",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.4582652379818242, -86.86719919486495]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4582652379818242, -86.86719919486495]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_233",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.2073973991402684, 0.09734209184496598]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2073973991402684, 0.09734209184496598]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_234",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6404649255736176, -21.617987776040916]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6404649255736176, -21.617987776040916]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_235",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.1840604455951773, -4.506831026377984]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1840604455951773, -4.506831026377984]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_236",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.12127139237141941, -0.07493993528016457]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.12127139237141941, -0.07493993528016457]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_237",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.1449708970021019, -0.005305654921358838]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1449708970021019, -0.005305654921358838]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_238",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.2619474050308152, -0.06663003004751714]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2619474050308152, -0.06663003004751714]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_239",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.6095589041132659, 0.6264944070774279]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.6095589041132659, 0.6264944070774279]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_240",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.9578792776606023, -0.40140033590891805]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9578792776606023, -0.40140033590891805]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_241",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[58.55829030388611, -17932.76518717318]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[58.55829030388611, -17932.76518717318]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_242",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8678205138810066, 0.15952997290269266]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8678205138810066, 0.15952997290269266]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_243",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7255063356140368, -14.13756347420822]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7255063356140368, -14.13756347420822]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_244",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.08549558968190703, -102387.53343852867]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08549558968190703, -102387.53343852867]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_245",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.0001604155414426748, -38.72314752895411]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0001604155414426748, -38.72314752895411]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_246",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.09700404549003976, 0.002298346901832492]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.09700404549003976, 0.002298346901832492]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_247",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.002955667634183, -640.697979813302]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.002955667634183, -640.697979813302]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_248",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[23.46194815808347, 13.108396292068495]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[23.46194815808347, 13.108396292068495]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_249",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[92.28750712368328, 450.6199280825847]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[92.28750712368328, 450.6199280825847]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_250",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8014875502788826, -25.883640517988745]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8014875502788826, -25.883640517988745]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_251",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.662286156137225, -0.019497537039180654]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.662286156137225, -0.019497537039180654]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_252",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.616379631231668, -15165.054155811693]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.616379631231668, -15165.054155811693]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_253",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.08581982125402199, -2.2790689449164856]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08581982125402199, -2.2790689449164856]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_254",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.03175417181380902, -2.918499355241421]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.03175417181380902, -2.918499355241421]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_255",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.14165057830680094, 0.002517429387275699]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.14165057830680094, 0.002517429387275699]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_256",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[24.331628624379814, 4.516129032551446]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[24.331628624379814, 4.516129032551446]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_257",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.167736351023894, -847.8690085526949]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.167736351023894, -847.8690085526949]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_258",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[53.76581436759085, 34.97711249729809]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[53.76581436759085, 34.97711249729809]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_259",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.40681420656261597, -0.5784757970083017]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.40681420656261597, -0.5784757970083017]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_260",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[20.700652542826926, -16.583898853594714]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[20.700652542826926, -16.583898853594714]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_261",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[375.4635341608323, 6469.841068691329]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[375.4635341608323, 6469.841068691329]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_262",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.6095028813835444, -0.26098901743335323]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.6095028813835444, -0.26098901743335323]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_263",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.4211402896037684, -2.800748044388594]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.4211402896037684, -2.800748044388594]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_264",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.0761165128222731, -3.862625253114003]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0761165128222731, -3.862625253114003]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_265",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.06816265892517788, -2.5949247709515424]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06816265892517788, -2.5949247709515424]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_266",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.28794504403648563, -2.11946732309919]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.28794504403648563, -2.11946732309919]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_267",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.048762111312392976, -108.40056706814056]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.048762111312392976, -108.40056706814056]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_268",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.258554523633792, -184.23500348629491]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.258554523633792, -184.23500348629491]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_269",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-10.84157662778815, 5.23579498146568]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-10.84157662778815, 5.23579498146568]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_270",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.14218828984723064, -0.08840434366102519]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.14218828984723064, -0.08840434366102519]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_271",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.48819098834838304, -1.5335347263378054]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.48819098834838304, -1.5335347263378054]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_272",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.7107742673734023, 0.167724656641674]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.7107742673734023, 0.167724656641674]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_273",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.42679718698506725, -0.3613213114372649]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.42679718698506725, -0.3613213114372649]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_274",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.9942646036869672, 0.2199513301242383]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9942646036869672, 0.2199513301242383]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_275",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.677799970858752, -10.479126321456896]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.677799970858752, -10.479126321456896]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_276",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.061960051989369, -0.1178474938247725]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.061960051989369, -0.1178474938247725]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_277",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.13707646935139994, -9.902127450403766]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.13707646935139994, -9.902127450403766]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_278",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.18144409381763663, -177815.4156731041]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.18144409381763663, -177815.4156731041]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_279",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.09260922626025825, -0.004900680304419926]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.09260922626025825, -0.004900680304419926]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_280",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.29480028291496546, -0.009048703591439295]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.29480028291496546, -0.009048703591439295]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_281",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.557020329181677, 0.2738702738603854]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.557020329181677, 0.2738702738603854]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_282",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.1217423373935158, 0.30503887752508585]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1217423373935158, 0.30503887752508585]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_283",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.2770072733214288, 0.15830315680410326]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2770072733214288, 0.15830315680410326]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_284",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.01415216860095, 0.40443322885653915]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.01415216860095, 0.40443322885653915]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_285",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[182.55470903303117, -20.02317892416641]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[182.55470903303117, -20.02317892416641]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_286",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.65667518567253, -7.616698835425852]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.65667518567253, -7.616698835425852]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_287",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.0637015167094428, -22.3092213482209]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0637015167094428, -22.3092213482209]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_288",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.543051402153916, -2.5264422754057727]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.543051402153916, -2.5264422754057727]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_289",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5255133447138114, -1.5669507499204727]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5255133447138114, -1.5669507499204727]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_290",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.3094553032951683, -171.5335277696662]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3094553032951683, -171.5335277696662]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_291",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8392133255093115, -530.0599370692537]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8392133255093115, -530.0599370692537]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_292",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.40425497270270566, -34.657489019547704]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.40425497270270566, -34.657489019547704]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_293",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[12.40614445058558, -20.6968193880851]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.40614445058558, -20.6968193880851]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_294",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5408061894075197, -2.0294769672882342]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5408061894075197, -2.0294769672882342]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_295",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.25318144513412516, -180.22905460267373]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.25318144513412516, -180.22905460267373]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_296",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.484538088334255, 4.739532732002505]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.484538088334255, 4.739532732002505]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_297",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[134.8591839462221, 24.398811228093564]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[134.8591839462221, 24.398811228093564]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_298",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.1829413858242616, -0.3562323678537424]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1829413858242616, -0.3562323678537424]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_299",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.537473121367826, -1.5380476785730397]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.537473121367826, -1.5380476785730397]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_300",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.09891261169171923, -0.05870355581556891]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.09891261169171923, -0.05870355581556891]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_301",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.18964897684084034, -0.06690178760546758]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.18964897684084034, -0.06690178760546758]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_302",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-54.606165183635, -14.038125533829273]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-54.606165183635, -14.038125533829273]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_303",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.2212446657602285, -175.0965168366402]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2212446657602285, -175.0965168366402]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_304",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.25204444402045034, -50.15843293977707]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.25204444402045034, -50.15843293977707]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_305",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.988744332667614, 9.372921195104611]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.988744332667614, 9.372921195104611]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_306",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6248734001109745, -6.181181551674463]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6248734001109745, -6.181181551674463]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_307",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-17.43362412443067, -4.0380803101580725]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-17.43362412443067, -4.0380803101580725]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_308",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.200028301166437, -0.04081725228530246]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.200028301166437, -0.04081725228530246]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_309",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.490150749514632, -0.043112947666738365]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.490150749514632, -0.043112947666738365]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_310",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.1618545791157744, -133017.26721944183]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1618545791157744, -133017.26721944183]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_311",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.09816930410051324, -0.16508869372967494]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.09816930410051324, -0.16508869372967494]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_312",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.35660456648666, -21102.960443451266]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.35660456648666, -21102.960443451266]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_313",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[20.32425622130312, -11.289873311708531]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[20.32425622130312, -11.289873311708531]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_314",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.3240614471735936, 0.16044313873657626]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3240614471735936, 0.16044313873657626]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_315",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.3577931747325449, 0.025205752036777218]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3577931747325449, 0.025205752036777218]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_316",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.0376363667729529, -4.3450975969905485]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0376363667729529, -4.3450975969905485]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_317",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.4200632229384502, 0.025898716661671484]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4200632229384502, 0.025898716661671484]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_318",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.752291818899891, -8204.16694193062]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.752291818899891, -8204.16694193062]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_319",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[35.01242323089679, -44.26383175248488]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[35.01242323089679, -44.26383175248488]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_320",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3082259549569488, -49.47925153328931]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3082259549569488, -49.47925153328931]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_321",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-12.461390349563734, 7.382166399332881]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.461390349563734, 7.382166399332881]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_322",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5688272326385281, -1299.7860433523551]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5688272326385281, -1299.7860433523551]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_323",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.6063142433370163, -1.6913442888059174]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6063142433370163, -1.6913442888059174]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_324",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.2559351180958056, -26.0000213145427]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.2559351180958056, -26.0000213145427]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_325",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-67.26908469250274, 646.0425796547987]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-67.26908469250274, 646.0425796547987]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_326",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.16631928443936408, -0.44849495770175285]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.16631928443936408, -0.44849495770175285]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_327",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.5147507865085577, -1.2161552017015933]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.5147507865085577, -1.2161552017015933]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_328",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.1711854076165804, -677.0965063427352]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.1711854076165804, -677.0965063427352]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_329",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8352504456684898, -0.20054091201069302]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8352504456684898, -0.20054091201069302]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_330",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6544016205210408, -20.588300682371106]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6544016205210408, -20.588300682371106]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_331",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.27284083601396597, -10.204672740849029]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.27284083601396597, -10.204672740849029]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_332",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.0977324855879165, -264550.5515757714]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0977324855879165, -264550.5515757714]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_333",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8318743252046352, 0.016338628411648792]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8318743252046352, 0.016338628411648792]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_334",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.7297089088036492, -0.9274100139422602]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.7297089088036492, -0.9274100139422602]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_335",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.1246669021629141, -0.3711437461274545]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1246669021629141, -0.3711437461274545]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_336",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.367699141388514, -21.773608838181232]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.367699141388514, -21.773608838181232]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_337",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.643335913238961, -2.2536480757357484]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.643335913238961, -2.2536480757357484]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_338",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.06275101590055931, -22.100707186103758]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06275101590055931, -22.100707186103758]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_339",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.8782178883628469, -15.629225778158892]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8782178883628469, -15.629225778158892]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_340",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.8238399087071977, -0.37627552680084714]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8238399087071977, -0.37627552680084714]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_341",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.213813452810178, -11.560544334355]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.213813452810178, -11.560544334355]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_342",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.13858459923656574, -2.671587928374932]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.13858459923656574, -2.671587928374932]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_343",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.012229168681030597, -0.6071249366551533]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.012229168681030597, -0.6071249366551533]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_344",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5497046408563341, -697.2820637105323]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5497046408563341, -697.2820637105323]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_345",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.20998636235665047, -5580.496773229531]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.20998636235665047, -5580.496773229531]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_346",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.6724798724560541, -0.731804732890474]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.6724798724560541, -0.731804732890474]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_347",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-35.64012930415306, 36.78545610817893]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-35.64012930415306, 36.78545610817893]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_348",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.030173450686063214, -103.78215969795072]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.030173450686063214, -103.78215969795072]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_349",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.612433634739218, -13.622239136687094]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.612433634739218, -13.622239136687094]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_350",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[18.639683015174583, -7.648121764991336]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[18.639683015174583, -7.648121764991336]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_351",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.390298513582825, -0.2746303041714134]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.390298513582825, -0.2746303041714134]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_352",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.0786832494821647, -0.6041533364640008]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0786832494821647, -0.6041533364640008]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_353",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.4366002319701126, -6.965606171437231]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4366002319701126, -6.965606171437231]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_354",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5103943180580592, -0.4818084452229735]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5103943180580592, -0.4818084452229735]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_355",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.5333946783581516, -0.6017482555714468]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5333946783581516, -0.6017482555714468]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_356",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.7357983674740287, -1.67021255932908]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7357983674740287, -1.67021255932908]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_357",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.9581749137013987, -0.38306724460953834]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9581749137013987, -0.38306724460953834]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_358",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.05558439601297641, 0.00015211116239893934]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.05558439601297641, 0.00015211116239893934]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_359",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.2659826194129153, -1.1301401698783868]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.2659826194129153, -1.1301401698783868]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_360",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-269.46242633703486, -766.4857522544858]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-269.46242633703486, -766.4857522544858]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_361",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[224.0871985887571, -315.6809030124767]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[224.0871985887571, -315.6809030124767]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_362",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.636179532017921, -1.9202787152998795]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.636179532017921, -1.9202787152998795]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_363",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.327897554377524, -364278.59917477384]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.327897554377524, -364278.59917477384]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_364",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.06901648654197252, -2.8614352916645505]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06901648654197252, -2.8614352916645505]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_365",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.499498860548892, 0.03063710336276404]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.499498860548892, 0.03063710336276404]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_366",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.06462372686812594, -0.7434396779761846]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06462372686812594, -0.7434396779761846]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_367",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.11065603115655336, -0.3959345726131777]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.11065603115655336, -0.3959345726131777]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_368",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.06368182097769963, -7972.580496990469]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06368182097769963, -7972.580496990469]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_369",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[896.110814788491, 481.58516268535067]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[896.110814788491, 481.58516268535067]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_370",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.14589108463377606, 0.0005960993937958669]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.14589108463377606, 0.0005960993937958669]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_371",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.1089976603456322, -0.026733264535202302]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1089976603456322, -0.026733264535202302]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_372",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.19584178704188968, -20.69943216633304]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.19584178704188968, -20.69943216633304]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_373",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[26.175357527083786, 16.587097597919698]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[26.175357527083786, 16.587097597919698]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_374",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.1173093439274944, -23.891776471513253]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1173093439274944, -23.891776471513253]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_375",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[10.11259476620867, -10.022267632064112]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.11259476620867, -10.022267632064112]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_376",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.4333714947077008, -52.01255804776622]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.4333714947077008, -52.01255804776622]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_377",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.03538386398304957, -2.0630737270860435]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.03538386398304957, -2.0630737270860435]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_378",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.8016329894645904, -39.306007000523046]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.8016329894645904, -39.306007000523046]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_379",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.511852058905087, 0.3315411549429729]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.511852058905087, 0.3315411549429729]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_380",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.0674250981408624, -2.9302947424647248]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0674250981408624, -2.9302947424647248]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_381",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.7538559469026366, -33.93973551427893]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7538559469026366, -33.93973551427893]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_382",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.1377871647576419, -0.2510567432804121]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1377871647576419, -0.2510567432804121]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_383",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-16.928131912588306, 12.941755863116072]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.928131912588306, 12.941755863116072]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_384",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.29505074371518214, -4.477192817117417]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.29505074371518214, -4.477192817117417]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_385",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.17013446278599753, -0.014804720888509357]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.17013446278599753, -0.014804720888509357]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_386",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[11.249774232913758, -9.503910405396732]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.249774232913758, -9.503910405396732]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_387",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.859392474397305, -1.7964667495438396]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.859392474397305, -1.7964667495438396]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_388",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-66.15589592733208, -34.034118167363275]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-66.15589592733208, -34.034118167363275]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_389",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.226688625083324, -26.089742857072505]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.226688625083324, -26.089742857072505]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_390",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.219825670508065, -125.24990476907234]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.219825670508065, -125.24990476907234]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_391",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.24933447509449, -1.2991612819168423]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.24933447509449, -1.2991612819168423]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_392",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.334616995907119, -43.577970133011945]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.334616995907119, -43.577970133011945]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_393",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.49558398600455983, -1.2813514200943015]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.49558398600455983, -1.2813514200943015]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_394",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.1645716921683245, -5.493381795966916]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.1645716921683245, -5.493381795966916]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_395",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.182557556792485, -6.3846263921635575]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.182557556792485, -6.3846263921635575]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_396",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.35808931002914174, -0.9219590269666927]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.35808931002914174, -0.9219590269666927]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_397",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.4737280762550813, -4.388383094141205]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.4737280762550813, -4.388383094141205]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_398",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.535498602091732, -23.148807485421365]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.535498602091732, -23.148807485421365]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_399",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.536987501009449, -8.42221380294496]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.536987501009449, -8.42221380294496]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_400",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-15.376724604103716, -172.32901677263]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-15.376724604103716, -172.32901677263]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_401",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-289.2299449949792, 416.6170475253182]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-289.2299449949792, 416.6170475253182]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_402",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.21951257013999434, -1.2232955064811644]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.21951257013999434, -1.2232955064811644]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_403",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.587142921498701, -4.573488042187252]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.587142921498701, -4.573488042187252]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_404",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.20466043153006366, -1.1111179144701129]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.20466043153006366, -1.1111179144701129]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_405",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.03615603028914238, -1.7389374964549407]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.03615603028914238, -1.7389374964549407]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_406",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[40.835495081998026, -18400.44229093282]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[40.835495081998026, -18400.44229093282]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_407",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6037737553556397, -2.1090380337680728]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6037737553556397, -2.1090380337680728]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_408",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.935813324832907, -0.5020255968439865]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.935813324832907, -0.5020255968439865]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_409",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.6629961118759007, -0.08292767929015925]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.6629961118759007, -0.08292767929015925]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_410",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3822929900183703, -0.18136758979377632]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3822929900183703, -0.18136758979377632]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_411",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.5484023174891237, -47.01623137140174]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.5484023174891237, -47.01623137140174]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_412",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.05007566003905913, -3.6995400475282962]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.05007566003905913, -3.6995400475282962]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_413",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.299054982380506, 2.479129104558097]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.299054982380506, 2.479129104558097]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_414",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[11.655978549984967, -165.89731174587138]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.655978549984967, -165.89731174587138]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_415",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.09536234589638777, -1.4556558531109636]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.09536234589638777, -1.4556558531109636]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_416",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.08172951354733053, -0.00020217545477763942]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.08172951354733053, -0.00020217545477763942]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_417",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.41898033325496, -0.2492224045152522]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.41898033325496, -0.2492224045152522]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_418",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8503092394882352, -3.747866456977871]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8503092394882352, -3.747866456977871]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_419",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-49.924354513535484, -8.532329450795542]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-49.924354513535484, -8.532329450795542]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_420",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.126782272009457, 0.9936256048504304]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.126782272009457, 0.9936256048504304]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_421",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5137512090863073, -0.15493203009749767]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5137512090863073, -0.15493203009749767]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_422",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.1118652525318948, -33602.30670574296]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1118652525318948, -33602.30670574296]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_423",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.2911208242026763, 0.014286733629500878]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2911208242026763, 0.014286733629500878]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_424",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.8946101085652067, 0.6684131249269754]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8946101085652067, 0.6684131249269754]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_425",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6787491904487083, -15.572774706529898]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6787491904487083, -15.572774706529898]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_426",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.9482002766009114, 0.02339128170324207]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9482002766009114, 0.02339128170324207]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_427",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.730620686760565, 0.1596035283721633]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.730620686760565, 0.1596035283721633]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_428",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.0106688564776363, 0.491747180890185]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.0106688564776363, 0.491747180890185]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_429",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.40552967154852304, -0.8809204889710057]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.40552967154852304, -0.8809204889710057]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_430",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.368938978936478, 2.5153686773693646]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.368938978936478, 2.5153686773693646]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_431",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-35.81116364813522, 11.359198350516722]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-35.81116364813522, 11.359198350516722]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_432",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.11401341076283071, -0.02496579501812138]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.11401341076283071, -0.02496579501812138]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_433",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.0568196063729864, 0.03440738283171319]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0568196063729864, 0.03440738283171319]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_434",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.547539109660459, -21115.481402741618]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.547539109660459, -21115.481402741618]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_435",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-10.61874888413147, 5.4309636438418085]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-10.61874888413147, 5.4309636438418085]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_436",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-11.190680356063352, 18.21735231500696]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.190680356063352, 18.21735231500696]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_437",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.057421451261893, -0.1292733126479862]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.057421451261893, -0.1292733126479862]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_438",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-8.666759116147174, -0.7551255960989899]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.666759116147174, -0.7551255960989899]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_439",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8076005378136649, -16.509605937385466]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8076005378136649, -16.509605937385466]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_440",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.2746597129638695, -2.6254004004650815]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.2746597129638695, -2.6254004004650815]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_441",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6153324319704448, -0.7769181316634135]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6153324319704448, -0.7769181316634135]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_442",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3494140206626124, 0.03010267564392742]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3494140206626124, 0.03010267564392742]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_443",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.14775605064530217, -0.045567044179179776]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.14775605064530217, -0.045567044179179776]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_444",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.45234847299951725, -244.20849351744027]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.45234847299951725, -244.20849351744027]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_445",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6678066622859493, -0.40535735125602773]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6678066622859493, -0.40535735125602773]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_446",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.243652273908424, -3.257759932691844]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.243652273908424, -3.257759932691844]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_447",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.9687532876640149, -0.12862872510324877]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9687532876640149, -0.12862872510324877]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_448",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-213.9233696431663, -60.15837725861437]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-213.9233696431663, -60.15837725861437]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_449",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-10.257185285086386, -181884.24083525283]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-10.257185285086386, -181884.24083525283]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_450",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5995349212547904, -5475.012463959699]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5995349212547904, -5475.012463959699]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_451",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8539436905415422, -0.23175725015024579]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8539436905415422, -0.23175725015024579]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_452",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.7160321134465102, -1.0731597117505625]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7160321134465102, -1.0731597117505625]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_453",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.5950308534662416, -0.7568646687563025]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.5950308534662416, -0.7568646687563025]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_454",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[461.0793261044642, -527.8584290405616]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[461.0793261044642, -527.8584290405616]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_455",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.7992046693934513, -6.678550647249692]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7992046693934513, -6.678550647249692]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_456",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.825152572499558, -2.8947570877260684]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.825152572499558, -2.8947570877260684]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_457",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.11921741330229, -3.6308839733632223]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.11921741330229, -3.6308839733632223]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_458",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.12528547658712355, -0.040148330733074486]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.12528547658712355, -0.040148330733074486]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_459",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[26.3104432193477, 2.2477244883146863]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[26.3104432193477, 2.2477244883146863]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_460",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.8959916504962315, -0.10736644365847248]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.8959916504962315, -0.10736644365847248]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_461",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[29.605676908029576, -10.083736286627028]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[29.605676908029576, -10.083736286627028]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_462",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.024978671924078173, -2386.6047473345097]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.024978671924078173, -2386.6047473345097]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_463",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.18447579546673812, -323.4275832854042]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.18447579546673812, -323.4275832854042]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_464",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.5403400653638557, 1.7056083559887902]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.5403400653638557, 1.7056083559887902]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_465",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[873.8401941782587, -23.699535588648548]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[873.8401941782587, -23.699535588648548]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_466",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.977486900362049, -9.02013222233289]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.977486900362049, -9.02013222233289]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_467",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.3532449936208995, -0.014982724824297043]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.3532449936208995, -0.014982724824297043]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_468",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.0713380597047013, -3208.6517606073544]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0713380597047013, -3208.6517606073544]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_469",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[61.27675162087383, 143.78200655152088]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[61.27675162087383, 143.78200655152088]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_470",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.9208221402346505, -0.7121476062082479]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9208221402346505, -0.7121476062082479]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_471",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.628148707499433, 2.8924756483727494]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.628148707499433, 2.8924756483727494]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_472",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.272415741682602, -154.70558968673657]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.272415741682602, -154.70558968673657]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_473",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.2755406347210616, -1.595974802819013]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2755406347210616, -1.595974802819013]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_474",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.4402648669278555, -20.96196343096145]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4402648669278555, -20.96196343096145]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_475",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.689328052108592, -95.1885698203684]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.689328052108592, -95.1885698203684]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_476",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.4574196722883497, 1.4637589992784346]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.4574196722883497, 1.4637589992784346]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_477",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.1749528197551316, -1.0891649624299873]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.1749528197551316, -1.0891649624299873]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_478",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.590575065216565, -0.7586127448425913]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.590575065216565, -0.7586127448425913]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_479",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.17663397015975968, -5.930743285711014]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.17663397015975968, -5.930743285711014]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_480",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.0883435358673563, 1.1717147118128874]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.0883435358673563, 1.1717147118128874]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_481",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-22.914095081743056, -2.0126505455835586]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-22.914095081743056, -2.0126505455835586]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_482",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.32080269479715967, 0.023205396230507068]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.32080269479715967, 0.023205396230507068]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_483",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.937118400977983, -0.05303320580292041]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.937118400977983, -0.05303320580292041]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_484",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-8.432404960868196, -0.7928201870098175]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.432404960868196, -0.7928201870098175]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_485",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.2221073423918587, -0.46966768373528034]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2221073423918587, -0.46966768373528034]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_486",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.11339792359200707, -1382.6703037230473]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11339792359200707, -1382.6703037230473]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_487",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.485947798305796, -2.2769599999336654]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.485947798305796, -2.2769599999336654]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_488",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.3362251581867728, -4462.538076346152]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3362251581867728, -4462.538076346152]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_489",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-47.17762093182609, -79.58598578070341]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-47.17762093182609, -79.58598578070341]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_490",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.7659385637294494, 0.30759816221668307]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7659385637294494, 0.30759816221668307]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_491",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[38.82178307045336, -9.351178137165466]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[38.82178307045336, -9.351178137165466]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_492",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.3806327207176254, -0.14829007626619717]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3806327207176254, -0.14829007626619717]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_493",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.3149667712986004, -0.051251481043050724]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3149667712986004, -0.051251481043050724]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_494",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.7303273328586903, -988.6157474953361]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.7303273328586903, -988.6157474953361]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_495",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-34.92328034236704, -3853.1440469575505]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-34.92328034236704, -3853.1440469575505]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_496",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.8757459782733226, -7.0310279268243665]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.8757459782733226, -7.0310279268243665]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_497",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-30.756328528327533, -1017214.271426919]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-30.756328528327533, -1017214.271426919]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_498",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-20.378097420671768, -0.08276169832965982]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-20.378097420671768, -0.08276169832965982]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_499",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.25794947141854957, -0.5786440445420004]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.25794947141854957, -0.5786440445420004]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_500",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.1082093060828964, -38.902335221643376]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1082093060828964, -38.902335221643376]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_501",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.663714661925689, 0.008700328281285235]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.663714661925689, 0.008700328281285235]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_502",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.7075167621197703, -0.7469631088866965]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7075167621197703, -0.7469631088866965]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_503",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.18226559120782895, -0.35434803211210764]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.18226559120782895, -0.35434803211210764]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_504",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-8.445151198696111, 2.229916865068369]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.445151198696111, 2.229916865068369]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_505",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.11892990146310312, -1.7877787368347569]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11892990146310312, -1.7877787368347569]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_506",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.2985580614992653, 0.021651815679986162]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2985580614992653, 0.021651815679986162]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_507",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8880858664675362, -15.288816339043942]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8880858664675362, -15.288816339043942]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_508",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.273692295946929, 4.566016538164932]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.273692295946929, 4.566016538164932]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_509",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.027183994204826128, -0.02088916851034104]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.027183994204826128, -0.02088916851034104]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_510",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.1566825853699274, -0.1603268800684425]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1566825853699274, -0.1603268800684425]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_511",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.18765690349028027, -0.0983832087858937]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.18765690349028027, -0.0983832087858937]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_512",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.2545073109502041, -125.5347788710713]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2545073109502041, -125.5347788710713]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_513",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5313704278764267, 0.0703248079952502]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5313704278764267, 0.0703248079952502]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_514",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6862822862963746, -1.1344878844965205]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6862822862963746, -1.1344878844965205]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_515",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.2521971117503499, -29.28311722399906]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2521971117503499, -29.28311722399906]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_516",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.4059065273234184, -120.273042435091]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4059065273234184, -120.273042435091]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_517",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.03920299354656853, -0.033163058417894575]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.03920299354656853, -0.033163058417894575]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_518",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.439836537698284, -15385.238998961451]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.439836537698284, -15385.238998961451]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_519",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6855739817025798, -79933.07514052631]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6855739817025798, -79933.07514052631]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_520",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.880146038270193, 0.8056803744457023]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.880146038270193, 0.8056803744457023]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_521",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.580628041123625, 0.8714984315661239]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.580628041123625, 0.8714984315661239]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_522",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.2627809136388212, -0.015914755406468938]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2627809136388212, -0.015914755406468938]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_523",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.10915682425409916, -40.13380342021146]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.10915682425409916, -40.13380342021146]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_524",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-335.08542969245735, -2350.7992851216086]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-335.08542969245735, -2350.7992851216086]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_525",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.741398870708415, -1.4307180621552238]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.741398870708415, -1.4307180621552238]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_526",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.13925914700485786, -38.98716062142602]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.13925914700485786, -38.98716062142602]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_527",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[25.149227119872165, 0.500486207796034]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[25.149227119872165, 0.500486207796034]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_528",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.030859221222056, -9.997504936446411]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.030859221222056, -9.997504936446411]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_529",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8751799698571819, -5131.034501585071]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8751799698571819, -5131.034501585071]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_530",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.0366917823614674, 1.0723103387306239]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.0366917823614674, 1.0723103387306239]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_531",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.569422747225773, 0.038715674622497726]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.569422747225773, 0.038715674622497726]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_532",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.4470385357953486, -0.17888756245469373]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4470385357953486, -0.17888756245469373]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_533",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.9356472832341525, -1.3759568735349048]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.9356472832341525, -1.3759568735349048]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_534",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.9998806720474963, -2.2882073389759228]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9998806720474963, -2.2882073389759228]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_535",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-193.54297301234692, 61.64679601803856]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-193.54297301234692, 61.64679601803856]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_536",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.45736373302490385, -0.23932816671313867]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.45736373302490385, -0.23932816671313867]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_537",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.7880179665585025, 3.5188987116772963]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.7880179665585025, 3.5188987116772963]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_538",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.0009858953211, 0.20567156417166266]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0009858953211, 0.20567156417166266]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_539",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-17.043727169321322, 16.768096272639166]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-17.043727169321322, 16.768096272639166]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_540",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.549115536108583, 2.9806226722452753]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.549115536108583, 2.9806226722452753]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_541",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[456.4060147950133, 244.47410626366752]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[456.4060147950133, 244.47410626366752]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_542",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[17.245011991113206, -9.186900094998045]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[17.245011991113206, -9.186900094998045]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_543",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-31.084725158781666, 25.031707777183122]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-31.084725158781666, 25.031707777183122]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_544",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.0013291690192288226, -0.007407980561752273]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0013291690192288226, -0.007407980561752273]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_545",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[13.33372718841562, -3.9232472707680315]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[13.33372718841562, -3.9232472707680315]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_546",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[35.92881406997253, -81.7959639483967]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[35.92881406997253, -81.7959639483967]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_547",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.23006069300252138, -64.91675341715421]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.23006069300252138, -64.91675341715421]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_548",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.5203802242472055, -0.37814668716979954]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.5203802242472055, -0.37814668716979954]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_549",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-34.89118149676803, -6878.231524605602]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-34.89118149676803, -6878.231524605602]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_550",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.3743995254514079, -68.78345030336219]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3743995254514079, -68.78345030336219]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_551",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.18191811674586553, -244.47721686800222]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.18191811674586553, -244.47721686800222]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_552",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.7189645021051034, -111.29379296014899]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.7189645021051034, -111.29379296014899]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_553",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.266596329368001, -0.25792479973716653]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.266596329368001, -0.25792479973716653]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_554",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-8.158844261195107, -489.9468101658744]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.158844261195107, -489.9468101658744]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_555",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8964999421440928, -48.43646172445787]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8964999421440928, -48.43646172445787]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_556",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.731404938140562, -13.805226693166944]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.731404938140562, -13.805226693166944]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_557",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.13003659989414165, -1211.7001059077063]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.13003659989414165, -1211.7001059077063]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_558",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.06504227524967665, -0.0018453962646352738]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06504227524967665, -0.0018453962646352738]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_559",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-22.254919455585405, -186.17394357306233]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-22.254919455585405, -186.17394357306233]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_560",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.9393012642278499, 0.0469498180064962]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9393012642278499, 0.0469498180064962]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_561",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.33254637027957096, 0.010004115138481729]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.33254637027957096, 0.010004115138481729]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_562",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.3923649414237385, -1.8685564515870914]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3923649414237385, -1.8685564515870914]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_563",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.013834546248250016, -17.848684564834837]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.013834546248250016, -17.848684564834837]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_564",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.500072907094087, -6.063758826427333]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.500072907094087, -6.063758826427333]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_565",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.209881779476384, -0.30083497218417743]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.209881779476384, -0.30083497218417743]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_566",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.10637999420374526, -1.2603824525733751]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.10637999420374526, -1.2603824525733751]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_567",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.2499993477850078, -0.6470225284782058]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2499993477850078, -0.6470225284782058]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_568",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.008755022133662601, -4.2052147177231545]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.008755022133662601, -4.2052147177231545]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_569",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.7199312735597123, 0.08259055279949719]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.7199312735597123, 0.08259055279949719]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_570",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[46.36180554705958, -8109.225200839281]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[46.36180554705958, -8109.225200839281]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_571",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.47610048392054055, -33.06476422346229]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.47610048392054055, -33.06476422346229]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_572",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-25.765905326562628, -1360.6695205946367]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-25.765905326562628, -1360.6695205946367]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_573",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.2104958914584052, -0.31770612796948144]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2104958914584052, -0.31770612796948144]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_574",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.20062084172569672, -17.766012703615267]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.20062084172569672, -17.766012703615267]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_575",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.082641052624524, 11.261769447607374]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.082641052624524, 11.261769447607374]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_576",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.547125916513187, -32.87329297786743]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.547125916513187, -32.87329297786743]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_577",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.016865764184681, -1.5613509783948487]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.016865764184681, -1.5613509783948487]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_578",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[15.031826249308766, -21.3806062223753]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[15.031826249308766, -21.3806062223753]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_579",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.2048686130628212, -1.8167831443763114]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2048686130628212, -1.8167831443763114]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_580",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.18834623414325388, -23.246755354919795]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.18834623414325388, -23.246755354919795]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_581",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.0487886550727563, -0.08874534851000787]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0487886550727563, -0.08874534851000787]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_582",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.209182304258527, 0.0863530723571177]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.209182304258527, 0.0863530723571177]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_583",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.10776593159110763, -0.3480953013126622]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.10776593159110763, -0.3480953013126622]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_584",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.133522081045293, 0.9183216994123944]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.133522081045293, 0.9183216994123944]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_585",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[118.4977340886278, -13122.418295677933]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[118.4977340886278, -13122.418295677933]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_586",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8957107579562492, -5.938784625453805]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8957107579562492, -5.938784625453805]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_587",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[20.524943741691647, -494.8724769000629]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[20.524943741691647, -494.8724769000629]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_588",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.232943067630801, -1.2008193136707153]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.232943067630801, -1.2008193136707153]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_589",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3277146045915118, -128.14725811586717]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3277146045915118, -128.14725811586717]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_590",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.3579314019608404, -4584.850654324711]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3579314019608404, -4584.850654324711]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_591",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.1589360344379629, -133.68577826351543]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1589360344379629, -133.68577826351543]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_592",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.7971390633542929, -14.831017536831443]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7971390633542929, -14.831017536831443]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_593",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.052506059446331944, -2.4182321050832223]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.052506059446331944, -2.4182321050832223]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_594",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-148.33318120775172, -120.59960982622984]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-148.33318120775172, -120.59960982622984]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_595",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[39.907192065407536, -37.4289162210243]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[39.907192065407536, -37.4289162210243]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_596",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-14.11417008454458, -2.7683253847447333]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-14.11417008454458, -2.7683253847447333]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_597",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.47032483671854325, 0.015091900436553497]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.47032483671854325, 0.015091900436553497]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_598",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.19459187440045453, -2178.156684975439]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.19459187440045453, -2178.156684975439]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_599",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.13643537971022016, -11.83379973258196]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.13643537971022016, -11.83379973258196]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_600",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.10816333609680166, -0.01686396732277739]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.10816333609680166, -0.01686396732277739]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_601",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.15599407016153224, -20.056647572989206]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.15599407016153224, -20.056647572989206]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_602",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.7500807173233475, -1439.2141611218717]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.7500807173233475, -1439.2141611218717]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_603",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8026481875582441, -1.2455320012420166]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8026481875582441, -1.2455320012420166]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_604",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8864938679457639, -2.825420635913602]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8864938679457639, -2.825420635913602]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_605",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[73.17909344478353, 6.786522773878952]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[73.17909344478353, 6.786522773878952]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_606",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-60.72929693232518, -133.98633897802472]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-60.72929693232518, -133.98633897802472]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_607",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-133.2092732738715, 184.26742997882806]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-133.2092732738715, 184.26742997882806]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_608",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7208675050238157, 0.1236827106106671]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7208675050238157, 0.1236827106106671]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_609",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.18173689100182303, 0.00802500578670394]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.18173689100182303, 0.00802500578670394]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_610",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.22626438627937007, -2.425573072639286]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.22626438627937007, -2.425573072639286]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_611",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.19594143133943595, -0.6378040752357066]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.19594143133943595, -0.6378040752357066]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_612",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[19.32862975154607, 15.819891325664553]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[19.32862975154607, 15.819891325664553]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_613",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.1227363941926205, 0.4860009499960707]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.1227363941926205, 0.4860009499960707]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_614",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.03617813086818211, -2.2659239486884806]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.03617813086818211, -2.2659239486884806]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_615",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.018457930686512, 0.3253752146677629]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.018457930686512, 0.3253752146677629]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_616",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.29843432825709887, -0.5082445651221347]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.29843432825709887, -0.5082445651221347]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_617",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[12.718882680678853, 3.7604119432390277]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.718882680678853, 3.7604119432390277]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_618",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.8107981431334006, -34407.197691099056]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8107981431334006, -34407.197691099056]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_619",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.677430579717503, 0.5096669390117858]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.677430579717503, 0.5096669390117858]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_620",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[157.87193137663965, -184.26823030552947]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[157.87193137663965, -184.26823030552947]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_621",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.853980297822213, 4.031588547243722]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.853980297822213, 4.031588547243722]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_622",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.387274992745954, -0.5597556180508617]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.387274992745954, -0.5597556180508617]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_623",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.41065855878763946, -0.01829472618493634]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.41065855878763946, -0.01829472618493634]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_624",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7793509480509884, -106.6754377665529]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7793509480509884, -106.6754377665529]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_625",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.4881512239478834, -0.3756483634855152]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4881512239478834, -0.3756483634855152]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_626",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.00183611352715074, -0.10670515761380642]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.00183611352715074, -0.10670515761380642]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_627",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8325898978949379, -0.39276463194538846]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8325898978949379, -0.39276463194538846]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_628",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.29192384722925, -96.56789963542154]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.29192384722925, -96.56789963542154]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_629",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.21582299792225798, -0.03976286966941271]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.21582299792225798, -0.03976286966941271]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_630",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.042437649485339346, -0.39890881911272325]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.042437649485339346, -0.39890881911272325]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_631",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.21534738616908347, 0.0023292190786079543]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.21534738616908347, 0.0023292190786079543]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_632",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.20473672645148003, -49.27643860276705]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.20473672645148003, -49.27643860276705]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_633",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.18042972986555905, -56.58725755703876]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.18042972986555905, -56.58725755703876]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_634",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.062546018440976, -2.915786079114442]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.062546018440976, -2.915786079114442]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_635",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.48369806866124304, -0.8413507469506709]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.48369806866124304, -0.8413507469506709]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_636",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.11849009469343293, -0.19422056697817486]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11849009469343293, -0.19422056697817486]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_637",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6485460819120378, -0.831247011866956]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6485460819120378, -0.831247011866956]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_638",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.37343210486794415, -0.09006540508045051]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.37343210486794415, -0.09006540508045051]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_639",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.30084355290599246, -7.848483039624951]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.30084355290599246, -7.848483039624951]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_640",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6086299583707162, -85310.80312396443]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6086299583707162, -85310.80312396443]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_641",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.221042690762925, -0.36591948781040334]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.221042690762925, -0.36591948781040334]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_642",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.1649982486407775, -0.6386848865020593]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.1649982486407775, -0.6386848865020593]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_643",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.05726002072886501, -0.03126465062070824]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.05726002072886501, -0.03126465062070824]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_644",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-230.27274827011945, -395.21273400950736]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-230.27274827011945, -395.21273400950736]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_645",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[103.89278014838528, 65.06765256925368]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[103.89278014838528, 65.06765256925368]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_646",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-289.8231621106053, -1309.5446112234958]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-289.8231621106053, -1309.5446112234958]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_647",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.9439478453817348, -0.1311741877199689]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9439478453817348, -0.1311741877199689]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_648",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.07396577705803242, -3687.449319593661]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.07396577705803242, -3687.449319593661]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_649",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.285358682917652, -0.4374973223353644]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.285358682917652, -0.4374973223353644]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_650",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.164719424028344, -1.6013936662601136]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.164719424028344, -1.6013936662601136]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_651",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5288122438733075, 0.05055515061571175]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5288122438733075, 0.05055515061571175]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_652",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.04599595453456488, -0.042511960098772145]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.04599595453456488, -0.042511960098772145]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_653",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.36301604523122305, -3.8564927408649607]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.36301604523122305, -3.8564927408649607]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_654",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.633249073004778, -0.09390481749328591]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.633249073004778, -0.09390481749328591]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_655",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[105.2406863772215, 87.02546195605831]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[105.2406863772215, 87.02546195605831]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_656",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.5543602652711295, 2.459156196373756]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.5543602652711295, 2.459156196373756]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_657",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.05138642413489736, -464.4015204776694]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.05138642413489736, -464.4015204776694]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_658",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[13.26062748212526, -231.50210145565362]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[13.26062748212526, -231.50210145565362]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_659",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.4113904185477087, -3.4070193566953395]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4113904185477087, -3.4070193566953395]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_660",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.49090266900909096, -3.8372110729698337]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.49090266900909096, -3.8372110729698337]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_661",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.4192696443666703, -7.847540281161375]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4192696443666703, -7.847540281161375]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_662",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.07312223703652425, -0.004628477129321379]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.07312223703652425, -0.004628477129321379]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_663",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.17194637760986278, -1.8349773366947721]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.17194637760986278, -1.8349773366947721]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_664",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-69.27999983973591, -363.6384516407659]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-69.27999983973591, -363.6384516407659]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_665",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.332986948509699, -3.4045343227284963]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.332986948509699, -3.4045343227284963]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_666",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.211913957524524, -0.2683989052738389]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.211913957524524, -0.2683989052738389]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_667",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6623616848113766, -63.830143891085584]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6623616848113766, -63.830143891085584]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_668",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.27017900078469076, -245.5569995919945]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.27017900078469076, -245.5569995919945]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_669",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5516158291337344, -1.3141155431512057]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5516158291337344, -1.3141155431512057]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_670",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.398299238616145, -2.1078079493282433]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.398299238616145, -2.1078079493282433]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_671",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.049279940933511325, -0.19284577173657574]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.049279940933511325, -0.19284577173657574]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_672",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[26.564207079799747, -8.623272077128785]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[26.564207079799747, -8.623272077128785]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_673",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.911845361586604, -16.44152924312347]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.911845361586604, -16.44152924312347]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_674",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3414698250625848, -31.577541911147012]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3414698250625848, -31.577541911147012]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_675",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-30.950898457832242, -83.82835415275602]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-30.950898457832242, -83.82835415275602]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_676",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.04300866279391088, -307.9977510160007]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.04300866279391088, -307.9977510160007]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_677",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.044597091915620446, -1148.6499595875869]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.044597091915620446, -1148.6499595875869]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_678",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.19994173359066955, -26.32109500601977]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.19994173359066955, -26.32109500601977]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_679",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.632203939521443, -16.10271974801229]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.632203939521443, -16.10271974801229]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_680",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.41788760067070313, 0.01763543099858711]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.41788760067070313, 0.01763543099858711]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_681",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.0041297662138857, -6.349241413861241]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0041297662138857, -6.349241413861241]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_682",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[20.188291692121332, -8.658491727141596]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[20.188291692121332, -8.658491727141596]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_683",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.11087385640198504, -1.3734800933261262]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11087385640198504, -1.3734800933261262]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_684",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.9940404201229733, 0.23375804798974475]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9940404201229733, 0.23375804798974475]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_685",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.1138253983555364, -0.09599555652696717]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1138253983555364, -0.09599555652696717]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_686",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[10.637417061374007, 6.018843917019984]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.637417061374007, 6.018843917019984]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_687",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.255756115147828, -36.77479202704418]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.255756115147828, -36.77479202704418]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_688",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6429616915721396, -13.773867888558106]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6429616915721396, -13.773867888558106]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_689",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.054949063998333, -5.882501547855873]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.054949063998333, -5.882501547855873]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_690",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.758047147696666, -46.872214299351626]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.758047147696666, -46.872214299351626]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_691",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6491627926488669, 0.10438637110605525]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6491627926488669, 0.10438637110605525]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_692",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.8468195479880019, -50.542871541640665]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8468195479880019, -50.542871541640665]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_693",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6257215246003519, -0.7345588514885371]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6257215246003519, -0.7345588514885371]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_694",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.164188640473619, 1.0537786714386215]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.164188640473619, 1.0537786714386215]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_695",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.843693630124532, -0.20385549846835727]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.843693630124532, -0.20385549846835727]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_696",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.30577588192831334, 0.012557093247438492]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.30577588192831334, 0.012557093247438492]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_697",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[49.13545268428598, -36.23715198743038]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[49.13545268428598, -36.23715198743038]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_698",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-20.156877389925743, -529.8984259230215]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-20.156877389925743, -529.8984259230215]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_699",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.13912863280554766, -0.4734799994783577]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.13912863280554766, -0.4734799994783577]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_700",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.5901531097806176, -9141.112632338816]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5901531097806176, -9141.112632338816]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_701",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.10346932660047951, -14.78698986317293]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.10346932660047951, -14.78698986317293]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_702",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.20484646450854563, -0.024248771011743334]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.20484646450854563, -0.024248771011743334]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_703",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.1471574246329231, -2.1201894273350015]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1471574246329231, -2.1201894273350015]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_704",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.08644185372738485, -359.083490804162]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08644185372738485, -359.083490804162]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_705",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.11967009300740698, -3.916571187934786]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11967009300740698, -3.916571187934786]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_706",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.545947513416825, 0.00782945932735242]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.545947513416825, 0.00782945932735242]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_707",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.3468382475374918, -255.3959762355208]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3468382475374918, -255.3959762355208]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_708",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[85.70857205480604, 215.43798692921433]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[85.70857205480604, 215.43798692921433]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_709",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.503206916882941, -332773.4705993379]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.503206916882941, -332773.4705993379]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_710",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.24861232462439262, 0.015330517466365687]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.24861232462439262, 0.015330517466365687]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_711",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5054018545809486, -0.1957694025309814]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5054018545809486, -0.1957694025309814]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_712",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-40.86339283173415, -136.43176379668373]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-40.86339283173415, -136.43176379668373]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_713",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[24.03795320042299, -2.2519177854606056]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[24.03795320042299, -2.2519177854606056]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_714",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.4908693172625475, 0.03198740873546622]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4908693172625475, 0.03198740873546622]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_715",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.18490297551956614, -2.3930625842110054]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.18490297551956614, -2.3930625842110054]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_716",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.122516432069879, 2.8959260705322905]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.122516432069879, 2.8959260705322905]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_717",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8609833818229036, -108.99676106925058]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8609833818229036, -108.99676106925058]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_718",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6557913619336498, -562.9478405867475]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6557913619336498, -562.9478405867475]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_719",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.067211098837979, -0.2524904736021912]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.067211098837979, -0.2524904736021912]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_720",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.3996847870506315, 0.08030510742139876]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3996847870506315, 0.08030510742139876]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_721",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[13.800457107099488, 4.4686990154466635]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[13.800457107099488, 4.4686990154466635]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_722",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.999416188680172, -4.847090822993218]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.999416188680172, -4.847090822993218]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_723",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8184925768097786, -20.180730940890054]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8184925768097786, -20.180730940890054]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_724",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5135565747297153, 0.050095682832249244]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5135565747297153, 0.050095682832249244]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_725",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-19.068130727913243, 40.43918500051526]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-19.068130727913243, 40.43918500051526]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_726",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.844007895179395, 7.668392583111057]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.844007895179395, 7.668392583111057]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_727",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-36.40520879560089, -100474.67514931118]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-36.40520879560089, -100474.67514931118]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_728",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.9914428635614326, -23.96247136990921]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9914428635614326, -23.96247136990921]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_729",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.030247816193726147, -0.11721265197363168]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.030247816193726147, -0.11721265197363168]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_730",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5704115160176322, -489.82999707852827]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5704115160176322, -489.82999707852827]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_731",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-29.1783349417649, 203.92956540968626]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-29.1783349417649, 203.92956540968626]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_732",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.005593964662300961, -0.8961830763016216]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.005593964662300961, -0.8961830763016216]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_733",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.28942807715041013, -531.8233500793417]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.28942807715041013, -531.8233500793417]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_734",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.8629386977105864, -12.684282617867789]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.8629386977105864, -12.684282617867789]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_735",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.906336458779156, -1646.0113456456725]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.906336458779156, -1646.0113456456725]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_736",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.01178196784808172, -8.992139463076553e-05]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.01178196784808172, -8.992139463076553e-05]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_737",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-8.207964212692316, -219.6428252097275]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.207964212692316, -219.6428252097275]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_738",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.11065564701055701, -2.6403619241016676]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.11065564701055701, -2.6403619241016676]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_739",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7321023908962342, -5165.856366409141]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7321023908962342, -5165.856366409141]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_740",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6007330919116057, -1.710626045187766]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6007330919116057, -1.710626045187766]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_741",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.03243520616131157, -3.960027238199121]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.03243520616131157, -3.960027238199121]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_742",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.429764812699347, -0.08763366969200719]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.429764812699347, -0.08763366969200719]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_743",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.806334150337872, -2.2175765373043257]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.806334150337872, -2.2175765373043257]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_744",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-14.790316848204055, -8.57558379690969]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-14.790316848204055, -8.57558379690969]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_745",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.2665981481589888, -0.2366794943246417]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2665981481589888, -0.2366794943246417]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_746",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.350124487170289, -0.4299946612827661]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.350124487170289, -0.4299946612827661]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_747",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.4112916237186397, -6.669990034956149]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4112916237186397, -6.669990034956149]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_748",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-10.48083621829192, 7.584603454573984]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-10.48083621829192, 7.584603454573984]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_749",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.4744785488745091, -20.872515607074014]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4744785488745091, -20.872515607074014]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_750",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.2450649759658656, -38.289224437149855]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2450649759658656, -38.289224437149855]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_751",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.492363867959042, -115.9908169444635]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.492363867959042, -115.9908169444635]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_752",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.7811565986719725, 0.05593411394036392]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7811565986719725, 0.05593411394036392]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_753",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.20606120496442992, -5729.154818211604]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.20606120496442992, -5729.154818211604]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_754",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.327775837325029, -2.748572981537937]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.327775837325029, -2.748572981537937]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_755",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[734.9468567981559, -69.27501601155758]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[734.9468567981559, -69.27501601155758]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_756",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.030907062298226668, -0.0064782640158897835]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.030907062298226668, -0.0064782640158897835]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_757",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.279570529283784, -33188.695031240706]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.279570529283784, -33188.695031240706]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_758",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6896543998443008, 0.10068275408550713]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6896543998443008, 0.10068275408550713]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_759",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.14940573920391875, -0.01268810162387907]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.14940573920391875, -0.01268810162387907]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_760",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.05727544300632559, -121.98399500548062]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.05727544300632559, -121.98399500548062]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_761",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.2971018074751308, -0.020180209972920866]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2971018074751308, -0.020180209972920866]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_762",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.05783180834822521, 0.0005564952340404216]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.05783180834822521, 0.0005564952340404216]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_763",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[210.96796258435677, -10.52518334143487]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[210.96796258435677, -10.52518334143487]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_764",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.1132390325733239, -95369.90638663078]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1132390325733239, -95369.90638663078]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_765",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.12939873468739785, -0.0019470885602827052]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.12939873468739785, -0.0019470885602827052]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_766",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-78.65019463124739, -704.7481851281129]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-78.65019463124739, -704.7481851281129]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_767",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[12.370639433325115, 5.161139885696787]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.370639433325115, 5.161139885696787]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_768",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6235338020967953, -0.06842727245101714]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6235338020967953, -0.06842727245101714]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_769",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3695667855224958, -1.3005038882696707]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3695667855224958, -1.3005038882696707]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_770",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[309.3069138921596, -3614.2090679187854]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[309.3069138921596, -3614.2090679187854]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_771",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.15712060395944868, -6.812300983905392]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.15712060395944868, -6.812300983905392]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_772",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.0021165521554016, -24.164649890673083]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0021165521554016, -24.164649890673083]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_773",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8650490027049419, -0.9481141168021822]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8650490027049419, -0.9481141168021822]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_774",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.465126832316112, -6.525164364573053]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.465126832316112, -6.525164364573053]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_775",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-50.140699586973405, -69.06351175021197]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-50.140699586973405, -69.06351175021197]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_776",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[910.3818232386633, -405.0006627939241]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[910.3818232386633, -405.0006627939241]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_777",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.45523684773197753, -403311.99033187685]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.45523684773197753, -403311.99033187685]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_778",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.04202578179376437, -7.5349077396623825]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.04202578179376437, -7.5349077396623825]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_779",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.13832064938428087, -58523.854253536134]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.13832064938428087, -58523.854253536134]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_780",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.0772323861763615, 0.03916626885977936]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0772323861763615, 0.03916626885977936]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_781",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.246520045081808, -0.8705314021791564]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.246520045081808, -0.8705314021791564]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_782",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.3390130430247463, 0.023691220596565497]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3390130430247463, 0.023691220596565497]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_783",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.616805411820783, -2589.9502863389293]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.616805411820783, -2589.9502863389293]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_784",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.42737570965027266, 0.045322665581708735]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.42737570965027266, 0.045322665581708735]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_785",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.3876885822481966, -0.30821877797099523]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3876885822481966, -0.30821877797099523]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_786",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.00938758533547, -13.195062892336532]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.00938758533547, -13.195062892336532]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_787",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[84.46652013111937, -11643.34079167708]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[84.46652013111937, -11643.34079167708]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_788",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.4223916940075245, -0.7555985247495816]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.4223916940075245, -0.7555985247495816]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_789",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.076104362214947, 2.256547515444409]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.076104362214947, 2.256547515444409]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_790",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.20962258734330627, -79895.28897243581]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.20962258734330627, -79895.28897243581]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_791",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.39470051359426667, -308.9048037056413]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.39470051359426667, -308.9048037056413]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_792",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.17157282578269709, -0.19819143827401148]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.17157282578269709, -0.19819143827401148]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_793",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.0453580576847703, -280.36706525219273]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0453580576847703, -280.36706525219273]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_794",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.805149791486086, 0.05628688457741349]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.805149791486086, 0.05628688457741349]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_795",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.034547974415615634, -2.9374508360246376]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.034547974415615634, -2.9374508360246376]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_796",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.669036835169492, -2104.214866591187]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.669036835169492, -2104.214866591187]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_797",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.43242242717918905, -12855.185375770025]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.43242242717918905, -12855.185375770025]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_798",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-520.2547114079756, -1292.6320996375216]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-520.2547114079756, -1292.6320996375216]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_799",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[38.2908253647664, -862.7373117345043]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[38.2908253647664, -862.7373117345043]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_800",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.05291030996563858, -0.3551791758891198]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.05291030996563858, -0.3551791758891198]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_801",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.871123906177401, -116.83954196889103]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.871123906177401, -116.83954196889103]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_802",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8530264088734962, -0.5892361113119695]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8530264088734962, -0.5892361113119695]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_803",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.7459257206705618, 0.7518460953666601]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.7459257206705618, 0.7518460953666601]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_804",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.0050477691747954, 0.2031828114481477]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0050477691747954, 0.2031828114481477]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_805",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.0718995212721123, -0.003159661769199782]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0718995212721123, -0.003159661769199782]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_806",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3028594431634514, -15.301379498517832]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3028594431634514, -15.301379498517832]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_807",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[13.050220164576379, 0.2990570273885066]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[13.050220164576379, 0.2990570273885066]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_808",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8364305823996497, -245.268688300767]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8364305823996497, -245.268688300767]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_809",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8310891612604122, -75.37114078650491]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8310891612604122, -75.37114078650491]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_810",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.24334262079501498, -1.659989103248966]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.24334262079501498, -1.659989103248966]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_811",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.04316889693317213, -0.06080679967602544]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.04316889693317213, -0.06080679967602544]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_812",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.324828660042721, -3.481247696803213]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.324828660042721, -3.481247696803213]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_813",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[61.275450588034566, -805.0692468191027]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[61.275450588034566, -805.0692468191027]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_814",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6482856541547398, -3.7507220362140696]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6482856541547398, -3.7507220362140696]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_815",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.84762223678562, -8.716960728814442]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.84762223678562, -8.716960728814442]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_816",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.230240277419654, -15.441871008539938]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.230240277419654, -15.441871008539938]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_817",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.45405268874771565, -111.92177895288407]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.45405268874771565, -111.92177895288407]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_818",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.040729802865831, 0.23771658156531927]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.040729802865831, 0.23771658156531927]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_819",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.19151757419371607, 0.0010730742972156783]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.19151757419371607, 0.0010730742972156783]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_820",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.8707298517168092, -2.4094066566799826]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8707298517168092, -2.4094066566799826]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_821",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.6988327898678333, -0.314116324686475]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.6988327898678333, -0.314116324686475]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_822",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-17.470083117529892, 35.795868839836174]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-17.470083117529892, 35.795868839836174]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_823",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.005649076148505887, -0.008313693350967072]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.005649076148505887, -0.008313693350967072]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_824",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.9516117300446463, -7.1115031400576365]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9516117300446463, -7.1115031400576365]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_825",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.1981180215333835, -3.490903856957421]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.1981180215333835, -3.490903856957421]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_826",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.357514033150665, 4.606818347065335]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.357514033150665, 4.606818347065335]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_827",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.586290719019911, -9.726137469804106]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.586290719019911, -9.726137469804106]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_828",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[24.463614045827523, 31.597466553814296]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[24.463614045827523, 31.597466553814296]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_829",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.4928765687860411, -86.48124812606129]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4928765687860411, -86.48124812606129]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_830",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.055839429667558, 0.15068851111643397]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.055839429667558, 0.15068851111643397]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_831",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.851930365590961, -374.66686322012714]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.851930365590961, -374.66686322012714]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_832",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.41471656538043, -211.1762086092711]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.41471656538043, -211.1762086092711]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_833",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.35656695244705955, 0.005511219029787569]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.35656695244705955, 0.005511219029787569]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_834",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.060844587045863076, -0.5746377804867815]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.060844587045863076, -0.5746377804867815]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_835",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.252507999288289, -275.077569102019]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.252507999288289, -275.077569102019]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_836",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.21781659211735138, -0.9056708267572462]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.21781659211735138, -0.9056708267572462]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_837",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.03546873047535352, -2.8287897240879194]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.03546873047535352, -2.8287897240879194]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_838",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8312704497433732, -2.509637129295367]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8312704497433732, -2.509637129295367]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_839",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[95.51378368888874, 206.42816562878812]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[95.51378368888874, 206.42816562878812]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_840",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.146675560799875, -5027.026125970729]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.146675560799875, -5027.026125970729]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_841",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.2912086419569577, -0.0036111488706626477]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2912086419569577, -0.0036111488706626477]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_842",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.17325518254883457, -0.14799811237728622]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.17325518254883457, -0.14799811237728622]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_843",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[14.71233502134785, -47.84312064215331]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[14.71233502134785, -47.84312064215331]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_844",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[55.31436907894585, -741.0608266831362]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[55.31436907894585, -741.0608266831362]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_845",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.358846051225934, -268.04073137757945]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.358846051225934, -268.04073137757945]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_846",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-11.741323684803438, -13.87537096533411]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.741323684803438, -13.87537096533411]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_847",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.045919071305884, -212.60567338118253]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.045919071305884, -212.60567338118253]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_848",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.4572564759503677, -0.2924829871387105]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.4572564759503677, -0.2924829871387105]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_849",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5913437894211228, -0.2688673626316707]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5913437894211228, -0.2688673626316707]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_850",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.28378611179697, -110.61686102346519]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.28378611179697, -110.61686102346519]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_851",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.13701614829893102, -65.40197767679875]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.13701614829893102, -65.40197767679875]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_852",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.0559982141208277, 0.2298328757524032]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0559982141208277, 0.2298328757524032]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_853",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.3101615996560265, -8552.984880829146]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.3101615996560265, -8552.984880829146]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_854",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.037659003946524695, -42.65148507702576]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.037659003946524695, -42.65148507702576]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_855",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.21533884498135447, -231.92503827261547]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.21533884498135447, -231.92503827261547]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_856",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3547855168871596, -0.03288195537517427]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3547855168871596, -0.03288195537517427]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_857",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.7450101597546832, -5.4047777442141225]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7450101597546832, -5.4047777442141225]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_858",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.1407535863952596, -0.008174372915115035]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1407535863952596, -0.008174372915115035]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_859",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-18.104732244584948, 80.8012177153372]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-18.104732244584948, 80.8012177153372]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_860",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.21819083011496443, 0.003278097754510066]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.21819083011496443, 0.003278097754510066]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_861",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5001601741415564, -0.04164709673278202]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5001601741415564, -0.04164709673278202]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_862",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.8020822077950642, -0.24108422824649844]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8020822077950642, -0.24108422824649844]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_863",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[51.91137893173734, 15.076479332797028]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[51.91137893173734, 15.076479332797028]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_864",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6797670754522556, -33759.62325046723]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6797670754522556, -33759.62325046723]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_865",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.036683555649884424, -0.002684745828751073]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.036683555649884424, -0.002684745828751073]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_866",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.1830245823868517, -2.4845926560285725]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1830245823868517, -2.4845926560285725]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_867",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.06348704453951141, -0.005378420280205492]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06348704453951141, -0.005378420280205492]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_868",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.047067742250447964, -52.514757010309374]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.047067742250447964, -52.514757010309374]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_869",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.0819038951478563, -123.71293487378829]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.0819038951478563, -123.71293487378829]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_870",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-11.936600449130482, -2598.5865551646634]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.936600449130482, -2598.5865551646634]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_871",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.3047520321651607, -5.372129120701039]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3047520321651607, -5.372129120701039]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_872",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[562.9728288443317, 254.58896215742473]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[562.9728288443317, 254.58896215742473]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_873",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.047094514594239335, -0.9730127732311987]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.047094514594239335, -0.9730127732311987]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_874",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.7550586176919867, -0.34866537392479563]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.7550586176919867, -0.34866537392479563]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_875",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.1424485443655676, -147.785303500029]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.1424485443655676, -147.785303500029]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_876",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[20.935237583386513, -557.9214935503159]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[20.935237583386513, -557.9214935503159]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_877",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.08032024002645162, -0.24495514678880836]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.08032024002645162, -0.24495514678880836]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_878",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.6294161533681661, -9.028693333765506]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.6294161533681661, -9.028693333765506]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_879",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.3751567356267372, -0.10744135918884773]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3751567356267372, -0.10744135918884773]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_880",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.10376635495747218, -492.8047922957533]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.10376635495747218, -492.8047922957533]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_881",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-61.79365552331199, 134.63530253907814]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-61.79365552331199, 134.63530253907814]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_882",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.015166395353481, -1.1267605130884415]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.015166395353481, -1.1267605130884415]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_883",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-11.844840331001434, -35.69626609455448]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.844840331001434, -35.69626609455448]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_884",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.400720075209015, -740.0282903003882]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.400720075209015, -740.0282903003882]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_885",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-22.94864460587813, -12311.37260505181]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-22.94864460587813, -12311.37260505181]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_886",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.308057781282676, 0.06381449589616121]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.308057781282676, 0.06381449589616121]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_887",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3652659135971321, 0.030259761891228438]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3652659135971321, 0.030259761891228438]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_888",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.06875060314937942, -609.0990217784714]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06875060314937942, -609.0990217784714]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_889",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5378959723611617, -0.5275800438859952]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5378959723611617, -0.5275800438859952]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_890",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.30474510033570296, -0.37868688088651914]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.30474510033570296, -0.37868688088651914]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_891",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[68.34737770170192, 40.196497520862664]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[68.34737770170192, 40.196497520862664]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_892",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.7111070515404665, 0.6985524360873008]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7111070515404665, 0.6985524360873008]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_893",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.9569166104997855, -16.072242090856093]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.9569166104997855, -16.072242090856093]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_894",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-39.03953412093099, -177.87081627460262]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-39.03953412093099, -177.87081627460262]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_895",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[10.772664454580715, -7.194967867892816]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.772664454580715, -7.194967867892816]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_896",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.3923990623310851, -1.4914267890388726]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3923990623310851, -1.4914267890388726]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_897",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.7679923013997336, -7.606823751473521]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.7679923013997336, -7.606823751473521]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_898",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5807059947054919, 0.029717609684902842]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5807059947054919, 0.029717609684902842]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_899",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8124289560366474, 0.1253452683893098]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8124289560366474, 0.1253452683893098]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_900",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.03567532803998249, -0.1491905862865391]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.03567532803998249, -0.1491905862865391]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_901",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.560150086119779, -6.4847778476024835]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.560150086119779, -6.4847778476024835]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_902",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.1374376318142128, -1434.6335528151885]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.1374376318142128, -1434.6335528151885]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_903",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.4436900456142818, -0.10499561025259191]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4436900456142818, -0.10499561025259191]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_904",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.49552173989981246, 0.030397401136112473]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.49552173989981246, 0.030397401136112473]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_905",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.26033192050638515, -193.86919276837367]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.26033192050638515, -193.86919276837367]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_906",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.9000221593233415, 0.3828711591524002]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.9000221593233415, 0.3828711591524002]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_907",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[288.6088969468705, -88.83225401458085]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[288.6088969468705, -88.83225401458085]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_908",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6599066571702937, -1.1770211094238663]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6599066571702937, -1.1770211094238663]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_909",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8575026551682644, -58.873503118698295]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8575026551682644, -58.873503118698295]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_910",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6257591502224192, -0.07759530363339631]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6257591502224192, -0.07759530363339631]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_911",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-72.97505872207185, 1200.606380440046]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-72.97505872207185, 1200.606380440046]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_912",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.11792895885894843, -0.6598071043718651]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11792895885894843, -0.6598071043718651]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_913",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5363404763862575, 0.06297626435829287]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5363404763862575, 0.06297626435829287]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_914",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.13317861244890286, -495.526989865136]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.13317861244890286, -495.526989865136]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_915",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.751894048085281, -0.8931959438470143]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.751894048085281, -0.8931959438470143]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_916",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-16.665224813294355, 66.8941730405344]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.665224813294355, 66.8941730405344]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_917",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-58.117677068166216, -8785.849256566473]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-58.117677068166216, -8785.849256566473]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_918",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.636277765407124, -0.19503490149214445]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.636277765407124, -0.19503490149214445]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_919",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.08627830741499849, -18.399950435571625]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.08627830741499849, -18.399950435571625]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_920",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.9978401704085414, 0.08832097079532537]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9978401704085414, 0.08832097079532537]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_921",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.485912968264869, -0.1061166792254556]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.485912968264869, -0.1061166792254556]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_922",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.985126842398798, 3.565396249198365]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.985126842398798, 3.565396249198365]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_923",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.3354061886634123, -2.6954964558778736]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.3354061886634123, -2.6954964558778736]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_924",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.39457316313208146, 0.03846354389263656]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.39457316313208146, 0.03846354389263656]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_925",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.0519904251003603, -262.66304611515136]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0519904251003603, -262.66304611515136]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_926",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.124331309349587, 0.15098314799050266]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.124331309349587, 0.15098314799050266]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_927",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6146997769536272, -7.579639113874936e-05]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6146997769536272, -7.579639113874936e-05]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_928",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.4639043831475946, -1.706241026505653]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.4639043831475946, -1.706241026505653]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_929",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.834316017870254, 0.09980867726841595]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.834316017870254, 0.09980867726841595]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_930",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-456.2467652607497, 1038.183134059225]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-456.2467652607497, 1038.183134059225]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_931",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.5140201243536873, 0.8167125026959565]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.5140201243536873, 0.8167125026959565]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_932",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.0010905125362197972, -14195.354710698217]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0010905125362197972, -14195.354710698217]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_933",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-251.35917359779296, -69.23777646233268]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-251.35917359779296, -69.23777646233268]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_934",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-41.64219480497645, 13.714939680477555]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-41.64219480497645, 13.714939680477555]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_935",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.03947148780978704, -0.015129871589454266]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.03947148780978704, -0.015129871589454266]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_936",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-12.472789591274442, -332.6888117837644]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.472789591274442, -332.6888117837644]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_937",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.9840557576765585, -0.23519341624087084]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.9840557576765585, -0.23519341624087084]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_938",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.06090088976188849, -0.010558437502436235]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06090088976188849, -0.010558437502436235]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_939",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.252743054530742, -0.483221204517361]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.252743054530742, -0.483221204517361]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_940",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.26311687291716773, -0.6368670724123486]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.26311687291716773, -0.6368670724123486]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_941",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.16603903447314, -98727.97926313944]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.16603903447314, -98727.97926313944]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_942",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-53.349782827776885, 12.238962039221638]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-53.349782827776885, 12.238962039221638]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_943",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[10.505159426372522, 2.278225429596955]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.505159426372522, 2.278225429596955]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_944",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.468615509783572, 0.6894173776575192]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.468615509783572, 0.6894173776575192]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_945",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6603144781913555, 0.08931962211857822]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6603144781913555, 0.08931962211857822]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_946",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.21987458705404736, -1089.724531824319]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.21987458705404736, -1089.724531824319]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_947",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.4607242990075527, -115.45387298321965]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4607242990075527, -115.45387298321965]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_948",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[10.902155687607609, -15.416550041557002]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.902155687607609, -15.416550041557002]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_949",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.43650787090882837, -7.063158301306568]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.43650787090882837, -7.063158301306568]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_950",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.9128366058901558, -2.0886928347187363]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9128366058901558, -2.0886928347187363]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_951",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-55.20183737355216, -4829.48745261002]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-55.20183737355216, -4829.48745261002]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_952",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.795823810930177, -0.1907769607751858]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.795823810930177, -0.1907769607751858]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_953",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.18094790172541164, -0.028384515512462526]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.18094790172541164, -0.028384515512462526]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_954",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.090946798989212, 0.4465385342964806]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.090946798989212, 0.4465385342964806]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_955",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.1752788201628955, -7.4240238438418915]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1752788201628955, -7.4240238438418915]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_956",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.14970246673756246, -0.30069583860379195]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.14970246673756246, -0.30069583860379195]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_957",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.911983493198472, -0.15643895155809268]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.911983493198472, -0.15643895155809268]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_958",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.042341883824835135, -0.7027581181935217]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.042341883824835135, -0.7027581181935217]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_959",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.05405251741177223, -0.03524750470629272]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.05405251741177223, -0.03524750470629272]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_960",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.13524058469011532, -0.4781504439600744]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.13524058469011532, -0.4781504439600744]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_961",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.09437407698513045, -29.72894865052874]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.09437407698513045, -29.72894865052874]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_962",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.0163185998600357, -0.7581890553974988]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0163185998600357, -0.7581890553974988]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_963",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.11250748639864809, -0.024853004796014395]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11250748639864809, -0.024853004796014395]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_964",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.07792176714765864, -0.0812622884202684]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.07792176714765864, -0.0812622884202684]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_965",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8627013739464782, -2.020307391543488]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8627013739464782, -2.020307391543488]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_966",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5188451705268248, -69.92475371387401]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5188451705268248, -69.92475371387401]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_967",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.01721794042267466, -0.11882556686824532]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.01721794042267466, -0.11882556686824532]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_968",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.02489394400707723, -0.008292854765360274]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.02489394400707723, -0.008292854765360274]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_969",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[124.86086256119982, -165.31136034268187]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[124.86086256119982, -165.31136034268187]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_970",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.3174588358033595, -9.534670410018258]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3174588358033595, -9.534670410018258]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_971",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.023898582370416827, -11.328628079022652]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.023898582370416827, -11.328628079022652]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_972",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7633567054692567, 0.12003625880517246]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7633567054692567, 0.12003625880517246]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_973",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.08727457752379537, -0.0117603098422307]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08727457752379537, -0.0117603098422307]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_974",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.7234178513665936, 0.28037630649473916]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7234178513665936, 0.28037630649473916]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_975",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.3883348698696354, -445.7952057674857]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3883348698696354, -445.7952057674857]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_976",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.9611102786499433, -0.08505366075584675]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.9611102786499433, -0.08505366075584675]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_977",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.012284379935041981, -0.2492962649966676]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.012284379935041981, -0.2492962649966676]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_978",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.1746269265190474, -24.863209885807695]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1746269265190474, -24.863209885807695]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_979",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.4361520936409915, -3.4057275792350454]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4361520936409915, -3.4057275792350454]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_980",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.4497140571724854, -62.75494987570663]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4497140571724854, -62.75494987570663]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_981",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.725988760456363, -486.0062355773572]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.725988760456363, -486.0062355773572]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_982",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.07567367605290405, -1802.348774760387]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.07567367605290405, -1802.348774760387]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_983",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[33.56472032729284, -6.8083242074385275]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[33.56472032729284, -6.8083242074385275]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_984",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.4911061750012482, -1.861756340615953]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4911061750012482, -1.861756340615953]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_985",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.4020686971941525, 0.0901728880169774]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.4020686971941525, 0.0901728880169774]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_986",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.697546460751528, -276.76171197662165]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.697546460751528, -276.76171197662165]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_987",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6056690400586655, -5.79586581616869]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6056690400586655, -5.79586581616869]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_988",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.656893533401446, -0.08611520166430325]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.656893533401446, -0.08611520166430325]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_989",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.036376755097910975, -8.768837543548829]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.036376755097910975, -8.768837543548829]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_990",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.633162589271971, 3.148045243052701]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.633162589271971, 3.148045243052701]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_991",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.11224107370864471, -2.1471661613386273]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.11224107370864471, -2.1471661613386273]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_992",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-360.0370990641027, 450.83029458227514]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-360.0370990641027, 450.83029458227514]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_993",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.11491075282641, -7.344268137796556]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.11491075282641, -7.344268137796556]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_994",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.538711897199561, 7.501948190010651]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.538711897199561, 7.501948190010651]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_995",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8316311338998689, -0.06403462140622701]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8316311338998689, -0.06403462140622701]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_996",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[150.1934150496122, 21.633225136993023]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[150.1934150496122, 21.633225136993023]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_997",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.514382474980726, 3.4881724438546637]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.514382474980726, 3.4881724438546637]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_998",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.579897936740338, -0.007958006391508808]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.579897936740338, -0.007958006391508808]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_999",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.3808882189500073, -0.2502851045549478]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3808882189500073, -0.2502851045549478]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "CubicRoot_0",
    "sat": "def sat(x: float, coeffs: List[float]=[2.0, 1.0, 0.0, 8.0]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.0, 1.0, 0.0, 8.0]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_1",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.03932984889383717, -1.0692346091139955, 306.1134183924369, -479.90508728277655]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.03932984889383717, -1.0692346091139955, 306.1134183924369, -479.90508728277655]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_2",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.095594560467563, -159.99679096427255, -0.159259144144972, 165.51976014660275]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.095594560467563, -159.99679096427255, -0.159259144144972, 165.51976014660275]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_3",
    "sat": "def sat(x: float, coeffs: List[float]=[0.35582099786362303, -0.4241362406061328, 0.0011329740131772088, 4.854179980043295]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.35582099786362303, -0.4241362406061328, 0.0011329740131772088, 4.854179980043295]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_4",
    "sat": "def sat(x: float, coeffs: List[float]=[18.690428451179034, 0.08520860313687839, -0.3730150434187456, 496166.3748157323]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[18.690428451179034, 0.08520860313687839, -0.3730150434187456, 496166.3748157323]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_5",
    "sat": "def sat(x: float, coeffs: List[float]=[-213.05384666034604, -0.35190493861107264, -0.11968160452076974, -0.01769844531929937]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-213.05384666034604, -0.35190493861107264, -0.11968160452076974, -0.01769844531929937]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_6",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8408066229176652, -7.923092599532541, 0.047644023186922256, 25.08201267014103]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8408066229176652, -7.923092599532541, 0.047644023186922256, 25.08201267014103]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_7",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.025089581813167783, 0.05240193492104087, 0.18617001479068981, -0.24831610885678787]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.025089581813167783, 0.05240193492104087, 0.18617001479068981, -0.24831610885678787]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_8",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.49426113683437195, -0.07059330893184741, -12.24370513876915, 2.8591379014110045]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.49426113683437195, -0.07059330893184741, -12.24370513876915, 2.8591379014110045]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_9",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3603908159161862, -2.330297990567838, 0.38625568741482413, -59321.6993014932]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3603908159161862, -2.330297990567838, 0.38625568741482413, -59321.6993014932]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_10",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8554122589298997, 69.44472702432266, 3.6868504636465826, -4.305714502798976]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8554122589298997, 69.44472702432266, 3.6868504636465826, -4.305714502798976]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_11",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1467576139813848, -0.17074974095603235, -461.4112386008678, -292.3183042939679]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1467576139813848, -0.17074974095603235, -461.4112386008678, -292.3183042939679]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_12",
    "sat": "def sat(x: float, coeffs: List[float]=[3.7336103329334, 7.495068483819575, 6.66572032446935, -16966293.165855154]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.7336103329334, 7.495068483819575, 6.66572032446935, -16966293.165855154]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_13",
    "sat": "def sat(x: float, coeffs: List[float]=[-8.718135290695313, -11.032960090159536, 2.1378847905141134, 382.8278002302418]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.718135290695313, -11.032960090159536, 2.1378847905141134, 382.8278002302418]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_14",
    "sat": "def sat(x: float, coeffs: List[float]=[0.550864338083214, -0.08682111818207987, 16.89380383994726, -67.95077247756765]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.550864338083214, -0.08682111818207987, 16.89380383994726, -67.95077247756765]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_15",
    "sat": "def sat(x: float, coeffs: List[float]=[7.141717094009927, -0.08215472920263404, -1.716423871561721, -66447058.020537205]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.141717094009927, -0.08215472920263404, -1.716423871561721, -66447058.020537205]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_16",
    "sat": "def sat(x: float, coeffs: List[float]=[0.07810212171185797, 35.79474914006301, -0.20083357854261497, -0.22169400198738545]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.07810212171185797, 35.79474914006301, -0.20083357854261497, -0.22169400198738545]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_17",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.04780100367211215, 0.260335371219689, 28.918113878698332, 72.2195991375891]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.04780100367211215, 0.260335371219689, 28.918113878698332, 72.2195991375891]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_18",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.30366923120742745, 3.7211446786987388, 1.9508537446848857, -24.755036643756583]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.30366923120742745, 3.7211446786987388, 1.9508537446848857, -24.755036643756583]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_19",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.8698959629056375, -0.43401398962749216, 1.5428418452109216, -6510.087238141847]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8698959629056375, -0.43401398962749216, 1.5428418452109216, -6510.087238141847]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_20",
    "sat": "def sat(x: float, coeffs: List[float]=[27.023637721842217, 3.181587450533927, -0.18185956824873042, -1249605.6455242445]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[27.023637721842217, 3.181587450533927, -0.18185956824873042, -1249605.6455242445]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_21",
    "sat": "def sat(x: float, coeffs: List[float]=[42.307299485885785, 0.41124703488474684, -1.070053334141219, -7484576.773582916]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[42.307299485885785, 0.41124703488474684, -1.070053334141219, -7484576.773582916]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_22",
    "sat": "def sat(x: float, coeffs: List[float]=[0.06880462833354277, -7.9057576691451485, 0.2999018335958972, 19.352883044598876]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06880462833354277, -7.9057576691451485, 0.2999018335958972, 19.352883044598876]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_23",
    "sat": "def sat(x: float, coeffs: List[float]=[-10.697427885961323, -0.6637708620050725, 0.8271614952093103, -24140.981297407925]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-10.697427885961323, -0.6637708620050725, 0.8271614952093103, -24140.981297407925]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_24",
    "sat": "def sat(x: float, coeffs: List[float]=[-195.71373946547635, -0.7231698575972919, -2.521638118617938, -7943.426944353115]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-195.71373946547635, -0.7231698575972919, -2.521638118617938, -7943.426944353115]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_25",
    "sat": "def sat(x: float, coeffs: List[float]=[372.4101423843279, 105.90217898787104, 0.09304124750826455, -10118.244156297518]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[372.4101423843279, 105.90217898787104, 0.09304124750826455, -10118.244156297518]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_26",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2786935883283708, -0.010510937931341427, -35.011780227500346, 73.32776426884624]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2786935883283708, -0.010510937931341427, -35.011780227500346, 73.32776426884624]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_27",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2942692063384711, -0.09430221987051894, 67.38556083709747, -106.43940073756374]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2942692063384711, -0.09430221987051894, 67.38556083709747, -106.43940073756374]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_28",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.48096187202024154, -1.1968470646710212, -0.2864613142377303, -0.28750482347019624]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.48096187202024154, -1.1968470646710212, -0.2864613142377303, -0.28750482347019624]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_29",
    "sat": "def sat(x: float, coeffs: List[float]=[0.47627497277612435, 0.1473435462094829, -0.571232734229986, 144.16703976065455]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.47627497277612435, 0.1473435462094829, -0.571232734229986, 144.16703976065455]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_30",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5993490698151515, 0.05365004935354337, 0.3833597416099333, 162.02147265760948]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5993490698151515, 0.05365004935354337, 0.3833597416099333, 162.02147265760948]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_31",
    "sat": "def sat(x: float, coeffs: List[float]=[0.28494936870943316, 1.6982017222466108, -0.6407651837984298, -0.16783331992265577]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.28494936870943316, 1.6982017222466108, -0.6407651837984298, -0.16783331992265577]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_32",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.11001610050337485, -3.184377595320006, 0.1253058931824337, 91.62840262905745]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11001610050337485, -3.184377595320006, 0.1253058931824337, 91.62840262905745]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_33",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3365160701581125, -21.927496366681012, -43.10572071870897, 10.393768900681044]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3365160701581125, -21.927496366681012, -43.10572071870897, 10.393768900681044]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_34",
    "sat": "def sat(x: float, coeffs: List[float]=[0.10053688197423442, 1.2757819247770292, 0.07549487341613766, -1073.6839555785152]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.10053688197423442, 1.2757819247770292, 0.07549487341613766, -1073.6839555785152]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_35",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1589053678953766, 0.47476508711079496, 11.46987807930949, -1.4887660337767268]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1589053678953766, 0.47476508711079496, 11.46987807930949, -1.4887660337767268]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_36",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.28007498296292477, 0.15212271874341043, -2.093017968997651, 0.44729040519420166]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.28007498296292477, 0.15212271874341043, -2.093017968997651, 0.44729040519420166]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_37",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.728186341398938, 0.1574167633262069, -5.123064280342466, 2.2213763899772676]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.728186341398938, 0.1574167633262069, -5.123064280342466, 2.2213763899772676]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_38",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1447880257668769, -1.5344984730796287, -20.991903831099187, -7.018587281049086]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1447880257668769, -1.5344984730796287, -20.991903831099187, -7.018587281049086]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_39",
    "sat": "def sat(x: float, coeffs: List[float]=[1.5171337610566973, -482.50304671481314, 0.29803710763632724, 3.6132011648622684]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5171337610566973, -482.50304671481314, 0.29803710763632724, 3.6132011648622684]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_40",
    "sat": "def sat(x: float, coeffs: List[float]=[4.085043925037192, 1.1328760091182277, -13.208610124592726, 6.654040305188418]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.085043925037192, 1.1328760091182277, -13.208610124592726, 6.654040305188418]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_41",
    "sat": "def sat(x: float, coeffs: List[float]=[4.32089167702578, -0.7517333187451914, -0.14793347274910076, -27.692170152547384]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.32089167702578, -0.7517333187451914, -0.14793347274910076, -27.692170152547384]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_42",
    "sat": "def sat(x: float, coeffs: List[float]=[11.626791697794573, 44.09784710987291, 1.1666795487869959, -85.39760728693716]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.626791697794573, 44.09784710987291, 1.1666795487869959, -85.39760728693716]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_43",
    "sat": "def sat(x: float, coeffs: List[float]=[0.138034619951515, -0.39400065119286093, 6.028398984939186, -1.3448464649687717]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.138034619951515, -0.39400065119286093, 6.028398984939186, -1.3448464649687717]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_44",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.26335013792787065, -0.2322259444503858, -140.29134747240406, -15.668868714836867]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.26335013792787065, -0.2322259444503858, -140.29134747240406, -15.668868714836867]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_45",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4733343149761929, 0.007514736581579602, -0.010031780129597045, 370.13984174195025]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4733343149761929, 0.007514736581579602, -0.010031780129597045, 370.13984174195025]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_46",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2840465326511135, 6.703744743899539, -0.10922701747702786, -0.5165668904224607]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2840465326511135, 6.703744743899539, -0.10922701747702786, -0.5165668904224607]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_47",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.619022121927216, 264.59366273065865, 0.2790908556667499, -350.1156979902463]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.619022121927216, 264.59366273065865, 0.2790908556667499, -350.1156979902463]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_48",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7403951110192257, -0.756740352578181, -1.525227931378334, -0.1627382082562151]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7403951110192257, -0.756740352578181, -1.525227931378334, -0.1627382082562151]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_49",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.045362356527460346, 0.4871052086117986, -0.8953048431007308, 0.4105190034939693]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.045362356527460346, 0.4871052086117986, -0.8953048431007308, 0.4105190034939693]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_50",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2645282098844208, 0.5512909442374224, -0.9041973083397737, -0.7247669746133434]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2645282098844208, 0.5512909442374224, -0.9041973083397737, -0.7247669746133434]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_51",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.19804062814080484, -0.10864795634175735, 0.003472297013468554, -0.005010436551006397]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.19804062814080484, -0.10864795634175735, 0.003472297013468554, -0.005010436551006397]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_52",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.18195416300929654, -4.177593474007311, -4.487496391954033, 3.3770040819112594]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.18195416300929654, -4.177593474007311, -4.487496391954033, 3.3770040819112594]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_53",
    "sat": "def sat(x: float, coeffs: List[float]=[40.84452865755687, -0.6642529694514264, -0.4773567347236159, -870935.6737697705]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[40.84452865755687, -0.6642529694514264, -0.4773567347236159, -870935.6737697705]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_54",
    "sat": "def sat(x: float, coeffs: List[float]=[0.050297473100062495, 3.708311131218043, 1.0363046048706976, -30.055152750113372]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.050297473100062495, 3.708311131218043, 1.0363046048706976, -30.055152750113372]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_55",
    "sat": "def sat(x: float, coeffs: List[float]=[15.693168681209725, -0.3204548028488849, 0.7247580494837527, -5232.8976939676695]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[15.693168681209725, -0.3204548028488849, 0.7247580494837527, -5232.8976939676695]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_56",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.16744369541066514, -0.6315939642366094, -170.70431642580024, 414.69688069678386]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.16744369541066514, -0.6315939642366094, -170.70431642580024, 414.69688069678386]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_57",
    "sat": "def sat(x: float, coeffs: List[float]=[9.416752570165075, -1.7009007087455157, 66.2946282713168, 13.436707431516629]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.416752570165075, -1.7009007087455157, 66.2946282713168, 13.436707431516629]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_58",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.18757926614152587, 2.3105469317604688, -1.1178140993074115, 0.13797522161464415]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.18757926614152587, 2.3105469317604688, -1.1178140993074115, 0.13797522161464415]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_59",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5287963172123943, 0.07515139454261432, 12.873433418093569, 4.470498932055268]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5287963172123943, 0.07515139454261432, 12.873433418093569, 4.470498932055268]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_60",
    "sat": "def sat(x: float, coeffs: List[float]=[1.1314972248142183, 15.995195563503763, -613.5224847484279, -4407.727498760365]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1314972248142183, 15.995195563503763, -613.5224847484279, -4407.727498760365]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_61",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6233172549984115, -4.6947255620123265, 1.1323387290470377, 4.102014254129755]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6233172549984115, -4.6947255620123265, 1.1323387290470377, 4.102014254129755]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_62",
    "sat": "def sat(x: float, coeffs: List[float]=[-18.90301041247293, 1.149931999305003, -26.476595962536944, 6.1308317370121586]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-18.90301041247293, 1.149931999305003, -26.476595962536944, 6.1308317370121586]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_63",
    "sat": "def sat(x: float, coeffs: List[float]=[-16.596172958338123, -1.6163199764322211, -0.007227953169565519, -12976.067588745294]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.596172958338123, -1.6163199764322211, -0.007227953169565519, -12976.067588745294]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_64",
    "sat": "def sat(x: float, coeffs: List[float]=[2.9986286974718657, -0.5680227215774242, -6.141560194795313, -0.867465587374639]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.9986286974718657, -0.5680227215774242, -6.141560194795313, -0.867465587374639]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_65",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.3500183161657398, -0.051005621602416396, 1.1282676458543441, -9.099179262929589]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.3500183161657398, -0.051005621602416396, 1.1282676458543441, -9.099179262929589]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_66",
    "sat": "def sat(x: float, coeffs: List[float]=[6.841392580212756, 0.049831385438806976, 11.500927242262643, -1527.1030056990644]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.841392580212756, 0.049831385438806976, 11.500927242262643, -1527.1030056990644]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_67",
    "sat": "def sat(x: float, coeffs: List[float]=[2.5487429264618733, -0.05327472619226311, 0.03380920699176889, -2.7474424819986507]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.5487429264618733, -0.05327472619226311, 0.03380920699176889, -2.7474424819986507]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_68",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.35152682205709834, 2.945358680404557, 0.3447687007735591, -21.8711265341566]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.35152682205709834, 2.945358680404557, 0.3447687007735591, -21.8711265341566]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_69",
    "sat": "def sat(x: float, coeffs: List[float]=[2.599413216785779, -1.4959061116486405, -0.6536847481295237, 378.33942780322093]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.599413216785779, -1.4959061116486405, -0.6536847481295237, 378.33942780322093]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_70",
    "sat": "def sat(x: float, coeffs: List[float]=[-57.94971471302347, 0.523527312345725, 18.37587051525356, -4.036392376210456]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-57.94971471302347, 0.523527312345725, 18.37587051525356, -4.036392376210456]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_71",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7851098384010243, -95.7208940464189, -0.1557047087884076, 5.163399206556133]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7851098384010243, -95.7208940464189, -0.1557047087884076, 5.163399206556133]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_72",
    "sat": "def sat(x: float, coeffs: List[float]=[0.292236369598806, -0.008295864491020563, 0.6217177395560678, 0.01097274403357547]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.292236369598806, -0.008295864491020563, 0.6217177395560678, 0.01097274403357547]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_73",
    "sat": "def sat(x: float, coeffs: List[float]=[-150.4164053324269, 0.3951068965521962, -0.08687176845192053, 18912.78955554521]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-150.4164053324269, 0.3951068965521962, -0.08687176845192053, 18912.78955554521]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_74",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.33356424637451515, 3.342525298694513, 41.74245630692511, 18.73723321261468]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.33356424637451515, 3.342525298694513, 41.74245630692511, 18.73723321261468]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_75",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2406299772884609, -0.4365009350149133, -0.11192783210021418, 0.10858207860814692]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2406299772884609, -0.4365009350149133, -0.11192783210021418, 0.10858207860814692]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_76",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8622203699448368, -2.0876809161846817, 3.847168480145345, 1.105918346462323]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8622203699448368, -2.0876809161846817, 3.847168480145345, 1.105918346462323]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_77",
    "sat": "def sat(x: float, coeffs: List[float]=[-19.69083758156619, -0.3757689636533225, -0.4862662958332325, -1275905.8991484542]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-19.69083758156619, -0.3757689636533225, -0.4862662958332325, -1275905.8991484542]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_78",
    "sat": "def sat(x: float, coeffs: List[float]=[0.23972673086685595, 12.531423805828267, -0.8107465905211245, -0.6118773591759518]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.23972673086685595, 12.531423805828267, -0.8107465905211245, -0.6118773591759518]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_79",
    "sat": "def sat(x: float, coeffs: List[float]=[21.62047490575591, -37.31911607268593, 7.021402539467444, 4.580312827719445]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[21.62047490575591, -37.31911607268593, 7.021402539467444, 4.580312827719445]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_80",
    "sat": "def sat(x: float, coeffs: List[float]=[3.9350356927304837, 0.6762740463213732, 145.26383260444342, -52.625040267425206]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.9350356927304837, 0.6762740463213732, 145.26383260444342, -52.625040267425206]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_81",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8296550244213184, 1.4408554281605046, -0.211572619134852, -4.936846940420391]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8296550244213184, 1.4408554281605046, -0.211572619134852, -4.936846940420391]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_82",
    "sat": "def sat(x: float, coeffs: List[float]=[0.08522114751649879, -0.2492481435434725, -0.7072159985840224, 0.09389775392884617]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08522114751649879, -0.2492481435434725, -0.7072159985840224, 0.09389775392884617]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_83",
    "sat": "def sat(x: float, coeffs: List[float]=[-9.943388905661282, 1.2698933222610111, -0.0036675074207804434, 0.6445094380636585]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.943388905661282, 1.2698933222610111, -0.0036675074207804434, 0.6445094380636585]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_84",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.7295293129922467, -0.8296631912588892, 3.8456970328658824, 0.038106724597413356]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.7295293129922467, -0.8296631912588892, 3.8456970328658824, 0.038106724597413356]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_85",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.07679710678701435, 0.5643724874938951, 3.526705847826164, -0.6226767979508315]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.07679710678701435, 0.5643724874938951, 3.526705847826164, -0.6226767979508315]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_86",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.5415135928974126, 3.8479630549190795, -0.42092340912388426, -0.021632146343376287]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.5415135928974126, 3.8479630549190795, -0.42092340912388426, -0.021632146343376287]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_87",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.228967478399354, 4.19015489304248, 0.10602193405700862, -2997.1086761508463]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.228967478399354, 4.19015489304248, 0.10602193405700862, -2997.1086761508463]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_88",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.11336672731038815, -0.057519027511776066, 2.1528828651079936, -1.4652344973145441]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11336672731038815, -0.057519027511776066, 2.1528828651079936, -1.4652344973145441]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_89",
    "sat": "def sat(x: float, coeffs: List[float]=[-38.776682042910345, 3.030494274815295, -8.641222394200438, -8565.871665107024]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-38.776682042910345, 3.030494274815295, -8.641222394200438, -8565.871665107024]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_90",
    "sat": "def sat(x: float, coeffs: List[float]=[2.8793707942268547, 4.6186238262439625, 1.507882982995234, 217391.21432356676]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.8793707942268547, 4.6186238262439625, 1.507882982995234, 217391.21432356676]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_91",
    "sat": "def sat(x: float, coeffs: List[float]=[1.9070084541316061, -0.2172844738581836, 0.8619565022454938, -0.38600793021747]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.9070084541316061, -0.2172844738581836, 0.8619565022454938, -0.38600793021747]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_92",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8769016339125787, -0.3800903692219301, 0.24315785767793466, 0.07605424029470936]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8769016339125787, -0.3800903692219301, 0.24315785767793466, 0.07605424029470936]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_93",
    "sat": "def sat(x: float, coeffs: List[float]=[-7.608499304621201, 4.589510193026787, -369.3182345886637, 128.32879088581646]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.608499304621201, 4.589510193026787, -369.3182345886637, 128.32879088581646]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_94",
    "sat": "def sat(x: float, coeffs: List[float]=[2.0547972685731537, -0.3149532739249646, 150.06567960903425, 1243.4386269119632]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.0547972685731537, -0.3149532739249646, 150.06567960903425, 1243.4386269119632]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_95",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.3052558253409807, -215.96429315471062, -0.5138763571459172, -262623974.58555147]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.3052558253409807, -215.96429315471062, -0.5138763571459172, -262623974.58555147]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_96",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.524993130996176, 0.8733233708901443, 0.3980172271754478, 0.11627026148845002]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.524993130996176, 0.8733233708901443, 0.3980172271754478, 0.11627026148845002]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_97",
    "sat": "def sat(x: float, coeffs: List[float]=[0.505778366277993, 0.08204039266226, 1.090413949141495, -0.6130122274504952]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.505778366277993, 0.08204039266226, 1.090413949141495, -0.6130122274504952]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_98",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6161092409015442, -21.439085778424722, -1.0408592155259064, 7.00293565474888]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6161092409015442, -21.439085778424722, -1.0408592155259064, 7.00293565474888]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_99",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2820361648639129, 0.20895714026765236, 0.037485919635094365, 39.46192796355273]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2820361648639129, 0.20895714026765236, 0.037485919635094365, 39.46192796355273]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_100",
    "sat": "def sat(x: float, coeffs: List[float]=[996.034580390242, 69.01723238340475, -3.5298074792062537, 4.998230589711203]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[996.034580390242, 69.01723238340475, -3.5298074792062537, 4.998230589711203]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_101",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.293849169608422, -0.16537495180778525, -5.384898425357768, -0.2849307617922937]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.293849169608422, -0.16537495180778525, -5.384898425357768, -0.2849307617922937]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_102",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.19290953617239484, -0.16221580749582207, -1.5394833547126696, 1.2342379448626661]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.19290953617239484, -0.16221580749582207, -1.5394833547126696, 1.2342379448626661]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_103",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5921088476835868, -3.054259084292769, 9.292132049856852, 4.426816586935631]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5921088476835868, -3.054259084292769, 9.292132049856852, 4.426816586935631]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_104",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2911140320263303, -0.10152171082049259, -0.21295708852702763, 23.964713768876774]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2911140320263303, -0.10152171082049259, -0.21295708852702763, 23.964713768876774]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_105",
    "sat": "def sat(x: float, coeffs: List[float]=[-12.945843047271056, 1.874338662916636, 0.5027373979945616, 23.806813476766273]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.945843047271056, 1.874338662916636, 0.5027373979945616, 23.806813476766273]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_106",
    "sat": "def sat(x: float, coeffs: List[float]=[163.8337064868247, -0.01389139576780396, 1.579119883474123, -3220.9632791595513]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[163.8337064868247, -0.01389139576780396, 1.579119883474123, -3220.9632791595513]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_107",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4567457034320248, 0.04664862135274639, -0.003907458344998578, -10.034384922779077]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4567457034320248, 0.04664862135274639, -0.003907458344998578, -10.034384922779077]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_108",
    "sat": "def sat(x: float, coeffs: List[float]=[0.17539603969038783, 3.718526698023842, 1.147030282407294, -300.0333184283816]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.17539603969038783, 3.718526698023842, 1.147030282407294, -300.0333184283816]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_109",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.09499717661902392, -0.016532302391612186, 1.9134429702382807, 0.5039793021128721]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.09499717661902392, -0.016532302391612186, 1.9134429702382807, 0.5039793021128721]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_110",
    "sat": "def sat(x: float, coeffs: List[float]=[0.13491955950563383, -1.4585363307660293, -0.4668260673149793, 0.020642853368251335]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.13491955950563383, -1.4585363307660293, -0.4668260673149793, 0.020642853368251335]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_111",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.44235828371818514, -189.4263439715966, -1.1518796110935527, 42.70907358157286]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.44235828371818514, -189.4263439715966, -1.1518796110935527, 42.70907358157286]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_112",
    "sat": "def sat(x: float, coeffs: List[float]=[3.532599238010094, 641.8522010050494, 7.101831511569081, -613.2489178164433]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.532599238010094, 641.8522010050494, 7.101831511569081, -613.2489178164433]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_113",
    "sat": "def sat(x: float, coeffs: List[float]=[7.237028769531951, 0.03515032884481147, -0.26302082403119065, -5.485785556715405]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.237028769531951, 0.03515032884481147, -0.26302082403119065, -5.485785556715405]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_114",
    "sat": "def sat(x: float, coeffs: List[float]=[0.21015796413652565, -0.8337808223574928, 0.17702919738541834, 0.0913133446308107]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.21015796413652565, -0.8337808223574928, 0.17702919738541834, 0.0913133446308107]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_115",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8849384988778293, -0.7794996954520667, -1.0395504362211199, 889.5853067494924]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8849384988778293, -0.7794996954520667, -1.0395504362211199, 889.5853067494924]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_116",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8152758429976282, 0.4372262440411367, -31.45619977879582, -23825.45598065939]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8152758429976282, 0.4372262440411367, -31.45619977879582, -23825.45598065939]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_117",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.11682512932179263, 63.618015213732996, 68.576440464372, -239.88717874973244]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11682512932179263, 63.618015213732996, 68.576440464372, -239.88717874973244]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_118",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5110661436352425, 20.720522164944246, 0.727762374676932, -781.0889051437124]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5110661436352425, 20.720522164944246, 0.727762374676932, -781.0889051437124]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_119",
    "sat": "def sat(x: float, coeffs: List[float]=[0.079541170985666, 2.467823949680778, -4.657693499471141, -61.90536442935358]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.079541170985666, 2.467823949680778, -4.657693499471141, -61.90536442935358]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_120",
    "sat": "def sat(x: float, coeffs: List[float]=[5.743688743560053, 1.6353034156794528, -75.67147435011276, -102.2689554398608]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.743688743560053, 1.6353034156794528, -75.67147435011276, -102.2689554398608]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_121",
    "sat": "def sat(x: float, coeffs: List[float]=[2.6395046110401164, -1.9758664050293229, 0.212808412310997, 0.023080352273074776]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.6395046110401164, -1.9758664050293229, 0.212808412310997, 0.023080352273074776]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_122",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6223656704957795, -0.03453374487946603, -5.337294699311826, 0.2085871145510545]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6223656704957795, -0.03453374487946603, -5.337294699311826, 0.2085871145510545]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_123",
    "sat": "def sat(x: float, coeffs: List[float]=[0.22927817913693946, 0.33262202619641795, 442.26044468098183, 10577.724853972079]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.22927817913693946, 0.33262202619641795, 442.26044468098183, 10577.724853972079]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_124",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.285869987035491, -0.29018714904492277, 0.2507963481607434, -2.896427847285745]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.285869987035491, -0.29018714904492277, 0.2507963481607434, -2.896427847285745]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_125",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.327846153148099, -6.304331507880968, -0.4847065052472588, 509.45758643378645]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.327846153148099, -6.304331507880968, -0.4847065052472588, 509.45758643378645]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_126",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.15626587689896185, 0.6524052265542025, -0.06745867512337826, 378.83367737616413]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.15626587689896185, 0.6524052265542025, -0.06745867512337826, 378.83367737616413]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_127",
    "sat": "def sat(x: float, coeffs: List[float]=[0.21401174423166966, 304.0299300406024, 1.0026307062919984, -3177.7651742321314]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.21401174423166966, 304.0299300406024, 1.0026307062919984, -3177.7651742321314]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_128",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.608129932852048, -0.47023932791224093, -34.97937550559423, -2.4358279269722263]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.608129932852048, -0.47023932791224093, -34.97937550559423, -2.4358279269722263]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_129",
    "sat": "def sat(x: float, coeffs: List[float]=[-7.581135283194494, -7.281497371060337, 1.9792221791936493, -849.6206046823932]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.581135283194494, -7.281497371060337, 1.9792221791936493, -849.6206046823932]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_130",
    "sat": "def sat(x: float, coeffs: List[float]=[0.056955010257234116, -1.2639150701578616, 28.46686586004338, 339550.2995140787]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.056955010257234116, -1.2639150701578616, 28.46686586004338, 339550.2995140787]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_131",
    "sat": "def sat(x: float, coeffs: List[float]=[3.591891794675623, 16.62244645625238, -1.0652932118684852, -4.443416077536282]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.591891794675623, 16.62244645625238, -1.0652932118684852, -4.443416077536282]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_132",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6146843013776663, 3.1087469507846763, 2.4957349209743818, -2075351.0310408727]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6146843013776663, 3.1087469507846763, 2.4957349209743818, -2075351.0310408727]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_133",
    "sat": "def sat(x: float, coeffs: List[float]=[0.06038938304288174, 0.02108475049768928, 1.06309284790171, 1.2341209743391885]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06038938304288174, 0.02108475049768928, 1.06309284790171, 1.2341209743391885]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_134",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.701326551855887, 460.26979606668283, -0.2658124472411445, -354.8870062247845]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.701326551855887, 460.26979606668283, -0.2658124472411445, -354.8870062247845]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_135",
    "sat": "def sat(x: float, coeffs: List[float]=[6.622775380810709, -0.34072552491183733, 0.6850224969876914, -8.964001489735928]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.622775380810709, -0.34072552491183733, 0.6850224969876914, -8.964001489735928]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_136",
    "sat": "def sat(x: float, coeffs: List[float]=[6.938986218768799, 2.7819582758681243, -3.781344319546901, -11546.615841677874]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.938986218768799, 2.7819582758681243, -3.781344319546901, -11546.615841677874]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_137",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.32523339054079514, 0.05845471057969657, -1.0337732447994463, -0.1395799078755913]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.32523339054079514, 0.05845471057969657, -1.0337732447994463, -0.1395799078755913]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_138",
    "sat": "def sat(x: float, coeffs: List[float]=[6.582236427502141, -0.6646354541265606, 0.24346158152888098, -0.9145087085226211]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.582236427502141, -0.6646354541265606, 0.24346158152888098, -0.9145087085226211]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_139",
    "sat": "def sat(x: float, coeffs: List[float]=[0.14254305390062036, -0.3711086897006403, -0.4481758758466155, 91.8885571820601]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.14254305390062036, -0.3711086897006403, -0.4481758758466155, 91.8885571820601]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_140",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.3169406264646992, 0.2507128232052478, 0.12090863161755523, -3.438549431826422]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3169406264646992, 0.2507128232052478, 0.12090863161755523, -3.438549431826422]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_141",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.004180816416654798, -0.250769771434717, -2.2836803157000585, -0.47154961089901515]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.004180816416654798, -0.250769771434717, -2.2836803157000585, -0.47154961089901515]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_142",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.422544148790744, -70.2031603818893, -128.8421116345016, -11.856010229329623]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.422544148790744, -70.2031603818893, -128.8421116345016, -11.856010229329623]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_143",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6232617244399843, -1.4445921456091122, 0.02173454319893331, 0.16559807155662562]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6232617244399843, -1.4445921456091122, 0.02173454319893331, 0.16559807155662562]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_144",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.07166104869480217, 56.385149072944635, -22.175290341686082, -16.586319661686066]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.07166104869480217, 56.385149072944635, -22.175290341686082, -16.586319661686066]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_145",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3027263387446944, 2.109780520706484, 0.425599865936024, -0.2624968847851231]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3027263387446944, 2.109780520706484, 0.425599865936024, -0.2624968847851231]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_146",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6309072678442926, -0.16020007531612931, 1.1035125505790626, -0.2527445497379683]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6309072678442926, -0.16020007531612931, 1.1035125505790626, -0.2527445497379683]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_147",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3592061272222309, 4.321398238984364, -0.6231406361382903, 0.004948401890365425]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3592061272222309, 4.321398238984364, -0.6231406361382903, 0.004948401890365425]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_148",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7104424738432528, 199.70423028497194, 2.282108833457261, -317.2522837463108]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7104424738432528, 199.70423028497194, 2.282108833457261, -317.2522837463108]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_149",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.51823024417118, -0.4707409039086943, 0.1477633642285653, 685.3558926777822]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.51823024417118, -0.4707409039086943, 0.1477633642285653, 685.3558926777822]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_150",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8675068859526706, -0.8401695412137506, 0.13382833400095814, 0.14796013985936582]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8675068859526706, -0.8401695412137506, 0.13382833400095814, 0.14796013985936582]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_151",
    "sat": "def sat(x: float, coeffs: List[float]=[10.679162617792796, 13.884906150478821, 1.152436530051882, 36.724149355685675]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.679162617792796, 13.884906150478821, 1.152436530051882, 36.724149355685675]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_152",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.340607876585502, 0.3390951917360184, 8.079991086423691, -1.4759658156581588]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.340607876585502, 0.3390951917360184, 8.079991086423691, -1.4759658156581588]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_153",
    "sat": "def sat(x: float, coeffs: List[float]=[2.9725332704277085, -0.081787971102857, 0.07637192716688583, -0.4768648057063965]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.9725332704277085, -0.081787971102857, 0.07637192716688583, -0.4768648057063965]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_154",
    "sat": "def sat(x: float, coeffs: List[float]=[-25.392263830273837, -0.25150760962506463, 0.38596158524447793, -1.8757010619943435]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-25.392263830273837, -0.25150760962506463, 0.38596158524447793, -1.8757010619943435]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_155",
    "sat": "def sat(x: float, coeffs: List[float]=[-6.618229648505031, 0.3154527240388434, 0.010804386217212025, -0.038124743092273206]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.618229648505031, 0.3154527240388434, 0.010804386217212025, -0.038124743092273206]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_156",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.308941641962087, 0.1585910616420274, 24.761716298923044, -24.385855136697185]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.308941641962087, 0.1585910616420274, 24.761716298923044, -24.385855136697185]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_157",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2902902972713362, 307.14112320432736, 24.60505711094228, -8688.180405997577]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2902902972713362, 307.14112320432736, 24.60505711094228, -8688.180405997577]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_158",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.041965761064700624, -23.218878737402985, -56.82397586664416, -21.368133880089815]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.041965761064700624, -23.218878737402985, -56.82397586664416, -21.368133880089815]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_159",
    "sat": "def sat(x: float, coeffs: List[float]=[0.32890366349310196, 0.03097024758682247, -5.298647047243907, 1.5036291370461177]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.32890366349310196, 0.03097024758682247, -5.298647047243907, 1.5036291370461177]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_160",
    "sat": "def sat(x: float, coeffs: List[float]=[8.87663926474013, -27.998815466444228, -1.8981723339401748, 9.21502329548047]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.87663926474013, -27.998815466444228, -1.8981723339401748, 9.21502329548047]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_161",
    "sat": "def sat(x: float, coeffs: List[float]=[0.09521037158511032, 0.6168372975378048, 1.1327413448185524, 202.17956975790858]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.09521037158511032, 0.6168372975378048, 1.1327413448185524, 202.17956975790858]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_162",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3482719313576322, 0.15017605660999042, -68.36419238817923, 63.131654705899436]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3482719313576322, 0.15017605660999042, -68.36419238817923, 63.131654705899436]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_163",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1640744469280436, 0.2982248130374207, -5.17738835152313, 0.45141556447906445]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1640744469280436, 0.2982248130374207, -5.17738835152313, 0.45141556447906445]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_164",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.24681739797959268, -0.538917326735408, -0.7497056725392247, -191.09159778895435]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.24681739797959268, -0.538917326735408, -0.7497056725392247, -191.09159778895435]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_165",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2686618643028759, -0.3169450994445217, 7.792771622168865, 35.136935515252034]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2686618643028759, -0.3169450994445217, 7.792771622168865, 35.136935515252034]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_166",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.08103901246932632, 20.914157274229048, -0.07838725924213108, -0.20387234147668445]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.08103901246932632, 20.914157274229048, -0.07838725924213108, -0.20387234147668445]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_167",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.5749590810025094, -4.992380000811463, -0.29101437756957477, 2.132752512678472]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.5749590810025094, -4.992380000811463, -0.29101437756957477, 2.132752512678472]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_168",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.35706386511136207, 0.13531252734065569, 0.012826652470768973, 0.00012513853676283774]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.35706386511136207, 0.13531252734065569, 0.012826652470768973, 0.00012513853676283774]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_169",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.0354887449023115, 1.0528048913384378, -2.0899978797263583, -28.020099348214806]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0354887449023115, 1.0528048913384378, -2.0899978797263583, -28.020099348214806]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_170",
    "sat": "def sat(x: float, coeffs: List[float]=[1.5129647751984077, -1.648351716984872, 0.13801430971782028, 0.05867381578923721]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5129647751984077, -1.648351716984872, 0.13801430971782028, 0.05867381578923721]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_171",
    "sat": "def sat(x: float, coeffs: List[float]=[1.6358893908805026, -0.6116405537555951, -0.08402091136036834, -106.43216025026297]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6358893908805026, -0.6116405537555951, -0.08402091136036834, -106.43216025026297]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_172",
    "sat": "def sat(x: float, coeffs: List[float]=[0.05858941815570592, -0.39406402967041076, -0.10994339343054553, 0.37187973467390606]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.05858941815570592, -0.39406402967041076, -0.10994339343054553, 0.37187973467390606]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_173",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.08549018930566861, -5.2824544020096935, 0.443039725278018, 73.84718461070327]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.08549018930566861, -5.2824544020096935, 0.443039725278018, 73.84718461070327]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_174",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.5286014153604235, 0.07589600972809134, 6.448745914889604, -0.053140882405646454]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.5286014153604235, 0.07589600972809134, 6.448745914889604, -0.053140882405646454]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_175",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7141015067584554, 2.178317351341533, -1.2748991232209086, 0.1711669990077928]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7141015067584554, 2.178317351341533, -1.2748991232209086, 0.1711669990077928]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_176",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.20536224037837383, 0.2346552346922858, 0.019474962721623818, 0.6187065100536]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.20536224037837383, 0.2346552346922858, 0.019474962721623818, 0.6187065100536]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_177",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6560523941825555, 0.015249820087787302, 199.38850125657166, 504.9406986040902]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6560523941825555, 0.015249820087787302, 199.38850125657166, 504.9406986040902]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_178",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.1571606857366634, -6.151365317464658, 7.548658103980677, -2316.72617764453]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1571606857366634, -6.151365317464658, 7.548658103980677, -2316.72617764453]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_179",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2823572919888324, 0.2662069612704227, -174.20591663806798, -1547.6809011846028]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2823572919888324, 0.2662069612704227, -174.20591663806798, -1547.6809011846028]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_180",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1342026760848857, 25.624268702244617, -1.2988997291273394, -233.90290712733693]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1342026760848857, 25.624268702244617, -1.2988997291273394, -233.90290712733693]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_181",
    "sat": "def sat(x: float, coeffs: List[float]=[5.247629146258969, 0.28848959594383855, -0.1662872577373616, 4935.255700069039]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.247629146258969, 0.28848959594383855, -0.1662872577373616, 4935.255700069039]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_182",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.02482332519665853, -0.667913042073951, -0.07401109008130262, 0.025920406099981103]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.02482332519665853, -0.667913042073951, -0.07401109008130262, 0.025920406099981103]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_183",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.08103868679206679, 0.1368970283454188, -1.230619394592795, -2.2475263091465174]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.08103868679206679, 0.1368970283454188, -1.230619394592795, -2.2475263091465174]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_184",
    "sat": "def sat(x: float, coeffs: List[float]=[0.39965341418697947, 0.35768646789713704, -0.364364395258655, -0.22227613320958683]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.39965341418697947, 0.35768646789713704, -0.364364395258655, -0.22227613320958683]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_185",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.03497567386431729, -0.7040856978870429, -0.2116321843284359, 12.103875735224713]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.03497567386431729, -0.7040856978870429, -0.2116321843284359, 12.103875735224713]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_186",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.322207602287865, 2.2621179232852824, -2.46611580088774, -19.62891371014743]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.322207602287865, 2.2621179232852824, -2.46611580088774, -19.62891371014743]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_187",
    "sat": "def sat(x: float, coeffs: List[float]=[8.738354603040387, 56.414228999929826, -0.16514939751145788, -3.2778377655314626]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.738354603040387, 56.414228999929826, -0.16514939751145788, -3.2778377655314626]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_188",
    "sat": "def sat(x: float, coeffs: List[float]=[1.3807002324589719, -5.460019575397052, 170.23646740006967, -22.142271712098985]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3807002324589719, -5.460019575397052, 170.23646740006967, -22.142271712098985]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_189",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.9662058240426625, 13.63940806358537, -3.9732390640039985, -1.9376712809297583]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9662058240426625, 13.63940806358537, -3.9732390640039985, -1.9376712809297583]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_190",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.04188405771454503, -0.25957193136579343, 14.359986619654736, -15.885140287254908]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.04188405771454503, -0.25957193136579343, 14.359986619654736, -15.885140287254908]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_191",
    "sat": "def sat(x: float, coeffs: List[float]=[548.6755015956869, 16.87134316799016, 0.7968309554472915, -55195.324382841645]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[548.6755015956869, 16.87134316799016, 0.7968309554472915, -55195.324382841645]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_192",
    "sat": "def sat(x: float, coeffs: List[float]=[-227.27534604502318, 0.57158392891266, -0.06323551473558157, 0.17288907706741596]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-227.27534604502318, 0.57158392891266, -0.06323551473558157, 0.17288907706741596]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_193",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.14586417847380764, 1.021191257655311, 0.617919304010157, 0.06741187371874165]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.14586417847380764, 1.021191257655311, 0.617919304010157, 0.06741187371874165]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_194",
    "sat": "def sat(x: float, coeffs: List[float]=[-6.7374978698199115, 0.4952936754409308, -0.37784605849628594, 0.08496066446867742]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.7374978698199115, 0.4952936754409308, -0.37784605849628594, 0.08496066446867742]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_195",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.3112400123077341, 0.9459147369409105, -0.27494645809536844, -0.015081669968917433]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3112400123077341, 0.9459147369409105, -0.27494645809536844, -0.015081669968917433]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_196",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.9220108224286772, 0.4050536514497261, -0.4061688213557518, 533481.3929438636]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.9220108224286772, 0.4050536514497261, -0.4061688213557518, 533481.3929438636]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_197",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.118267576212036, 0.15612454388549413, 0.24231401168556962, -4.390352837126127]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.118267576212036, 0.15612454388549413, 0.24231401168556962, -4.390352837126127]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_198",
    "sat": "def sat(x: float, coeffs: List[float]=[230.73037150970592, 3.012487056268879, 0.5224795481238286, -2001.3835449362375]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[230.73037150970592, 3.012487056268879, 0.5224795481238286, -2001.3835449362375]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_199",
    "sat": "def sat(x: float, coeffs: List[float]=[-342.455868830764, -24.045715458702514, 4.100257318867621, 206.6888164755526]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-342.455868830764, -24.045715458702514, 4.100257318867621, 206.6888164755526]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_200",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.05888684916927763, 12.894630231336402, 0.9912139970968474, -1341.8912537398282]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.05888684916927763, 12.894630231336402, 0.9912139970968474, -1341.8912537398282]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_201",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.24458410857378232, -0.35233267329769263, -2.476767141055315, 11.564616840009077]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.24458410857378232, -0.35233267329769263, -2.476767141055315, 11.564616840009077]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_202",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.0636857544513934, -15.144559674136234, 0.3199582784684248, -4840.975057382396]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.0636857544513934, -15.144559674136234, 0.3199582784684248, -4840.975057382396]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_203",
    "sat": "def sat(x: float, coeffs: List[float]=[2.1319575359872505, 0.2705490939485396, 0.42947748968927124, 0.221369993373101]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.1319575359872505, 0.2705490939485396, 0.42947748968927124, 0.221369993373101]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_204",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.20257956507673472, 1.0035997463776527, -0.238723981516945, 546.757439547582]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.20257956507673472, 1.0035997463776527, -0.238723981516945, 546.757439547582]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_205",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6477158004468172, -0.20762591597357907, -0.09471940800007957, 11.80474718395862]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6477158004468172, -0.20762591597357907, -0.09471940800007957, 11.80474718395862]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_206",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.487564255600011, -0.5242241163522886, 1.0668167784534273, -0.04208771760441754]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.487564255600011, -0.5242241163522886, 1.0668167784534273, -0.04208771760441754]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_207",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.8298616760128281, -0.6147367235690404, -0.20948943670820563, 27.296538251136923]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8298616760128281, -0.6147367235690404, -0.20948943670820563, 27.296538251136923]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_208",
    "sat": "def sat(x: float, coeffs: List[float]=[0.29735687613907125, 0.01685842059190305, 1.459338999667075, 0.8699255444723575]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.29735687613907125, 0.01685842059190305, 1.459338999667075, 0.8699255444723575]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_209",
    "sat": "def sat(x: float, coeffs: List[float]=[-23.522516118013666, -1.966082045931986, -0.02054693035853365, -0.5389043389382977]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-23.522516118013666, -1.966082045931986, -0.02054693035853365, -0.5389043389382977]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_210",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.8441376135509884, -0.5697270587745452, -0.40802270432698373, -10.2123642631923]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8441376135509884, -0.5697270587745452, -0.40802270432698373, -10.2123642631923]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_211",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.2817909543353831, -0.8347612129209817, -1.1086949204517973, -198.0439388901699]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2817909543353831, -0.8347612129209817, -1.1086949204517973, -198.0439388901699]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_212",
    "sat": "def sat(x: float, coeffs: List[float]=[0.04761499420804579, -0.29779397006670666, -18.00585881482836, 0.35158945430588895]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.04761499420804579, -0.29779397006670666, -18.00585881482836, 0.35158945430588895]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_213",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.1978613389861776, 0.8048727433107595, -0.5684806900747766, 55063.61400088048]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1978613389861776, 0.8048727433107595, -0.5684806900747766, 55063.61400088048]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_214",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.8237060890721057, 7.316667130949088, -0.14383517316577432, -1.3419207911607618]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.8237060890721057, 7.316667130949088, -0.14383517316577432, -1.3419207911607618]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_215",
    "sat": "def sat(x: float, coeffs: List[float]=[1.7319799703776688, 15.056317545701662, 2.2127047546622474, -8.731472799645044]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7319799703776688, 15.056317545701662, 2.2127047546622474, -8.731472799645044]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_216",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.06840364521315097, -24.93689582554926, -2.7128298649610834, 0.1753315476004386]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06840364521315097, -24.93689582554926, -2.7128298649610834, 0.1753315476004386]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_217",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6452854942681019, -0.13571932016222363, -0.012181741596429227, -0.0015497587967143278]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6452854942681019, -0.13571932016222363, -0.012181741596429227, -0.0015497587967143278]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_218",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.5805338703831462, -4.885703530600274, -0.5316469636365472, 4.212222022907238]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5805338703831462, -4.885703530600274, -0.5316469636365472, 4.212222022907238]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_219",
    "sat": "def sat(x: float, coeffs: List[float]=[16.616106363043084, -27.575330753796067, -0.05864051037369037, 3.463506184609253]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[16.616106363043084, -27.575330753796067, -0.05864051037369037, 3.463506184609253]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_220",
    "sat": "def sat(x: float, coeffs: List[float]=[0.08884792516641567, -49.589881448526576, 7.1404639035348, 2.8345824138837976]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08884792516641567, -49.589881448526576, 7.1404639035348, 2.8345824138837976]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_221",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.503059014755796, 16.964965906384695, -226.06909691809312, -37.73087256991132]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.503059014755796, 16.964965906384695, -226.06909691809312, -37.73087256991132]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_222",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.6251927286877104, 0.289747782335255, -34.382440782148144, 49.82265564497137]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.6251927286877104, 0.289747782335255, -34.382440782148144, 49.82265564497137]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_223",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.41828561723347146, 4.756322676569428, -0.1031264848850401, -51.84694982532141]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.41828561723347146, 4.756322676569428, -0.1031264848850401, -51.84694982532141]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_224",
    "sat": "def sat(x: float, coeffs: List[float]=[0.15084761106442968, 0.6711890660226043, 0.34216762423177016, -5613.209411871044]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.15084761106442968, 0.6711890660226043, 0.34216762423177016, -5613.209411871044]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_225",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2519011287219434, -8.664540279202024, 1.6976787755628244, 0.4191834433529782]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2519011287219434, -8.664540279202024, 1.6976787755628244, 0.4191834433529782]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_226",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.3374336207204358, 0.055012935474389124, -0.23533540869653735, 2.689804492075884]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3374336207204358, 0.055012935474389124, -0.23533540869653735, 2.689804492075884]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_227",
    "sat": "def sat(x: float, coeffs: List[float]=[0.23803875498164118, 160.2603986869972, 1.3132783777136676, -0.03490185154310304]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.23803875498164118, 160.2603986869972, 1.3132783777136676, -0.03490185154310304]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_228",
    "sat": "def sat(x: float, coeffs: List[float]=[8.781623854978198, -3.2485435396564557, -1.1988755821442414, 2826.004969151511]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.781623854978198, -3.2485435396564557, -1.1988755821442414, 2826.004969151511]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_229",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.44135390558786297, -1.7970879083540192, -0.6655444643431889, -0.014447906191776723]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.44135390558786297, -1.7970879083540192, -0.6655444643431889, -0.014447906191776723]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_230",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3956855393117363, -4.447113880011309, -0.8561858207702313, -0.03724507845817795]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3956855393117363, -4.447113880011309, -0.8561858207702313, -0.03724507845817795]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_231",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.4530561448677732, 2.4662196997457997, 198.0459476311022, -702.0513347887693]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4530561448677732, 2.4662196997457997, 198.0459476311022, -702.0513347887693]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_232",
    "sat": "def sat(x: float, coeffs: List[float]=[0.07610274649606937, -0.51625283845673, -29.671830650199514, 17.429144167585928]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.07610274649606937, -0.51625283845673, -29.671830650199514, 17.429144167585928]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_233",
    "sat": "def sat(x: float, coeffs: List[float]=[-47.198158138879165, -0.33984189847826274, 0.361657214016146, -396.77715155241214]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-47.198158138879165, -0.33984189847826274, 0.361657214016146, -396.77715155241214]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_234",
    "sat": "def sat(x: float, coeffs: List[float]=[215.3451379828763, 0.04479450398891601, 3.3124985701469356, -82.87933176450579]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[215.3451379828763, 0.04479450398891601, 3.3124985701469356, -82.87933176450579]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_235",
    "sat": "def sat(x: float, coeffs: List[float]=[2.2552351192031, -334.60031863930084, -4.372988371847118, 22185.14594232482]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.2552351192031, -334.60031863930084, -4.372988371847118, 22185.14594232482]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_236",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3263862261536197, -2.6226028466310374, 0.112943044983067, 0.02478877210182993]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3263862261536197, -2.6226028466310374, 0.112943044983067, 0.02478877210182993]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_237",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.789495093141009, 0.24300380156833934, -1.4014331593634104, 0.17652650290637578]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.789495093141009, 0.24300380156833934, -1.4014331593634104, 0.17652650290637578]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_238",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6844669540700038, -5.195380385262301, -3.777705711540793, 27.801689779600864]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6844669540700038, -5.195380385262301, -3.777705711540793, 27.801689779600864]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_239",
    "sat": "def sat(x: float, coeffs: List[float]=[1.1076624448967154, -0.18980025008901613, -0.3378614062957972, 0.06119350379022388]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1076624448967154, -0.18980025008901613, -0.3378614062957972, 0.06119350379022388]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_240",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2183566858641719, 0.10963183711152162, 3.017532248079189, -0.940838465626701]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2183566858641719, 0.10963183711152162, 3.017532248079189, -0.940838465626701]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_241",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.8564998419385759, 0.11538574498886651, 30.6843855621302, -1762.670324900786]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8564998419385759, 0.11538574498886651, 30.6843855621302, -1762.670324900786]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_242",
    "sat": "def sat(x: float, coeffs: List[float]=[4.876362369050235, -0.23305143810388448, 1.008957954050718, -8.814561099510529]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.876362369050235, -0.23305143810388448, 1.008957954050718, -8.814561099510529]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_243",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.757898204203033, 1.5956095726911512, 83.95469103768929, -35.393774863874704]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.757898204203033, 1.5956095726911512, 83.95469103768929, -35.393774863874704]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_244",
    "sat": "def sat(x: float, coeffs: List[float]=[11.995504455526948, 33.513985766358026, -114.86230965298864, -99.48707669998251]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.995504455526948, 33.513985766358026, -114.86230965298864, -99.48707669998251]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_245",
    "sat": "def sat(x: float, coeffs: List[float]=[-37.59550914877119, -1.5028035023930013, 0.011395225338762508, 471971.2838726375]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-37.59550914877119, -1.5028035023930013, 0.011395225338762508, 471971.2838726375]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_246",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.48983863996319, -2.4010389065228446, 0.41178781581030055, 0.37059629674050476]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.48983863996319, -2.4010389065228446, 0.41178781581030055, 0.37059629674050476]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_247",
    "sat": "def sat(x: float, coeffs: List[float]=[14.783387806154826, -0.3740878803702712, 1.3501201473928222, -13.730873295611488]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[14.783387806154826, -0.3740878803702712, 1.3501201473928222, -13.730873295611488]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_248",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.11266984232703987, 0.9574228337861936, -1.227689316564521, 0.362631829809837]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11266984232703987, 0.9574228337861936, -1.227689316564521, 0.362631829809837]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_249",
    "sat": "def sat(x: float, coeffs: List[float]=[0.34124536723833615, -0.039023258593622545, -1.4915975511608643, 175036.84405583725]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.34124536723833615, -0.039023258593622545, -1.4915975511608643, 175036.84405583725]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_250",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.10320335768559663, 0.4613956147129727, 0.36856614311570174, -18409.4877111347]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.10320335768559663, 0.4613956147129727, 0.36856614311570174, -18409.4877111347]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_251",
    "sat": "def sat(x: float, coeffs: List[float]=[-25.064438220827395, 7.008895492245383, 2.1101639665841696, 19436.242529536612]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-25.064438220827395, 7.008895492245383, 2.1101639665841696, 19436.242529536612]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_252",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1298873447506105, -0.04348776984706867, -0.2314756268777932, 229.69615062707035]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1298873447506105, -0.04348776984706867, -0.2314756268777932, 229.69615062707035]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_253",
    "sat": "def sat(x: float, coeffs: List[float]=[4.400490927611838, 0.006865321940369744, -34.04005287356597, 5.2402287914423615]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.400490927611838, 0.006865321940369744, -34.04005287356597, 5.2402287914423615]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_254",
    "sat": "def sat(x: float, coeffs: List[float]=[12.10887849280752, -16.089437058703172, 0.23224332881360255, 36.9410160427399]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.10887849280752, -16.089437058703172, 0.23224332881360255, 36.9410160427399]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_255",
    "sat": "def sat(x: float, coeffs: List[float]=[0.016494473673078176, -0.08032844628825038, 0.22301819657855396, -0.2644114923615513]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.016494473673078176, -0.08032844628825038, 0.22301819657855396, -0.2644114923615513]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_256",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1102937218064625, -6.597408231508264, -0.3596742155485216, -0.004125619269082687]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1102937218064625, -6.597408231508264, -0.3596742155485216, -0.004125619269082687]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_257",
    "sat": "def sat(x: float, coeffs: List[float]=[0.043822667422066676, 7.743038002913738, 7.040530423165304, -13.95868219805174]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.043822667422066676, 7.743038002913738, 7.040530423165304, -13.95868219805174]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_258",
    "sat": "def sat(x: float, coeffs: List[float]=[-654.5808572500547, 0.16807131065236827, -1.6426446093698803, -2301.7796501412276]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-654.5808572500547, 0.16807131065236827, -1.6426446093698803, -2301.7796501412276]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_259",
    "sat": "def sat(x: float, coeffs: List[float]=[10.39667258935264, -1.457575828484588, -17.783255712838898, -4.352476996494134]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.39667258935264, -1.457575828484588, -17.783255712838898, -4.352476996494134]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_260",
    "sat": "def sat(x: float, coeffs: List[float]=[1.0338773972833788, 14.41802243269263, 50.626841454604424, -13.735811783752402]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0338773972833788, 14.41802243269263, 50.626841454604424, -13.735811783752402]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_261",
    "sat": "def sat(x: float, coeffs: List[float]=[2.090259443136946, -146.14099188366455, 0.35859399005116455, 269.4470870892399]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.090259443136946, -146.14099188366455, 0.35859399005116455, 269.4470870892399]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_262",
    "sat": "def sat(x: float, coeffs: List[float]=[1.9825031090265963, 22.211797621590787, 28.355258693679502, 2.377416251662863]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.9825031090265963, 22.211797621590787, 28.355258693679502, 2.377416251662863]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_263",
    "sat": "def sat(x: float, coeffs: List[float]=[0.28957001534590904, -773.7118185282351, -1.0687480173046022, 121501595.1889979]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.28957001534590904, -773.7118185282351, -1.0687480173046022, 121501595.1889979]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_264",
    "sat": "def sat(x: float, coeffs: List[float]=[0.33825855917108943, 1.8613303854406402, 0.14938324448304896, -7.090795295809751]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.33825855917108943, 1.8613303854406402, 0.14938324448304896, -7.090795295809751]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_265",
    "sat": "def sat(x: float, coeffs: List[float]=[0.288668219495416, 2.335676139633519, -0.2527256448330379, -1.086565889719202]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.288668219495416, 2.335676139633519, -0.2527256448330379, -1.086565889719202]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_266",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.0640296236699545, 2.0044649233022107, -4.233699975817938, -0.6015412211621308]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.0640296236699545, 2.0044649233022107, -4.233699975817938, -0.6015412211621308]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_267",
    "sat": "def sat(x: float, coeffs: List[float]=[2.9504601547380602, -0.12854271967492217, 16.31154340873643, -0.36053105230158117]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.9504601547380602, -0.12854271967492217, 16.31154340873643, -0.36053105230158117]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_268",
    "sat": "def sat(x: float, coeffs: List[float]=[3.532571266025759, -4.229299072392627, -2.5077157321075845, -113.0750958624329]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.532571266025759, -4.229299072392627, -2.5077157321075845, -113.0750958624329]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_269",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.9139004698478105, 0.9254946734647236, -3.5217452458032277, -706.4762801582838]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9139004698478105, 0.9254946734647236, -3.5217452458032277, -706.4762801582838]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_270",
    "sat": "def sat(x: float, coeffs: List[float]=[46.52833913827274, 928.8002918723126, 1.4044392983404315, -40.518528228848794]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[46.52833913827274, 928.8002918723126, 1.4044392983404315, -40.518528228848794]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_271",
    "sat": "def sat(x: float, coeffs: List[float]=[0.20783329020874342, -0.05074263814034241, 0.0027798739821338625, -4.133808612032743]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.20783329020874342, -0.05074263814034241, 0.0027798739821338625, -4.133808612032743]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_272",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.272546101142309, -0.4468029753842428, 1.8101297976031676, 0.45907999320108794]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.272546101142309, -0.4468029753842428, 1.8101297976031676, 0.45907999320108794]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_273",
    "sat": "def sat(x: float, coeffs: List[float]=[137.91856563403888, -3.0819684062963932, 0.7228109839146173, -1104.4141091903846]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[137.91856563403888, -3.0819684062963932, 0.7228109839146173, -1104.4141091903846]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_274",
    "sat": "def sat(x: float, coeffs: List[float]=[5.476196611690298, -12.824158485748292, 224.3200986558882, 30035.226413843502]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.476196611690298, -12.824158485748292, 224.3200986558882, 30035.226413843502]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_275",
    "sat": "def sat(x: float, coeffs: List[float]=[3.405420365589387, -8.446102890792814, 0.9686677602036323, 76.07801940408797]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.405420365589387, -8.446102890792814, 0.9686677602036323, 76.07801940408797]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_276",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.13655597474778713, -0.23142882544525153, 0.6065586174090769, 48.35339725063673]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.13655597474778713, -0.23142882544525153, 0.6065586174090769, 48.35339725063673]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_277",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.7033462505058878, -0.032409876337484565, 5.8441508666159026, 4.16772253095571]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.7033462505058878, -0.032409876337484565, 5.8441508666159026, 4.16772253095571]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_278",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.04841026227487374, 0.22509938932534337, -135.22256978595826, -255.4421248271617]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.04841026227487374, 0.22509938932534337, -135.22256978595826, -255.4421248271617]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_279",
    "sat": "def sat(x: float, coeffs: List[float]=[0.0012699025074205395, -0.4973977909793222, 0.393618146995591, -0.07565915171177195]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0012699025074205395, -0.4973977909793222, 0.393618146995591, -0.07565915171177195]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_280",
    "sat": "def sat(x: float, coeffs: List[float]=[4.50440788414557, -0.12909323794781055, -4.145395566392826, -0.4726379822466057]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.50440788414557, -0.12909323794781055, -4.145395566392826, -0.4726379822466057]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_281",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.16178810525469509, -0.025712302223263483, 1.697486535193783, -0.32856366611286525]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.16178810525469509, -0.025712302223263483, 1.697486535193783, -0.32856366611286525]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_282",
    "sat": "def sat(x: float, coeffs: List[float]=[-25.388513515526785, 0.7450734857406857, -0.14279999053769035, -764633.0689972887]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-25.388513515526785, 0.7450734857406857, -0.14279999053769035, -764633.0689972887]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_283",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1277378638049782, 1.2733524111337464, 0.10407706941323076, -0.01378294663390121]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1277378638049782, 1.2733524111337464, 0.10407706941323076, -0.01378294663390121]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_284",
    "sat": "def sat(x: float, coeffs: List[float]=[3.17810016064384, -0.3015703280662921, -37.27308809139005, -3010475.3013872514]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.17810016064384, -0.3015703280662921, -37.27308809139005, -3010475.3013872514]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_285",
    "sat": "def sat(x: float, coeffs: List[float]=[0.26197173081752895, -311.9440464646848, -12.382782955828128, 127.09116454351518]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.26197173081752895, -311.9440464646848, -12.382782955828128, 127.09116454351518]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_286",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5775700081501612, -29.074794818986177, -0.728154396002571, 0.04613991691590223]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5775700081501612, -29.074794818986177, -0.728154396002571, 0.04613991691590223]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_287",
    "sat": "def sat(x: float, coeffs: List[float]=[0.14294244623366384, 67.60470055406036, 39.39036330149351, -9.83306321674631]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.14294244623366384, 67.60470055406036, 39.39036330149351, -9.83306321674631]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_288",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.04780250428576845, -0.10374325581680433, 27.809445443098483, -232.48148291589823]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.04780250428576845, -0.10374325581680433, 27.809445443098483, -232.48148291589823]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_289",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6822242990944449, -4.304808970933768, 0.16891612331291106, 64830.849602218186]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6822242990944449, -4.304808970933768, 0.16891612331291106, 64830.849602218186]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_290",
    "sat": "def sat(x: float, coeffs: List[float]=[0.20509022578798253, 13.045713072569201, 0.9533433595420567, -103.61646135451916]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.20509022578798253, 13.045713072569201, 0.9533433595420567, -103.61646135451916]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_291",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.0303360278787372, -500.9388871529524, -0.10531811830660875, 17.273691527109936]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.0303360278787372, -500.9388871529524, -0.10531811830660875, 17.273691527109936]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_292",
    "sat": "def sat(x: float, coeffs: List[float]=[-74.69716886641878, -0.8748236600280325, -2.2680243132044744, -0.5506140431419383]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-74.69716886641878, -0.8748236600280325, -2.2680243132044744, -0.5506140431419383]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_293",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7363701205112907, 12.08410706004281, -9.260787932710008, -328.7235896849312]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7363701205112907, 12.08410706004281, -9.260787932710008, -328.7235896849312]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_294",
    "sat": "def sat(x: float, coeffs: List[float]=[48.98685122221709, -0.595942247479413, 1.1068658015697765, 911.7708331938508]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[48.98685122221709, -0.595942247479413, 1.1068658015697765, 911.7708331938508]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_295",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2338863187634863, 2.6843312702616804, -0.14925471107326752, -35.34969783745316]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2338863187634863, 2.6843312702616804, -0.14925471107326752, -35.34969783745316]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_296",
    "sat": "def sat(x: float, coeffs: List[float]=[4.906695902726498, -17.385893280269354, -4.350029100284579, -0.07613630197657728]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.906695902726498, -17.385893280269354, -4.350029100284579, -0.07613630197657728]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_297",
    "sat": "def sat(x: float, coeffs: List[float]=[0.03908982528258013, -0.12405950993194621, -1.9118509169131224, -39792.31127066972]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.03908982528258013, -0.12405950993194621, -1.9118509169131224, -39792.31127066972]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_298",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.3852053581706043, -93.05928467004664, 0.16909280821955316, 6.388359740583322]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3852053581706043, -93.05928467004664, 0.16909280821955316, 6.388359740583322]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_299",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.08962868094471, -4.064497141044072, 0.09932832371271805, 729813.6056955517]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.08962868094471, -4.064497141044072, 0.09932832371271805, 729813.6056955517]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_300",
    "sat": "def sat(x: float, coeffs: List[float]=[4.158273743065616, 0.37925950881966425, 0.5530628318181336, 162.81491406435634]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.158273743065616, 0.37925950881966425, 0.5530628318181336, 162.81491406435634]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_301",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.19168185644149704, -2.5828716726770184, 0.006686833569266841, 5160.096822484867]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.19168185644149704, -2.5828716726770184, 0.006686833569266841, 5160.096822484867]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_302",
    "sat": "def sat(x: float, coeffs: List[float]=[0.36724532576686464, 0.22513128517055522, -1.2652154963363296, 0.6314316852633897]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.36724532576686464, 0.22513128517055522, -1.2652154963363296, 0.6314316852633897]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_303",
    "sat": "def sat(x: float, coeffs: List[float]=[-10.034384740695318, -5.9222172118350604, 6.787822360500545, -5303.421964843826]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-10.034384740695318, -5.9222172118350604, 6.787822360500545, -5303.421964843826]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_304",
    "sat": "def sat(x: float, coeffs: List[float]=[0.28048471167015787, 0.15789663287862932, 2.3517306929871498, 0.16950557699208796]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.28048471167015787, 0.15789663287862932, 2.3517306929871498, 0.16950557699208796]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_305",
    "sat": "def sat(x: float, coeffs: List[float]=[45.3908289755527, -0.9486904790758066, 6.591192437752075, -0.8468303653619157]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[45.3908289755527, -0.9486904790758066, 6.591192437752075, -0.8468303653619157]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_306",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4645757171168521, 1.0633394533034117, 4.935625733271425, -4.569363419399]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4645757171168521, 1.0633394533034117, 4.935625733271425, -4.569363419399]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_307",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6067734198312892, 2.8041986199758067, -0.15008394824812074, -0.07489968435783022]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6067734198312892, 2.8041986199758067, -0.15008394824812074, -0.07489968435783022]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_308",
    "sat": "def sat(x: float, coeffs: List[float]=[0.47459164944115056, 27.842372503720995, 1.1817144955403862, -1464.983181048852]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.47459164944115056, 27.842372503720995, 1.1817144955403862, -1464.983181048852]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_309",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.837729997597996, -0.19425686705940484, -1.8398684070895437, 0.008999058590458015]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.837729997597996, -0.19425686705940484, -1.8398684070895437, 0.008999058590458015]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_310",
    "sat": "def sat(x: float, coeffs: List[float]=[7.045017626597371, 17.15830844090407, -0.93755183036185, -6.111699222728954]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.045017626597371, 17.15830844090407, -0.93755183036185, -6.111699222728954]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_311",
    "sat": "def sat(x: float, coeffs: List[float]=[-8.805888193294301, -0.06037981986487936, -0.12613790608285588, 4.4218045541834625]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.805888193294301, -0.06037981986487936, -0.12613790608285588, 4.4218045541834625]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_312",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6077294466412678, -0.3362842541471247, -0.024219130094274677, 7.147576041767478]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6077294466412678, -0.3362842541471247, -0.024219130094274677, 7.147576041767478]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_313",
    "sat": "def sat(x: float, coeffs: List[float]=[0.22678485848565053, 0.3678475640317617, -0.42492138008628544, -0.028850556758453827]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.22678485848565053, 0.3678475640317617, -0.42492138008628544, -0.028850556758453827]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_314",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.46988560479180813, 70.64183026186113, 30.155881251553186, -7.395124147218347]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.46988560479180813, 70.64183026186113, 30.155881251553186, -7.395124147218347]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_315",
    "sat": "def sat(x: float, coeffs: List[float]=[0.41826104381386786, -0.7085123565977165, -1.4752408216043023, 142098797.71541327]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.41826104381386786, -0.7085123565977165, -1.4752408216043023, 142098797.71541327]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_316",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5175105730284034, -0.528820128656931, -0.249183358965385, 0.0757661814654787]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5175105730284034, -0.528820128656931, -0.249183358965385, 0.0757661814654787]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_317",
    "sat": "def sat(x: float, coeffs: List[float]=[-85.54281693504193, -747.5221209374718, 26.352551044778636, 602.0273536682134]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-85.54281693504193, -747.5221209374718, 26.352551044778636, 602.0273536682134]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_318",
    "sat": "def sat(x: float, coeffs: List[float]=[0.29673908867874843, -7.069852888867682, 7.242194137665724, 59.125465417396214]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.29673908867874843, -7.069852888867682, 7.242194137665724, 59.125465417396214]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_319",
    "sat": "def sat(x: float, coeffs: List[float]=[0.18816562579812315, -2.718753437571099, -1.9776605994146648, 548.630645986987]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.18816562579812315, -2.718753437571099, -1.9776605994146648, 548.630645986987]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_320",
    "sat": "def sat(x: float, coeffs: List[float]=[-34.83677944413886, -16.617520568461245, 0.2552649833882186, 0.05691560281834521]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-34.83677944413886, -16.617520568461245, 0.2552649833882186, 0.05691560281834521]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_321",
    "sat": "def sat(x: float, coeffs: List[float]=[6.491532337726551, 16.91153056797597, 0.47028142764295655, -0.0409228911853667]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.491532337726551, 16.91153056797597, 0.47028142764295655, -0.0409228911853667]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_322",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6655323496693284, 0.020896375603326616, -0.2772780766928671, -0.012738300410054061]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6655323496693284, 0.020896375603326616, -0.2772780766928671, -0.012738300410054061]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_323",
    "sat": "def sat(x: float, coeffs: List[float]=[0.05543741425920815, -0.02346237670717814, 0.18489346037092677, -0.0842884391043506]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.05543741425920815, -0.02346237670717814, 0.18489346037092677, -0.0842884391043506]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_324",
    "sat": "def sat(x: float, coeffs: List[float]=[-7.095946205889544, -0.3273646415320448, -0.16334906165964833, 0.19954285156564272]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.095946205889544, -0.3273646415320448, -0.16334906165964833, 0.19954285156564272]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_325",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8913565264302394, 0.3946038859832914, 1.4462992505822232, -29.769763270366045]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8913565264302394, 0.3946038859832914, 1.4462992505822232, -29.769763270366045]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_326",
    "sat": "def sat(x: float, coeffs: List[float]=[0.014077340995203599, 10.429402730885341, 0.11048055518233706, -0.010548966941248536]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.014077340995203599, 10.429402730885341, 0.11048055518233706, -0.010548966941248536]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_327",
    "sat": "def sat(x: float, coeffs: List[float]=[0.209554443614873, -1.0422311759785938, -1.0053043707352654, 0.10625732865376653]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.209554443614873, -1.0422311759785938, -1.0053043707352654, 0.10625732865376653]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_328",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1097216201603833, 7.738389626272759, 0.21053532522327156, -289.03580373823644]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1097216201603833, 7.738389626272759, 0.21053532522327156, -289.03580373823644]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_329",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3970363553409211, -69.90844646721908, -3.3450338520502725, 524.1954322228121]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3970363553409211, -69.90844646721908, -3.3450338520502725, 524.1954322228121]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_330",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.6569420632948975, -0.06597004938376887, 0.8611362193595359, 54.379979502782774]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.6569420632948975, -0.06597004938376887, 0.8611362193595359, 54.379979502782774]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_331",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2326062289800291, 2.4717514239296765, -4.2983556979172, 10674.182072544312]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2326062289800291, 2.4717514239296765, -4.2983556979172, 10674.182072544312]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_332",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.991100516242059, 2.39624208398617, -0.08780688818520536, -59.98446781689823]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.991100516242059, 2.39624208398617, -0.08780688818520536, -59.98446781689823]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_333",
    "sat": "def sat(x: float, coeffs: List[float]=[2.2111464986891254, 0.17374611286236843, 37.85861157971352, 1.987026121688924]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.2111464986891254, 0.17374611286236843, 37.85861157971352, 1.987026121688924]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_334",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.9109173565757266, -0.25548234240027085, -0.1305325802266656, 36.5322935862775]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9109173565757266, -0.25548234240027085, -0.1305325802266656, 36.5322935862775]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_335",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2306088040404799, 0.2613913928980314, -0.9323052291927622, 0.4210087267461501]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2306088040404799, 0.2613913928980314, -0.9323052291927622, 0.4210087267461501]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_336",
    "sat": "def sat(x: float, coeffs: List[float]=[-14.904865572684189, 363.266074373679, 0.0019103250680102917, -9.17942381000374]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-14.904865572684189, 363.266074373679, 0.0019103250680102917, -9.17942381000374]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_337",
    "sat": "def sat(x: float, coeffs: List[float]=[1.3705134847341016, 1.5464679566406199, 0.1662306737354884, 0.36269657584795095]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3705134847341016, 1.5464679566406199, 0.1662306737354884, 0.36269657584795095]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_338",
    "sat": "def sat(x: float, coeffs: List[float]=[214.03070035232784, 0.41708741831165436, 1.8719434766077694, 323.1827976053813]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[214.03070035232784, 0.41708741831165436, 1.8719434766077694, 323.1827976053813]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_339",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.271665478228972, -1.609646349748575, -4.996041544155196, 1.0463355243935542]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.271665478228972, -1.609646349748575, -4.996041544155196, 1.0463355243935542]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_340",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.038126146405383476, -1.2279233702689931, -5.409803194426065, 0.7392844830553904]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.038126146405383476, -1.2279233702689931, -5.409803194426065, 0.7392844830553904]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_341",
    "sat": "def sat(x: float, coeffs: List[float]=[0.605038708279956, 0.04991253447965375, -0.408895881168213, 0.01537132476134071]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.605038708279956, 0.04991253447965375, -0.408895881168213, 0.01537132476134071]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_342",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2712032554503469, -1.6165428548862757, -0.011562932545586083, 0.001303286588595708]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2712032554503469, -1.6165428548862757, -0.011562932545586083, 0.001303286588595708]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_343",
    "sat": "def sat(x: float, coeffs: List[float]=[0.27817284169501183, -1.0736775483610905, -0.5408725039190224, -0.06289707894742218]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.27817284169501183, -1.0736775483610905, -0.5408725039190224, -0.06289707894742218]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_344",
    "sat": "def sat(x: float, coeffs: List[float]=[0.9448512234161929, -0.14381591305733124, 0.5061014992106704, 251.96653326498694]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9448512234161929, -0.14381591305733124, 0.5061014992106704, 251.96653326498694]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_345",
    "sat": "def sat(x: float, coeffs: List[float]=[-24.49216741892768, -0.6799081289727149, -7.473968975970599, 8.287465662821106]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-24.49216741892768, -0.6799081289727149, -7.473968975970599, 8.287465662821106]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_346",
    "sat": "def sat(x: float, coeffs: List[float]=[1.9170805787882015, 0.2872797229253142, 0.2592090620317867, -12.772932341932549]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.9170805787882015, 0.2872797229253142, 0.2592090620317867, -12.772932341932549]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_347",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.3399641996772573, -48.125228958325, -7.678718866311132, 1953.938340198387]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3399641996772573, -48.125228958325, -7.678718866311132, 1953.938340198387]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_348",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.0894147781542458, 0.05452752249982451, 0.5224902167690787, -0.10517575234020318]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0894147781542458, 0.05452752249982451, 0.5224902167690787, -0.10517575234020318]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_349",
    "sat": "def sat(x: float, coeffs: List[float]=[-492.90968149067515, 0.09783032898105033, 16.0047434257577, 409.19867308601647]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-492.90968149067515, 0.09783032898105033, 16.0047434257577, 409.19867308601647]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_350",
    "sat": "def sat(x: float, coeffs: List[float]=[16.62484372533641, 0.13371787129560767, 5.935955521041257, -5.464778980911408]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[16.62484372533641, 0.13371787129560767, 5.935955521041257, -5.464778980911408]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_351",
    "sat": "def sat(x: float, coeffs: List[float]=[56.34313498959664, -2.3538078971210523, -0.1457636970193609, 5679.096871247348]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[56.34313498959664, -2.3538078971210523, -0.1457636970193609, 5679.096871247348]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_352",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4466999604197646, 0.2329407569442413, -0.8852425587201656, -2.1650117206401056]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4466999604197646, 0.2329407569442413, -0.8852425587201656, -2.1650117206401056]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_353",
    "sat": "def sat(x: float, coeffs: List[float]=[-225.7617768377498, -0.6188186770205113, -0.27870665057610267, -70.48998957044527]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-225.7617768377498, -0.6188186770205113, -0.27870665057610267, -70.48998957044527]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_354",
    "sat": "def sat(x: float, coeffs: List[float]=[0.009071275487254024, 1.6430499435996755, -0.4454363130835725, 0.02773402732813201]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.009071275487254024, 1.6430499435996755, -0.4454363130835725, 0.02773402732813201]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_355",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.0986365320055737, 0.2074550653978803, 3.3130169868969124, 0.38237623555674655]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0986365320055737, 0.2074550653978803, 3.3130169868969124, 0.38237623555674655]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_356",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.222198888041084, -0.4687196397153401, 0.40592563609785187, 1.060153349505569]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.222198888041084, -0.4687196397153401, 0.40592563609785187, 1.060153349505569]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_357",
    "sat": "def sat(x: float, coeffs: List[float]=[-22.034400982116463, 0.07288700626361096, -0.7721641882872574, -0.1023618867570896]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-22.034400982116463, 0.07288700626361096, -0.7721641882872574, -0.1023618867570896]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_358",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.7569127684656376, 5.449006570464426, -0.2715370458331534, -1.7305330105116588]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.7569127684656376, 5.449006570464426, -0.2715370458331534, -1.7305330105116588]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_359",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.37352501660596554, -0.07070286448309189, -11.919241041702927, 527.0151116586328]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.37352501660596554, -0.07070286448309189, -11.919241041702927, 527.0151116586328]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_360",
    "sat": "def sat(x: float, coeffs: List[float]=[0.017366215609911844, 15.7304896356012, -0.8158059646439827, -171.41636128572634]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.017366215609911844, 15.7304896356012, -0.8158059646439827, -171.41636128572634]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_361",
    "sat": "def sat(x: float, coeffs: List[float]=[5.826206865977458, 3.1293221913768665, 1.2434016002914363, -0.1929089580622136]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.826206865977458, 3.1293221913768665, 1.2434016002914363, -0.1929089580622136]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_362",
    "sat": "def sat(x: float, coeffs: List[float]=[0.22243731425402724, -0.12261528728070359, -2.327308192110532, -18.065517623037092]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.22243731425402724, -0.12261528728070359, -2.327308192110532, -18.065517623037092]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_363",
    "sat": "def sat(x: float, coeffs: List[float]=[18.70857162705136, -1.9157771469334273, 0.06994483909191633, -0.08867800525489355]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[18.70857162705136, -1.9157771469334273, 0.06994483909191633, -0.08867800525489355]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_364",
    "sat": "def sat(x: float, coeffs: List[float]=[-57.806402764796026, 0.5386323833068575, -0.0030295335263226995, -0.01574683475362567]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-57.806402764796026, 0.5386323833068575, -0.0030295335263226995, -0.01574683475362567]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_365",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5725075596961674, 6.7253121200922825, -0.5884584524137328, -307.17848768111065]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5725075596961674, 6.7253121200922825, -0.5884584524137328, -307.17848768111065]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_366",
    "sat": "def sat(x: float, coeffs: List[float]=[0.9788660879884757, -0.2315612078879219, 0.300546012771613, 80902.6379710597]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9788660879884757, -0.2315612078879219, 0.300546012771613, 80902.6379710597]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_367",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.18353287542025232, -2.67472937947536, -51.09747898111146, -837.0975362634393]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.18353287542025232, -2.67472937947536, -51.09747898111146, -837.0975362634393]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_368",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.11124545457911565, 76.49639282364431, 0.4220130144983858, -6099919.56416434]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11124545457911565, 76.49639282364431, 0.4220130144983858, -6099919.56416434]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_369",
    "sat": "def sat(x: float, coeffs: List[float]=[-129.63647927093362, 40.029623998914694, 0.14497384534796068, 1.4680972130933843]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-129.63647927093362, 40.029623998914694, 0.14497384534796068, 1.4680972130933843]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_370",
    "sat": "def sat(x: float, coeffs: List[float]=[-6.304660383947627, 3.521671473293052, -1.446156573197858, -333990.09453628917]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.304660383947627, 3.521671473293052, -1.446156573197858, -333990.09453628917]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_371",
    "sat": "def sat(x: float, coeffs: List[float]=[1.8387765898283683, -0.22883791772168247, -0.9215715685018112, 0.0185299422365366]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8387765898283683, -0.22883791772168247, -0.9215715685018112, 0.0185299422365366]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_372",
    "sat": "def sat(x: float, coeffs: List[float]=[2.2010288996541734, -0.34683786987060133, 1.139436000820927, -0.5260625424860799]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.2010288996541734, -0.34683786987060133, 1.139436000820927, -0.5260625424860799]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_373",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8061083092374516, 18.96510670838452, 0.11727182380588615, -0.32850973817248535]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8061083092374516, 18.96510670838452, 0.11727182380588615, -0.32850973817248535]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_374",
    "sat": "def sat(x: float, coeffs: List[float]=[1.6408073915626333, -35.533887635035505, 0.5455875157304199, 903.2566020792428]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6408073915626333, -35.533887635035505, 0.5455875157304199, 903.2566020792428]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_375",
    "sat": "def sat(x: float, coeffs: List[float]=[0.717115770331581, 0.375386319040574, -1.7596251215686296, -97.48754781707011]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.717115770331581, 0.375386319040574, -1.7596251215686296, -97.48754781707011]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_376",
    "sat": "def sat(x: float, coeffs: List[float]=[1.1236746359486547, 0.8137806460850027, 0.5483214477551529, 0.5256885137936249]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1236746359486547, 0.8137806460850027, 0.5483214477551529, 0.5256885137936249]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_377",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1494126008594955, 9.49175955846219, 0.4625573931420967, -400.52430963953236]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1494126008594955, 9.49175955846219, 0.4625573931420967, -400.52430963953236]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_378",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.11112139569275407, 72.8862933712057, -11.836498965301843, -0.15369408697813888]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11112139569275407, 72.8862933712057, -11.836498965301843, -0.15369408697813888]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_379",
    "sat": "def sat(x: float, coeffs: List[float]=[0.43980861258120835, -46.90540187413231, -0.280752559482586, 0.2612419024294873]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.43980861258120835, -46.90540187413231, -0.280752559482586, 0.2612419024294873]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_380",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.021775029367991545, -0.3634307836336861, 0.34146761529296904, 1.0910455749059227]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.021775029367991545, -0.3634307836336861, 0.34146761529296904, 1.0910455749059227]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_381",
    "sat": "def sat(x: float, coeffs: List[float]=[0.49989528475402006, -0.0798293934939535, 49.085963818568764, 254.7654277084448]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.49989528475402006, -0.0798293934939535, 49.085963818568764, 254.7654277084448]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_382",
    "sat": "def sat(x: float, coeffs: List[float]=[0.08234921132473594, 105.20832369842638, 25.45601164844872, -398.0326691136273]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08234921132473594, 105.20832369842638, 25.45601164844872, -398.0326691136273]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_383",
    "sat": "def sat(x: float, coeffs: List[float]=[3.48756881600243, 8.741400326938988, 2.456576405941784, 0.17838590351749017]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.48756881600243, 8.741400326938988, 2.456576405941784, 0.17838590351749017]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_384",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2875004695628627, -0.3007111396459796, 73.01167392903517, -235.57160463258023]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2875004695628627, -0.3007111396459796, 73.01167392903517, -235.57160463258023]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_385",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6103610820923587, 0.5646194356914904, 2.1031156971621146, -594.5024373540817]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6103610820923587, 0.5646194356914904, 2.1031156971621146, -594.5024373540817]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_386",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.1301804211696336, -0.6904339981577404, -1.7983021341546188, -5.5903248486510195]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.1301804211696336, -0.6904339981577404, -1.7983021341546188, -5.5903248486510195]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_387",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5749597045842468, -4.005375119064156, -199.03605801023843, -167.10599321838248]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5749597045842468, -4.005375119064156, -199.03605801023843, -167.10599321838248]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_388",
    "sat": "def sat(x: float, coeffs: List[float]=[15.277148904852284, -5.630796708532095, 44.72467765933564, -71.36909241902113]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[15.277148904852284, -5.630796708532095, 44.72467765933564, -71.36909241902113]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_389",
    "sat": "def sat(x: float, coeffs: List[float]=[-389.27871051540995, -0.022083373822332348, 0.4945069099715121, 0.04382640017160237]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-389.27871051540995, -0.022083373822332348, 0.4945069099715121, 0.04382640017160237]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_390",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2056588934549927, 0.22756568100379085, -10.290900935596756, 0.17871674638966767]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2056588934549927, 0.22756568100379085, -10.290900935596756, 0.17871674638966767]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_391",
    "sat": "def sat(x: float, coeffs: List[float]=[0.0018634377612154474, -2.223449729233807, 0.18769005758706178, 26134.797028951503]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0018634377612154474, -2.223449729233807, 0.18769005758706178, 26134.797028951503]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_392",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.42880902095836443, -0.012882342551582418, 32.2651762913981, -1.0309012439162462]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.42880902095836443, -0.012882342551582418, 32.2651762913981, -1.0309012439162462]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_393",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.0181802012998697, -0.22920339601267928, -0.5256534772700349, -0.20787022633530905]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.0181802012998697, -0.22920339601267928, -0.5256534772700349, -0.20787022633530905]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_394",
    "sat": "def sat(x: float, coeffs: List[float]=[0.044124547723783124, 1.058112818249416, -9.948200092284292, 6.770422061026737]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.044124547723783124, 1.058112818249416, -9.948200092284292, 6.770422061026737]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_395",
    "sat": "def sat(x: float, coeffs: List[float]=[0.46642016905341643, -1.9757235023881652, -24.326721131140065, -38.0376926739177]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.46642016905341643, -1.9757235023881652, -24.326721131140065, -38.0376926739177]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_396",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6802078991867858, -0.12134418772597955, 21.19850429392606, -295.1000497580808]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6802078991867858, -0.12134418772597955, 21.19850429392606, -295.1000497580808]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_397",
    "sat": "def sat(x: float, coeffs: List[float]=[0.04625372581351702, 0.09462996160649569, -1.349698332980292, -18708.063691710136]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.04625372581351702, 0.09462996160649569, -1.349698332980292, -18708.063691710136]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_398",
    "sat": "def sat(x: float, coeffs: List[float]=[1.9932141177291367, 1.2207550157120906, 3.0532527521852213, 2.556389963958012]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.9932141177291367, 1.2207550157120906, 3.0532527521852213, 2.556389963958012]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_399",
    "sat": "def sat(x: float, coeffs: List[float]=[1.1183541207251135, 0.11718277013841434, 0.5124750004040179, -51.635004410771664]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1183541207251135, 0.11718277013841434, 0.5124750004040179, -51.635004410771664]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_400",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.6733727920815444, -0.3219775082030623, -0.7363511383337321, -1.7987425014585]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.6733727920815444, -0.3219775082030623, -0.7363511383337321, -1.7987425014585]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_401",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.721203761890771, 0.30069590123908174, 0.09937264884963175, 2373911.627020089]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.721203761890771, 0.30069590123908174, 0.09937264884963175, 2373911.627020089]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_402",
    "sat": "def sat(x: float, coeffs: List[float]=[-12.603970603548483, -0.6023464322495206, -0.19087022232926412, -0.11834712309838791]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.603970603548483, -0.6023464322495206, -0.19087022232926412, -0.11834712309838791]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_403",
    "sat": "def sat(x: float, coeffs: List[float]=[107.44247601894519, 0.04819550853948754, -0.7331449075943955, -0.023051644575332042]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[107.44247601894519, 0.04819550853948754, -0.7331449075943955, -0.023051644575332042]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_404",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.5885359754701744, 136.24178876769327, -0.39522312570779866, -1.2630851150214517]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5885359754701744, 136.24178876769327, -0.39522312570779866, -1.2630851150214517]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_405",
    "sat": "def sat(x: float, coeffs: List[float]=[-6.0790845236070945, -0.311583277893919, -0.15388504862637045, 137.07387587239168]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.0790845236070945, -0.311583277893919, -0.15388504862637045, 137.07387587239168]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_406",
    "sat": "def sat(x: float, coeffs: List[float]=[25.11750861589918, 5.364063708216943, 2.482054423232586, -92.6722999755829]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[25.11750861589918, 5.364063708216943, 2.482054423232586, -92.6722999755829]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_407",
    "sat": "def sat(x: float, coeffs: List[float]=[9.651982239571327, -6.348354263268836, -0.04934631036584388, 8234245.631093641]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.651982239571327, -6.348354263268836, -0.04934631036584388, 8234245.631093641]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_408",
    "sat": "def sat(x: float, coeffs: List[float]=[4.4412578511024305, 0.2448807486454255, -1.1336092521369103, -68384.62615919541]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.4412578511024305, 0.2448807486454255, -1.1336092521369103, -68384.62615919541]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_409",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2652453624359475, 315.1886326004459, 0.28618414259937813, -43.244060904495846]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2652453624359475, 315.1886326004459, 0.28618414259937813, -43.244060904495846]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_410",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.17754638744597906, 0.41055484083537896, 1.545629485431368, -0.6193768830918454]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.17754638744597906, 0.41055484083537896, 1.545629485431368, -0.6193768830918454]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_411",
    "sat": "def sat(x: float, coeffs: List[float]=[0.24131792627514237, 3.6178509748791545, -1.9737577916159206, -0.09478746618292762]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.24131792627514237, 3.6178509748791545, -1.9737577916159206, -0.09478746618292762]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_412",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.0642799142317731, 0.2571386403072789, 0.5509952876406182, -0.01620562034537708]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0642799142317731, 0.2571386403072789, 0.5509952876406182, -0.01620562034537708]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_413",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5726096294130261, -56.06376373469058, -0.0179130204980662, 63.93142680066609]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5726096294130261, -56.06376373469058, -0.0179130204980662, 63.93142680066609]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_414",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5170703122279684, -0.10493425727768517, 0.20923837901848108, -0.6290245808574499]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5170703122279684, -0.10493425727768517, 0.20923837901848108, -0.6290245808574499]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_415",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1559156833823898, 17.793947920421086, -0.1536324050292083, -0.10193788349474091]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1559156833823898, 17.793947920421086, -0.1536324050292083, -0.10193788349474091]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_416",
    "sat": "def sat(x: float, coeffs: List[float]=[2.092194950149727, -0.74677650982333, -0.8154555724360818, -5294.201329173685]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.092194950149727, -0.74677650982333, -0.8154555724360818, -5294.201329173685]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_417",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6840454617004063, 3.0602740834576565, 0.2045020681001403, -4.253126112718725]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6840454617004063, 3.0602740834576565, 0.2045020681001403, -4.253126112718725]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_418",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.07214978242995795, 23.529373543052078, 3.9891500438985568, -345.85525300057526]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.07214978242995795, 23.529373543052078, 3.9891500438985568, -345.85525300057526]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_419",
    "sat": "def sat(x: float, coeffs: List[float]=[-30.188805098694587, 99.416863533693, 1.0795619781566002, -51.66402825719761]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-30.188805098694587, 99.416863533693, 1.0795619781566002, -51.66402825719761]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_420",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5699026277442445, -5.1022263076420815, 0.34734472245739506, 3.4220099375213993]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5699026277442445, -5.1022263076420815, 0.34734472245739506, 3.4220099375213993]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_421",
    "sat": "def sat(x: float, coeffs: List[float]=[1.0508468696177429, 0.4918528675294609, -26.82552145635073, -9.620976416048377]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0508468696177429, 0.4918528675294609, -26.82552145635073, -9.620976416048377]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_422",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.6852295271111448, 10.917071056908073, -1.6064565388418772, -1.3518346354210449]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.6852295271111448, 10.917071056908073, -1.6064565388418772, -1.3518346354210449]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_423",
    "sat": "def sat(x: float, coeffs: List[float]=[368.85233144290737, 0.08115243922955373, -0.022420872006589414, 230.42154739920176]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[368.85233144290737, 0.08115243922955373, -0.022420872006589414, 230.42154739920176]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_424",
    "sat": "def sat(x: float, coeffs: List[float]=[5.500307626601788, -1.3947773349589019, 0.6527977976812007, -148.69239355815574]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.500307626601788, -1.3947773349589019, 0.6527977976812007, -148.69239355815574]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_425",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.20787864565563985, -1.2541480897011414, 2.4911229377070376, 8.034558707632772]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.20787864565563985, -1.2541480897011414, 2.4911229377070376, 8.034558707632772]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_426",
    "sat": "def sat(x: float, coeffs: List[float]=[0.04382330333939318, -8.00262017781301, 12.735485134102769, 36.43107284814302]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.04382330333939318, -8.00262017781301, 12.735485134102769, 36.43107284814302]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_427",
    "sat": "def sat(x: float, coeffs: List[float]=[5.531182778392424, -0.06807164452197283, -1.1781578323315067, -403.82543635826266]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.531182778392424, -0.06807164452197283, -1.1781578323315067, -403.82543635826266]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_428",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7537934423784548, 0.3727583021138054, -2.231553822875864, -0.84668944835398]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7537934423784548, 0.3727583021138054, -2.231553822875864, -0.84668944835398]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_429",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.23909668143996962, 273.922873257767, 18.176279908887622, -8.006727856595546]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.23909668143996962, 273.922873257767, 18.176279908887622, -8.006727856595546]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_430",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.1362547765691602, 15.031454742171688, 12.967094975228214, -104.0715347561738]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1362547765691602, 15.031454742171688, 12.967094975228214, -104.0715347561738]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_431",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.427393413426791, 0.916415045443146, 0.046936015290958, 1722.5196550764288]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.427393413426791, 0.916415045443146, 0.046936015290958, 1722.5196550764288]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_432",
    "sat": "def sat(x: float, coeffs: List[float]=[0.47889961469607173, -4.000475848359496, 0.016857622936560457, 75.14657379909046]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.47889961469607173, -4.000475848359496, 0.016857622936560457, 75.14657379909046]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_433",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.11293216902261172, 0.10006005928466684, 19.254969972031066, -102.26601162001612]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11293216902261172, 0.10006005928466684, 19.254969972031066, -102.26601162001612]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_434",
    "sat": "def sat(x: float, coeffs: List[float]=[0.07442593345336086, 1.7347796450145587, -1.293246697581347, 0.13089998462119498]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.07442593345336086, 1.7347796450145587, -1.293246697581347, 0.13089998462119498]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_435",
    "sat": "def sat(x: float, coeffs: List[float]=[0.727895019200481, -0.5917002338714438, -0.3558044638222683, 0.06370845791288493]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.727895019200481, -0.5917002338714438, -0.3558044638222683, 0.06370845791288493]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_436",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.4194056382241844, 0.03325124520476197, -0.06790183957564382, 42.927684435013646]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.4194056382241844, 0.03325124520476197, -0.06790183957564382, 42.927684435013646]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_437",
    "sat": "def sat(x: float, coeffs: List[float]=[0.007021968176761965, -0.2453039381481664, -0.26598548324870236, -0.030500896845246206]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.007021968176761965, -0.2453039381481664, -0.26598548324870236, -0.030500896845246206]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_438",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.9204623880441275, 100.34813517706276, 0.09215086288427976, -1708.959648741764]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9204623880441275, 100.34813517706276, 0.09215086288427976, -1708.959648741764]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_439",
    "sat": "def sat(x: float, coeffs: List[float]=[4.535800769739863, 0.25554001905512697, -0.01613203218813804, 0.7293349782713191]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.535800769739863, 0.25554001905512697, -0.01613203218813804, 0.7293349782713191]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_440",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.15334431477170693, 0.20508648012275424, 0.14546995667896212, -44.33613631453022]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.15334431477170693, 0.20508648012275424, 0.14546995667896212, -44.33613631453022]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_441",
    "sat": "def sat(x: float, coeffs: List[float]=[-10.328845877456487, -2.268692714810666, 0.13193618983555258, -29.65427304599606]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-10.328845877456487, -2.268692714810666, 0.13193618983555258, -29.65427304599606]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_442",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2592503287252505, -0.08996407657246201, 0.058201261533463576, 0.5427822395348328]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2592503287252505, -0.08996407657246201, 0.058201261533463576, 0.5427822395348328]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_443",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8833957296203784, -0.5723522053473777, 0.13083890084503294, 3.3575871932975745]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8833957296203784, -0.5723522053473777, 0.13083890084503294, 3.3575871932975745]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_444",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.5296764392272153, -3.274897722156219, -1.5312911237087352, 75620.9327579305]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.5296764392272153, -3.274897722156219, -1.5312911237087352, 75620.9327579305]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_445",
    "sat": "def sat(x: float, coeffs: List[float]=[-15.691863268308781, 0.17034499284895643, -0.3853060929592413, -0.21344825233642992]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-15.691863268308781, 0.17034499284895643, -0.3853060929592413, -0.21344825233642992]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_446",
    "sat": "def sat(x: float, coeffs: List[float]=[-10.77172397622038, -0.2592377875616443, 0.06610279589760652, 5304590.238442113]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-10.77172397622038, -0.2592377875616443, 0.06610279589760652, 5304590.238442113]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_447",
    "sat": "def sat(x: float, coeffs: List[float]=[1.8136182258882076, -0.07213754993445713, 0.13358832492700246, -0.013112481366960502]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8136182258882076, -0.07213754993445713, 0.13358832492700246, -0.013112481366960502]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_448",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7385511331217267, -0.6729927224729572, -4.234687541465557, -2288.2620844687485]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7385511331217267, -0.6729927224729572, -4.234687541465557, -2288.2620844687485]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_449",
    "sat": "def sat(x: float, coeffs: List[float]=[3.293019903423902, 0.7757734984025381, 2.722430390842284, 6545337.262651467]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.293019903423902, 0.7757734984025381, 2.722430390842284, 6545337.262651467]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_450",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3563920393714846, -0.3209079498385774, 5.53722408751763, -1.4184813331297434]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3563920393714846, -0.3209079498385774, 5.53722408751763, -1.4184813331297434]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_451",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.20979405914751284, -65.84672962821766, -17.326875289726363, 146.04535850447144]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.20979405914751284, -65.84672962821766, -17.326875289726363, 146.04535850447144]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_452",
    "sat": "def sat(x: float, coeffs: List[float]=[308.13226666053134, -2.8954308200391736, -2.263948635018579, 1577.8971398300507]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[308.13226666053134, -2.8954308200391736, -2.263948635018579, 1577.8971398300507]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_453",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.522872681654028, 1.9384770828206983, -0.05902605594033772, -34.258687546338656]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.522872681654028, 1.9384770828206983, -0.05902605594033772, -34.258687546338656]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_454",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.34760845585904504, -1.6187620504167268, -0.6066898126327166, 132.72602873522715]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.34760845585904504, -1.6187620504167268, -0.6066898126327166, 132.72602873522715]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_455",
    "sat": "def sat(x: float, coeffs: List[float]=[-8.208951529887472, -0.2850346729743143, -0.162505871482809, -0.041838650728176635]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.208951529887472, -0.2850346729743143, -0.162505871482809, -0.041838650728176635]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_456",
    "sat": "def sat(x: float, coeffs: List[float]=[-14.532074796362325, -5.171164592075868, -0.17966206669837095, 1.4330126483607235]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-14.532074796362325, -5.171164592075868, -0.17966206669837095, 1.4330126483607235]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_457",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2796213935014004, -0.09241583459233167, -0.1443139212522663, 0.02504365407463401]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2796213935014004, -0.09241583459233167, -0.1443139212522663, 0.02504365407463401]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_458",
    "sat": "def sat(x: float, coeffs: List[float]=[7.085259405331761, 0.038717716236784515, -0.08446744255447254, 0.0006123435637575759]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.085259405331761, 0.038717716236784515, -0.08446744255447254, 0.0006123435637575759]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_459",
    "sat": "def sat(x: float, coeffs: List[float]=[4.163870090684152, 0.3516645895815536, -0.252969018072708, -5.6453112890202926]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.163870090684152, 0.3516645895815536, -0.252969018072708, -5.6453112890202926]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_460",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7086173655857788, -87.89256115751594, -0.5908983290498918, 183145.9262079372]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7086173655857788, -87.89256115751594, -0.5908983290498918, 183145.9262079372]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_461",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.2901548167144115, 0.34885217586487477, 0.5156945536266903, -29362.04498119428]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.2901548167144115, 0.34885217586487477, 0.5156945536266903, -29362.04498119428]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_462",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4887014637152256, -0.05755329212267054, 0.0238626181213335, 149254.66931525714]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4887014637152256, -0.05755329212267054, 0.0238626181213335, 149254.66931525714]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_463",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.26625967474164836, -0.09687647570893858, 0.14012522081777293, -9.860795079890716]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.26625967474164836, -0.09687647570893858, 0.14012522081777293, -9.860795079890716]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_464",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.1376281615018342, -0.26205316998319733, 126.1553150857702, -19.918288292150617]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1376281615018342, -0.26205316998319733, 126.1553150857702, -19.918288292150617]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_465",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.011998029675043, 31.580756891129436, -13.306173942712219, -379.49253907020505]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.011998029675043, 31.580756891129436, -13.306173942712219, -379.49253907020505]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_466",
    "sat": "def sat(x: float, coeffs: List[float]=[0.01691473138800544, 0.21502025382880915, -0.26175845016627797, 11189073.10558396]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.01691473138800544, 0.21502025382880915, -0.26175845016627797, 11189073.10558396]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_467",
    "sat": "def sat(x: float, coeffs: List[float]=[-23.16390558953891, -5.954309603531525, 1.554868712511787, -0.05626073326095405]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-23.16390558953891, -5.954309603531525, 1.554868712511787, -0.05626073326095405]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_468",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5128675557599673, 7.004963623834556, 3.485999254115368, 0.43451787293012445]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5128675557599673, 7.004963623834556, 3.485999254115368, 0.43451787293012445]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_469",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2530587287427746, 0.057517105884807705, 0.1713894159934727, 0.6543066538525031]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2530587287427746, 0.057517105884807705, 0.1713894159934727, 0.6543066538525031]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_470",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.4668236015664373, 0.5883796929072234, 0.31448277953796877, -3218779.934909893]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4668236015664373, 0.5883796929072234, 0.31448277953796877, -3218779.934909893]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_471",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.923982598885481, -0.9192232155158089, -0.34541913571208055, 1.027605951627486]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.923982598885481, -0.9192232155158089, -0.34541913571208055, 1.027605951627486]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_472",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.02814446304861007, 0.9518537426685908, 0.26746123307259334, -0.0005174871997002272]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.02814446304861007, 0.9518537426685908, 0.26746123307259334, -0.0005174871997002272]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_473",
    "sat": "def sat(x: float, coeffs: List[float]=[1.9860466840490176, -0.5397145942427417, 1.3578925984925938, 11.330710578764991]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.9860466840490176, -0.5397145942427417, 1.3578925984925938, 11.330710578764991]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_474",
    "sat": "def sat(x: float, coeffs: List[float]=[0.03365923319356908, 0.582257280843911, -0.01312766221088276, -1.0713397582063346]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.03365923319356908, 0.582257280843911, -0.01312766221088276, -1.0713397582063346]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_475",
    "sat": "def sat(x: float, coeffs: List[float]=[-324.3265039580174, 0.2576003302611236, -0.4543270832744624, -241196551.4389312]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-324.3265039580174, 0.2576003302611236, -0.4543270832744624, -241196551.4389312]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_476",
    "sat": "def sat(x: float, coeffs: List[float]=[4.347463963556889, -9.136007684813636, 0.020865884923883193, 251095655.20096192]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.347463963556889, -9.136007684813636, 0.020865884923883193, 251095655.20096192]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_477",
    "sat": "def sat(x: float, coeffs: List[float]=[10.343835057504704, -0.28895030654586296, -4.174750517139276, 0.7697506184821803]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.343835057504704, -0.28895030654586296, -4.174750517139276, 0.7697506184821803]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_478",
    "sat": "def sat(x: float, coeffs: List[float]=[225.48214050454678, -0.7247492237708418, -4.712686592692427, -0.20107958935253994]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[225.48214050454678, -0.7247492237708418, -4.712686592692427, -0.20107958935253994]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_479",
    "sat": "def sat(x: float, coeffs: List[float]=[0.20676131711896942, -54.74084782983976, -0.1973867372723659, 0.1192134534370417]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.20676131711896942, -54.74084782983976, -0.1973867372723659, 0.1192134534370417]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_480",
    "sat": "def sat(x: float, coeffs: List[float]=[92.72707532875643, -0.534004584490042, 0.36195292894872794, 6598.823013186809]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[92.72707532875643, -0.534004584490042, 0.36195292894872794, 6598.823013186809]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_481",
    "sat": "def sat(x: float, coeffs: List[float]=[114.19630467932757, -0.560108679203383, -22.738426250977074, 125075294.28353083]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[114.19630467932757, -0.560108679203383, -22.738426250977074, 125075294.28353083]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_482",
    "sat": "def sat(x: float, coeffs: List[float]=[92.42686206005574, 0.7134452707173232, -27.713342004106213, -6170.637995585178]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[92.42686206005574, 0.7134452707173232, -27.713342004106213, -6170.637995585178]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_483",
    "sat": "def sat(x: float, coeffs: List[float]=[7.260426037515025, 4.301621893599125, -0.6791826881081184, 557.3343447676917]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.260426037515025, 4.301621893599125, -0.6791826881081184, 557.3343447676917]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_484",
    "sat": "def sat(x: float, coeffs: List[float]=[18.74795784254472, 2.0540369555678515, 0.5388589102384022, 0.020517465133113623]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[18.74795784254472, 2.0540369555678515, 0.5388589102384022, 0.020517465133113623]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_485",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.8209651101100717, 0.26535542211871804, 1.2259002718890688, -0.39391908698104827]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8209651101100717, 0.26535542211871804, 1.2259002718890688, -0.39391908698104827]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_486",
    "sat": "def sat(x: float, coeffs: List[float]=[57.16057090663116, 0.5474376176886983, 1.6724169200602257, -0.10250080317957032]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[57.16057090663116, 0.5474376176886983, 1.6724169200602257, -0.10250080317957032]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_487",
    "sat": "def sat(x: float, coeffs: List[float]=[2.376049289512816, 4.7703311814875695, 0.22973938218547585, -0.10987937003976349]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.376049289512816, 4.7703311814875695, 0.22973938218547585, -0.10987937003976349]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_488",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.25448958788086345, 0.029597573424602414, -52.48917169340777, -5290.367723900274]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.25448958788086345, 0.029597573424602414, -52.48917169340777, -5290.367723900274]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_489",
    "sat": "def sat(x: float, coeffs: List[float]=[0.558091008811132, -0.11204090498827135, 1.2940772409874892, 7498.6794439940595]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.558091008811132, -0.11204090498827135, 1.2940772409874892, 7498.6794439940595]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_490",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.325152200371275, 5.618237153626951, -0.12464528980314227, -1.098509829759786]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.325152200371275, 5.618237153626951, -0.12464528980314227, -1.098509829759786]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_491",
    "sat": "def sat(x: float, coeffs: List[float]=[0.01423886744583025, -39.87672713785192, 1.1929408935776824, 3550.3458381695505]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.01423886744583025, -39.87672713785192, 1.1929408935776824, 3550.3458381695505]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_492",
    "sat": "def sat(x: float, coeffs: List[float]=[1.1247172693235772, 2.345560493233508, 0.09426322822560033, -1.4899384611215158]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1247172693235772, 2.345560493233508, 0.09426322822560033, -1.4899384611215158]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_493",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5757529701981583, 127.27476502234475, -0.41069050975759874, -37.81565112181516]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5757529701981583, 127.27476502234475, -0.41069050975759874, -37.81565112181516]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_494",
    "sat": "def sat(x: float, coeffs: List[float]=[0.28140559722910985, 5.391551330937915, -0.09491212091353574, -18.304960820223055]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.28140559722910985, 5.391551330937915, -0.09491212091353574, -18.304960820223055]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_495",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.14556418500499957, -3.041442044072878, 0.04116401785505356, 52.047562830538496]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.14556418500499957, -3.041442044072878, 0.04116401785505356, 52.047562830538496]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_496",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.11481092982729828, 0.8163291630222513, -14.989435767465963, -57763.511701608986]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11481092982729828, 0.8163291630222513, -14.989435767465963, -57763.511701608986]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_497",
    "sat": "def sat(x: float, coeffs: List[float]=[17.158654021437933, -0.12682104830598964, -0.02458894262486429, -0.005284337973956776]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[17.158654021437933, -0.12682104830598964, -0.02458894262486429, -0.005284337973956776]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_498",
    "sat": "def sat(x: float, coeffs: List[float]=[473.46761006246317, 0.3438500000153071, -0.09693613106819954, 6.62705465303838]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[473.46761006246317, 0.3438500000153071, -0.09693613106819954, 6.62705465303838]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_499",
    "sat": "def sat(x: float, coeffs: List[float]=[25.41748137931667, 0.2338727078926813, 0.2911581457952655, 246.67586066592975]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[25.41748137931667, 0.2338727078926813, 0.2911581457952655, 246.67586066592975]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_500",
    "sat": "def sat(x: float, coeffs: List[float]=[1.1721371297302952, 2.510328678760073, 0.025556040059898495, -5311.047415396464]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1721371297302952, 2.510328678760073, 0.025556040059898495, -5311.047415396464]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_501",
    "sat": "def sat(x: float, coeffs: List[float]=[1.5833455760690465, -0.26983349300911513, -345.4134024597756, 57.405107174369036]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5833455760690465, -0.26983349300911513, -345.4134024597756, 57.405107174369036]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_502",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.3491328930862547, -0.037445015020132276, -0.04801794643779226, -311.5872610565504]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3491328930862547, -0.037445015020132276, -0.04801794643779226, -311.5872610565504]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_503",
    "sat": "def sat(x: float, coeffs: List[float]=[9.81586170715436, 0.7290005592109224, -0.31141891471617056, -12.607415589877517]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.81586170715436, 0.7290005592109224, -0.31141891471617056, -12.607415589877517]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_504",
    "sat": "def sat(x: float, coeffs: List[float]=[1.725098180118344, -1.4219565361466113, -0.12084411806718783, -0.001090999917380372]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.725098180118344, -1.4219565361466113, -0.12084411806718783, -0.001090999917380372]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_505",
    "sat": "def sat(x: float, coeffs: List[float]=[0.731902195510984, -0.39447775387407374, 56.43076490797074, 4.918943815626405]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.731902195510984, -0.39447775387407374, 56.43076490797074, 4.918943815626405]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_506",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.9737372566963699, -2.363913268589154, 3.167117610305788, 0.830045825135485]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9737372566963699, -2.363913268589154, 3.167117610305788, 0.830045825135485]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_507",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.8161506236301697, -0.997665085673045, -19.977392592744796, -41.79359029455844]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.8161506236301697, -0.997665085673045, -19.977392592744796, -41.79359029455844]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_508",
    "sat": "def sat(x: float, coeffs: List[float]=[0.05970605589029213, -1.103473057813626, 0.560564652239501, 0.27639410517366786]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.05970605589029213, -1.103473057813626, 0.560564652239501, 0.27639410517366786]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_509",
    "sat": "def sat(x: float, coeffs: List[float]=[0.051310519862095116, 0.8665328399204072, -0.4835910131099495, -1.274931986705056]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.051310519862095116, 0.8665328399204072, -0.4835910131099495, -1.274931986705056]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_510",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4688111428552091, -1.2960835204022356, -0.10656740478162985, 0.6322608606220711]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4688111428552091, -1.2960835204022356, -0.10656740478162985, 0.6322608606220711]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_511",
    "sat": "def sat(x: float, coeffs: List[float]=[2.9383584607165107, 6.110182647271807, 0.2024795156899882, -0.11831820279945758]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.9383584607165107, 6.110182647271807, 0.2024795156899882, -0.11831820279945758]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_512",
    "sat": "def sat(x: float, coeffs: List[float]=[1.3100213558283489, -0.19902590301817277, 0.5933558248216723, 0.12187301033295919]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3100213558283489, -0.19902590301817277, 0.5933558248216723, 0.12187301033295919]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_513",
    "sat": "def sat(x: float, coeffs: List[float]=[-6.423231090015679, -4.4645114077733306, 231.8783597995599, 180.2554619486302]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.423231090015679, -4.4645114077733306, 231.8783597995599, 180.2554619486302]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_514",
    "sat": "def sat(x: float, coeffs: List[float]=[8.188319079518164, 3.6221855662407605, 0.025959470319574834, -5.057389394426813]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.188319079518164, 3.6221855662407605, 0.025959470319574834, -5.057389394426813]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_515",
    "sat": "def sat(x: float, coeffs: List[float]=[-331.73305597628126, 249.62040197791694, -1.0509461398676836, -43.305832551699645]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-331.73305597628126, 249.62040197791694, -1.0509461398676836, -43.305832551699645]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_516",
    "sat": "def sat(x: float, coeffs: List[float]=[-77.58034010288593, 0.15213820213033458, 1.3955474918819935, -0.05503208688553396]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-77.58034010288593, 0.15213820213033458, 1.3955474918819935, -0.05503208688553396]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_517",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.964572042198123, -40.5281996172099, -0.2329785602111046, 577.831820132328]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.964572042198123, -40.5281996172099, -0.2329785602111046, 577.831820132328]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_518",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.3413364744176233, -0.44690111801440535, 0.19578924149344634, -190.08534081540776]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3413364744176233, -0.44690111801440535, 0.19578924149344634, -190.08534081540776]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_519",
    "sat": "def sat(x: float, coeffs: List[float]=[0.0731052648404688, -0.8566126977209478, -82.19166382323996, -298.53995829812584]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0731052648404688, -0.8566126977209478, -82.19166382323996, -298.53995829812584]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_520",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8403783902464924, 2.355026121453486, -0.7453726669546509, -1.1092975511780119]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8403783902464924, 2.355026121453486, -0.7453726669546509, -1.1092975511780119]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_521",
    "sat": "def sat(x: float, coeffs: List[float]=[31.977989589931013, -35.83939193053264, 4.718049111740928, -20310.65279280359]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[31.977989589931013, -35.83939193053264, 4.718049111740928, -20310.65279280359]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_522",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.10537187562777994, -70.15788636765802, 0.3937481693683507, 0.7743820064920176]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.10537187562777994, -70.15788636765802, 0.3937481693683507, 0.7743820064920176]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_523",
    "sat": "def sat(x: float, coeffs: List[float]=[26.499271059618636, 3.0314932506584458, -0.19714469255169345, 698032.076308827]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[26.499271059618636, 3.0314932506584458, -0.19714469255169345, 698032.076308827]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_524",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.20630733192194892, 0.4649552619869161, -1.9513580599310683, -0.5037293312903163]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.20630733192194892, 0.4649552619869161, -1.9513580599310683, -0.5037293312903163]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_525",
    "sat": "def sat(x: float, coeffs: List[float]=[244.98882078889167, -3.3315455228894097, -1.0264666855447644, -336277512.7653933]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[244.98882078889167, -3.3315455228894097, -1.0264666855447644, -336277512.7653933]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_526",
    "sat": "def sat(x: float, coeffs: List[float]=[-13.529408417562662, 4.368548787836992, -0.40866965069991973, -178.53591127160576]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-13.529408417562662, 4.368548787836992, -0.40866965069991973, -178.53591127160576]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_527",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.0424468317194413, -0.13255508838382357, -1.4204295995247491, -0.15198571531890617]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.0424468317194413, -0.13255508838382357, -1.4204295995247491, -0.15198571531890617]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_528",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.2226228309728047, -0.12473110056849175, 40.37765284366636, -37.86994819575975]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.2226228309728047, -0.12473110056849175, 40.37765284366636, -37.86994819575975]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_529",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.3284392574675883, -0.33203766817830704, 0.02428081890517242, 2.1253260983551288]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3284392574675883, -0.33203766817830704, 0.02428081890517242, 2.1253260983551288]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_530",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.010017962501016683, 0.7514041992498086, -0.29083189728985626, -85.59659973535102]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.010017962501016683, 0.7514041992498086, -0.29083189728985626, -85.59659973535102]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_531",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.2419739320347645, -0.25023477701974256, -0.04050161359419735, 0.09351868195994434]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2419739320347645, -0.25023477701974256, -0.04050161359419735, 0.09351868195994434]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_532",
    "sat": "def sat(x: float, coeffs: List[float]=[3.530774684821308, 0.04052317204547203, 0.1305869212685109, -3516199.6404595245]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.530774684821308, 0.04052317204547203, 0.1305869212685109, -3516199.6404595245]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_533",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3748862279385201, 57.041754337545484, 11.049814976771877, -883.1890955810082]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3748862279385201, 57.041754337545484, 11.049814976771877, -883.1890955810082]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_534",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.002797392015923291, 0.1478876085179858, 0.890213824548956, 0.6332783455050583]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.002797392015923291, 0.1478876085179858, 0.890213824548956, 0.6332783455050583]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_535",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3700859306607365, 1.7346513659722052, -0.49751186672995446, 0.0030971019321682502]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3700859306607365, 1.7346513659722052, -0.49751186672995446, 0.0030971019321682502]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_536",
    "sat": "def sat(x: float, coeffs: List[float]=[1.0790688434184081, -0.07769179674574689, -2.547849937062877, 0.5375160738074936]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0790688434184081, -0.07769179674574689, -2.547849937062877, 0.5375160738074936]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_537",
    "sat": "def sat(x: float, coeffs: List[float]=[2.3874697478365277, 0.3279715918145267, -0.3984575935838007, -0.005976750398922347]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.3874697478365277, 0.3279715918145267, -0.3984575935838007, -0.005976750398922347]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_538",
    "sat": "def sat(x: float, coeffs: List[float]=[1.5837576264351447, 0.21929398523031365, -1.8810812699219648, 0.17664614516272162]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5837576264351447, 0.21929398523031365, -1.8810812699219648, 0.17664614516272162]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_539",
    "sat": "def sat(x: float, coeffs: List[float]=[-6.198830685144697, -0.44305394218954364, -1.0605448371759216, 0.13776448392498108]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.198830685144697, -0.44305394218954364, -1.0605448371759216, 0.13776448392498108]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_540",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.04142680368199906, -1.4126513449076643, 1.0790745472877559, 52.22191508467951]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.04142680368199906, -1.4126513449076643, 1.0790745472877559, 52.22191508467951]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_541",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8046032113278706, -1.1258026311386262, -0.17970524753639827, 2.3005235771596535]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8046032113278706, -1.1258026311386262, -0.17970524753639827, 2.3005235771596535]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_542",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2596211214701562, 3.0913935387555718, -0.042979785797341886, -0.02393287057930932]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2596211214701562, 3.0913935387555718, -0.042979785797341886, -0.02393287057930932]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_543",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.034118389939505, 1.9212747703923574, -1.351841735590052, -2.5983157254850795]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.034118389939505, 1.9212747703923574, -1.351841735590052, -2.5983157254850795]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_544",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.0959390088466765, 1.593647072986391, 70.68299904400418, -250.18625393807878]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0959390088466765, 1.593647072986391, 70.68299904400418, -250.18625393807878]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_545",
    "sat": "def sat(x: float, coeffs: List[float]=[0.52134809713526, -9.34217088971915, 11.235829951779522, -2.0789037441177154]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.52134809713526, -9.34217088971915, 11.235829951779522, -2.0789037441177154]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_546",
    "sat": "def sat(x: float, coeffs: List[float]=[0.9356674688517149, -29.260858448784003, -0.017313745333305503, 4034.2237513853147]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9356674688517149, -29.260858448784003, -0.017313745333305503, 4034.2237513853147]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_547",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.0619191890394748, 3.2281292734608322, -0.28891610729163014, -0.9568941633550174]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0619191890394748, 3.2281292734608322, -0.28891610729163014, -0.9568941633550174]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_548",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3153180035047089, 0.08958721686199585, 2.6496555997928977, -0.19348537219029727]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3153180035047089, 0.08958721686199585, 2.6496555997928977, -0.19348537219029727]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_549",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4699979849840415, -0.16927143628598884, 0.6028591477448266, -244.03872152754425]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4699979849840415, -0.16927143628598884, 0.6028591477448266, -244.03872152754425]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_550",
    "sat": "def sat(x: float, coeffs: List[float]=[61.6326569494155, -50.851663953110894, -1.998052024027212, 5.816476564879696]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[61.6326569494155, -50.851663953110894, -1.998052024027212, 5.816476564879696]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_551",
    "sat": "def sat(x: float, coeffs: List[float]=[-11.229793747417325, -0.19077314414897284, 4.54798836142572, 2940.8741208053393]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.229793747417325, -0.19077314414897284, 4.54798836142572, 2940.8741208053393]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_552",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.2256493278747929, 30.871502100076043, -6.123295231097202, -5.0436570898219655]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2256493278747929, 30.871502100076043, -6.123295231097202, -5.0436570898219655]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_553",
    "sat": "def sat(x: float, coeffs: List[float]=[1.1362595423468418, -2.9400607474592086, -2.3672016364974806, -0.0018817734131184906]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1362595423468418, -2.9400607474592086, -2.3672016364974806, -0.0018817734131184906]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_554",
    "sat": "def sat(x: float, coeffs: List[float]=[4.1573885145756515, -0.7286760140741514, -0.1145189682957688, -0.39025914327392874]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.1573885145756515, -0.7286760140741514, -0.1145189682957688, -0.39025914327392874]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_555",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6477306407573312, -2.264325927432293, 0.47862520269950287, -186.542631127427]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6477306407573312, -2.264325927432293, 0.47862520269950287, -186.542631127427]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_556",
    "sat": "def sat(x: float, coeffs: List[float]=[4.776988174977791, 0.5434271478383522, 0.08195229499259511, 82.0054459078817]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.776988174977791, 0.5434271478383522, 0.08195229499259511, 82.0054459078817]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_557",
    "sat": "def sat(x: float, coeffs: List[float]=[0.846792956964415, -0.3652694434620624, -0.3388243023444651, -0.02971077345707414]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.846792956964415, -0.3652694434620624, -0.3388243023444651, -0.02971077345707414]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_558",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.28169972620919553, -13.639802173118682, -6.172102044739724, 0.20699290500796985]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.28169972620919553, -13.639802173118682, -6.172102044739724, 0.20699290500796985]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_559",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.889545230061023, 1.009451049224106, 0.3196835606174859, -1678.166131842492]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.889545230061023, 1.009451049224106, 0.3196835606174859, -1678.166131842492]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_560",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3516841699190317, -3.6421110096215137, 2.1095465832160025, 0.5248590324659944]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3516841699190317, -3.6421110096215137, 2.1095465832160025, 0.5248590324659944]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_561",
    "sat": "def sat(x: float, coeffs: List[float]=[-9.059050641872284, -21.810773428957464, 25.22231648055418, 32301359.79959164]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.059050641872284, -21.810773428957464, 25.22231648055418, 32301359.79959164]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_562",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4603789699294987, 1.7789200907282343, 0.9533207155847024, 0.08322720114436727]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4603789699294987, 1.7789200907282343, 0.9533207155847024, 0.08322720114436727]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_563",
    "sat": "def sat(x: float, coeffs: List[float]=[404.75730446380203, -0.7042480835915557, 4.976764737405553, -19838.690652758778]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[404.75730446380203, -0.7042480835915557, 4.976764737405553, -19838.690652758778]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_564",
    "sat": "def sat(x: float, coeffs: List[float]=[0.04800603189018086, 0.056605528759386736, 0.409474378174151, -1419.8497650627069]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.04800603189018086, 0.056605528759386736, 0.409474378174151, -1419.8497650627069]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_565",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.24850460280213982, 1.8452953073221483, 0.09169047404900876, -0.48290422036168057]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.24850460280213982, 1.8452953073221483, 0.09169047404900876, -0.48290422036168057]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_566",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.24404804849500236, -538.5477888638849, -2.7822011967857985, 10.912375936249038]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.24404804849500236, -538.5477888638849, -2.7822011967857985, 10.912375936249038]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_567",
    "sat": "def sat(x: float, coeffs: List[float]=[1.7604609595839034, 0.1026892189985013, -2.3511405163328605, 2.7742426768072637]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7604609595839034, 0.1026892189985013, -2.3511405163328605, 2.7742426768072637]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_568",
    "sat": "def sat(x: float, coeffs: List[float]=[99.67631894572487, 1.4957894613479807, -0.2589629688061023, 1195.5913476749834]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[99.67631894572487, 1.4957894613479807, -0.2589629688061023, 1195.5913476749834]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_569",
    "sat": "def sat(x: float, coeffs: List[float]=[0.18003078836572892, -0.09827358840005895, 0.4102515761860143, -0.023950805577348945]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.18003078836572892, -0.09827358840005895, 0.4102515761860143, -0.023950805577348945]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_570",
    "sat": "def sat(x: float, coeffs: List[float]=[1.5674234283392001, -7.589604901945293, 0.9382109642682672, 0.09470710012485542]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5674234283392001, -7.589604901945293, 0.9382109642682672, 0.09470710012485542]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_571",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2115140837858319, 11.875409632894836, -0.2736361034586141, -0.14338051358600595]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2115140837858319, 11.875409632894836, -0.2736361034586141, -0.14338051358600595]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_572",
    "sat": "def sat(x: float, coeffs: List[float]=[0.45860258845968255, -6.584811175779444, 1.5772366836764602, 3.67416556251057]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.45860258845968255, -6.584811175779444, 1.5772366836764602, 3.67416556251057]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_573",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.237490054121999, 0.7671729385589834, -0.1354608081230987, -66525.90077425024]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.237490054121999, 0.7671729385589834, -0.1354608081230987, -66525.90077425024]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_574",
    "sat": "def sat(x: float, coeffs: List[float]=[0.20152608447858342, -0.014026205350808821, -0.4211618472991125, -0.9166229394037605]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.20152608447858342, -0.014026205350808821, -0.4211618472991125, -0.9166229394037605]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_575",
    "sat": "def sat(x: float, coeffs: List[float]=[0.21413539018244565, 12.505495893826714, -0.3438905217201129, -77.5776396012646]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.21413539018244565, 12.505495893826714, -0.3438905217201129, -77.5776396012646]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_576",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1285031608508326, -0.07701726341820987, 30.66651513104526, -30.26754694997552]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1285031608508326, -0.07701726341820987, 30.66651513104526, -30.26754694997552]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_577",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3730603133655759, 3.7931476787363856, 0.4225844018533187, -0.4758026124774719]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3730603133655759, 3.7931476787363856, 0.4225844018533187, -0.4758026124774719]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_578",
    "sat": "def sat(x: float, coeffs: List[float]=[1.489832809147826, 1.4039383427403902, 2.6859413259225686, 4976408.594889304]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.489832809147826, 1.4039383427403902, 2.6859413259225686, 4976408.594889304]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_579",
    "sat": "def sat(x: float, coeffs: List[float]=[-16.245112551895385, 0.4448592248092571, -10.523075576897144, 3841.407516925627]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.245112551895385, 0.4448592248092571, -10.523075576897144, 3841.407516925627]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_580",
    "sat": "def sat(x: float, coeffs: List[float]=[0.369932635552727, 0.24334168804262854, 0.3201294321237452, -0.009907788625950863]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.369932635552727, 0.24334168804262854, 0.3201294321237452, -0.009907788625950863]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_581",
    "sat": "def sat(x: float, coeffs: List[float]=[0.20803649598387927, -0.41057250093169834, -1.135030421147824, 0.12142670903665087]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.20803649598387927, -0.41057250093169834, -1.135030421147824, 0.12142670903665087]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_582",
    "sat": "def sat(x: float, coeffs: List[float]=[6.750024828724521, 0.10059546506482449, 0.12436203349411794, 1030555.9329889159]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.750024828724521, 0.10059546506482449, 0.12436203349411794, 1030555.9329889159]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_583",
    "sat": "def sat(x: float, coeffs: List[float]=[0.009726908574687979, -0.007068222029616693, 19.56413863203849, 9.574468472651795]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.009726908574687979, -0.007068222029616693, 19.56413863203849, 9.574468472651795]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_584",
    "sat": "def sat(x: float, coeffs: List[float]=[-11.299826268752794, -6.80164460876333, 0.33740811832342255, 0.09173242430013817]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.299826268752794, -6.80164460876333, 0.33740811832342255, 0.09173242430013817]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_585",
    "sat": "def sat(x: float, coeffs: List[float]=[4.342534033740356, 0.13792715748754136, -0.27729404707798117, 4492.33844857322]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.342534033740356, 0.13792715748754136, -0.27729404707798117, 4492.33844857322]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_586",
    "sat": "def sat(x: float, coeffs: List[float]=[4.3367444951026535, -0.1923468088020738, -44.59522849485737, -45.72807270504992]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.3367444951026535, -0.1923468088020738, -44.59522849485737, -45.72807270504992]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_587",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8478088654939788, -1.249457683332853, -1.828009183811773, -0.17276922475728762]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8478088654939788, -1.249457683332853, -1.828009183811773, -0.17276922475728762]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_588",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.20927586080173297, 25.085109862369, -0.22526119928219446, -1.9518093550432716]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.20927586080173297, 25.085109862369, -0.22526119928219446, -1.9518093550432716]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_589",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.009988170185338, -0.1366631960260681, 4.617867732765737, -3.5829012331873584]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.009988170185338, -0.1366631960260681, 4.617867732765737, -3.5829012331873584]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_590",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.16188177199477005, 0.08555524292341003, 0.21167059814507275, -0.10674332150905566]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.16188177199477005, 0.08555524292341003, 0.21167059814507275, -0.10674332150905566]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_591",
    "sat": "def sat(x: float, coeffs: List[float]=[-101.07525180482503, 0.08233433245491557, -27.046046858417785, -36811917.242149785]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-101.07525180482503, 0.08233433245491557, -27.046046858417785, -36811917.242149785]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_592",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.8834380867476395, -3.029217388913334, -0.16733707079451218, 0.4159080602714461]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8834380867476395, -3.029217388913334, -0.16733707079451218, 0.4159080602714461]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_593",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.38172660409906484, -1.8020381548791014, 38.982989834921774, 62.106053468293986]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.38172660409906484, -1.8020381548791014, 38.982989834921774, 62.106053468293986]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_594",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.08244009364276539, 0.9819771099838106, 34.52679980388255, -9.958926095814759]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.08244009364276539, 0.9819771099838106, 34.52679980388255, -9.958926095814759]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_595",
    "sat": "def sat(x: float, coeffs: List[float]=[0.44213011738491464, 0.02631693246867221, -0.34298443017798314, 0.04970362925871552]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.44213011738491464, 0.02631693246867221, -0.34298443017798314, 0.04970362925871552]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_596",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5305741923463702, 0.7233516720166236, 0.852599894066543, -580705.051163557]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5305741923463702, 0.7233516720166236, 0.852599894066543, -580705.051163557]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_597",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2658294520716644, -0.42324891806024195, -23.401085880649784, -2.7187117617048364]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2658294520716644, -0.42324891806024195, -23.401085880649784, -2.7187117617048364]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_598",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.326494244833422, -0.02616727156809621, 0.007127729437294894, 9.436398249157348]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.326494244833422, -0.02616727156809621, 0.007127729437294894, 9.436398249157348]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_599",
    "sat": "def sat(x: float, coeffs: List[float]=[4.6647379924217836, -9.266122431649979, -2.2921321106247152, 0.3607229259627533]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.6647379924217836, -9.266122431649979, -2.2921321106247152, 0.3607229259627533]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_600",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.1002598686715697, -27.511774464527047, -1.5138616105643792, 1.1778167272990416]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.1002598686715697, -27.511774464527047, -1.5138616105643792, 1.1778167272990416]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_601",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4579499494206069, 33.554041319278035, 1.2693793405960456, 0.007138273585861251]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4579499494206069, 33.554041319278035, 1.2693793405960456, 0.007138273585861251]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_602",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.970125851269518, 0.1861757438311087, 8.913789580412638, 52.97339305012908]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.970125851269518, 0.1861757438311087, 8.913789580412638, 52.97339305012908]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_603",
    "sat": "def sat(x: float, coeffs: List[float]=[0.08776584372399787, 0.28751755604070756, -0.07110691448555502, 3182.171392074527]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08776584372399787, 0.28751755604070756, -0.07110691448555502, 3182.171392074527]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_604",
    "sat": "def sat(x: float, coeffs: List[float]=[77.79888841884853, -0.21901417945109566, 2.258943577941357, 0.38264402345124454]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[77.79888841884853, -0.21901417945109566, 2.258943577941357, 0.38264402345124454]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_605",
    "sat": "def sat(x: float, coeffs: List[float]=[33.86893207761059, -0.7332861101075979, -2.7762339586453506, -53.51215953255834]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[33.86893207761059, -0.7332861101075979, -2.7762339586453506, -53.51215953255834]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_606",
    "sat": "def sat(x: float, coeffs: List[float]=[-6.380219981977146, 0.20353948414659886, 0.35622021540056537, -172128064.45953345]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.380219981977146, 0.20353948414659886, 0.35622021540056537, -172128064.45953345]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_607",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4295740557643441, 1.9303097804003688, 3.296841762818213, -39.245334577730915]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4295740557643441, 1.9303097804003688, 3.296841762818213, -39.245334577730915]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_608",
    "sat": "def sat(x: float, coeffs: List[float]=[-6.925634248896916, -7.348493386598105, 0.8007495772025037, 0.7176317046662446]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.925634248896916, -7.348493386598105, 0.8007495772025037, 0.7176317046662446]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_609",
    "sat": "def sat(x: float, coeffs: List[float]=[2.579311661482219, 33.043456692834994, -0.0046227279269041395, -57310.64815162272]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.579311661482219, 33.043456692834994, -0.0046227279269041395, -57310.64815162272]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_610",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.3196962301343835, 0.09426810665348, -2.8773130426625464, 524.043106520659]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.3196962301343835, 0.09426810665348, -2.8773130426625464, 524.043106520659]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_611",
    "sat": "def sat(x: float, coeffs: List[float]=[10.124962123782955, 0.7749803393584939, 0.9352679975624848, -95947.79417481514]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.124962123782955, 0.7749803393584939, 0.9352679975624848, -95947.79417481514]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_612",
    "sat": "def sat(x: float, coeffs: List[float]=[3.7790752545779474, 170.3737860101104, -2.950046699634687, -238.9966395532554]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.7790752545779474, 170.3737860101104, -2.950046699634687, -238.9966395532554]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_613",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2562048230654587, 2.8932323969127243, -7.891199893395669, 3.823231793121721]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2562048230654587, 2.8932323969127243, -7.891199893395669, 3.823231793121721]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_614",
    "sat": "def sat(x: float, coeffs: List[float]=[-6.359145570897362, -128.6038386554344, 8.271830169825897, 21592246.528198145]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.359145570897362, -128.6038386554344, 8.271830169825897, 21592246.528198145]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_615",
    "sat": "def sat(x: float, coeffs: List[float]=[2.144701097275672, -20.81771493116197, 0.13363662558429037, 0.593543625252898]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.144701097275672, -20.81771493116197, 0.13363662558429037, 0.593543625252898]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_616",
    "sat": "def sat(x: float, coeffs: List[float]=[5.689515751568185, 0.7577357997664942, -0.4220472236959087, 1.182491628840556]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.689515751568185, 0.7577357997664942, -0.4220472236959087, 1.182491628840556]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_617",
    "sat": "def sat(x: float, coeffs: List[float]=[1.1258557949955197, -4.851635787903047, -9.382347571439688, 1.2950455462729007]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1258557949955197, -4.851635787903047, -9.382347571439688, 1.2950455462729007]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_618",
    "sat": "def sat(x: float, coeffs: List[float]=[0.03738738524305263, 1.4495104430772614, 17.10894977144582, -2.881643009729394]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.03738738524305263, 1.4495104430772614, 17.10894977144582, -2.881643009729394]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_619",
    "sat": "def sat(x: float, coeffs: List[float]=[0.007297593243773844, -0.2866555637677057, -0.7589244585461761, 11.55753131864746]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.007297593243773844, -0.2866555637677057, -0.7589244585461761, 11.55753131864746]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_620",
    "sat": "def sat(x: float, coeffs: List[float]=[-6.089184551601789, 0.18426809968336713, -3.98856513065016, -0.9260267365769407]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.089184551601789, 0.18426809968336713, -3.98856513065016, -0.9260267365769407]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_621",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6123276032337138, 0.281892135454789, 1.8465825745735145, 39584.85476260176]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6123276032337138, 0.281892135454789, 1.8465825745735145, 39584.85476260176]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_622",
    "sat": "def sat(x: float, coeffs: List[float]=[0.03994209438703611, 4.48048054181307, 0.45757301374501136, -0.13052625082573308]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.03994209438703611, 4.48048054181307, 0.45757301374501136, -0.13052625082573308]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_623",
    "sat": "def sat(x: float, coeffs: List[float]=[10.19126085711765, 0.6734343256663844, -0.5125757904340005, 0.014318052420160085]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.19126085711765, 0.6734343256663844, -0.5125757904340005, 0.014318052420160085]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_624",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.09414945989713086, -0.25131598817110806, 3.8690815568676293, -3356.8127268593266]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.09414945989713086, -0.25131598817110806, 3.8690815568676293, -3356.8127268593266]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_625",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.6684030315147522, 5.141783535375635, -0.4760521004232657, 0.0034303417816651796]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.6684030315147522, 5.141783535375635, -0.4760521004232657, 0.0034303417816651796]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_626",
    "sat": "def sat(x: float, coeffs: List[float]=[1.3269856338467865, -0.08170157968274916, 3.132881500484953, 95527.22907404494]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3269856338467865, -0.08170157968274916, 3.132881500484953, 95527.22907404494]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_627",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.5260738658716573, 0.25665001278039773, 0.2612911688230291, 32.0957827794298]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5260738658716573, 0.25665001278039773, 0.2612911688230291, 32.0957827794298]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_628",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.38917880554578915, 0.08744345267770666, -0.19890175549517028, 0.9287080999311782]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.38917880554578915, 0.08744345267770666, -0.19890175549517028, 0.9287080999311782]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_629",
    "sat": "def sat(x: float, coeffs: List[float]=[0.05081109170614084, 0.0927022678652023, 0.36780331641384006, -0.014465243849616942]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.05081109170614084, 0.0927022678652023, 0.36780331641384006, -0.014465243849616942]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_630",
    "sat": "def sat(x: float, coeffs: List[float]=[15.822660918382836, 1.192359469367412, 621.1071991648602, -36.336761251348534]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[15.822660918382836, 1.192359469367412, 621.1071991648602, -36.336761251348534]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_631",
    "sat": "def sat(x: float, coeffs: List[float]=[1.0658921584024128, 3.8025076048639104, 1.041569214459555, -5.156017995921662]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0658921584024128, 3.8025076048639104, 1.041569214459555, -5.156017995921662]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_632",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.15662470022090025, 3.18044267793636, -62.30631930722034, 32.88387618954614]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.15662470022090025, 3.18044267793636, -62.30631930722034, 32.88387618954614]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_633",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3902656177684669, -0.2979552078713867, -84.40767463019505, -4817823.949640282]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3902656177684669, -0.2979552078713867, -84.40767463019505, -4817823.949640282]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_634",
    "sat": "def sat(x: float, coeffs: List[float]=[-10.276548744543055, 5.218334959304979, -63.676193002605594, 60.500000772746105]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-10.276548744543055, 5.218334959304979, -63.676193002605594, 60.500000772746105]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_635",
    "sat": "def sat(x: float, coeffs: List[float]=[2.551866931848291, 2.5808083775354285, 5.50174513922973, -1.3480181709512804]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.551866931848291, 2.5808083775354285, 5.50174513922973, -1.3480181709512804]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_636",
    "sat": "def sat(x: float, coeffs: List[float]=[0.9522289492950217, -14.180991860979853, 0.020856492339106063, 360.370459950893]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9522289492950217, -14.180991860979853, 0.020856492339106063, 360.370459950893]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_637",
    "sat": "def sat(x: float, coeffs: List[float]=[11.71991853846882, 19.942876097628503, 12.350415848401221, -69.3712658632766]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.71991853846882, 19.942876097628503, 12.350415848401221, -69.3712658632766]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_638",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4924148039450434, 2.420537190384857, 2.0634660456037905, -0.22638642312588927]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4924148039450434, 2.420537190384857, 2.0634660456037905, -0.22638642312588927]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_639",
    "sat": "def sat(x: float, coeffs: List[float]=[6.128655832002274, -0.19516881612191464, -1.026567914610317, 7.441441148489311]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.128655832002274, -0.19516881612191464, -1.026567914610317, 7.441441148489311]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_640",
    "sat": "def sat(x: float, coeffs: List[float]=[0.9911412267880446, 0.08634010307612816, 11.058460168671742, 0.47692392458592286]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9911412267880446, 0.08634010307612816, 11.058460168671742, 0.47692392458592286]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_641",
    "sat": "def sat(x: float, coeffs: List[float]=[0.42212920509585805, -0.43255367211484125, 0.1821257749208709, 40.372444453647994]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.42212920509585805, -0.43255367211484125, 0.1821257749208709, 40.372444453647994]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_642",
    "sat": "def sat(x: float, coeffs: List[float]=[0.36197738386356154, 35.11844800623289, 0.13745897190470116, -34.0635864602448]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.36197738386356154, 35.11844800623289, 0.13745897190470116, -34.0635864602448]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_643",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3766968353974553, -1.5316758664759138, 0.29363670182591456, 0.26577782053233856]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3766968353974553, -1.5316758664759138, 0.29363670182591456, 0.26577782053233856]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_644",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1531874554890745, 5.879251823171182, -41.73903799971668, 5.850729286241409]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1531874554890745, 5.879251823171182, -41.73903799971668, 5.850729286241409]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_645",
    "sat": "def sat(x: float, coeffs: List[float]=[-17.718198422361926, 264.7236163516771, 0.006494107974159465, -132.52122756764098]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-17.718198422361926, 264.7236163516771, 0.006494107974159465, -132.52122756764098]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_646",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.2290377122194183, 4.983457368360253, 4.4715592208337664, -1.797154719605605]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2290377122194183, 4.983457368360253, 4.4715592208337664, -1.797154719605605]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_647",
    "sat": "def sat(x: float, coeffs: List[float]=[-34.38335703526999, 0.10907985831298765, -0.026882736970380055, -39.5636627665558]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-34.38335703526999, 0.10907985831298765, -0.026882736970380055, -39.5636627665558]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_648",
    "sat": "def sat(x: float, coeffs: List[float]=[-73.35825904504941, -3.138275656044296, 2.389279176256854, 1014.223629210206]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-73.35825904504941, -3.138275656044296, 2.389279176256854, 1014.223629210206]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_649",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.05064186022517547, 1.1512985541919074, 1.1761410391399398, -0.6752379755202562]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.05064186022517547, 1.1512985541919074, 1.1761410391399398, -0.6752379755202562]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_650",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3979988609063743, -0.06620027544429186, -8.387169077501648, 19601764.019163538]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3979988609063743, -0.06620027544429186, -8.387169077501648, 19601764.019163538]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_651",
    "sat": "def sat(x: float, coeffs: List[float]=[0.23862447541146614, -0.05659192641440044, -0.05601629587842879, -148.70801335602002]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.23862447541146614, -0.05659192641440044, -0.05601629587842879, -148.70801335602002]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_652",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8585561646883986, -1.5776725235758418, -15.747217728284168, 6.641696132962143]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8585561646883986, -1.5776725235758418, -15.747217728284168, 6.641696132962143]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_653",
    "sat": "def sat(x: float, coeffs: List[float]=[28.422443977987516, -0.1624684681397394, -0.33684008593833986, 144.14993544133353]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[28.422443977987516, -0.1624684681397394, -0.33684008593833986, 144.14993544133353]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_654",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.031200425473948485, -0.3613735823127627, 6.8340873213214755, -4.995210081025129]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.031200425473948485, -0.3613735823127627, 6.8340873213214755, -4.995210081025129]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_655",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.25775677401208535, -4.252905394712856, -0.24796279066100504, 0.34458316863678873]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.25775677401208535, -4.252905394712856, -0.24796279066100504, 0.34458316863678873]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_656",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5221658906495433, 25.033231549097554, 137.24969580294345, -2481.578268525508]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5221658906495433, 25.033231549097554, 137.24969580294345, -2481.578268525508]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_657",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1977042255397056, 0.010421564288083829, 0.7511044602815558, 14.2045553668909]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1977042255397056, 0.010421564288083829, 0.7511044602815558, 14.2045553668909]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_658",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.0785707979394606, 3.9387061402494123, -0.5298828041396288, -0.7643685490868442]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0785707979394606, 3.9387061402494123, -0.5298828041396288, -0.7643685490868442]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_659",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5884767114333772, -0.36869548195606133, -0.07476076653084036, 108.93073708075417]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5884767114333772, -0.36869548195606133, -0.07476076653084036, 108.93073708075417]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_660",
    "sat": "def sat(x: float, coeffs: List[float]=[-37.511909819621984, -0.8317113188378319, -0.33083830774325573, 9714.983366156659]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-37.511909819621984, -0.8317113188378319, -0.33083830774325573, 9714.983366156659]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_661",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4372456817590618, -1.9672003843280177, -0.1573438344914789, 1.5901523421775692]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4372456817590618, -1.9672003843280177, -0.1573438344914789, 1.5901523421775692]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_662",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6434750762312405, 30.703365339751613, -9.810699378458986, -49.621723538414244]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6434750762312405, 30.703365339751613, -9.810699378458986, -49.621723538414244]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_663",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.0106067140167607, 1.036303213507199, 2.8866849308302114, -3.2530177993772558]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0106067140167607, 1.036303213507199, 2.8866849308302114, -3.2530177993772558]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_664",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.599722593304318, -0.3270778977466564, 4.139793124768411, -3.168084567974617]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.599722593304318, -0.3270778977466564, 4.139793124768411, -3.168084567974617]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_665",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5253393634464371, -0.05633410737606148, -94.03569650931615, -26.158266378592135]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5253393634464371, -0.05633410737606148, -94.03569650931615, -26.158266378592135]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_666",
    "sat": "def sat(x: float, coeffs: List[float]=[0.341775954760039, -7.724917287816873, 0.7488190337909323, 161.9886498756463]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.341775954760039, -7.724917287816873, 0.7488190337909323, 161.9886498756463]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_667",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.0743865104484716, 4.0263111439151364, 8.108532294030338, -570.2218701448625]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0743865104484716, 4.0263111439151364, 8.108532294030338, -570.2218701448625]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_668",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.113813156692358, 0.19021735123214759, -14.117973729197077, 4.563434459202389]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.113813156692358, 0.19021735123214759, -14.117973729197077, 4.563434459202389]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_669",
    "sat": "def sat(x: float, coeffs: List[float]=[0.001326699983010604, -3.3028325564210923, -0.15142656744793057, 8.96996956470836]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.001326699983010604, -3.3028325564210923, -0.15142656744793057, 8.96996956470836]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_670",
    "sat": "def sat(x: float, coeffs: List[float]=[1.3691048742503418, 0.030473946957767284, -0.06190243786806926, -17.115051624089613]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3691048742503418, 0.030473946957767284, -0.06190243786806926, -17.115051624089613]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_671",
    "sat": "def sat(x: float, coeffs: List[float]=[0.04990913551203365, -0.2188956015380822, 0.42018681144700487, -0.24842930726731827]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.04990913551203365, -0.2188956015380822, 0.42018681144700487, -0.24842930726731827]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_672",
    "sat": "def sat(x: float, coeffs: List[float]=[15.051359626703238, -0.10356264085177291, -3.4378556057893572, -4777.13222304619]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[15.051359626703238, -0.10356264085177291, -3.4378556057893572, -4777.13222304619]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_673",
    "sat": "def sat(x: float, coeffs: List[float]=[1.2764867985298933, 0.03772302186374062, 33.56465973208342, 174887691.65141135]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2764867985298933, 0.03772302186374062, 33.56465973208342, 174887691.65141135]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_674",
    "sat": "def sat(x: float, coeffs: List[float]=[0.18814310337503568, -0.4513388037321671, 0.42110512054319865, 855.8531137250343]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.18814310337503568, -0.4513388037321671, 0.42110512054319865, 855.8531137250343]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_675",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.1044073420710763, -6.232088181480639, 1.0759179206789764, 0.03284845549760127]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1044073420710763, -6.232088181480639, 1.0759179206789764, 0.03284845549760127]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_676",
    "sat": "def sat(x: float, coeffs: List[float]=[1.2676516667631506, 0.2749578664810087, 82.44997384623169, 12.51746323061954]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2676516667631506, 0.2749578664810087, 82.44997384623169, 12.51746323061954]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_677",
    "sat": "def sat(x: float, coeffs: List[float]=[0.594165180837921, 274.7973139180795, 0.26600563147717743, -72.81861783268505]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.594165180837921, 274.7973139180795, 0.26600563147717743, -72.81861783268505]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_678",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6673933132518591, -0.33993343782586116, 0.6518500880278904, 0.39878490787625176]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6673933132518591, -0.33993343782586116, 0.6518500880278904, 0.39878490787625176]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_679",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7030305936486743, -3.5977979706119547, 1.5603796868176856, 8.793061141374872]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7030305936486743, -3.5977979706119547, 1.5603796868176856, 8.793061141374872]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_680",
    "sat": "def sat(x: float, coeffs: List[float]=[0.312954097541372, -3.467590777294712, -0.5323788942726381, 32.8538768886322]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.312954097541372, -3.467590777294712, -0.5323788942726381, 32.8538768886322]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_681",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5582217168290563, 1.611772922551226, -0.08887562678608589, -1.032407675190125]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5582217168290563, 1.611772922551226, -0.08887562678608589, -1.032407675190125]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_682",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6494702696654876, 1.8185070489086026, 1.030025603936597, 422.13726940536645]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6494702696654876, 1.8185070489086026, 1.030025603936597, 422.13726940536645]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_683",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.03638830123947626, -2.975180211164986, -0.0018445434654564459, 33.07348656123342]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.03638830123947626, -2.975180211164986, -0.0018445434654564459, 33.07348656123342]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_684",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.877354690262105, 150.07010392870907, 13.539166765279269, -29.235305088361805]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.877354690262105, 150.07010392870907, 13.539166765279269, -29.235305088361805]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_685",
    "sat": "def sat(x: float, coeffs: List[float]=[0.06316793981690894, -4.227537357270337, 7.7406705685658865, 0.8152421596091652]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06316793981690894, -4.227537357270337, 7.7406705685658865, 0.8152421596091652]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_686",
    "sat": "def sat(x: float, coeffs: List[float]=[0.61814901830875, 0.005638275233611119, -0.21590891538410353, 744514.3885092344]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.61814901830875, 0.005638275233611119, -0.21590891538410353, 744514.3885092344]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_687",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.10634705554110517, -0.2269884196669337, -3.614129386944096, 0.2750798313708133]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.10634705554110517, -0.2269884196669337, -3.614129386944096, 0.2750798313708133]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_688",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4768159606067767, -9.606974190322957, 0.09927859829232107, 28.686215316171744]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4768159606067767, -9.606974190322957, 0.09927859829232107, 28.686215316171744]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_689",
    "sat": "def sat(x: float, coeffs: List[float]=[1.4863577237170469, -1.1775059487676482, -0.5746243838389481, -0.04971454034817968]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.4863577237170469, -1.1775059487676482, -0.5746243838389481, -0.04971454034817968]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_690",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.794232839293195, -0.2949288878599435, -0.36968086025727437, -0.7191925627534637]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.794232839293195, -0.2949288878599435, -0.36968086025727437, -0.7191925627534637]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_691",
    "sat": "def sat(x: float, coeffs: List[float]=[-7.583094621897189, -0.4491759793801246, -12.447090946252715, 3.1860362590870777]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.583094621897189, -0.4491759793801246, -12.447090946252715, 3.1860362590870777]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_692",
    "sat": "def sat(x: float, coeffs: List[float]=[6.711637518510112, -475.5439033317252, 3.3411376843474048, 76.40779162666271]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.711637518510112, -475.5439033317252, 3.3411376843474048, 76.40779162666271]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_693",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.6813897045451416, -6.771420070667214, 0.4387784122719453, -121.54549883942836]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.6813897045451416, -6.771420070667214, 0.4387784122719453, -121.54549883942836]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_694",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.05893298903294183, -0.21553901998638172, -0.14371914104870184, 0.23484492328562745]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.05893298903294183, -0.21553901998638172, -0.14371914104870184, 0.23484492328562745]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_695",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.0887447695443788, 0.05116284284641933, -541.0900105312709, -48739424.399245635]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0887447695443788, 0.05116284284641933, -541.0900105312709, -48739424.399245635]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_696",
    "sat": "def sat(x: float, coeffs: List[float]=[2.186824423880623, 4.704843921375222, 0.04246945190799001, -8883.378569604443]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.186824423880623, 4.704843921375222, 0.04246945190799001, -8883.378569604443]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_697",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.932346770916174, -4.762676014074809, -2.925251187027261, 0.026318638166983238]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.932346770916174, -4.762676014074809, -2.925251187027261, 0.026318638166983238]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_698",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.2397222804465626, -1.0240675420583754, 2.5218553188957764, 11.494393709380818]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2397222804465626, -1.0240675420583754, 2.5218553188957764, 11.494393709380818]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_699",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.2902404161320356, 181.21724080969253, 7.362454016973795, -96.82166057315622]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2902404161320356, 181.21724080969253, 7.362454016973795, -96.82166057315622]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_700",
    "sat": "def sat(x: float, coeffs: List[float]=[0.06148630352098331, -0.52778611186723, -4.979317931295884, 4.389999010757928]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06148630352098331, -0.52778611186723, -4.979317931295884, 4.389999010757928]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_701",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.18828588205192642, 1.7732166547402495, -0.39366404894598245, -0.9226282645649699]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.18828588205192642, 1.7732166547402495, -0.39366404894598245, -0.9226282645649699]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_702",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4023507727720639, -298.2929251660424, 0.5591864078746607, 18.728535315219542]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4023507727720639, -298.2929251660424, 0.5591864078746607, 18.728535315219542]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_703",
    "sat": "def sat(x: float, coeffs: List[float]=[0.05878291635154912, 2.448644467845614, 2.0786497907388255, 0.1368127039114876]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.05878291635154912, 2.448644467845614, 2.0786497907388255, 0.1368127039114876]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_704",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.725532744922072, 2.126086942181031, -1.5066869849507338, -19.400280573884807]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.725532744922072, 2.126086942181031, -1.5066869849507338, -19.400280573884807]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_705",
    "sat": "def sat(x: float, coeffs: List[float]=[131.18176982107022, 0.4255023038002972, 2.050715683658146, 2821.8607355986146]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[131.18176982107022, 0.4255023038002972, 2.050715683658146, 2821.8607355986146]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_706",
    "sat": "def sat(x: float, coeffs: List[float]=[24.52699999160252, 3.3320998169517106, 0.7957423333422268, 0.11136632153156803]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[24.52699999160252, 3.3320998169517106, 0.7957423333422268, 0.11136632153156803]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_707",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5745516776195915, 1.707696399268613, -0.02060459193610827, -0.9929468866413996]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5745516776195915, 1.707696399268613, -0.02060459193610827, -0.9929468866413996]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_708",
    "sat": "def sat(x: float, coeffs: List[float]=[0.06412886722051099, 3.5585087271442752, -0.4663877708448094, -146.78769941958356]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06412886722051099, 3.5585087271442752, -0.4663877708448094, -146.78769941958356]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_709",
    "sat": "def sat(x: float, coeffs: List[float]=[39.83049276319071, 9.890957400455644, -14.80081193976532, -104.5536280650576]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[39.83049276319071, 9.890957400455644, -14.80081193976532, -104.5536280650576]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_710",
    "sat": "def sat(x: float, coeffs: List[float]=[1.9786811082499218, 0.20265204260793582, -99.72559381339623, -75.24820313070634]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.9786811082499218, 0.20265204260793582, -99.72559381339623, -75.24820313070634]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_711",
    "sat": "def sat(x: float, coeffs: List[float]=[-8.591399216899275, -0.769102866023772, -0.031169064898065296, -8831.234404615507]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.591399216899275, -0.769102866023772, -0.031169064898065296, -8831.234404615507]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_712",
    "sat": "def sat(x: float, coeffs: List[float]=[-6.519275014222487, -0.40234612410808185, -0.024816601645016718, -22.40858841148131]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.519275014222487, -0.40234612410808185, -0.024816601645016718, -22.40858841148131]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_713",
    "sat": "def sat(x: float, coeffs: List[float]=[0.9399891866661568, -0.3627860727392118, -0.09342348059411587, -131.65924443405618]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9399891866661568, -0.3627860727392118, -0.09342348059411587, -131.65924443405618]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_714",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.043653885598795426, -0.30902494592011437, -1.756667590244709, 350.7056849604322]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.043653885598795426, -0.30902494592011437, -1.756667590244709, 350.7056849604322]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_715",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6389932316927038, -0.8739705500339813, 1.0646528153556034, 1.1765503297418878]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6389932316927038, -0.8739705500339813, 1.0646528153556034, 1.1765503297418878]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_716",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3744182233162567, 5.143446974310081, 0.8460394301165458, 1325.4369644269027]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3744182233162567, 5.143446974310081, 0.8460394301165458, 1325.4369644269027]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_717",
    "sat": "def sat(x: float, coeffs: List[float]=[4.894642965619713, -143.9171228042932, 167.42923863659482, 1607.7552542675257]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.894642965619713, -143.9171228042932, 167.42923863659482, 1607.7552542675257]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_718",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3873389393829325, -0.008122093772184721, -1.8253937570348275, -1.165617723359228]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3873389393829325, -0.008122093772184721, -1.8253937570348275, -1.165617723359228]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_719",
    "sat": "def sat(x: float, coeffs: List[float]=[0.9146969936873416, 1.6420641965591436, -0.002464082839549168, -2.189690743894985]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9146969936873416, 1.6420641965591436, -0.002464082839549168, -2.189690743894985]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_720",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.07381403833130307, -0.05079460258387584, 0.00911869693662585, 1586388.4501087808]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.07381403833130307, -0.05079460258387584, 0.00911869693662585, 1586388.4501087808]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_721",
    "sat": "def sat(x: float, coeffs: List[float]=[0.27968632734015464, 0.5015369402114445, 0.8933630301755745, 1.1880149922231908]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.27968632734015464, 0.5015369402114445, 0.8933630301755745, 1.1880149922231908]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_722",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.2707646795114975, -0.631151732342682, 0.04727193279480576, 0.010069192223254017]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.2707646795114975, -0.631151732342682, 0.04727193279480576, 0.010069192223254017]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_723",
    "sat": "def sat(x: float, coeffs: List[float]=[1.354484550804819, 56.702501238355204, 1.606811552975539, -300.66999525327566]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.354484550804819, 56.702501238355204, 1.606811552975539, -300.66999525327566]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_724",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.338521139201963, 0.30338667787663604, 0.41709473390437707, -1151.1016123558209]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.338521139201963, 0.30338667787663604, 0.41709473390437707, -1151.1016123558209]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_725",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.24521843934188467, -6.816724935662627, -1.5614275419789003, -0.08690946949113335]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.24521843934188467, -6.816724935662627, -1.5614275419789003, -0.08690946949113335]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_726",
    "sat": "def sat(x: float, coeffs: List[float]=[-67.02933123973826, -0.17504985893320932, 1.1943717213527485, 1653.7054597308238]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-67.02933123973826, -0.17504985893320932, 1.1943717213527485, 1653.7054597308238]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_727",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.08047272744934968, -0.19607754480258444, 0.8600477197366933, 0.09891962638352705]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.08047272744934968, -0.19607754480258444, 0.8600477197366933, 0.09891962638352705]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_728",
    "sat": "def sat(x: float, coeffs: List[float]=[2.9559051126186753, 112.10607434281775, -137.63980861039667, 30.246140348634693]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.9559051126186753, 112.10607434281775, -137.63980861039667, 30.246140348634693]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_729",
    "sat": "def sat(x: float, coeffs: List[float]=[3.7289356998626406, -3.465400294068939, -15.10319156078665, 1812.0211999986104]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.7289356998626406, -3.465400294068939, -15.10319156078665, 1812.0211999986104]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_730",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.22087331257901685, -0.21975562643295046, 6.408609355952888, 232.3413210092846]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.22087331257901685, -0.21975562643295046, 6.408609355952888, 232.3413210092846]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_731",
    "sat": "def sat(x: float, coeffs: List[float]=[0.14901573069217444, 0.32795347047077517, 5.186505877085048, 3.022992149535753]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.14901573069217444, 0.32795347047077517, 5.186505877085048, 3.022992149535753]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_732",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.694659590240477, -0.33100429185776364, -0.630092405822554, 0.04558646143125564]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.694659590240477, -0.33100429185776364, -0.630092405822554, 0.04558646143125564]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_733",
    "sat": "def sat(x: float, coeffs: List[float]=[1.7948484108114968, -86.53275277738902, -4.5550133585261605, 1.5740091428698224]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7948484108114968, -86.53275277738902, -4.5550133585261605, 1.5740091428698224]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_734",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5189668321739068, 1.0668282296486733, -55.93887538719961, -23.2884479165694]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5189668321739068, 1.0668282296486733, -55.93887538719961, -23.2884479165694]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_735",
    "sat": "def sat(x: float, coeffs: List[float]=[31.384664832072882, -172.24206904040878, -1.661854006962191, 2.0964630189018174]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[31.384664832072882, -172.24206904040878, -1.661854006962191, 2.0964630189018174]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_736",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8773116851536208, -0.2667630010008956, 8.449204975968597, -35.80779704851943]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8773116851536208, -0.2667630010008956, 8.449204975968597, -35.80779704851943]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_737",
    "sat": "def sat(x: float, coeffs: List[float]=[51.022021875717975, -2.2361860883868956, -5.522407886791476, -367.13999024985105]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[51.022021875717975, -2.2361860883868956, -5.522407886791476, -367.13999024985105]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_738",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.0771462445117832, 3.7602861134443546, 0.35835495550490526, 75879.23608459627]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0771462445117832, 3.7602861134443546, 0.35835495550490526, 75879.23608459627]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_739",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2317962954473769, -26.09914333427035, -0.6086085635607382, 246.9056022125614]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2317962954473769, -26.09914333427035, -0.6086085635607382, 246.9056022125614]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_740",
    "sat": "def sat(x: float, coeffs: List[float]=[3.429904654689318, -0.8396351099690612, -0.8344878329157605, 0.1952750170246429]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.429904654689318, -0.8396351099690612, -0.8344878329157605, 0.1952750170246429]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_741",
    "sat": "def sat(x: float, coeffs: List[float]=[1.2999167313092146, -0.7267085456129246, -0.819439998353937, 0.3854215960810951]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2999167313092146, -0.7267085456129246, -0.819439998353937, 0.3854215960810951]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_742",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4210505416854202, -5.282018004345644, 0.6113954421479403, 62786194.047562025]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4210505416854202, -5.282018004345644, 0.6113954421479403, 62786194.047562025]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_743",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5059426530562826, 10.128721634879067, -3.2798809560272377, -25.534135669955724]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5059426530562826, 10.128721634879067, -3.2798809560272377, -25.534135669955724]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_744",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1189337050406573, 0.04034811800143564, -0.3303177354687237, 0.06350589783142105]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1189337050406573, 0.04034811800143564, -0.3303177354687237, 0.06350589783142105]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_745",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.358648335802363, 0.010286377682416322, -11.861051688392605, 351.30923628494276]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.358648335802363, 0.010286377682416322, -11.861051688392605, 351.30923628494276]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_746",
    "sat": "def sat(x: float, coeffs: List[float]=[17.553096457260754, -1.1669053987822762, 0.00935471136416588, 823.2452508585433]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[17.553096457260754, -1.1669053987822762, 0.00935471136416588, 823.2452508585433]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_747",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.76641923056004, -1.7737404299453505, 0.2494906119947339, 5012.610236738158]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.76641923056004, -1.7737404299453505, 0.2494906119947339, 5012.610236738158]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_748",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.3808605260750115, -1.2750126828231447, 0.24866197615677174, -67.79701298144464]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3808605260750115, -1.2750126828231447, 0.24866197615677174, -67.79701298144464]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_749",
    "sat": "def sat(x: float, coeffs: List[float]=[3.2214731785321313, 6.740912876794553, 0.447166001357646, -0.06451085384928051]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.2214731785321313, 6.740912876794553, 0.447166001357646, -0.06451085384928051]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_750",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.279168813181804, -0.3514871358362502, -3.104671231446894, -7.6924863479651915]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.279168813181804, -0.3514871358362502, -3.104671231446894, -7.6924863479651915]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_751",
    "sat": "def sat(x: float, coeffs: List[float]=[1.759832183169728, -0.4474916149637962, 13.800720936590643, 3.3178313829125012]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.759832183169728, -0.4474916149637962, 13.800720936590643, 3.3178313829125012]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_752",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3681637430743092, 6.82900172822854, -2.2823460147092547, -0.26475533206162494]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3681637430743092, 6.82900172822854, -2.2823460147092547, -0.26475533206162494]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_753",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.44088425692868044, 4.924627024965934, -0.14157011128921235, -0.2819829590628435]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.44088425692868044, 4.924627024965934, -0.14157011128921235, -0.2819829590628435]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_754",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7797099520384739, 1.7169040664790851, 1.1662024162899287, -0.8219205715076873]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7797099520384739, 1.7169040664790851, 1.1662024162899287, -0.8219205715076873]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_755",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2990904530789445, 2.2353423082512798, -1.063489373955714, -4.8754168248137155]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2990904530789445, 2.2353423082512798, -1.063489373955714, -4.8754168248137155]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_756",
    "sat": "def sat(x: float, coeffs: List[float]=[-15.319504932801353, 10.25755407909738, -0.20138362125385503, 337.2095625259731]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-15.319504932801353, 10.25755407909738, -0.20138362125385503, 337.2095625259731]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_757",
    "sat": "def sat(x: float, coeffs: List[float]=[-8.22580296747789, -35.869379272989356, 0.15572992886034917, 0.2506314299542113]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.22580296747789, -35.869379272989356, 0.15572992886034917, 0.2506314299542113]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_758",
    "sat": "def sat(x: float, coeffs: List[float]=[-22.398013022015093, -2.5465242154273486, -2.3021920592863965, -0.32065889624832056]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-22.398013022015093, -2.5465242154273486, -2.3021920592863965, -0.32065889624832056]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_759",
    "sat": "def sat(x: float, coeffs: List[float]=[0.17045365634612905, -1.4385982063252225, 1.0853378630217059, -0.13935253572149633]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.17045365634612905, -1.4385982063252225, 1.0853378630217059, -0.13935253572149633]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_760",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8745875910740031, -5.4948708446906, 0.31169486957418013, 25.61241721316637]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8745875910740031, -5.4948708446906, 0.31169486957418013, 25.61241721316637]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_761",
    "sat": "def sat(x: float, coeffs: List[float]=[-12.100512705836579, 1.2936503030515312, 2.157291036877228, -0.05209448638960592]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.100512705836579, 1.2936503030515312, 2.157291036877228, -0.05209448638960592]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_762",
    "sat": "def sat(x: float, coeffs: List[float]=[-795.1498613382432, 1.8013698362827475, -0.16399044094084014, 5725.0353457269675]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-795.1498613382432, 1.8013698362827475, -0.16399044094084014, 5725.0353457269675]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_763",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.8074327313333325, 0.0925112067236687, 9.790073182873117, -854383.8541611477]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.8074327313333325, 0.0925112067236687, 9.790073182873117, -854383.8541611477]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_764",
    "sat": "def sat(x: float, coeffs: List[float]=[0.12236361780474447, 0.4058177044169817, -16.49737584692794, 1.604350007795951]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.12236361780474447, 0.4058177044169817, -16.49737584692794, 1.604350007795951]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_765",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.202303151754417, -0.1515321190789106, -3.29383209335824, -1.0147928720044461]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.202303151754417, -0.1515321190789106, -3.29383209335824, -1.0147928720044461]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_766",
    "sat": "def sat(x: float, coeffs: List[float]=[2.667186892987458, 13.263430836375884, 0.7705193653292822, -26.247268058544126]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.667186892987458, 13.263430836375884, 0.7705193653292822, -26.247268058544126]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_767",
    "sat": "def sat(x: float, coeffs: List[float]=[1.7875683197613004, -0.7145690820964133, 3.7568398515740626, 933.2011882598996]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7875683197613004, -0.7145690820964133, 3.7568398515740626, 933.2011882598996]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_768",
    "sat": "def sat(x: float, coeffs: List[float]=[0.22458275329814015, -30.938460101687795, -0.34810568775914214, 15.436724994800434]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.22458275329814015, -30.938460101687795, -0.34810568775914214, 15.436724994800434]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_769",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.31736788789528303, 0.09128396607134286, -0.11547415481241237, 0.9788975163555586]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.31736788789528303, 0.09128396607134286, -0.11547415481241237, 0.9788975163555586]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_770",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6339088376405467, 2.5703503280602065, 0.8238835630369056, -0.7611768770681377]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6339088376405467, 2.5703503280602065, 0.8238835630369056, -0.7611768770681377]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_771",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.14905869128709756, -0.06313494297459273, -5.047505625332686, -5.136511749065481]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.14905869128709756, -0.06313494297459273, -5.047505625332686, -5.136511749065481]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_772",
    "sat": "def sat(x: float, coeffs: List[float]=[0.14089799512175785, -7.717833184082991, -178.11162127925346, 821.4293970550846]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.14089799512175785, -7.717833184082991, -178.11162127925346, 821.4293970550846]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_773",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.9060151169423434, -51.13858978576956, -15.186328926418312, -0.5458413939180731]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.9060151169423434, -51.13858978576956, -15.186328926418312, -0.5458413939180731]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_774",
    "sat": "def sat(x: float, coeffs: List[float]=[6.111248786996753, 0.10527472628788732, 23.23994439990153, -12.094841941922127]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.111248786996753, 0.10527472628788732, 23.23994439990153, -12.094841941922127]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_775",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.9384739043421981, 8.144081267071366, 0.3198303338263037, -57.41561559141699]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9384739043421981, 8.144081267071366, 0.3198303338263037, -57.41561559141699]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_776",
    "sat": "def sat(x: float, coeffs: List[float]=[0.21824031110406242, 0.020730131876496527, -0.23661064457118286, -0.0004459460550688101]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.21824031110406242, 0.020730131876496527, -0.23661064457118286, -0.0004459460550688101]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_777",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.10166429296952166, -0.39833905762246297, 0.3543240084106323, 0.17994447192246146]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.10166429296952166, -0.39833905762246297, 0.3543240084106323, 0.17994447192246146]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_778",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1657935300312455, 35.95613442459453, -1.9849231595187042, -1.099903663449985]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1657935300312455, 35.95613442459453, -1.9849231595187042, -1.099903663449985]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_779",
    "sat": "def sat(x: float, coeffs: List[float]=[12.33956315347354, 0.5567081629215888, -939.776130147106, 3113.9806570642277]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.33956315347354, 0.5567081629215888, -939.776130147106, 3113.9806570642277]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_780",
    "sat": "def sat(x: float, coeffs: List[float]=[0.003139688303565998, -11.618126544940258, 1.179559074630873, 4.1219116017947846]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.003139688303565998, -11.618126544940258, 1.179559074630873, 4.1219116017947846]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_781",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.0660850658200071, -1.8748911094429592, -4.867430444806836, -2.0968013029628327]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0660850658200071, -1.8748911094429592, -4.867430444806836, -2.0968013029628327]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_782",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3534471582198053, -0.9512677708438696, 0.07582930026763217, 0.0009391027211587062]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3534471582198053, -0.9512677708438696, 0.07582930026763217, 0.0009391027211587062]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_783",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.6220053216575039, -31.290716760452685, -7.320911269274537, 1637.1473990825502]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.6220053216575039, -31.290716760452685, -7.320911269274537, 1637.1473990825502]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_784",
    "sat": "def sat(x: float, coeffs: List[float]=[0.06300749665862744, -0.6335426804957743, -0.37666446848002355, 0.07684659802332129]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06300749665862744, -0.6335426804957743, -0.37666446848002355, 0.07684659802332129]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_785",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.370429745584769, -0.40063750127283654, -44.19839549193342, -362994.52123563975]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.370429745584769, -0.40063750127283654, -44.19839549193342, -362994.52123563975]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_786",
    "sat": "def sat(x: float, coeffs: List[float]=[-190.9808323212583, 1.4985655121233235, 0.34321227700818246, -3279.7217100685366]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-190.9808323212583, 1.4985655121233235, 0.34321227700818246, -3279.7217100685366]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_787",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.470767359343897, 0.703488469883757, 7.794123640935491, -4.671172002720208]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.470767359343897, 0.703488469883757, 7.794123640935491, -4.671172002720208]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_788",
    "sat": "def sat(x: float, coeffs: List[float]=[-9.528050323490463, 0.705410353404238, -0.31834103039008094, -0.11756694651661163]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.528050323490463, 0.705410353404238, -0.31834103039008094, -0.11756694651661163]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_789",
    "sat": "def sat(x: float, coeffs: List[float]=[-6.32732465021753, 0.8029279860587045, -2.47855196008271, -348.1308683557103]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.32732465021753, 0.8029279860587045, -2.47855196008271, -348.1308683557103]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_790",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.06334885338398107, -8.71675948411619, -7.871428986788022, -0.4112578079695606]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06334885338398107, -8.71675948411619, -7.871428986788022, -0.4112578079695606]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_791",
    "sat": "def sat(x: float, coeffs: List[float]=[9.991080135396665, 0.14908851852406832, 0.6204496243942073, -18487.70721862544]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.991080135396665, 0.14908851852406832, 0.6204496243942073, -18487.70721862544]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_792",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.01551641654261308, 0.3085211686599718, -1.5843233294007775, -0.43256727717723026]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.01551641654261308, 0.3085211686599718, -1.5843233294007775, -0.43256727717723026]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_793",
    "sat": "def sat(x: float, coeffs: List[float]=[3.9587406424452745, -38.78026288988672, -5.113829514696036, 402.34915331834947]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.9587406424452745, -38.78026288988672, -5.113829514696036, 402.34915331834947]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_794",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6717410744505671, -0.03156128295517072, 1.6823510032129765, -15539.073540673819]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6717410744505671, -0.03156128295517072, 1.6823510032129765, -15539.073540673819]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_795",
    "sat": "def sat(x: float, coeffs: List[float]=[1.8481217060772561, -5.101465691950534, 10.889163275387503, -4.67399416504365]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8481217060772561, -5.101465691950534, 10.889163275387503, -4.67399416504365]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_796",
    "sat": "def sat(x: float, coeffs: List[float]=[0.41260102605955673, 0.01989862136683603, -0.07179225259707615, -0.36210798344361134]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.41260102605955673, 0.01989862136683603, -0.07179225259707615, -0.36210798344361134]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_797",
    "sat": "def sat(x: float, coeffs: List[float]=[-9.896117886234247, 2.728570654084054, 0.4711839334693127, 2327.7758982487426]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.896117886234247, 2.728570654084054, 0.4711839334693127, 2327.7758982487426]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_798",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5249871855878908, 31.18589633511129, 0.049081296273986684, -1714.9923965613557]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5249871855878908, 31.18589633511129, 0.049081296273986684, -1714.9923965613557]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_799",
    "sat": "def sat(x: float, coeffs: List[float]=[0.08755161520842347, 0.6768051641978449, 0.9681168291631042, -0.10824393768785226]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08755161520842347, 0.6768051641978449, 0.9681168291631042, -0.10824393768785226]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_800",
    "sat": "def sat(x: float, coeffs: List[float]=[-291.6003596779461, 12.98856892432507, 3.0848581684940304, -42884.42511646321]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-291.6003596779461, 12.98856892432507, 3.0848581684940304, -42884.42511646321]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_801",
    "sat": "def sat(x: float, coeffs: List[float]=[-17.939199747060638, -3.642126532767975, 0.015990119584826434, 27.27520060184673]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-17.939199747060638, -3.642126532767975, 0.015990119584826434, 27.27520060184673]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_802",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2924569484991489, -0.2460273079563092, -1.3459974171480482, 4400478.100142584]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2924569484991489, -0.2460273079563092, -1.3459974171480482, 4400478.100142584]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_803",
    "sat": "def sat(x: float, coeffs: List[float]=[-228.3117153647918, -1.606265995145047, 0.03643559762161589, -2.3878822769210806]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-228.3117153647918, -1.606265995145047, 0.03643559762161589, -2.3878822769210806]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_804",
    "sat": "def sat(x: float, coeffs: List[float]=[0.04831698231913147, 0.1342801234915406, -0.024456151512364244, -1416851.0096967237]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.04831698231913147, 0.1342801234915406, -0.024456151512364244, -1416851.0096967237]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_805",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.27129717192397423, -4.9340896223447235, -2.9324482024948595, -0.42459595660857324]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.27129717192397423, -4.9340896223447235, -2.9324482024948595, -0.42459595660857324]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_806",
    "sat": "def sat(x: float, coeffs: List[float]=[-14.007426896704219, -0.6683775421756892, -0.9450596049300651, -20766592.89284359]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-14.007426896704219, -0.6683775421756892, -0.9450596049300651, -20766592.89284359]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_807",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5596362614076176, 0.24435238712555182, -99.81016280591548, 1544.612798782034]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5596362614076176, 0.24435238712555182, -99.81016280591548, 1544.612798782034]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_808",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8759190479357924, -1.7487259574924445, 20.367611985516955, 599.8525632420215]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8759190479357924, -1.7487259574924445, 20.367611985516955, 599.8525632420215]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_809",
    "sat": "def sat(x: float, coeffs: List[float]=[22.770519007226508, -0.2564711253324845, 0.09664174520579771, 0.004390903555207794]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[22.770519007226508, -0.2564711253324845, 0.09664174520579771, 0.004390903555207794]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_810",
    "sat": "def sat(x: float, coeffs: List[float]=[0.053519860991690114, 17.4734002052413, -8.916234947472704, -7.095014089937923]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.053519860991690114, 17.4734002052413, -8.916234947472704, -7.095014089937923]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_811",
    "sat": "def sat(x: float, coeffs: List[float]=[2.7944349730528675, -0.9737913522686096, -0.7289603570455424, -2.795337629621091]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.7944349730528675, -0.9737913522686096, -0.7289603570455424, -2.795337629621091]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_812",
    "sat": "def sat(x: float, coeffs: List[float]=[14.628629162020138, -36.38739781580542, -9.00867901525416, 18.49123106443392]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[14.628629162020138, -36.38739781580542, -9.00867901525416, 18.49123106443392]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_813",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.9204603113983777, -2.5256446784630096, -0.07087449268491874, 2.6848839888584335]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9204603113983777, -2.5256446784630096, -0.07087449268491874, 2.6848839888584335]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_814",
    "sat": "def sat(x: float, coeffs: List[float]=[0.10477789503193165, -108.47657631946556, 0.3420669529681109, 337.2736084635226]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.10477789503193165, -108.47657631946556, 0.3420669529681109, 337.2736084635226]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_815",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.029493963251208, -0.2122505650810964, 30.695637548882775, 40.14499451963597]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.029493963251208, -0.2122505650810964, 30.695637548882775, 40.14499451963597]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_816",
    "sat": "def sat(x: float, coeffs: List[float]=[1.8205394687862748, -28.7101719274826, 2.563597929976936, -536792.1239479023]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8205394687862748, -28.7101719274826, 2.563597929976936, -536792.1239479023]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_817",
    "sat": "def sat(x: float, coeffs: List[float]=[0.09714126680075756, 1.9895015438305033, 0.20135506425421826, -2.1074591332629957]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.09714126680075756, 1.9895015438305033, 0.20135506425421826, -2.1074591332629957]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_818",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.2564783532811865, -0.0036853318875454586, 83.1001433917899, 27510.64718160011]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.2564783532811865, -0.0036853318875454586, 83.1001433917899, 27510.64718160011]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_819",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.171528242373965, 0.19449321313880538, -4.0562119952428155, 0.06237843340075987]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.171528242373965, 0.19449321313880538, -4.0562119952428155, 0.06237843340075987]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_820",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6912559753624282, 299.6452710234731, -4.5141277924614664, -47571.92529375997]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6912559753624282, 299.6452710234731, -4.5141277924614664, -47571.92529375997]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_821",
    "sat": "def sat(x: float, coeffs: List[float]=[2.9223788347612962, 0.09386063631311381, 5.074086850675715, -2.2645921245412977]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.9223788347612962, 0.09386063631311381, 5.074086850675715, -2.2645921245412977]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_822",
    "sat": "def sat(x: float, coeffs: List[float]=[-35.39703556394889, 0.5117454660724151, 0.2885320476565556, 5926.700638828426]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-35.39703556394889, 0.5117454660724151, 0.2885320476565556, 5926.700638828426]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_823",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4679701935072959, -13.895742312817722, 0.16206437045606625, 26.256829345027615]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4679701935072959, -13.895742312817722, 0.16206437045606625, 26.256829345027615]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_824",
    "sat": "def sat(x: float, coeffs: List[float]=[0.21145066158804138, 1.1016679246828585, -0.005921136215602345, -67.18920193863828]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.21145066158804138, 1.1016679246828585, -0.005921136215602345, -67.18920193863828]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_825",
    "sat": "def sat(x: float, coeffs: List[float]=[-704.2440000844126, 2.1228902633466764, -6.34227486828049, 0.7096867569580657]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-704.2440000844126, 2.1228902633466764, -6.34227486828049, 0.7096867569580657]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_826",
    "sat": "def sat(x: float, coeffs: List[float]=[4.52671919242067, -1.0192418833843895, -36.09371896169659, -29.159444442186107]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.52671919242067, -1.0192418833843895, -36.09371896169659, -29.159444442186107]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_827",
    "sat": "def sat(x: float, coeffs: List[float]=[-13.932520465697863, 0.14244813868657977, -0.46057322922453015, -0.0035678671710158622]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-13.932520465697863, 0.14244813868657977, -0.46057322922453015, -0.0035678671710158622]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_828",
    "sat": "def sat(x: float, coeffs: List[float]=[15.957940472142413, 1.9499514413019383, 0.20511608481992308, -0.51256570330557]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[15.957940472142413, 1.9499514413019383, 0.20511608481992308, -0.51256570330557]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_829",
    "sat": "def sat(x: float, coeffs: List[float]=[0.22154906459770354, -0.25744357040805044, -0.15295384382825894, 29.94516803004532]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.22154906459770354, -0.25744357040805044, -0.15295384382825894, 29.94516803004532]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_830",
    "sat": "def sat(x: float, coeffs: List[float]=[0.45919391334927767, -5.333122828875695, 4.726043038230413, 17.47890966889095]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.45919391334927767, -5.333122828875695, 4.726043038230413, 17.47890966889095]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_831",
    "sat": "def sat(x: float, coeffs: List[float]=[-69.9838651292193, 0.8847836223590019, 0.9086376534710451, 56.9751802947335]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-69.9838651292193, 0.8847836223590019, 0.9086376534710451, 56.9751802947335]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_832",
    "sat": "def sat(x: float, coeffs: List[float]=[0.34538210056033886, 0.1760408969581472, 0.2492896744693863, 0.20921186400021663]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.34538210056033886, 0.1760408969581472, 0.2492896744693863, 0.20921186400021663]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_833",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.9221666148519986, 1.7505884285895803, 0.48094167656566533, -0.3848011231850861]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9221666148519986, 1.7505884285895803, 0.48094167656566533, -0.3848011231850861]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_834",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4865373330021088, 0.30309350287080483, 0.009373509866281049, -0.3160296995629193]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4865373330021088, 0.30309350287080483, 0.009373509866281049, -0.3160296995629193]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_835",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6902730449975852, -7.943616956604651, -2.2895107095553064, 5.049434611695288]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6902730449975852, -7.943616956604651, -2.2895107095553064, 5.049434611695288]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_836",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2423454335475587, 2.5743225936254865, -2.892296422686732, -9.79228550756186]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2423454335475587, 2.5743225936254865, -2.892296422686732, -9.79228550756186]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_837",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3259213119386685, 1.5368689336422883, 4.845875487776894, 2.3037652248409874]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3259213119386685, 1.5368689336422883, 4.845875487776894, 2.3037652248409874]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_838",
    "sat": "def sat(x: float, coeffs: List[float]=[1.876230786168766, 0.2031941734951032, -2.025747979466618, 0.045776288248479464]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.876230786168766, 0.2031941734951032, -2.025747979466618, 0.045776288248479464]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_839",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3721274748435886, -0.022049884184067947, -1.0950460937238995, -161625.27945552877]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3721274748435886, -0.022049884184067947, -1.0950460937238995, -161625.27945552877]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_840",
    "sat": "def sat(x: float, coeffs: List[float]=[0.12270768389821603, 79.54233774184257, -37.322760041001565, -3.070897847597511]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.12270768389821603, 79.54233774184257, -37.322760041001565, -3.070897847597511]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_841",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.08605523039982262, -225.0633249079175, 0.11641062032796386, 11123.037897979644]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.08605523039982262, -225.0633249079175, 0.11641062032796386, 11123.037897979644]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_842",
    "sat": "def sat(x: float, coeffs: List[float]=[-134.43575040800903, -0.90935490671294, 0.3816750485090849, 41664.67207001799]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-134.43575040800903, -0.90935490671294, 0.3816750485090849, 41664.67207001799]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_843",
    "sat": "def sat(x: float, coeffs: List[float]=[-6.9008195302331785, -7.894538455309564, 1.4590047183755157, -107.03722647663679]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.9008195302331785, -7.894538455309564, 1.4590047183755157, -107.03722647663679]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_844",
    "sat": "def sat(x: float, coeffs: List[float]=[-18.971761816891057, -2.417330330110149, -0.1509485216969552, -61.93899740845867]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-18.971761816891057, -2.417330330110149, -0.1509485216969552, -61.93899740845867]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_845",
    "sat": "def sat(x: float, coeffs: List[float]=[5.693535714448685, -1.783679579392879, 2.4431518616612915, 1.5590603083626178]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.693535714448685, -1.783679579392879, 2.4431518616612915, 1.5590603083626178]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_846",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.4012854656424798, 0.9356125168166041, 0.049519655166958554, -0.0687554076387997]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4012854656424798, 0.9356125168166041, 0.049519655166958554, -0.0687554076387997]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_847",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.989807553998607, 23.34460096707454, -11.31109625397204, 1.3039124140611915]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.989807553998607, 23.34460096707454, -11.31109625397204, 1.3039124140611915]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_848",
    "sat": "def sat(x: float, coeffs: List[float]=[-18.179489220633194, -0.3932715422722433, 59.888361490122044, 28473.195596072303]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-18.179489220633194, -0.3932715422722433, 59.888361490122044, 28473.195596072303]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_849",
    "sat": "def sat(x: float, coeffs: List[float]=[1.5589800142264105, -0.7338262730198255, 0.05182066563154941, -0.11223657787686576]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5589800142264105, -0.7338262730198255, 0.05182066563154941, -0.11223657787686576]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_850",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.156120232468281, -0.07005608021645442, -0.029700381060449033, 0.002275410766255176]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.156120232468281, -0.07005608021645442, -0.029700381060449033, 0.002275410766255176]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_851",
    "sat": "def sat(x: float, coeffs: List[float]=[1.2216405617288029, 0.3086841977263584, 0.39003107715098634, -1034.5339546440955]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2216405617288029, 0.3086841977263584, 0.39003107715098634, -1034.5339546440955]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_852",
    "sat": "def sat(x: float, coeffs: List[float]=[7.387821144835157, -0.26723260958150835, -0.6586917746060665, -106.13339319398916]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.387821144835157, -0.26723260958150835, -0.6586917746060665, -106.13339319398916]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_853",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.8593937056132, 0.8424224121431219, 0.23694741489691049, -0.08687332071485346]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8593937056132, 0.8424224121431219, 0.23694741489691049, -0.08687332071485346]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_854",
    "sat": "def sat(x: float, coeffs: List[float]=[6.978012677614803, 159.48178151147718, 0.7389795061430161, -183.36380926266185]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.978012677614803, 159.48178151147718, 0.7389795061430161, -183.36380926266185]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_855",
    "sat": "def sat(x: float, coeffs: List[float]=[2.7310138265361927, -1.1142778002110914, -0.2082801376318142, 0.05961733326634079]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.7310138265361927, -1.1142778002110914, -0.2082801376318142, 0.05961733326634079]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_856",
    "sat": "def sat(x: float, coeffs: List[float]=[1.2420642588985977, 1.0240028803431365, -3.28249182234847, 19728.202929231604]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2420642588985977, 1.0240028803431365, -3.28249182234847, 19728.202929231604]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_857",
    "sat": "def sat(x: float, coeffs: List[float]=[-118.83004874383123, 1.9223792610753163, -0.027653634149922796, -2.272697824879888]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-118.83004874383123, 1.9223792610753163, -0.027653634149922796, -2.272697824879888]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_858",
    "sat": "def sat(x: float, coeffs: List[float]=[1.667135987090237, 0.044696904662890224, -50.98790599963875, -1.5603066692770287]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.667135987090237, 0.044696904662890224, -50.98790599963875, -1.5603066692770287]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_859",
    "sat": "def sat(x: float, coeffs: List[float]=[7.544341783879147, 0.7252751329484152, 0.5519683293574936, -0.1561732604599692]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.544341783879147, 0.7252751329484152, 0.5519683293574936, -0.1561732604599692]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_860",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.25621047235380723, -0.3068930235433576, -1.4874901705705748, -133.05623727342305]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.25621047235380723, -0.3068930235433576, -1.4874901705705748, -133.05623727342305]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_861",
    "sat": "def sat(x: float, coeffs: List[float]=[-26.1391711133612, 0.571897356874142, 0.3306169137136042, 31.10685151034404]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-26.1391711133612, 0.571897356874142, 0.3306169137136042, 31.10685151034404]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_862",
    "sat": "def sat(x: float, coeffs: List[float]=[-15.043453943014681, -1.8214781293531308, 11.60627771688567, 291.9271000282098]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-15.043453943014681, -1.8214781293531308, 11.60627771688567, 291.9271000282098]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_863",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.03849268615348178, -0.9076994562878516, -0.7956374906337973, 0.6357486816583342]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.03849268615348178, -0.9076994562878516, -0.7956374906337973, 0.6357486816583342]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_864",
    "sat": "def sat(x: float, coeffs: List[float]=[2.331539667629613, -6.777742896428095, -14.708447319855923, 27.670643620425416]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.331539667629613, -6.777742896428095, -14.708447319855923, 27.670643620425416]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_865",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.43121381826054633, -5.7076347880811555, 2.0328615017519747, 51.194907890037875]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.43121381826054633, -5.7076347880811555, 2.0328615017519747, 51.194907890037875]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_866",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3246688129410468, 3.704829801384783, 14.490819443173732, 17.74503849179132]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3246688129410468, 3.704829801384783, 14.490819443173732, 17.74503849179132]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_867",
    "sat": "def sat(x: float, coeffs: List[float]=[1.2142476332812728, 5.365761922922764, -12.335317776117677, -6.608000148548076]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2142476332812728, 5.365761922922764, -12.335317776117677, -6.608000148548076]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_868",
    "sat": "def sat(x: float, coeffs: List[float]=[2.1365720247485847, -2.5674496181017115, -1.9264407580333962, -901.5542990318829]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.1365720247485847, -2.5674496181017115, -1.9264407580333962, -901.5542990318829]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_869",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.33572222492489673, 0.059008090608244634, 336.5745936411319, 1.0353275519743097]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.33572222492489673, 0.059008090608244634, 336.5745936411319, 1.0353275519743097]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_870",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1803384772981779, 0.3632714002067045, -1.4796735037818747, 0.8794554278500327]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1803384772981779, 0.3632714002067045, -1.4796735037818747, 0.8794554278500327]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_871",
    "sat": "def sat(x: float, coeffs: List[float]=[1.8957452942078055, 1.1978028163636603, -0.8013750286831965, 4.545511663561353]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8957452942078055, 1.1978028163636603, -0.8013750286831965, 4.545511663561353]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_872",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.0271733980845204, 0.34950698111390627, 10.33180653565304, 5.677556867028233]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0271733980845204, 0.34950698111390627, 10.33180653565304, 5.677556867028233]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_873",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.1242877140185563, 3.845121598265623, -0.5438985628293125, -0.30220411883447906]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1242877140185563, 3.845121598265623, -0.5438985628293125, -0.30220411883447906]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_874",
    "sat": "def sat(x: float, coeffs: List[float]=[1.1275610578075677, 97.05155422195783, -0.012847077511293289, -266.7645891730501]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1275610578075677, 97.05155422195783, -0.012847077511293289, -266.7645891730501]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_875",
    "sat": "def sat(x: float, coeffs: List[float]=[0.21028756845591387, 8.712171677981138, -0.8946600629618157, -1.95465574250115]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.21028756845591387, 8.712171677981138, -0.8946600629618157, -1.95465574250115]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_876",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.6685507964525963, 0.005470329551068816, -4.9741917473456345, -2.832625730472524]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.6685507964525963, 0.005470329551068816, -4.9741917473456345, -2.832625730472524]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_877",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2067167474406424, 1.7719440617223032, -0.7707009377529035, -0.027581652248003685]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2067167474406424, 1.7719440617223032, -0.7707009377529035, -0.027581652248003685]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_878",
    "sat": "def sat(x: float, coeffs: List[float]=[0.0319551271849409, -2.2773703565243983, 0.46806518583726636, -3300690.476420405]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0319551271849409, -2.2773703565243983, 0.46806518583726636, -3300690.476420405]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_879",
    "sat": "def sat(x: float, coeffs: List[float]=[12.82886678447357, 0.9617692888216737, 1.9815674482172865, 936571328.5332067]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.82886678447357, 0.9617692888216737, 1.9815674482172865, 936571328.5332067]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_880",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4912884025604282, 1.122873085442233, -1.0743292160484914, 0.21796980558549034]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4912884025604282, 1.122873085442233, -1.0743292160484914, 0.21796980558549034]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_881",
    "sat": "def sat(x: float, coeffs: List[float]=[3.1333559804283193, -0.02669269863667645, -0.04975261871903144, 10394.226448872592]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.1333559804283193, -0.02669269863667645, -0.04975261871903144, 10394.226448872592]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_882",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.6144114775303117, 2.6255976140139974, -4.8907761502356815, -469.2597807302754]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6144114775303117, 2.6255976140139974, -4.8907761502356815, -469.2597807302754]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_883",
    "sat": "def sat(x: float, coeffs: List[float]=[23.543678839473916, 5.232545552845899, -0.2890581482974131, -378.9286066589924]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[23.543678839473916, 5.232545552845899, -0.2890581482974131, -378.9286066589924]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_884",
    "sat": "def sat(x: float, coeffs: List[float]=[-21.61420141798355, -0.14819274125711432, 269.6684521514012, 189.53947947567207]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-21.61420141798355, -0.14819274125711432, 269.6684521514012, 189.53947947567207]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_885",
    "sat": "def sat(x: float, coeffs: List[float]=[-16.56921765421718, 0.41765182262121997, 0.7455564108063518, -5675.348426295438]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.56921765421718, 0.41765182262121997, 0.7455564108063518, -5675.348426295438]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_886",
    "sat": "def sat(x: float, coeffs: List[float]=[19.486607951979746, 309.8147217255204, 0.18980789531885875, -0.0036091216762599676]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[19.486607951979746, 309.8147217255204, 0.18980789531885875, -0.0036091216762599676]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_887",
    "sat": "def sat(x: float, coeffs: List[float]=[5.3687649091508876, -0.23284126441795264, 5.06951040395517, -0.22156876483733784]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.3687649091508876, -0.23284126441795264, 5.06951040395517, -0.22156876483733784]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_888",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.08381475982813928, -22.87389881915384, -0.0434120099531062, 0.0042048438825077515]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.08381475982813928, -22.87389881915384, -0.0434120099531062, 0.0042048438825077515]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_889",
    "sat": "def sat(x: float, coeffs: List[float]=[0.025531378659870985, 1.2735768331530952, 17.809066408720977, -5.719113215458708]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.025531378659870985, 1.2735768331530952, 17.809066408720977, -5.719113215458708]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_890",
    "sat": "def sat(x: float, coeffs: List[float]=[0.17264730596716218, 1.8109124112655224, 3.962555718513084, -4.077030837701797]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.17264730596716218, 1.8109124112655224, 3.962555718513084, -4.077030837701797]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_891",
    "sat": "def sat(x: float, coeffs: List[float]=[0.0594160021526251, -0.04384738404660434, 1.1633098279975504, -1.2384011660906618]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0594160021526251, -0.04384738404660434, 1.1633098279975504, -1.2384011660906618]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_892",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.6721397710270915, -3.3013824323976166, -0.9818122950496454, 0.2534406074922897]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.6721397710270915, -3.3013824323976166, -0.9818122950496454, 0.2534406074922897]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_893",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.195288552475375, 1.0216583843327278, 0.6626758922475471, 4926.413406384648]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.195288552475375, 1.0216583843327278, 0.6626758922475471, 4926.413406384648]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_894",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4263471747518148, -5.178284372042618, -5.899834160515937, 29.797648301788467]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4263471747518148, -5.178284372042618, -5.899834160515937, 29.797648301788467]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_895",
    "sat": "def sat(x: float, coeffs: List[float]=[1.6028065235302282, -0.4023233763747249, 0.6615104174640773, 0.019111285604732544]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6028065235302282, -0.4023233763747249, 0.6615104174640773, 0.019111285604732544]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_896",
    "sat": "def sat(x: float, coeffs: List[float]=[0.18155263835078683, -1.1092017562676137, -0.34361829407894967, 2.7270347624049704]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.18155263835078683, -1.1092017562676137, -0.34361829407894967, 2.7270347624049704]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_897",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.22136370192904678, 11.66181802741715, 0.7496554683033739, -0.035315448741026184]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.22136370192904678, 11.66181802741715, 0.7496554683033739, -0.035315448741026184]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_898",
    "sat": "def sat(x: float, coeffs: List[float]=[496.2009873360243, 1.5756942557964775, -0.1414498145501221, -0.026306948602842342]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[496.2009873360243, 1.5756942557964775, -0.1414498145501221, -0.026306948602842342]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_899",
    "sat": "def sat(x: float, coeffs: List[float]=[1.4610176667825323, -0.005752377578254346, 0.10135126871560589, -0.012196235427694359]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.4610176667825323, -0.005752377578254346, 0.10135126871560589, -0.012196235427694359]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_900",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.559285367963192, -0.23148957193173683, -2.6603561515053493, 28080.56118118084]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.559285367963192, -0.23148957193173683, -2.6603561515053493, 28080.56118118084]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_901",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3830105675333641, -7.131952562785522, -0.2656121711161799, 11.274909874353487]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3830105675333641, -7.131952562785522, -0.2656121711161799, 11.274909874353487]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_902",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.49895973824608647, -0.32946806489580743, 0.07210824384869063, -3.7408878228263545]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.49895973824608647, -0.32946806489580743, 0.07210824384869063, -3.7408878228263545]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_903",
    "sat": "def sat(x: float, coeffs: List[float]=[2.2182125522978047, 0.1923745414846636, 9.212607144378298, -0.35054035405765943]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.2182125522978047, 0.1923745414846636, 9.212607144378298, -0.35054035405765943]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_904",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.581575064969288, 0.07555225644634052, 9.827193437750052, -12906.083903982162]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.581575064969288, 0.07555225644634052, 9.827193437750052, -12906.083903982162]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_905",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.26220918777899116, 4.198365419965211, -17.922961880941656, 16.502115241204194]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.26220918777899116, 4.198365419965211, -17.922961880941656, 16.502115241204194]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_906",
    "sat": "def sat(x: float, coeffs: List[float]=[1.821393810501717, -0.15937432743551402, 0.7161527866670444, -134.03731464796851]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.821393810501717, -0.15937432743551402, 0.7161527866670444, -134.03731464796851]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_907",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.7087896972673133, -1.1422041785665498, -0.17625042893447498, 1673.1779203649053]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.7087896972673133, -1.1422041785665498, -0.17625042893447498, 1673.1779203649053]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_908",
    "sat": "def sat(x: float, coeffs: List[float]=[3.063252051525603, -1.59474723182037, -0.03497460984077705, 0.07533079625040459]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.063252051525603, -1.59474723182037, -0.03497460984077705, 0.07533079625040459]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_909",
    "sat": "def sat(x: float, coeffs: List[float]=[2.3577434489687445, 0.2646816430358958, 89.86964056420972, 2.7524622058392048]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.3577434489687445, 0.2646816430358958, 89.86964056420972, 2.7524622058392048]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_910",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8601938971860581, -1.554287284603172, 40.41490168372201, -4.641478189918155]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8601938971860581, -1.554287284603172, 40.41490168372201, -4.641478189918155]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_911",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7986634406534033, -2.2824443128869976, 39.14278708052327, 23597081.62717474]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7986634406534033, -2.2824443128869976, 39.14278708052327, 23597081.62717474]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_912",
    "sat": "def sat(x: float, coeffs: List[float]=[1.655426227958855, 29.96252563000046, -0.8982035823899315, -29.56214278641985]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.655426227958855, 29.96252563000046, -0.8982035823899315, -29.56214278641985]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_913",
    "sat": "def sat(x: float, coeffs: List[float]=[-6.283452470478057, 1.1678929272751335, 0.08763766640666522, -1.1707722411881925]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.283452470478057, 1.1678929272751335, 0.08763766640666522, -1.1707722411881925]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_914",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.606966690838405, 0.23252402931451668, 0.1731703942205005, 16.7581847197405]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.606966690838405, 0.23252402931451668, 0.1731703942205005, 16.7581847197405]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_915",
    "sat": "def sat(x: float, coeffs: List[float]=[32.06384833879466, 58.235975462624104, -5.667282946228798, -1.8153726363559168]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[32.06384833879466, 58.235975462624104, -5.667282946228798, -1.8153726363559168]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_916",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.2393758847717231, -1.55986578184826, 1.6788149769053822, 34.41756020341819]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2393758847717231, -1.55986578184826, 1.6788149769053822, 34.41756020341819]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_917",
    "sat": "def sat(x: float, coeffs: List[float]=[1.1072365716132, 1.1143724446495276, 6.113361762594714, 2.1335835201677495]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1072365716132, 1.1143724446495276, 6.113361762594714, 2.1335835201677495]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_918",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.3863655825309282, -17.534963107909057, 0.07467107295125668, 44.61724636765089]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3863655825309282, -17.534963107909057, 0.07467107295125668, 44.61724636765089]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_919",
    "sat": "def sat(x: float, coeffs: List[float]=[0.18215101471713094, -389.9116416534395, 0.11072062476245, 13247.291732142887]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.18215101471713094, -389.9116416534395, 0.11072062476245, 13247.291732142887]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_920",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.4957775275357292, 0.2533872155647598, 0.40758942466710407, -3.5741893190284135]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.4957775275357292, 0.2533872155647598, 0.40758942466710407, -3.5741893190284135]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_921",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.12431931609780511, -0.9982116840355505, -7.6223783149206845, -5.635232856287088]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.12431931609780511, -0.9982116840355505, -7.6223783149206845, -5.635232856287088]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_922",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.028173232598036613, -0.08670203609578168, -0.13452782128118068, -0.06278702078941992]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.028173232598036613, -0.08670203609578168, -0.13452782128118068, -0.06278702078941992]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_923",
    "sat": "def sat(x: float, coeffs: List[float]=[0.00782529528925561, -0.2497408256069269, 5.039410989722236, -25660.52678979864]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.00782529528925561, -0.2497408256069269, 5.039410989722236, -25660.52678979864]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_924",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.12682556299129075, -0.026795357397542723, -10.527997971839618, 5921.4443162054495]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.12682556299129075, -0.026795357397542723, -10.527997971839618, 5921.4443162054495]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_925",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6393907472063943, -0.2860228629760177, -0.2942739612687039, 0.1390065136793972]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6393907472063943, -0.2860228629760177, -0.2942739612687039, 0.1390065136793972]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_926",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7970787489117576, -0.8799288502984729, 13.146286300275426, -14335.015370056934]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7970787489117576, -0.8799288502984729, 13.146286300275426, -14335.015370056934]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_927",
    "sat": "def sat(x: float, coeffs: List[float]=[0.09630901404538432, -19.979081960735346, 0.6556541437118467, 4.968350453790904]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.09630901404538432, -19.979081960735346, 0.6556541437118467, 4.968350453790904]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_928",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1803514888395723, -0.7770116677338267, 0.17011130356024914, 0.04944950140121221]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1803514888395723, -0.7770116677338267, 0.17011130356024914, 0.04944950140121221]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_929",
    "sat": "def sat(x: float, coeffs: List[float]=[1.6137626709279251, 0.18515467705131505, -0.34423507863184205, -0.06957532625774081]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6137626709279251, 0.18515467705131505, -0.34423507863184205, -0.06957532625774081]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_930",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7769121413141199, -0.2154899438755075, 0.13304683451425872, -160.85214533152995]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7769121413141199, -0.2154899438755075, 0.13304683451425872, -160.85214533152995]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_931",
    "sat": "def sat(x: float, coeffs: List[float]=[3.122269353394824, -1.3309969694975976, 2.107236728720796, 0.20259227464588964]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.122269353394824, -1.3309969694975976, 2.107236728720796, 0.20259227464588964]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_932",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.921351339279664, -0.48461695601626253, 40.90457071675545, 1498.1899510882274]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.921351339279664, -0.48461695601626253, 40.90457071675545, 1498.1899510882274]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_933",
    "sat": "def sat(x: float, coeffs: List[float]=[-20.894178864899505, -0.471865789223273, -8.557353468860237, 1.9790070659263903]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-20.894178864899505, -0.471865789223273, -8.557353468860237, 1.9790070659263903]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_934",
    "sat": "def sat(x: float, coeffs: List[float]=[0.45568965013240764, 0.47851492037336635, -0.23761406647529792, 31.660805250938544]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.45568965013240764, 0.47851492037336635, -0.23761406647529792, 31.660805250938544]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_935",
    "sat": "def sat(x: float, coeffs: List[float]=[-241.40768330164812, 0.07418771939165462, 0.022696292057483875, 7432.8521718427255]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-241.40768330164812, 0.07418771939165462, 0.022696292057483875, 7432.8521718427255]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_936",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5453882825469459, -0.12732558490842663, 0.1338977180121154, -0.017293716833797865]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5453882825469459, -0.12732558490842663, 0.1338977180121154, -0.017293716833797865]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_937",
    "sat": "def sat(x: float, coeffs: List[float]=[0.019800781475289558, -2.442073484709086, -0.15751962653357832, 0.001314093821823447]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.019800781475289558, -2.442073484709086, -0.15751962653357832, 0.001314093821823447]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_938",
    "sat": "def sat(x: float, coeffs: List[float]=[498.8512693989781, -2.0721805346776674, -0.46141077167375205, -49.680384591498445]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[498.8512693989781, -2.0721805346776674, -0.46141077167375205, -49.680384591498445]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_939",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.2341371944341653, 0.5118998925131731, 3.709692999557989, -52324.547104303485]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.2341371944341653, 0.5118998925131731, 3.709692999557989, -52324.547104303485]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_940",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3681582664611323, -0.03553233019781802, 0.15638352392995677, -0.03489126082815991]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3681582664611323, -0.03553233019781802, 0.15638352392995677, -0.03489126082815991]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_941",
    "sat": "def sat(x: float, coeffs: List[float]=[0.43891146579276086, -0.9543999549822012, -0.11499277178574041, 0.10160408110932428]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.43891146579276086, -0.9543999549822012, -0.11499277178574041, 0.10160408110932428]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_942",
    "sat": "def sat(x: float, coeffs: List[float]=[116.23105210311748, -1.0870015523344163, -0.6394462445037025, 130.95698614418484]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[116.23105210311748, -1.0870015523344163, -0.6394462445037025, 130.95698614418484]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_943",
    "sat": "def sat(x: float, coeffs: List[float]=[0.02498509323428692, -3.512255997972881, -1.3929156587135425, -0.062037709627351244]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.02498509323428692, -3.512255997972881, -1.3929156587135425, -0.062037709627351244]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_944",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8460582551798045, -14.231003683381983, -0.2822798348741946, 566.7479101461255]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8460582551798045, -14.231003683381983, -0.2822798348741946, 566.7479101461255]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_945",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.09707272835923482, -1.0219927177667547, 0.759464724129819, 0.2955291287129078]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.09707272835923482, -1.0219927177667547, 0.759464724129819, 0.2955291287129078]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_946",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.214782740458968, 1.9440629486791525, -53.08462876831428, 1.6919257786525597]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.214782740458968, 1.9440629486791525, -53.08462876831428, 1.6919257786525597]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_947",
    "sat": "def sat(x: float, coeffs: List[float]=[0.9854942477821323, -7.318527249378707, -0.8733626546325753, 0.7338254836054603]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9854942477821323, -7.318527249378707, -0.8733626546325753, 0.7338254836054603]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_948",
    "sat": "def sat(x: float, coeffs: List[float]=[-8.561360111804568, -0.6714272997404059, 0.14325376856443373, -633831.7638687964]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.561360111804568, -0.6714272997404059, 0.14325376856443373, -633831.7638687964]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_949",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.543276711652923, 1.0855303216282417, 1.4539140955654952, -0.39589967599169607]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.543276711652923, 1.0855303216282417, 1.4539140955654952, -0.39589967599169607]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_950",
    "sat": "def sat(x: float, coeffs: List[float]=[0.30290435057377346, 0.033931966897154865, 0.35670982009163543, -0.11508095818349232]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.30290435057377346, 0.033931966897154865, 0.35670982009163543, -0.11508095818349232]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_951",
    "sat": "def sat(x: float, coeffs: List[float]=[-38.748796149398565, 8.359760071435268, 2.3153712330620926, -0.43731015361948034]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-38.748796149398565, 8.359760071435268, 2.3153712330620926, -0.43731015361948034]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_952",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.968613343368702, -0.14700673218554142, -0.07687580323382193, -7.566497691753156]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.968613343368702, -0.14700673218554142, -0.07687580323382193, -7.566497691753156]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_953",
    "sat": "def sat(x: float, coeffs: List[float]=[20.315353493360046, -0.013513273640289944, 4.655573480509729, 8.742392689971725]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[20.315353493360046, -0.013513273640289944, 4.655573480509729, 8.742392689971725]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_954",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7440965538997721, -0.5646688116264089, 1.6309866817188994, -0.1144400998530107]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7440965538997721, -0.5646688116264089, 1.6309866817188994, -0.1144400998530107]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_955",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5556059501735543, 0.19842242190478995, 12.230370084921944, 4.910817748261061]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5556059501735543, 0.19842242190478995, 12.230370084921944, 4.910817748261061]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_956",
    "sat": "def sat(x: float, coeffs: List[float]=[1.663617618500511, -4.5982256456556145, -1.7921435911548287, -0.14312641136844453]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.663617618500511, -4.5982256456556145, -1.7921435911548287, -0.14312641136844453]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_957",
    "sat": "def sat(x: float, coeffs: List[float]=[2.894331862195782, 0.047309206485371735, 1.7355562620488938, -0.09513449945526334]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.894331862195782, 0.047309206485371735, 1.7355562620488938, -0.09513449945526334]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_958",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.14271439950959697, -37.55836518194728, 0.04267242404268264, 126.56933610320544]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.14271439950959697, -37.55836518194728, 0.04267242404268264, 126.56933610320544]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_959",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5717876356000126, 1.180919578770417, 0.7420197113681204, 378.23563136914083]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5717876356000126, 1.180919578770417, 0.7420197113681204, 378.23563136914083]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_960",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.0339402197783234, -3.7753621080869597, -6.1007808502347425, -2.0050501102742766]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.0339402197783234, -3.7753621080869597, -6.1007808502347425, -2.0050501102742766]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_961",
    "sat": "def sat(x: float, coeffs: List[float]=[2.2017644904580274, -0.6481471065624591, -0.27743833354259984, 0.0029181452664043227]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.2017644904580274, -0.6481471065624591, -0.27743833354259984, 0.0029181452664043227]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_962",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7999512925143728, 2.043714294892162, -3.2873522067033836, -1.0018850322341581]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7999512925143728, 2.043714294892162, -3.2873522067033836, -1.0018850322341581]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_963",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.23568391180833426, 0.6196998138616148, 20.219445701115536, 35.275992959400334]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.23568391180833426, 0.6196998138616148, 20.219445701115536, 35.275992959400334]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_964",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.407005061479499, 0.6476835142652835, -0.46769184512199713, 0.36492852962110645]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.407005061479499, 0.6476835142652835, -0.46769184512199713, 0.36492852962110645]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_965",
    "sat": "def sat(x: float, coeffs: List[float]=[1.4346603012637098, -6.755466398426521, -1.9562766460330259, 4.660168385121351]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.4346603012637098, -6.755466398426521, -1.9562766460330259, 4.660168385121351]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_966",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.3439290181979613, -3.3584979012667096, 0.3807006710797201, 3.426979827213012]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3439290181979613, -3.3584979012667096, 0.3807006710797201, 3.426979827213012]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_967",
    "sat": "def sat(x: float, coeffs: List[float]=[0.16220376589447483, 0.028707723003498147, 14.375102566996361, 30.526744715930327]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.16220376589447483, 0.028707723003498147, 14.375102566996361, 30.526744715930327]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_968",
    "sat": "def sat(x: float, coeffs: List[float]=[0.004096939910988399, 31.739600059416727, -0.35592219060680436, -12.818628819611838]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.004096939910988399, 31.739600059416727, -0.35592219060680436, -12.818628819611838]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_969",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4411369233418294, 0.052191729561469336, 2.2196031673198195, -1.8142615186444782]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4411369233418294, 0.052191729561469336, 2.2196031673198195, -1.8142615186444782]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_970",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.9172317401118802, 0.007540316471120967, 0.9951039130710421, 0.2597125396744733]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9172317401118802, 0.007540316471120967, 0.9951039130710421, 0.2597125396744733]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_971",
    "sat": "def sat(x: float, coeffs: List[float]=[14.232723735377794, 0.64640357304553, 55.14849000024599, 20.558344690465262]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[14.232723735377794, 0.64640357304553, 55.14849000024599, 20.558344690465262]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_972",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.05665711964746715, -1.5464013905767071, -1.3738041463380029, 0.7154592285019861]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.05665711964746715, -1.5464013905767071, -1.3738041463380029, 0.7154592285019861]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_973",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.034824996802994036, -6.469192664156584, -0.2545124369341553, 3.3148165538098917]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.034824996802994036, -6.469192664156584, -0.2545124369341553, 3.3148165538098917]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_974",
    "sat": "def sat(x: float, coeffs: List[float]=[0.20043723643187014, 3.0383343217628678, 0.553518483869473, 0.019038084287863327]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.20043723643187014, 3.0383343217628678, 0.553518483869473, 0.019038084287863327]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_975",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8936968653387557, 0.9945676033314713, -0.6646150062295733, 0.03366689998766226]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8936968653387557, 0.9945676033314713, -0.6646150062295733, 0.03366689998766226]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_976",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3624378138728708, 0.5906222224297494, 0.5039916758784438, 0.18495902610887113]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3624378138728708, 0.5906222224297494, 0.5039916758784438, 0.18495902610887113]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_977",
    "sat": "def sat(x: float, coeffs: List[float]=[6.912032346295059, 1.433574174775588, 1.608479714504018, 6749.418618419939]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.912032346295059, 1.433574174775588, 1.608479714504018, 6749.418618419939]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_978",
    "sat": "def sat(x: float, coeffs: List[float]=[22.543271081949182, 5.81232645663735, -0.19144142348967433, -0.0315209042655768]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[22.543271081949182, 5.81232645663735, -0.19144142348967433, -0.0315209042655768]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_979",
    "sat": "def sat(x: float, coeffs: List[float]=[-14.722898657386585, 5.218949495492544, 58.18990638879211, -20.82984122385296]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-14.722898657386585, 5.218949495492544, 58.18990638879211, -20.82984122385296]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_980",
    "sat": "def sat(x: float, coeffs: List[float]=[0.06721595018418151, 137.42721209310562, -0.5590424193243297, -108.37257297702203]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06721595018418151, 137.42721209310562, -0.5590424193243297, -108.37257297702203]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_981",
    "sat": "def sat(x: float, coeffs: List[float]=[3.327532365091337, -0.0541574393058785, 6.547287870192995, -2407.2305962837063]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.327532365091337, -0.0541574393058785, 6.547287870192995, -2407.2305962837063]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_982",
    "sat": "def sat(x: float, coeffs: List[float]=[-217.95190976804062, 1.7399792704515293, -0.05360192415965711, -28.436739295788517]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-217.95190976804062, 1.7399792704515293, -0.05360192415965711, -28.436739295788517]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_983",
    "sat": "def sat(x: float, coeffs: List[float]=[0.16546820673604098, -0.11999102598280868, 5.767928820022736, -66.24307805256622]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.16546820673604098, -0.11999102598280868, 5.767928820022736, -66.24307805256622]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_984",
    "sat": "def sat(x: float, coeffs: List[float]=[-18.07502212103977, -0.2728419832982523, -1.204993634346425, 10078.656890335998]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-18.07502212103977, -0.2728419832982523, -1.204993634346425, 10078.656890335998]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_985",
    "sat": "def sat(x: float, coeffs: List[float]=[1.309778367858178, -0.03411374707067768, -1.3621439796637071, -0.34648228448817453]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.309778367858178, -0.03411374707067768, -1.3621439796637071, -0.34648228448817453]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_986",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.028747038386646, 0.1263059125574663, -0.02367064379423689, -395.23950166136143]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.028747038386646, 0.1263059125574663, -0.02367064379423689, -395.23950166136143]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_987",
    "sat": "def sat(x: float, coeffs: List[float]=[2.3070453843442107, 106.07532132753856, -0.413208803146565, -0.6108854149552629]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.3070453843442107, 106.07532132753856, -0.413208803146565, -0.6108854149552629]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_988",
    "sat": "def sat(x: float, coeffs: List[float]=[65.69684696591425, -0.12895550918231455, 1.0290414294706978, 9603.000327629668]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[65.69684696591425, -0.12895550918231455, 1.0290414294706978, 9603.000327629668]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_989",
    "sat": "def sat(x: float, coeffs: List[float]=[0.007272242390149748, -4.300897973433458, 0.11339164657591143, 0.2033276959780183]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.007272242390149748, -4.300897973433458, 0.11339164657591143, 0.2033276959780183]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_990",
    "sat": "def sat(x: float, coeffs: List[float]=[1.3386706349294017, -1.7752922398850677, -0.09520060242172342, 0.07759304920876231]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3386706349294017, -1.7752922398850677, -0.09520060242172342, 0.07759304920876231]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_991",
    "sat": "def sat(x: float, coeffs: List[float]=[0.11247750741944662, 0.16470260394226624, 0.1554223815470288, -6.552658234503566]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.11247750741944662, 0.16470260394226624, 0.1554223815470288, -6.552658234503566]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_992",
    "sat": "def sat(x: float, coeffs: List[float]=[0.15770862889770818, -0.07695931532490559, 1.3701940735335292, 116.09801156474803]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.15770862889770818, -0.07695931532490559, 1.3701940735335292, 116.09801156474803]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_993",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.5508188370998521, -0.9492274991723505, 0.35483988058710175, 676.6717831431716]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5508188370998521, -0.9492274991723505, 0.35483988058710175, 676.6717831431716]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_994",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6318618866996105, -1.690584106878292, 0.017898700839173703, -0.16054250306280135]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6318618866996105, -1.690584106878292, 0.017898700839173703, -0.16054250306280135]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_995",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.9228677757339353, 0.7153485324224348, 0.5600749275735009, -0.26718122739842276]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9228677757339353, 0.7153485324224348, 0.5600749275735009, -0.26718122739842276]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_996",
    "sat": "def sat(x: float, coeffs: List[float]=[9.120124901549282, -1.0481523373370873, -0.238118201532414, 8.733646193252486]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.120124901549282, -1.0481523373370873, -0.238118201532414, 8.733646193252486]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_997",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8815823976134071, -1.2272224323588086, 8.918259515309833, 4.9986838668750195]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8815823976134071, -1.2272224323588086, 8.918259515309833, 4.9986838668750195]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_998",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.1167531285865433, -0.004922130921764707, 6.882158051172138, -2.4972668300701177]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.1167531285865433, -0.004922130921764707, 6.882158051172138, -2.4972668300701177]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_999",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.03911350288468866, 0.2531640292444765, 0.6740130406705163, -1.7420821182619775]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.03911350288468866, 0.2531640292444765, 0.6740130406705163, -1.7420821182619775]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "AllCubicRoots_0",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.0, -2.0, -1.0]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0, -2.0, -1.0]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_1",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.083273458744513, -3.56864182285186, 0.37798877506665396]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.083273458744513, -3.56864182285186, 0.37798877506665396]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_2",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.08173740811072872, -1.2059276267486685, -0.04393842101065364]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08173740811072872, -1.2059276267486685, -0.04393842101065364]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_3",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-15.52825202746211, 8.744034807137623, 0.11281210004673718]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-15.52825202746211, 8.744034807137623, 0.11281210004673718]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_4",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[228.8713335007692, 12008.483715754948, -15734.247147119515]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[228.8713335007692, 12008.483715754948, -15734.247147119515]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_5",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[74.62649586016151, 22.757052413875996, -0.3093148244205085]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[74.62649586016151, 22.757052413875996, -0.3093148244205085]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_6",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[117.73639147355078, -662.2357158850707, 36.30917706928984]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[117.73639147355078, -662.2357158850707, 36.30917706928984]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_7",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-446.87361381045736, -8004.399377775023, -545.5407258309075]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-446.87361381045736, -8004.399377775023, -545.5407258309075]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_8",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.9361578746782118, -7.934084830629807, 15.116071886047843]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.9361578746782118, -7.934084830629807, 15.116071886047843]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_9",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.230014345068059, 0.2265191690717432, 0.0024145725642329328]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.230014345068059, 0.2265191690717432, 0.0024145725642329328]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_10",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5398531011734893, -0.19314024462281848, 0.09249263971462471]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5398531011734893, -0.19314024462281848, 0.09249263971462471]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_11",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.534100649930538, -22.63127227165879, -14.072768646503217]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.534100649930538, -22.63127227165879, -14.072768646503217]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_12",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.6494439417322515, -0.48611711776961875, 0.01585939187553353]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.6494439417322515, -0.48611711776961875, 0.01585939187553353]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_13",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.8077316005878665, -4.413103418934446, 3.634620511864172]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.8077316005878665, -4.413103418934446, 3.634620511864172]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_14",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[25.987568539279316, 109.30352551574808, -45.933011842422935]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[25.987568539279316, 109.30352551574808, -45.933011842422935]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_15",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-16.459783282320117, 3.5710598916285434, -0.10543832789980219]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.459783282320117, 3.5710598916285434, -0.10543832789980219]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_16",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.280251594069211, 1.5698166567473526, -0.3109102338430915]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.280251594069211, 1.5698166567473526, -0.3109102338430915]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_17",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.77915286785873, 1.6106170529912338, 0.10231259480289917]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.77915286785873, 1.6106170529912338, 0.10231259480289917]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_18",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.336307165511324, 1.7614118287147067, 0.4277512848901015]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.336307165511324, 1.7614118287147067, 0.4277512848901015]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_19",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.8886420641421924, -0.10698584000657246, -0.0006280576950071284]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.8886420641421924, -0.10698584000657246, -0.0006280576950071284]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_20",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[18.45070925850102, 75.4330842929218, 76.19770738659929]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[18.45070925850102, 75.4330842929218, 76.19770738659929]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_21",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-229.99673842482113, -21.06769597101419, 321.28312965710415]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-229.99673842482113, -21.06769597101419, 321.28312965710415]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_22",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[13.917983992734792, -231.51228562079388, -1.4179609218405127]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[13.917983992734792, -231.51228562079388, -1.4179609218405127]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_23",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[14.92074271039732, 54.34088249285153, 8.403516731226206]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[14.92074271039732, 54.34088249285153, 8.403516731226206]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_24",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.029684067693122, -7.990816079386567, 0.7030624156938999]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.029684067693122, -7.990816079386567, 0.7030624156938999]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_25",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.3336639974691962, 0.5323748315928585, 0.06575523592167717]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3336639974691962, 0.5323748315928585, 0.06575523592167717]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_26",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[45.70955368186439, 376.1966615474158, -3030.859712690805]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[45.70955368186439, 376.1966615474158, -3030.859712690805]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_27",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8541771965263978, -1.9322945883911864, -1.524482974093045]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8541771965263978, -1.9322945883911864, -1.524482974093045]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_28",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.9262479817133669, -0.00525245171059574, -0.0028548671196681943]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.9262479817133669, -0.00525245171059574, -0.0028548671196681943]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_29",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.592850440544578, -5.09054854675312, 0.2672102419547219]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.592850440544578, -5.09054854675312, 0.2672102419547219]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_30",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-8.231839207339144, 16.14078417003157, 1.471835568760396]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.231839207339144, 16.14078417003157, 1.471835568760396]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_31",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.7252642591068077, 1.4389877232978256, 0.3718859544395744]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.7252642591068077, 1.4389877232978256, 0.3718859544395744]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_32",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-33.53875909269622, -1088.2626591566468, 172.39180921749605]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-33.53875909269622, -1088.2626591566468, 172.39180921749605]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_33",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-11.954070933538357, 3.851886729420526, 0.1725945315579803]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.954070933538357, 3.851886729420526, 0.1725945315579803]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_34",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.5101194862077456, -7.013360553843931, -1.440267336396583]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.5101194862077456, -7.013360553843931, -1.440267336396583]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_35",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[49.59206997903881, 57.99057884052908, -1140.257062535307]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[49.59206997903881, 57.99057884052908, -1140.257062535307]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_36",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.381210893180956, -2.6406156984184235, 0.0014059673164838657]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.381210893180956, -2.6406156984184235, 0.0014059673164838657]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_37",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5283414785215601, -0.14224653283435298, 0.038424421351727224]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5283414785215601, -0.14224653283435298, 0.038424421351727224]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_38",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.9729668005466636, -0.5268990335720601, 0.005832479943205042]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.9729668005466636, -0.5268990335720601, 0.005832479943205042]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_39",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-30.07601199640478, 34.94946059251219, -8.392210898790957]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-30.07601199640478, 34.94946059251219, -8.392210898790957]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_40",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-10.017574841225091, 1.3054617104316868, 0.058874195414401254]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-10.017574841225091, 1.3054617104316868, 0.058874195414401254]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_41",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.241171368882898, -1.9035424915446422, 0.35896792788031545]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.241171368882898, -1.9035424915446422, 0.35896792788031545]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_42",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.5172935853420086, -0.25199891555316056, 0.7750344474349141]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5172935853420086, -0.25199891555316056, 0.7750344474349141]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_43",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.041903590325223, 4.431311855391937, 0.8237683075672881]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.041903590325223, 4.431311855391937, 0.8237683075672881]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_44",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.296733398896146, 4.182112312092931, -0.950489799099786]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.296733398896146, 4.182112312092931, -0.950489799099786]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_45",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.1214130711757329, -2.761855750290419, 1.0460784719764904]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1214130711757329, -2.761855750290419, 1.0460784719764904]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_46",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-8.96000268070511, 24.215693268496107, -20.59700707534864]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.96000268070511, 24.215693268496107, -20.59700707534864]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_47",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-30.77822872840075, -10.222896150268284, 0.06150327904350033]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-30.77822872840075, -10.222896150268284, 0.06150327904350033]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_48",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-909.0768856443996, 273.50130295076826, 114.77218849037476]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-909.0768856443996, 273.50130295076826, 114.77218849037476]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_49",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.9003969721122783, -0.47514335102508626, 0.29732883092328116]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9003969721122783, -0.47514335102508626, 0.29732883092328116]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_50",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.0136742503218725, -3.1106226710005034, 3.4312796565422685]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0136742503218725, -3.1106226710005034, 3.4312796565422685]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_51",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-15.80443669420152, 7.47344764407012, 2.7675364970309957]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-15.80443669420152, 7.47344764407012, 2.7675364970309957]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_52",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[14.19215666729923, 3.442063903013148, 0.14421421680723348]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[14.19215666729923, 3.442063903013148, 0.14421421680723348]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_53",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-19.271626913810056, 41.28401764924661, 170.4497631906096]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-19.271626913810056, 41.28401764924661, 170.4497631906096]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_54",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.4279156413344651, 0.6410270861174256, 0.08698353985164774]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.4279156413344651, 0.6410270861174256, 0.08698353985164774]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_55",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.1684727182381867, -0.15154542733376977, -0.0006076465638243782]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1684727182381867, -0.15154542733376977, -0.0006076465638243782]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_56",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-47.50174995133392, 308.93138944512754, -479.08419858597307]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-47.50174995133392, 308.93138944512754, -479.08419858597307]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_57",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.487450666866076, 4.566425015299338, 0.6152424374786305]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.487450666866076, 4.566425015299338, 0.6152424374786305]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_58",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.421752984196915, 1.0045620828161694, -0.057017430885659935]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.421752984196915, 1.0045620828161694, -0.057017430885659935]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_59",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.3545412227347973, 0.46430778685380836, 0.03055001071774803]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3545412227347973, 0.46430778685380836, 0.03055001071774803]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_60",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.180860343964948, 0.5203238429757298, 0.44428313846669887]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.180860343964948, 0.5203238429757298, 0.44428313846669887]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_61",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[23.4909074228739, 17.126731468719278, 1.5598308557114589]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[23.4909074228739, 17.126731468719278, 1.5598308557114589]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_62",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.381841539516499, -0.3425441201936814, -0.00302327417737162]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.381841539516499, -0.3425441201936814, -0.00302327417737162]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_63",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.410093690233702, 0.27730004764914196, -0.32821207341585174]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.410093690233702, 0.27730004764914196, -0.32821207341585174]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_64",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.292810281190097, -19.799924036108543, -12.544578917111862]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.292810281190097, -19.799924036108543, -12.544578917111862]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_65",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5923869099153438, -0.08881804548500888, 0.015534075113110321]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5923869099153438, -0.08881804548500888, 0.015534075113110321]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_66",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-13.506769608271288, -3.7681817990862885, -0.10495384223825709]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-13.506769608271288, -3.7681817990862885, -0.10495384223825709]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_67",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.256656939946943, 3.0110297142198834, -0.5959906909373716]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.256656939946943, 3.0110297142198834, -0.5959906909373716]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_68",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.16196086617429, -4.415804491006428, 52.29996599108473]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.16196086617429, -4.415804491006428, 52.29996599108473]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_69",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-147.37879502031336, -234.93016460263308, -35.02950155190538]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-147.37879502031336, -234.93016460263308, -35.02950155190538]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_70",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-24.78200088248564, 8.224409238994427, -0.433729004131567]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-24.78200088248564, 8.224409238994427, -0.433729004131567]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_71",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[13.4417389202106, 43.49880309564108, 32.98887619997087]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[13.4417389202106, 43.49880309564108, 32.98887619997087]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_72",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.465073066460371, -3.203158110316016, -0.6225902437394643]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.465073066460371, -3.203158110316016, -0.6225902437394643]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_73",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[290.88197790388375, -123.26520870105779, -22.08423855962739]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[290.88197790388375, -123.26520870105779, -22.08423855962739]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_74",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.11131917851539674, -0.6496706158731202, -0.1297652124075862]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11131917851539674, -0.6496706158731202, -0.1297652124075862]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_75",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.855389732734065, 8.48468711312843, 0.10812651854086744]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.855389732734065, 8.48468711312843, 0.10812651854086744]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_76",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.09835373061821044, -0.015969511234004138, -0.00045565826333596887]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.09835373061821044, -0.015969511234004138, -0.00045565826333596887]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_77",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[121.27905319783281, -4.169129934937512, 0.03474850411982947]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[121.27905319783281, -4.169129934937512, 0.03474850411982947]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_78",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-951.3501894767153, 2784.8536986938493, -709.9421628451574]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-951.3501894767153, 2784.8536986938493, -709.9421628451574]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_79",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[10.166525136449334, 6.207030249180962, -52.59701561050222]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.166525136449334, 6.207030249180962, -52.59701561050222]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_80",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.3989795406742442, 0.8844813546561903, -3.4358014069047584]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.3989795406742442, 0.8844813546561903, -3.4358014069047584]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_81",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.401182852510494, 2.529329169705025, -0.08562423523536077]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.401182852510494, 2.529329169705025, -0.08562423523536077]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_82",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.3599752336924684, -380.4564905362577, 350.5560119263906]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3599752336924684, -380.4564905362577, 350.5560119263906]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_83",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[350.4426829839222, 30522.54649640785, 408352.39399654145]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[350.4426829839222, 30522.54649640785, 408352.39399654145]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_84",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[16.504476209535568, 27.204600922892766, 9.2300709810552]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[16.504476209535568, 27.204600922892766, 9.2300709810552]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_85",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.497792853986547, 0.5844986162253588, 0.040883250154684705]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.497792853986547, 0.5844986162253588, 0.040883250154684705]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_86",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.508049499382785, -3.5162829470538597, 3.2052006366006487]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.508049499382785, -3.5162829470538597, 3.2052006366006487]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_87",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[14.659013748609905, 51.20849190733076, -8.22971819695736]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[14.659013748609905, 51.20849190733076, -8.22971819695736]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_88",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-8.96227221020857, 1.79380215244287, 0.005527319201571134]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.96227221020857, 1.79380215244287, 0.005527319201571134]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_89",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.180740067191036, -4.150531497196431, 0.24900057641021517]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.180740067191036, -4.150531497196431, 0.24900057641021517]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_90",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.470531972741406, 5.775533741346709, -0.7968767856768296]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.470531972741406, 5.775533741346709, -0.7968767856768296]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_91",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.15636688847307398, -0.22174535784389132, 0.028251668916125766]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.15636688847307398, -0.22174535784389132, 0.028251668916125766]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_92",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6875746516969284, -1.8875145614752382, -0.30694014315495377]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6875746516969284, -1.8875145614752382, -0.30694014315495377]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_93",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.024316373239862688, -0.27122712104288554, -0.005698146645926604]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.024316373239862688, -0.27122712104288554, -0.005698146645926604]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_94",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[22.59558065248933, -54.257955639512396, 12.837673194593094]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[22.59558065248933, -54.257955639512396, 12.837673194593094]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_95",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-178.8600210275147, -21.063706546725772, 87.82416111294584]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-178.8600210275147, -21.063706546725772, 87.82416111294584]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_96",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[72.07528513989608, 464.7092386663957, 245.63717892939712]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[72.07528513989608, 464.7092386663957, 245.63717892939712]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_97",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7060039904893841, 0.0023693983853678366, 0.0012276254930268034]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7060039904893841, 0.0023693983853678366, 0.0012276254930268034]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_98",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-30.37167968865042, -17.865953434429194, 15.49832794443232]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-30.37167968865042, -17.865953434429194, 15.49832794443232]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_99",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8398963310386983, -6.179848967835315, 1.4318334246925128]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8398963310386983, -6.179848967835315, 1.4318334246925128]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_100",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.850133820755998, 0.29748797918222025, 0.5830140103265599]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.850133820755998, 0.29748797918222025, 0.5830140103265599]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_101",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.7884421559804282, -0.9885300974718485, -0.06448727612252068]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.7884421559804282, -0.9885300974718485, -0.06448727612252068]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_102",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.0032444308057236, 0.26491718089045646, -0.0010479445714202823]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.0032444308057236, 0.26491718089045646, -0.0010479445714202823]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_103",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.4183579430548694, -0.3447537215790273, -0.06643129436983299]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4183579430548694, -0.3447537215790273, -0.06643129436983299]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_104",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.639618620812842, 4.818993913341509, -0.22462124577023976]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.639618620812842, 4.818993913341509, -0.22462124577023976]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_105",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-28.238655917009027, -17.91992288732041, -2.8109770533615968]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-28.238655917009027, -17.91992288732041, -2.8109770533615968]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_106",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[82.59893426199613, -213.5063785483901, -44.729934549942115]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[82.59893426199613, -213.5063785483901, -44.729934549942115]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_107",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5217840373484539, -14.192919253260015, -10.383855552717467]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5217840373484539, -14.192919253260015, -10.383855552717467]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_108",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-542.540981827393, -5083.40680841526, -2584.944462473908]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-542.540981827393, -5083.40680841526, -2584.944462473908]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_109",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-22.060882537553393, 2.154998333358318, -0.009119423266639799]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-22.060882537553393, 2.154998333358318, -0.009119423266639799]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_110",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.4344985901590044, 2.361413640058336, 0.45817964135957223]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.4344985901590044, 2.361413640058336, 0.45817964135957223]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_111",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.9197273290392421, 0.155356084940916, -0.004964031530968628]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9197273290392421, 0.155356084940916, -0.004964031530968628]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_112",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[309.470695679692, -1026.7176161378557, 527.6834606746752]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[309.470695679692, -1026.7176161378557, 527.6834606746752]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_113",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[21.11883904839797, 2.086442514992043, -0.8822048538354215]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[21.11883904839797, 2.086442514992043, -0.8822048538354215]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_114",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.6925053177774285, 0.44946175920753206, -0.05107326214247634]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.6925053177774285, 0.44946175920753206, -0.05107326214247634]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_115",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-17.444177732798707, -23.28668447078485, -1.0227642861282418]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-17.444177732798707, -23.28668447078485, -1.0227642861282418]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_116",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.461985553913973, -2.7493894823090113, -45.687089947295654]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.461985553913973, -2.7493894823090113, -45.687089947295654]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_117",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[15.674422060233308, -6.531956227073172, -2.733551564274696]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[15.674422060233308, -6.531956227073172, -2.733551564274696]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_118",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[47.9627376713465, -2575.2084703336013, -55684.08590716904]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[47.9627376713465, -2575.2084703336013, -55684.08590716904]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_119",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.951226425347157, -6.665690346862718, -7.634510482119329]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.951226425347157, -6.665690346862718, -7.634510482119329]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_120",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-16.961841252288806, -1303.8097960887576, 2886.172698341941]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.961841252288806, -1303.8097960887576, 2886.172698341941]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_121",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.11366685880052646, -0.11319470432297529, -0.010703722541404226]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11366685880052646, -0.11319470432297529, -0.010703722541404226]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_122",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[56.74598272002593, 13.90864595256977, 0.7745618565660953]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[56.74598272002593, 13.90864595256977, 0.7745618565660953]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_123",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[100.18040421490987, 313.71678352013913, 223.15550216924674]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[100.18040421490987, 313.71678352013913, 223.15550216924674]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_124",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-282.6675552004266, 499.7413190230144, 52.995278268759954]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-282.6675552004266, 499.7413190230144, 52.995278268759954]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_125",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-316.66315394638303, -1076.3206560768658, -566.1122211150588]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-316.66315394638303, -1076.3206560768658, -566.1122211150588]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_126",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-521.1868019228399, -782.3673886643678, -289.7280238655695]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-521.1868019228399, -782.3673886643678, -289.7280238655695]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_127",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[16.90644908341885, -19.665430112212547, -2.6946938806099205]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[16.90644908341885, -19.665430112212547, -2.6946938806099205]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_128",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[9.04418360972806, -7.993894111965859, -0.545474916725684]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.04418360972806, -7.993894111965859, -0.545474916725684]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_129",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.7997150771391432, 0.1134613188697943, 0.004478126170039412]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7997150771391432, 0.1134613188697943, 0.004478126170039412]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_130",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.260752615897956, 4.224953442074496, -0.7484512153759696]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.260752615897956, 4.224953442074496, -0.7484512153759696]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_131",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.3824176614716785, 15.94739394033769, -8.351055956773417]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.3824176614716785, 15.94739394033769, -8.351055956773417]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_132",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[12.58694085423801, 36.75489699605641, 21.858668191799776]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.58694085423801, 36.75489699605641, 21.858668191799776]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_133",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.43563331498156, 17.08177399234185, 9.67091932649688]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.43563331498156, 17.08177399234185, 9.67091932649688]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_134",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[233.1865349793699, -11561.232067107941, -13953.60562938469]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[233.1865349793699, -11561.232067107941, -13953.60562938469]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_135",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.15006306530742758, -0.17835810576946626, 0.03897075986984512]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.15006306530742758, -0.17835810576946626, 0.03897075986984512]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_136",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.3990055735902125, 12.451939821886272, -0.11765434977194666]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.3990055735902125, 12.451939821886272, -0.11765434977194666]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_137",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.039239420633596, -2.663621808736883, -0.6431994812899896]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.039239420633596, -2.663621808736883, -0.6431994812899896]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_138",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.440668786116199, 1.6453669856349593, -8.014108426224794]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.440668786116199, 1.6453669856349593, -8.014108426224794]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_139",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.18857219605373293, -0.1520736346034659, -0.026829903899262632]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.18857219605373293, -0.1520736346034659, -0.026829903899262632]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_140",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-38.67512291687372, 67.43995093397662, -23.287948126128754]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-38.67512291687372, 67.43995093397662, -23.287948126128754]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_141",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.5659926577535175, -3.1130116508798253, 0.04046481387389978]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.5659926577535175, -3.1130116508798253, 0.04046481387389978]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_142",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.46821092162584976, -0.5194127880514473, 0.045561869813351245]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.46821092162584976, -0.5194127880514473, 0.045561869813351245]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_143",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[21.92088924424332, -46.315679836952214, -30.6215383033166]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[21.92088924424332, -46.315679836952214, -30.6215383033166]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_144",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-17.0225949141952, 48.02863713828927, -36.6432561257469]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-17.0225949141952, 48.02863713828927, -36.6432561257469]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_145",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.22466142808276648, -0.11343382129362847, 0.0008443194415988915]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.22466142808276648, -0.11343382129362847, 0.0008443194415988915]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_146",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.9793660504561836, 0.7734011079357042, 0.06468970760842829]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.9793660504561836, 0.7734011079357042, 0.06468970760842829]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_147",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-40.301756863028494, -6.116155057276989, 1.069234404709729]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-40.301756863028494, -6.116155057276989, 1.069234404709729]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_148",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-15.215552415600719, -17.744820928028705, 0.33704460392774854]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-15.215552415600719, -17.744820928028705, 0.33704460392774854]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_149",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.06877028706754, 0.4345152501021153, -0.14414913304524882]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.06877028706754, 0.4345152501021153, -0.14414913304524882]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_150",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.895333684649343, -3.9027906274798947, 0.55284954585135]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.895333684649343, -3.9027906274798947, 0.55284954585135]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_151",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[9.056907296423192, -18.605591478654674, -0.020474779343080028]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.056907296423192, -18.605591478654674, -0.020474779343080028]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_152",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[88.05648454336469, 164.17408361670581, 33.74420630465281]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[88.05648454336469, 164.17408361670581, 33.74420630465281]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_153",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[228.5674890365734, -972.1375805343267, -126.75275177849059]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[228.5674890365734, -972.1375805343267, -126.75275177849059]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_154",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[22.17173386102752, 7.002642904092783, -9.755820489359069]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[22.17173386102752, 7.002642904092783, -9.755820489359069]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_155",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.13284616963858253, -0.5760358934397298, 0.02093981169267762]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.13284616963858253, -0.5760358934397298, 0.02093981169267762]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_156",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[71.46065772566608, 644.1346082951057, -610.4305598897676]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[71.46065772566608, 644.1346082951057, -610.4305598897676]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_157",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[85.21162239371355, 152.80671714460078, 49.4729567926238]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[85.21162239371355, 152.80671714460078, 49.4729567926238]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_158",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-89.73319616816391, 1127.333323704772, 3794.391323713042]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-89.73319616816391, 1127.333323704772, 3794.391323713042]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_159",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.41099554494791946, -0.09972830503031715, -0.02580203785928772]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.41099554494791946, -0.09972830503031715, -0.02580203785928772]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_160",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.86828451098742, -4.646400803329233, -1.2631350538677237]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.86828451098742, -4.646400803329233, -1.2631350538677237]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_161",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-243.37392516873797, -955.7871148679144, -105.54844171444057]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-243.37392516873797, -955.7871148679144, -105.54844171444057]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_162",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.11658305571099281, -0.021789458359577327, -0.0005918921578799007]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11658305571099281, -0.021789458359577327, -0.0005918921578799007]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_163",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-84.3309684889509, -182.49524056433413, 4.441161951713245]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-84.3309684889509, -182.49524056433413, 4.441161951713245]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_164",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.508328702557963, -1.7211739156722696, 0.4667396709291228]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.508328702557963, -1.7211739156722696, 0.4667396709291228]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_165",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-68.53513452623942, -57.91885106428986, 21.326423983577573]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-68.53513452623942, -57.91885106428986, 21.326423983577573]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_166",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.356573826725765, -0.4678602222795848, -0.03628696528286924]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.356573826725765, -0.4678602222795848, -0.03628696528286924]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_167",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.80962526204972, -5.4168381033755795, 0.749487648643541]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.80962526204972, -5.4168381033755795, 0.749487648643541]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_168",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-27.41065867698846, 47.180358194115996, 114.62620473299522]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-27.41065867698846, 47.180358194115996, 114.62620473299522]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_169",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-627.124093175248, 613.945310085739, 29.568076712861053]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-627.124093175248, 613.945310085739, 29.568076712861053]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_170",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.2896965124594721, -3.285279899366404, 4.444160885396894]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2896965124594721, -3.285279899366404, 4.444160885396894]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_171",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.513545151789693, -4.622732694770681, -0.5428003994067769]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.513545151789693, -4.622732694770681, -0.5428003994067769]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_172",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3182372073329409, -0.5509983664707234, -0.19254178598063296]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3182372073329409, -0.5509983664707234, -0.19254178598063296]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_173",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[49.86984017388116, 60.98795555036715, 8.464379684027348]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[49.86984017388116, 60.98795555036715, 8.464379684027348]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_174",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-132.08141361561977, 475.00925043047397, -65.00375137272442]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-132.08141361561977, 475.00925043047397, -65.00375137272442]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_175",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.046165702040935314, -0.04793779962731197, 0.0044792125553461196]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.046165702040935314, -0.04793779962731197, 0.0044792125553461196]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_176",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.122829966362942, -1.0226470468517688, 5.942148808918574]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.122829966362942, -1.0226470468517688, 5.942148808918574]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_177",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.4739174317303356, -1.2462225387677457, 0.1469494792302727]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.4739174317303356, -1.2462225387677457, 0.1469494792302727]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_178",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[135.69178598511985, 312.36160494831483, 163.56636249137037]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[135.69178598511985, 312.36160494831483, 163.56636249137037]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_179",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.12471809482056684, -3.0059736139810314, 0.47503237256074954]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.12471809482056684, -3.0059736139810314, 0.47503237256074954]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_180",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[218.12770483169808, 77.74955719761341, -106.15875667713829]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[218.12770483169808, 77.74955719761341, -106.15875667713829]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_181",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[37.85859676779542, -2147.4410454006925, -220.71333056117894]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[37.85859676779542, -2147.4410454006925, -220.71333056117894]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_182",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.402404355633299, -1.6422100056501492, 0.037610997382744114]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.402404355633299, -1.6422100056501492, 0.037610997382744114]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_183",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.2221942371089822, -3.089654700168344, -2.838784863951292]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.2221942371089822, -3.089654700168344, -2.838784863951292]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_184",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.9901078853949044, -2.2873747293232123, -0.07084946867441]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.9901078853949044, -2.2873747293232123, -0.07084946867441]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_185",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.00962864568257904, -1.028952019210091, -0.25544009706364385]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.00962864568257904, -1.028952019210091, -0.25544009706364385]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_186",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.0107963598803433, -0.4452351032393681, -0.026892811775077134]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0107963598803433, -0.4452351032393681, -0.026892811775077134]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_187",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5009495924255135, -0.29275473660010093, 0.02652357439131822]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5009495924255135, -0.29275473660010093, 0.02652357439131822]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_188",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.6549128089202276, -124.76352915893807, -86.61487383605643]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.6549128089202276, -124.76352915893807, -86.61487383605643]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_189",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-12.537001387675172, 24.96092006841019, -1.0525712936387461]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.537001387675172, 24.96092006841019, -1.0525712936387461]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_190",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[418.00386872949997, 73.69864723774805, -523.748463942106]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[418.00386872949997, 73.69864723774805, -523.748463942106]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_191",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.119174610531371, 5.874241789320833, 1.2204948650890923]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.119174610531371, 5.874241789320833, 1.2204948650890923]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_192",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[225.3018588495582, 35.87235161903553, -16.57181718630926]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[225.3018588495582, 35.87235161903553, -16.57181718630926]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_193",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.6881760776395414, -40.73150439933045, -0.9797252122752514]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.6881760776395414, -40.73150439933045, -0.9797252122752514]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_194",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.164114631743375, 5.525329016346033, -0.4332205445057222]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.164114631743375, 5.525329016346033, -0.4332205445057222]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_195",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8975712247948386, -0.5547709650415786, -0.21597538975640126]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8975712247948386, -0.5547709650415786, -0.21597538975640126]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_196",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-88.86388096765421, 185.36436097618727, -50.98117847079555]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-88.86388096765421, 185.36436097618727, -50.98117847079555]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_197",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.5079264336698457, 0.6695765888773022, -0.07855117953280272]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5079264336698457, 0.6695765888773022, -0.07855117953280272]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_198",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.242254130513716, -1.2158353351066733, 1.8802776768002605]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.242254130513716, -1.2158353351066733, 1.8802776768002605]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_199",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.4163029666126343, 1.5133106339162103, 0.08202236870619123]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.4163029666126343, 1.5133106339162103, 0.08202236870619123]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_200",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.174758162927985, -20.6009082219107, -1.2801436644649213]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.174758162927985, -20.6009082219107, -1.2801436644649213]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_201",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.30670459103867315, -0.18438873963296765, -0.006145167459651549]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.30670459103867315, -0.18438873963296765, -0.006145167459651549]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_202",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.03216365120773508, -0.0006392505322606332, 1.6106725689565364e-06]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.03216365120773508, -0.0006392505322606332, 1.6106725689565364e-06]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_203",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.19594249469284, 9.810608116668028, 3.0083463027577046]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.19594249469284, 9.810608116668028, 3.0083463027577046]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_204",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[9.902255131014881, 15.85312939309122, 6.6766963910121655]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.902255131014881, 15.85312939309122, 6.6766963910121655]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_205",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.276502659002465, 2.835151975596726, -0.6282944873863545]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.276502659002465, 2.835151975596726, -0.6282944873863545]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_206",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-113.02932925275036, 371.50570200767254, 179.5845785413069]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-113.02932925275036, 371.50570200767254, 179.5845785413069]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_207",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.34429255496753375, -1.2080568736624107, -0.310107907555921]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.34429255496753375, -1.2080568736624107, -0.310107907555921]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_208",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.969154120645069, -0.329357856577825, 2.9717947514489746]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.969154120645069, -0.329357856577825, 2.9717947514489746]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_209",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.913947878619946, 0.1452796496871276, -0.557961970731687]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.913947878619946, 0.1452796496871276, -0.557961970731687]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_210",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-11.942695701047441, 20.04884573233151, 7.222364755660268]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.942695701047441, 20.04884573233151, 7.222364755660268]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_211",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.711971791750012, -2.9386284516193077, -2.4175271314959477]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.711971791750012, -2.9386284516193077, -2.4175271314959477]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_212",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.683359095228727, -5.533671912168639, -4.970489053273389]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.683359095228727, -5.533671912168639, -4.970489053273389]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_213",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[11.548280674867728, 5.004468802818498, 0.04894592463543434]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.548280674867728, 5.004468802818498, 0.04894592463543434]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_214",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.9613887198870685, 1.0630816089504107, 0.09729958025786584]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.9613887198870685, 1.0630816089504107, 0.09729958025786584]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_215",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.6647490046307545, -16.972978399479004, -8.584738393482326]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.6647490046307545, -16.972978399479004, -8.584738393482326]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_216",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.922508759777668, 0.8305216227406951, -0.5314333028135135]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.922508759777668, 0.8305216227406951, -0.5314333028135135]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_217",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[832.7607685833685, 16789.674542742236, 42780.23824643152]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[832.7607685833685, 16789.674542742236, 42780.23824643152]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_218",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.9372813990844049, -0.5871412096373753, -0.02499945289256286]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.9372813990844049, -0.5871412096373753, -0.02499945289256286]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_219",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-22.1096008636716, -942.0535004554342, -24.75554457155851]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-22.1096008636716, -942.0535004554342, -24.75554457155851]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_220",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8541912436410704, -0.3436135057406886, -0.15424467446979606]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8541912436410704, -0.3436135057406886, -0.15424467446979606]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_221",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.10064881741196641, -0.9241073016871242, -0.005113693975264935]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.10064881741196641, -0.9241073016871242, -0.005113693975264935]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_222",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.4947859761786793, -1.8081455804819222, -0.4213150781384208]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4947859761786793, -1.8081455804819222, -0.4213150781384208]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_223",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.3789117166076523, -0.9861027660142525, 0.08722617608299466]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.3789117166076523, -0.9861027660142525, 0.08722617608299466]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_224",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.171906275152173, 1.0515824834368486, 0.05556322722571349]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.171906275152173, 1.0515824834368486, 0.05556322722571349]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_225",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.134763678517629, -1.8775593415736158, -2.1669512716910364]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.134763678517629, -1.8775593415736158, -2.1669512716910364]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_226",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.082796568304634, 9.464099819192478, -3.333459891588073]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.082796568304634, 9.464099819192478, -3.333459891588073]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_227",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.855486108924193, 15.12018774798732, -3.257356531055005]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.855486108924193, 15.12018774798732, -3.257356531055005]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_228",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.0109220268567123, -2.3169777990889697, 0.42693398383159686]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.0109220268567123, -2.3169777990889697, 0.42693398383159686]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_229",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.286137281085388, 5.936177559977369, -0.4520473814129766]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.286137281085388, 5.936177559977369, -0.4520473814129766]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_230",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.106959332108612, 2.7700319895518875, 0.14977431500480642]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.106959332108612, 2.7700319895518875, 0.14977431500480642]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_231",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.138600837867571, -0.9575943924938406, -0.39669728181996416]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.138600837867571, -0.9575943924938406, -0.39669728181996416]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_232",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.43100964375598, 4.55107302902896, 0.047397620159623885]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.43100964375598, 4.55107302902896, 0.047397620159623885]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_233",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-13.410095499369, -26.89924138296134, -2.888795834663032]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-13.410095499369, -26.89924138296134, -2.888795834663032]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_234",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.2558236583673477, 2.0832770288041425, 0.275498691573775]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.2558236583673477, 2.0832770288041425, 0.275498691573775]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_235",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[382.4766720566722, -3.3758291364876656, -5.4149801458325975]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[382.4766720566722, -3.3758291364876656, -5.4149801458325975]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_236",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.84446413091962, 2.12601353249397, 0.3088975099932583]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.84446413091962, 2.12601353249397, 0.3088975099932583]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_237",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-293.7346486418811, -91.27958214119168, -1.9983065484022744]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-293.7346486418811, -91.27958214119168, -1.9983065484022744]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_238",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-14.033115399922478, -47.105545083818214, 6.839920733274146]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-14.033115399922478, -47.105545083818214, 6.839920733274146]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_239",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.966867409061009, -0.02256279781278331, 0.017941142522750406]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.966867409061009, -0.02256279781278331, 0.017941142522750406]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_240",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.2178615022603, -0.5531026232535065, -0.019180266865451507]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.2178615022603, -0.5531026232535065, -0.019180266865451507]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_241",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.121635940991724, -1.3528617944796215, -0.08103513138236346]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.121635940991724, -1.3528617944796215, -0.08103513138236346]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_242",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-77.88906337062079, 781.2442862293475, -105.86007259408595]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-77.88906337062079, 781.2442862293475, -105.86007259408595]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_243",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-16.384882022621817, -5.483673893837484, 2.3339882712910307]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.384882022621817, -5.483673893837484, 2.3339882712910307]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_244",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[207.6202136356064, 150.99535641190627, -392.11398178873776]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[207.6202136356064, 150.99535641190627, -392.11398178873776]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_245",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.3340521564646282, -2.304571805597958, 0.13465261998751316]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3340521564646282, -2.304571805597958, 0.13465261998751316]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_246",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.4324375726484029, -0.4716148515737232, 0.0344488412499954]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4324375726484029, -0.4716148515737232, 0.0344488412499954]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_247",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.7392827274076839, 0.28434105638726254, 0.0673399674673098]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.7392827274076839, 0.28434105638726254, 0.0673399674673098]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_248",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7595372140031048, -0.11771621621658485, 0.021526334998334704]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7595372140031048, -0.11771621621658485, 0.021526334998334704]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_249",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.2593822163480856, -0.8228645212981534, -0.3502998012002259]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2593822163480856, -0.8228645212981534, -0.3502998012002259]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_250",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.76464234449754, -151.62844971980888, 230.58279285884066]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.76464234449754, -151.62844971980888, 230.58279285884066]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_251",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-45.68257691515057, -257.7939964076237, -330.5885587467832]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-45.68257691515057, -257.7939964076237, -330.5885587467832]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_252",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.10231967176694, 6.14012893126953, -1.7825272613120062]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.10231967176694, 6.14012893126953, -1.7825272613120062]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_253",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-152.21492131333412, -9586.662540770627, 394.23457852965805]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-152.21492131333412, -9586.662540770627, 394.23457852965805]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_254",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.96503329238814, -24.292408570341166, -0.25467062514268973]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.96503329238814, -24.292408570341166, -0.25467062514268973]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_255",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.1399375912061545, 0.3252002337419473, -0.025426928533303205]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1399375912061545, 0.3252002337419473, -0.025426928533303205]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_256",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.147773752039747, -7.528333855515381, 1.8329099285287431]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.147773752039747, -7.528333855515381, 1.8329099285287431]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_257",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.0605210498302466, 0.30507006212721494, 0.01238961709096373]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0605210498302466, 0.30507006212721494, 0.01238961709096373]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_258",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.217686045233874, -0.030557824934174416, -0.10465309805590907]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.217686045233874, -0.030557824934174416, -0.10465309805590907]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_259",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.939211336915263, 1.0313418754371795, -0.16107740764093953]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.939211336915263, 1.0313418754371795, -0.16107740764093953]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_260",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[12.665950115842392, 7.66412858707737, -0.8865289979153849]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.665950115842392, 7.66412858707737, -0.8865289979153849]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_261",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.2799094648923532, 0.015889430558431006, 0.00023837064561265045]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2799094648923532, 0.015889430558431006, 0.00023837064561265045]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_262",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-12.299113042893048, -138.93000678786115, 55.826008125050826]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.299113042893048, -138.93000678786115, 55.826008125050826]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_263",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.967923521176143, 13.224341838303998, -2.019866996792207]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.967923521176143, 13.224341838303998, -2.019866996792207]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_264",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.947245768620471, 6.771609537335651, 9.091295789874914]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.947245768620471, 6.771609537335651, 9.091295789874914]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_265",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.109210415165511, 2.28127053707709, -0.4691272655818626]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.109210415165511, 2.28127053707709, -0.4691272655818626]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_266",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-964.249320860191, -169.34192058296335, 2606.4298622955275]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-964.249320860191, -169.34192058296335, 2606.4298622955275]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_267",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.598566990058141, -3.190816690242018, -0.5111527729907371]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.598566990058141, -3.190816690242018, -0.5111527729907371]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_268",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[17.965420862536828, -17.468743830713546, 3.9892565432211304]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[17.965420862536828, -17.468743830713546, 3.9892565432211304]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_269",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[447.5351411370114, -5835.449762330374, -2245.6924455555127]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[447.5351411370114, -5835.449762330374, -2245.6924455555127]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_270",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-78.56276321386589, -259.96154539600246, 7.995622221154591]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-78.56276321386589, -259.96154539600246, 7.995622221154591]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_271",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.32699572109563146, -1.4087283500592016, -0.6902426228849721]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.32699572109563146, -1.4087283500592016, -0.6902426228849721]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_272",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[46.791719134051995, -16.549120206255985, -2.0144344285198112]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[46.791719134051995, -16.549120206255985, -2.0144344285198112]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_273",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[22.23260155078171, -3.2623062099057574, -0.19524548503938224]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[22.23260155078171, -3.2623062099057574, -0.19524548503938224]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_274",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-635.1135905981764, 44340.14138066792, 136466.64316841564]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-635.1135905981764, 44340.14138066792, 136466.64316841564]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_275",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-188.14024977210198, 256.99027451190904, -84.10634437125402]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-188.14024977210198, 256.99027451190904, -84.10634437125402]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_276",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[29.868655860866532, 157.2508980013892, 225.83190600024744]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[29.868655860866532, 157.2508980013892, 225.83190600024744]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_277",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[16.859993785010605, 3.797404090638361, -9.41098012975795]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[16.859993785010605, 3.797404090638361, -9.41098012975795]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_278",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-12.772603066903468, 2.3443239947495202, -0.09982807838487988]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.772603066903468, 2.3443239947495202, -0.09982807838487988]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_279",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.779629829823234, 7.359146297023901, 5.015405598210328]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.779629829823234, 7.359146297023901, 5.015405598210328]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_280",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.2606222851069555, 6.597507118209487, -0.47304548699254556]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.2606222851069555, 6.597507118209487, -0.47304548699254556]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_281",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.3094551060682755, 0.34460618363606765, -0.012518294750753656]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3094551060682755, 0.34460618363606765, -0.012518294750753656]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_282",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.0851311810355286, 0.12174246256752497, 0.09909288394770639]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0851311810355286, 0.12174246256752497, 0.09909288394770639]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_283",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.2537010511414017, -2.0412526821921126, -1.3642765514309283]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.2537010511414017, -2.0412526821921126, -1.3642765514309283]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_284",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.8487792010095436, -0.2024433052710964, -0.023234039701850243]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.8487792010095436, -0.2024433052710964, -0.023234039701850243]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_285",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[172.16431311945047, 310.91846544245726, -10.236879117411625]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[172.16431311945047, 310.91846544245726, -10.236879117411625]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_286",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[18.77798590557706, -719.3901092631836, 3595.307187539868]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[18.77798590557706, -719.3901092631836, 3595.307187539868]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_287",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-762.1271117982295, -708.5111160237093, 156.1999053180652]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-762.1271117982295, -708.5111160237093, 156.1999053180652]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_288",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.48194018918032216, 0.024053927210708377, 0.00890109241806054]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.48194018918032216, 0.024053927210708377, 0.00890109241806054]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_289",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.9831523277057714, 0.9550171917738535, -0.1268558759993093]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.9831523277057714, 0.9550171917738535, -0.1268558759993093]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_290",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-10.203887973906273, -9.330499474510024, -1.0640848329576593]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-10.203887973906273, -9.330499474510024, -1.0640848329576593]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_291",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.6571880756081954, 0.16905410616406136, -0.8934451705404131]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.6571880756081954, 0.16905410616406136, -0.8934451705404131]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_292",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-8.848991117268456, -14.78947097928203, 9.904830773894183]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.848991117268456, -14.78947097928203, 9.904830773894183]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_293",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5205949834625518, -0.0831898208221515, -0.051080801343993926]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5205949834625518, -0.0831898208221515, -0.051080801343993926]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_294",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-17.470564433750074, 6.545885301742612, 3.0563583470182802]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-17.470564433750074, 6.545885301742612, 3.0563583470182802]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_295",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.2375134232980034, -2.3694074061459363, -0.6695049810256236]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2375134232980034, -2.3694074061459363, -0.6695049810256236]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_296",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.394410149929167, -2.930797145383805, 0.3746743411866351]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.394410149929167, -2.930797145383805, 0.3746743411866351]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_297",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6673138409197645, -0.4884597326260184, -0.040784630097470416]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6673138409197645, -0.4884597326260184, -0.040784630097470416]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_298",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[37.596296717259555, -28.73208126212461, -66.23152952136594]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[37.596296717259555, -28.73208126212461, -66.23152952136594]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_299",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-36.40546103547719, 86.49559806375417, 28.536945570699316]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-36.40546103547719, 86.49559806375417, 28.536945570699316]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_300",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-19.341545813441265, -100.0661267285887, -88.03249235385725]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-19.341545813441265, -100.0661267285887, -88.03249235385725]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_301",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.01878410546972542, -0.20622030327959082, 0.02003349344370126]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.01878410546972542, -0.20622030327959082, 0.02003349344370126]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_302",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.8357059849051143, 0.35608224924659926, 0.004963148316025519]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.8357059849051143, 0.35608224924659926, 0.004963148316025519]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_303",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[60.53855229568498, 97.30107680559925, -198.09141812132773]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[60.53855229568498, 97.30107680559925, -198.09141812132773]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_304",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.51775691028115, 0.08634070014935838, 0.00466815072858095]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.51775691028115, 0.08634070014935838, 0.00466815072858095]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_305",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-16.26425162983024, 66.57124480618748, -12.366832419154273]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.26425162983024, 66.57124480618748, -12.366832419154273]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_306",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[13.817787985407016, 54.61508225355732, 49.93115136118882]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[13.817787985407016, 54.61508225355732, 49.93115136118882]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_307",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-37.481509399502755, -846.7942000750994, 34.983116153372116]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-37.481509399502755, -846.7942000750994, 34.983116153372116]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_308",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.450839142676629, -93.77677352501246, -175.75781165445463]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.450839142676629, -93.77677352501246, -175.75781165445463]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_309",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-24.468227593767608, 42.84951153553432, -18.989950566371853]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-24.468227593767608, 42.84951153553432, -18.989950566371853]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_310",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.14107491895488, 0.8832844783929601, -0.4312600800303829]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.14107491895488, 0.8832844783929601, -0.4312600800303829]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_311",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.9575004065796888, -1.8163985361063275, -0.29335620902252574]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9575004065796888, -1.8163985361063275, -0.29335620902252574]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_312",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.0229574167681723, 0.9506455359314189, -0.10680220780052221]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.0229574167681723, 0.9506455359314189, -0.10680220780052221]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_313",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.03054283645228166, -0.021394226707651672, -0.0008986148231523624]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.03054283645228166, -0.021394226707651672, -0.0008986148231523624]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_314",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-187.77464254115566, 120.47166038598779, 2261.2684802171125]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-187.77464254115566, 120.47166038598779, 2261.2684802171125]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_315",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.705675043121787, 10.151777167243257, -4.909159557881052]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.705675043121787, 10.151777167243257, -4.909159557881052]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_316",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.6683212543933696, -23.97816256238232, -5.318048277764245]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.6683212543933696, -23.97816256238232, -5.318048277764245]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_317",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-8.006414229150288, 0.10881759466822771, 2.5167168935458823]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.006414229150288, 0.10881759466822771, 2.5167168935458823]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_318",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.893244802140067, -2.77015829477559, -0.4452049237651044]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.893244802140067, -2.77015829477559, -0.4452049237651044]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_319",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.29855755057934563, -1.0545751133125905, 0.06341554382622908]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.29855755057934563, -1.0545751133125905, 0.06341554382622908]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_320",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.79034359617292, -2.291682544048351, -0.022414163888049204]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.79034359617292, -2.291682544048351, -0.022414163888049204]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_321",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7420019294190349, 0.17749052021350306, -0.013480753199896875]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7420019294190349, 0.17749052021350306, -0.013480753199896875]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_322",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.0424976554335323, 0.33744777414025273, 0.11673168145999217]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.0424976554335323, 0.33744777414025273, 0.11673168145999217]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_323",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8091793944947082, 0.15782952166720013, 0.0013802330698444842]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8091793944947082, 0.15782952166720013, 0.0013802330698444842]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_324",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.494693705805162, 7.641293850065961, 1.3568149461304748]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.494693705805162, 7.641293850065961, 1.3568149461304748]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_325",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.02734854391950825, -0.39719671445865107, 0.08029304968072203]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.02734854391950825, -0.39719671445865107, 0.08029304968072203]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_326",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[11.47093259082488, 31.869785077516003, -0.6575174967223965]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.47093259082488, 31.869785077516003, -0.6575174967223965]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_327",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.722554641862738, -6.004034208127781, -1.8875033802103083]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.722554641862738, -6.004034208127781, -1.8875033802103083]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_328",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.2548914495770078, -4.623915343510744, 3.7569023940953197]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2548914495770078, -4.623915343510744, 3.7569023940953197]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_329",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-14.694597989899018, -3.8407072689085338, 0.41419491487959365]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-14.694597989899018, -3.8407072689085338, 0.41419491487959365]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_330",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[569.623468843074, -685.9079868532298, 72.82649866500589]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[569.623468843074, -685.9079868532298, 72.82649866500589]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_331",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[9.226141309369487, 4.323063842263876, -1.0074393945231974]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.226141309369487, 4.323063842263876, -1.0074393945231974]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_332",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[67.02596279724439, -96.23497746924426, 33.11602820184243]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[67.02596279724439, -96.23497746924426, 33.11602820184243]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_333",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.109084562875645, -0.9133841487498477, 0.02831150551133492]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.109084562875645, -0.9133841487498477, 0.02831150551133492]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_334",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.054389444111638, 2.0251103176476777, 0.1406870624814699]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.054389444111638, 2.0251103176476777, 0.1406870624814699]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_335",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.5361717387605445, -0.2887013942693074, 0.012830189509365462]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5361717387605445, -0.2887013942693074, 0.012830189509365462]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_336",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[343.8366519805716, 1336.2351403973107, -871.540642857491]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[343.8366519805716, 1336.2351403973107, -871.540642857491]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_337",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6056758537213001, 0.12147874935267874, 0.00805874469482192]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6056758537213001, 0.12147874935267874, 0.00805874469482192]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_338",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[13.466811618286883, 9.477993957556478, 1.710388403437413]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[13.466811618286883, 9.477993957556478, 1.710388403437413]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_339",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.9630342220222725, -0.3584430593940149, -2.095942705162884]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.9630342220222725, -0.3584430593940149, -2.095942705162884]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_340",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[9.658199613632348, -4.724923251611862, 0.5128800190349823]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.658199613632348, -4.724923251611862, 0.5128800190349823]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_341",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.784345102730039, 0.10128666134499664, 0.003605655668603503]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.784345102730039, 0.10128666134499664, 0.003605655668603503]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_342",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-14.484415632501902, -13.464937449410183, 6.093030780091393]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-14.484415632501902, -13.464937449410183, 6.093030780091393]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_343",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.1835647625372105, -1.3001790637706443, -0.017228950504171486]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1835647625372105, -1.3001790637706443, -0.017228950504171486]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_344",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.307711888954391, -2.979027771322795, 0.41497247306560103]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.307711888954391, -2.979027771322795, 0.41497247306560103]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_345",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.3480545154814491, 0.017039623083023113, -0.0001957324365083714]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3480545154814491, 0.017039623083023113, -0.0001957324365083714]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_346",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.039583109042676, -1.3430374079165588, 0.44545601842001886]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.039583109042676, -1.3430374079165588, 0.44545601842001886]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_347",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.1465037130349813, 2.4909076208792404, 0.2276452584633224]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.1465037130349813, 2.4909076208792404, 0.2276452584633224]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_348",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-31.98023473546204, 4.616798715573897, 3.5251367261664184]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-31.98023473546204, 4.616798715573897, 3.5251367261664184]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_349",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-18.9232712076768, 32.75295146226823, -14.816050659934374]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-18.9232712076768, 32.75295146226823, -14.816050659934374]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_350",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.716233228637945, 23.499455123173426, -1.9673641420612324]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.716233228637945, 23.499455123173426, -1.9673641420612324]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_351",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.302758852599062, 0.8484048329612829, -0.015333884580478845]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.302758852599062, 0.8484048329612829, -0.015333884580478845]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_352",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[199.7850416054917, -14.693400395569267, -0.2982399544902633]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[199.7850416054917, -14.693400395569267, -0.2982399544902633]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_353",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-8.737651650973365, 7.133632180808245, 28.881593055667263]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.737651650973365, 7.133632180808245, 28.881593055667263]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_354",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-65.74676128767169, -38.421854755412674, -1.6913325256889549]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-65.74676128767169, -38.421854755412674, -1.6913325256889549]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_355",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.319416963193352, -84.87273970028994, 1.135249233290934]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.319416963193352, -84.87273970028994, 1.135249233290934]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_356",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.427128659213805, -1.7244862819091762, -1.2437158949135312]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.427128659213805, -1.7244862819091762, -1.2437158949135312]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_357",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[31.345145653379046, -204.63456671313074, -29.57773007627761]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[31.345145653379046, -204.63456671313074, -29.57773007627761]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_358",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-18.82964095534289, -50.55091910326071, 18.34185192142317]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-18.82964095534289, -50.55091910326071, 18.34185192142317]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_359",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.296008469144647, -28.9364793349259, -0.8772185409688077]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.296008469144647, -28.9364793349259, -0.8772185409688077]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_360",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.358739141621243, 0.07321511764794171, -0.04068050531828587]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.358739141621243, 0.07321511764794171, -0.04068050531828587]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_361",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.157962971783671, -2.789543674181015, 2.12125405431872]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.157962971783671, -2.789543674181015, 2.12125405431872]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_362",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.779421011718749, 1.488670765559207, 0.08590252814076707]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.779421011718749, 1.488670765559207, 0.08590252814076707]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_363",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.8127744987666907, 0.07598486776322928, 0.00230147239159638]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8127744987666907, 0.07598486776322928, 0.00230147239159638]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_364",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.769223070980841, -0.06913766946176314, -2.6207478797147084]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.769223070980841, -0.06913766946176314, -2.6207478797147084]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_365",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5677813916620116, -2.8345450823116054, -0.7358002337429567]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5677813916620116, -2.8345450823116054, -0.7358002337429567]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_366",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.8565588346687936, 1.0384642486306197, -0.17992421211795404]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8565588346687936, 1.0384642486306197, -0.17992421211795404]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_367",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-53.51805552301722, -707.137192894691, -132.15983347710187]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-53.51805552301722, -707.137192894691, -132.15983347710187]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_368",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.895312835959188, -9.805059215295637, 1.9491101713648784]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.895312835959188, -9.805059215295637, 1.9491101713648784]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_369",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-54.53861931206283, -127.83770327132339, -4.958373151397707]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-54.53861931206283, -127.83770327132339, -4.958373151397707]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_370",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8246250757033535, -1.6181415111290267, -0.6927426625735628]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8246250757033535, -1.6181415111290267, -0.6927426625735628]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_371",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.2605441853284087, -0.1115856614630357, 0.028909555645291726]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2605441853284087, -0.1115856614630357, 0.028909555645291726]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_372",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.541999025001622, -1.7022154513796532, -0.17649311439764184]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.541999025001622, -1.7022154513796532, -0.17649311439764184]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_373",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-39.42568446028184, 12.439887530049095, -0.46935121679786146]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-39.42568446028184, 12.439887530049095, -0.46935121679786146]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_374",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.8341886993883174, 0.6870225681453156, 0.01903562240892041]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8341886993883174, 0.6870225681453156, 0.01903562240892041]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_375",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.932001478251368, 3.024831012490382, 0.03591324447378812]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.932001478251368, 3.024831012490382, 0.03591324447378812]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_376",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-41.522741177891575, 35.47000514101839, 18.679350408639728]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-41.522741177891575, 35.47000514101839, 18.679350408639728]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_377",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-12.48676988983148, -8.695868497318287, 10.228296721289617]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.48676988983148, -8.695868497318287, 10.228296721289617]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_378",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[20.760241327076415, 108.35297963173534, 6.955356881895959]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[20.760241327076415, 108.35297963173534, 6.955356881895959]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_379",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[30.376182524126765, -1224.823514621908, -50.37340634186872]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[30.376182524126765, -1224.823514621908, -50.37340634186872]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_380",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.0435171350021126, 0.25632079150238013, -8.256494397091233e-05]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0435171350021126, 0.25632079150238013, -8.256494397091233e-05]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_381",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.3725312754871672, 0.2968239600591172, 0.01521229726928278]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3725312754871672, 0.2968239600591172, 0.01521229726928278]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_382",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-14.842070581246452, 21.022425394013943, 13.048858752339784]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-14.842070581246452, 21.022425394013943, 13.048858752339784]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_383",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-715.5651484974794, 19111.132422854622, 252245.94657554032]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-715.5651484974794, 19111.132422854622, 252245.94657554032]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_384",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.149279328653744, 16.992576895312588, 5.844211744789153]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.149279328653744, 16.992576895312588, 5.844211744789153]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_385",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.1232827439815654, 0.49780812571214705, -0.0317704393385343]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.1232827439815654, 0.49780812571214705, -0.0317704393385343]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_386",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.46462665633643796, -0.592575766674571, 0.058208365939586344]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.46462665633643796, -0.592575766674571, 0.058208365939586344]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_387",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.620492543732863, 0.7301816122008902, 0.02825824242429914]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.620492543732863, 0.7301816122008902, 0.02825824242429914]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_388",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[27.331643743050677, 32.997548836556945, 8.980020114313524]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[27.331643743050677, 32.997548836556945, 8.980020114313524]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_389",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[156.4006171486138, -6361.998681161842, 37714.194009233564]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[156.4006171486138, -6361.998681161842, 37714.194009233564]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_390",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.095854059349593, 0.2655307632463946, 0.7906330227630987]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.095854059349593, 0.2655307632463946, 0.7906330227630987]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_391",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.7035800969459167, -30.496393318710748, -2.881695035968242]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.7035800969459167, -30.496393318710748, -2.881695035968242]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_392",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-8.109087752064331, 6.228079374483781, -1.2552307894184092]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.109087752064331, 6.228079374483781, -1.2552307894184092]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_393",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[785.7181574257207, -1536.2937848607946, -4084.2614577568797]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[785.7181574257207, -1536.2937848607946, -4084.2614577568797]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_394",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-382.38544969801046, -7823.51488392577, -8700.661580339794]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-382.38544969801046, -7823.51488392577, -8700.661580339794]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_395",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[25.109110227189646, 148.21579608442113, 99.14181168163262]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[25.109110227189646, 148.21579608442113, 99.14181168163262]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_396",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.46522829095319684, -8.524132245956874, 0.39231850736621054]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.46522829095319684, -8.524132245956874, 0.39231850736621054]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_397",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[10.512424200099197, 11.522325167685917, -1.2560830084951922]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.512424200099197, 11.522325167685917, -1.2560830084951922]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_398",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[31.19615227161139, -281.68930467272077, 230.32859125408305]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[31.19615227161139, -281.68930467272077, 230.32859125408305]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_399",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-80.91447583941549, -117.11024009425857, -1.1193399078579283]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-80.91447583941549, -117.11024009425857, -1.1193399078579283]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_400",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.9900066810482544, 0.835014010732516, 0.025798192016107856]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.9900066810482544, 0.835014010732516, 0.025798192016107856]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_401",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.6665383199898094, -10.725778660167748, 5.116399731910812]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.6665383199898094, -10.725778660167748, 5.116399731910812]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_402",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.9884603007330197, 0.7328116479228652, 0.06528721521886131]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.9884603007330197, 0.7328116479228652, 0.06528721521886131]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_403",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[46.13752979913075, -5.785568914477565, -71.28377708052363]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[46.13752979913075, -5.785568914477565, -71.28377708052363]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_404",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.09941678168386292, -1.960730216623059, -0.9364615149538967]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.09941678168386292, -1.960730216623059, -0.9364615149538967]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_405",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5579691162404439, 0.10177720928215522, -0.006095061599198148]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5579691162404439, 0.10177720928215522, -0.006095061599198148]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_406",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[17.30035209888823, 29.672833159709562, -39.951517052864006]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[17.30035209888823, 29.672833159709562, -39.951517052864006]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_407",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.169275442348809, -1.004637413930832, -0.06491738543362933]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.169275442348809, -1.004637413930832, -0.06491738543362933]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_408",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.8041311454478564, -1.6130431942233976, -2.1456464992135498]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8041311454478564, -1.6130431942233976, -2.1456464992135498]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_409",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-44.530025283807824, -3.1214875940723594, 8.709811266464074]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-44.530025283807824, -3.1214875940723594, 8.709811266464074]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_410",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[15.96294755331018, -4.156054021898996, 0.26399300969607964]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[15.96294755331018, -4.156054021898996, 0.26399300969607964]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_411",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.862903470252146, 0.7517332870707415, -0.13145161123946503]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.862903470252146, 0.7517332870707415, -0.13145161123946503]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_412",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-8.111653165250168, -897.962819012142, -1190.306554642346]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.111653165250168, -897.962819012142, -1190.306554642346]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_413",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[27.504501353246823, 9.73014804527043, 0.7310012962272829]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[27.504501353246823, 9.73014804527043, 0.7310012962272829]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_414",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.8030190374753623, 4.680347593710453, 1.8771545612582763]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.8030190374753623, 4.680347593710453, 1.8771545612582763]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_415",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.7954848732937974, 2.5111490592392927, -0.717303738349385]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.7954848732937974, 2.5111490592392927, -0.717303738349385]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_416",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5560088969437096, -1.0169137627531932, -0.5782529248719838]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5560088969437096, -1.0169137627531932, -0.5782529248719838]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_417",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.862762577514026, 17.590800905167924, -0.6137280401644569]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.862762577514026, 17.590800905167924, -0.6137280401644569]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_418",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.44431275985760826, -19.79581571867921, 5.013003593764863]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.44431275985760826, -19.79581571867921, 5.013003593764863]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_419",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.0680967490036135, -0.232833674845802, -0.004805772148184971]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0680967490036135, -0.232833674845802, -0.004805772148184971]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_420",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-14.15113388306512, 66.70232919314152, -104.72281944275524]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-14.15113388306512, 66.70232919314152, -104.72281944275524]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_421",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.0882644401539814, 0.34985000671437233, 0.02784322939097686]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.0882644401539814, 0.34985000671437233, 0.02784322939097686]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_422",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[64.42446855228518, 781.6526071757061, 1723.2100969865664]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[64.42446855228518, 781.6526071757061, 1723.2100969865664]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_423",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-19.85289873246677, 93.31608013227921, -8.203192995742691]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-19.85289873246677, 93.31608013227921, -8.203192995742691]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_424",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-38.11437944152403, -199.5174334511954, -2.9909466532289626]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-38.11437944152403, -199.5174334511954, -2.9909466532289626]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_425",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8263789895262389, -0.7241250971735324, -0.29328967267863865]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8263789895262389, -0.7241250971735324, -0.29328967267863865]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_426",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.10852374877796805, -0.18484339748411727, -0.011247045183502275]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.10852374877796805, -0.18484339748411727, -0.011247045183502275]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_427",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.078772807356941, 12.201587624973639, 6.186063347936063]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.078772807356941, 12.201587624973639, 6.186063347936063]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_428",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.5450284987149778, 0.2899286018441335, -0.016203171363659417]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5450284987149778, 0.2899286018441335, -0.016203171363659417]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_429",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.685362471335139, 0.0985649720255451, -0.0017977257378926379]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.685362471335139, 0.0985649720255451, -0.0017977257378926379]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_430",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[61.618428365255056, 920.5087773023237, -477.9656168029139]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[61.618428365255056, 920.5087773023237, -477.9656168029139]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_431",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.692805952706963, -1.5683374513517294, -0.2667593629096956]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.692805952706963, -1.5683374513517294, -0.2667593629096956]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_432",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-243.0053155107075, 154.575156696382, -19.01550826679322]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-243.0053155107075, 154.575156696382, -19.01550826679322]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_433",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-28.315998858641667, 10.926847726539242, -0.24560080319627464]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-28.315998858641667, 10.926847726539242, -0.24560080319627464]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_434",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-196.08704181710178, -481.6484089734837, -242.9981864938423]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-196.08704181710178, -481.6484089734837, -242.9981864938423]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_435",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[13.614064272460965, -1173.8650890485467, 5377.989618304075]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[13.614064272460965, -1173.8650890485467, 5377.989618304075]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_436",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.8605958795433635, 3.3169741892766744, 0.6007691734843038]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.8605958795433635, 3.3169741892766744, 0.6007691734843038]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_437",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.4119554236867495, -8.045576329440337, -2.006696104946262]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.4119554236867495, -8.045576329440337, -2.006696104946262]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_438",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-15.291461861543969, 6.200386182947509, 1.0238015444642294]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-15.291461861543969, 6.200386182947509, 1.0238015444642294]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_439",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-22.73350192078213, 6.228669275580421, 8.176106347419516]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-22.73350192078213, 6.228669275580421, 8.176106347419516]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_440",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[30.77838255025247, 60.46407322060695, -364.2088893115673]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[30.77838255025247, 60.46407322060695, -364.2088893115673]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_441",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[20.509361695694544, -18.70554745270023, 4.140810275018195]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[20.509361695694544, -18.70554745270023, 4.140810275018195]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_442",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.8842750345983714, 2.3890219147458938, 0.5551758791194605]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.8842750345983714, 2.3890219147458938, 0.5551758791194605]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_443",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.4243943535642335, -0.8682525194427267, -0.1705080253683933]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4243943535642335, -0.8682525194427267, -0.1705080253683933]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_444",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.0373510659780214, 1.0656261602944324, 0.16612122649352706]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.0373510659780214, 1.0656261602944324, 0.16612122649352706]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_445",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.9499733071747953, -1.720369589409719, 0.1507498667756262]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.9499733071747953, -1.720369589409719, 0.1507498667756262]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_446",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[451.9964538874449, -781.1047855242329, -86.58782167677074]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[451.9964538874449, -781.1047855242329, -86.58782167677074]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_447",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.815052089645617, 5.916928580855889, 1.1832007099887807]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.815052089645617, 5.916928580855889, 1.1832007099887807]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_448",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-86.93364529583229, 127.29583746645521, -13.839367155495879]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-86.93364529583229, 127.29583746645521, -13.839367155495879]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_449",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-583.9982334036185, 568.6035653816932, -112.48338343530133]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-583.9982334036185, 568.6035653816932, -112.48338343530133]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_450",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.564497746317199, 15.176502087027156, 8.581321564392958]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.564497746317199, 15.176502087027156, 8.581321564392958]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_451",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-50.981511625541664, -241.05319062966186, -65.1200472038763]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-50.981511625541664, -241.05319062966186, -65.1200472038763]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_452",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[299.19683523081545, -191.79932467170494, 13.312104469240436]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[299.19683523081545, -191.79932467170494, 13.312104469240436]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_453",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[420.6285568627827, 3342.6994980956806, -11892.440173877367]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[420.6285568627827, 3342.6994980956806, -11892.440173877367]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_454",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[97.94884903246131, 2326.7417470941346, -1822.2465154571646]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[97.94884903246131, 2326.7417470941346, -1822.2465154571646]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_455",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[19.264055950889595, -0.6941582621767974, -5.659870832890603]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[19.264055950889595, -0.6941582621767974, -5.659870832890603]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_456",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-24.352992277932028, 81.6423788180687, 35.01088804951485]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-24.352992277932028, 81.6423788180687, 35.01088804951485]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_457",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[12.395530700054227, 22.067472348414178, -10.687558620201186]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.395530700054227, 22.067472348414178, -10.687558620201186]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_458",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.18414072503745915, -0.01001637415787442, 0.0010308859621653223]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.18414072503745915, -0.01001637415787442, 0.0010308859621653223]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_459",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.8273685514443407, 4.082580181251517, 0.8715525489660151]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.8273685514443407, 4.082580181251517, 0.8715525489660151]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_460",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[14.7562238741422, 2.320474075284836, -0.03308867867960159]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[14.7562238741422, 2.320474075284836, -0.03308867867960159]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_461",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.8115875522495903, -3.8326630926382035, 9.062988212562093]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.8115875522495903, -3.8326630926382035, 9.062988212562093]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_462",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.775278444733531, -20.280006244894516, -4.4797144682222685]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.775278444733531, -20.280006244894516, -4.4797144682222685]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_463",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.12085769684548, 1.3763919934113589, 0.16253397858349455]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.12085769684548, 1.3763919934113589, 0.16253397858349455]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_464",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.327281202846263, -16.857769474829524, 7.294904808217428]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.327281202846263, -16.857769474829524, 7.294904808217428]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_465",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.780168660753245, -2.4263751114218635, 0.10796871881473558]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.780168660753245, -2.4263751114218635, 0.10796871881473558]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_466",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.3100141450215315, 0.541951518806502, -0.02521670984445784]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.3100141450215315, 0.541951518806502, -0.02521670984445784]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_467",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.634882513246476, -13.452298255274155, 2.549295683041694]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.634882513246476, -13.452298255274155, 2.549295683041694]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_468",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.07989636848565684, -3.3542379537831124, 1.5465281291398612]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.07989636848565684, -3.3542379537831124, 1.5465281291398612]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_469",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.457050641732091, 6.278512812858417, 1.416310644027146]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.457050641732091, 6.278512812858417, 1.416310644027146]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_470",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[40.22505531857584, 251.63188080325958, -33.91927713996574]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[40.22505531857584, 251.63188080325958, -33.91927713996574]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_471",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.1119334355558212, 1.9548747998004743, 0.0940802102746689]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.1119334355558212, 1.9548747998004743, 0.0940802102746689]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_472",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.432027395588149, -76.23892796223664, -32.11111164617925]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.432027395588149, -76.23892796223664, -32.11111164617925]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_473",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.177266744778129, -2.748056199163167, -3.1735727256326056]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.177266744778129, -2.748056199163167, -3.1735727256326056]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_474",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.109130581249752, 0.2634410932282338, -0.0033751298817391796]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.109130581249752, 0.2634410932282338, -0.0033751298817391796]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_475",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.05097654153508, 8.921296165522314, 1.923787403715262]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.05097654153508, 8.921296165522314, 1.923787403715262]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_476",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.8486775203198915, 3.4860652489512125, 0.339468605174738]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.8486775203198915, 3.4860652489512125, 0.339468605174738]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_477",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-110.39803155752782, 1010.0621089143984, -131.36019883386433]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-110.39803155752782, 1010.0621089143984, -131.36019883386433]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_478",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.490019500888065, 12.855382782880664, -4.719015925665858]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.490019500888065, 12.855382782880664, -4.719015925665858]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_479",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-109.56513676400179, 114.9789278764865, -15.617934303195886]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-109.56513676400179, 114.9789278764865, -15.617934303195886]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_480",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[32.72769610528248, -4334.978838289422, -1729.6744253313711]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[32.72769610528248, -4334.978838289422, -1729.6744253313711]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_481",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.239272280756747, -0.24599944095135587, 0.00651911192311982]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.239272280756747, -0.24599944095135587, 0.00651911192311982]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_482",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[12.532453018121187, -2.1259551831281867, -0.2756837699628022]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.532453018121187, -2.1259551831281867, -0.2756837699628022]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_483",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[22.06682355925565, -214.53491899846233, -3431.622138992644]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[22.06682355925565, -214.53491899846233, -3431.622138992644]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_484",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3528262374475057, -0.3241468105708058, 0.03495032906065726]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3528262374475057, -0.3241468105708058, 0.03495032906065726]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_485",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[69.2239824786406, -20.934549522255107, -2.6567126110834907]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[69.2239824786406, -20.934549522255107, -2.6567126110834907]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_486",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[9.093276761977565, -115.02585632627574, 185.67923566998806]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.093276761977565, -115.02585632627574, 185.67923566998806]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_487",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-61.59174876800475, -993.1503711190277, -520.5425474708985]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-61.59174876800475, -993.1503711190277, -520.5425474708985]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_488",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.8234593233913192, -0.05296565621095556, -0.03942909378042695]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8234593233913192, -0.05296565621095556, -0.03942909378042695]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_489",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.9850756954073658, 0.18287008615460928, -0.030697269552405083]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9850756954073658, 0.18287008615460928, -0.030697269552405083]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_490",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.582859183626194, -0.6569858903370225, -5.315380647655568]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.582859183626194, -0.6569858903370225, -5.315380647655568]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_491",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-203.3320275868068, 644.7703132667326, -423.8244980532356]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-203.3320275868068, 644.7703132667326, -423.8244980532356]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_492",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.7192671244478275, 5.101631039797832, 3.577694168399716]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.7192671244478275, 5.101631039797832, 3.577694168399716]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_493",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-93.1592410742044, -120.12667768299724, -19.75590698911568]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-93.1592410742044, -120.12667768299724, -19.75590698911568]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_494",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.406629824333421, -0.6714166103363652, -1.0800529417121325]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.406629824333421, -0.6714166103363652, -1.0800529417121325]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_495",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[25.69178333450797, -1.6658254763602374, -29.299890845496208]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[25.69178333450797, -1.6658254763602374, -29.299890845496208]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_496",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.5858277999979378, -13.189210010433435, -6.636823516398201]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.5858277999979378, -13.189210010433435, -6.636823516398201]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_497",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.5811294013765167, -11.487601204727644, 3.127991922051991]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.5811294013765167, -11.487601204727644, 3.127991922051991]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_498",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[26.640397340446558, 43.36915145985569, 14.850679199431687]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[26.640397340446558, 43.36915145985569, 14.850679199431687]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_499",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.178461962638961, 1.1325089590382562, 0.05900164856375443]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.178461962638961, 1.1325089590382562, 0.05900164856375443]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_500",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[16.881197101810656, 37.559622479565945, -287.1911394803518]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[16.881197101810656, 37.559622479565945, -287.1911394803518]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_501",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.2386006159616096, 0.4746581259171913, -0.05302333923798969]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2386006159616096, 0.4746581259171913, -0.05302333923798969]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_502",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[13.028553520223547, 32.22289531003671, -0.5489332020350196]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[13.028553520223547, 32.22289531003671, -0.5489332020350196]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_503",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.708881701946967, 0.5616482496380335, 0.07566850974153351]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.708881701946967, 0.5616482496380335, 0.07566850974153351]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_504",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-176.1075152793479, -134.92987266934676, 52.2708343210654]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-176.1075152793479, -134.92987266934676, 52.2708343210654]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_505",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-42.857889623046944, 80.65843531337646, 360.65878757559926]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-42.857889623046944, 80.65843531337646, 360.65878757559926]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_506",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.439674856266736, 5.990714749245781, 0.6687851829927552]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.439674856266736, 5.990714749245781, 0.6687851829927552]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_507",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[64.69451128307105, 63.98882148449816, 8.930173746155901]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[64.69451128307105, 63.98882148449816, 8.930173746155901]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_508",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-395.4208767462111, 3224.98905010906, 6447.313382627782]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-395.4208767462111, 3224.98905010906, 6447.313382627782]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_509",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-43.369932630054784, -77.28264799902216, -1.5632361318086243]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-43.369932630054784, -77.28264799902216, -1.5632361318086243]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_510",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.507283552325179, -2.3485096065870246, -0.4561362743944064]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.507283552325179, -2.3485096065870246, -0.4561362743944064]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_511",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[25.17359659425218, 24.781668761458477, 1.8519959152130656]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[25.17359659425218, 24.781668761458477, 1.8519959152130656]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_512",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-13.959744574498881, -2.9101557244820135, -0.1061699273967318]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-13.959744574498881, -2.9101557244820135, -0.1061699273967318]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_513",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[792.3362233515653, -1183.1792016470931, -203.4547735448504]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[792.3362233515653, -1183.1792016470931, -203.4547735448504]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_514",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3130959479743215, -0.1874084149555757, -0.0034891741412970845]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3130959479743215, -0.1874084149555757, -0.0034891741412970845]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_515",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-33.41655602121235, -95.58417118760103, -35.93149638272094]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-33.41655602121235, -95.58417118760103, -35.93149638272094]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_516",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.608787520750736, -3.221250546186949, 4.735630389225304]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.608787520750736, -3.221250546186949, 4.735630389225304]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_517",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.760856954356011, 5.471690409808632, 1.3583440585497213]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.760856954356011, 5.471690409808632, 1.3583440585497213]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_518",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.239502989416153, -1.638791265647179, 0.035850026789586965]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.239502989416153, -1.638791265647179, 0.035850026789586965]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_519",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.828551933749752, 0.03604619462068204, -4.384331651619722]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.828551933749752, 0.03604619462068204, -4.384331651619722]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_520",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[63.46217419436032, -716.5367527593978, 1422.9212765532372]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[63.46217419436032, -716.5367527593978, 1422.9212765532372]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_521",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.889436485941564, -0.4136068848551486, -0.15037103688533543]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.889436485941564, -0.4136068848551486, -0.15037103688533543]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_522",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-396.94893781068146, -3080.8857945274685, -1281.3510708374388]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-396.94893781068146, -3080.8857945274685, -1281.3510708374388]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_523",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.541650792943828, 10.24203117705532, 3.178869664869467]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.541650792943828, 10.24203117705532, 3.178869664869467]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_524",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.45988722387189, -1.1005241358692264, -0.5461401385312822]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.45988722387189, -1.1005241358692264, -0.5461401385312822]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_525",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.371002128378715, -8.094987105999248, -2.521308021583428]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.371002128378715, -8.094987105999248, -2.521308021583428]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_526",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-65.8977719848007, 573.0324542220617, -953.2131588113015]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-65.8977719848007, 573.0324542220617, -953.2131588113015]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_527",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.7747765076315623, -2.152038053294978, -0.2684205129987266]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.7747765076315623, -2.152038053294978, -0.2684205129987266]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_528",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.0366811182060303, -0.3826495881340204, -0.030671902727385836]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0366811182060303, -0.3826495881340204, -0.030671902727385836]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_529",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.0011431573383975102, -0.40885861957290537, -0.05216429420907085]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0011431573383975102, -0.40885861957290537, -0.05216429420907085]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_530",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.1821589433587412, -0.5657952996382435, 0.05794095293678209]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1821589433587412, -0.5657952996382435, 0.05794095293678209]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_531",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.510294831960003, 1.338437211065174, -2.7098649180181034]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.510294831960003, 1.338437211065174, -2.7098649180181034]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_532",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-24.41932465388948, 7.103828832471521, 0.6990494894923723]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-24.41932465388948, 7.103828832471521, 0.6990494894923723]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_533",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[649.460086969824, -1125.9712928718259, -2333.892763949682]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[649.460086969824, -1125.9712928718259, -2333.892763949682]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_534",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-18.890931695467767, 25.3617620799673, 1.6446566444334783]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-18.890931695467767, 25.3617620799673, 1.6446566444334783]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_535",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-8.064315708753034, -16.70250862379729, -6.263091124138617]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.064315708753034, -16.70250862379729, -6.263091124138617]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_536",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-40.12794058922337, -196.58191323431785, -133.99933366011848]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-40.12794058922337, -196.58191323431785, -133.99933366011848]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_537",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.784547937245652, 2.8644223312371393, -1.4717818541291183]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.784547937245652, 2.8644223312371393, -1.4717818541291183]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_538",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.5340311663473645, 0.3087280296182504, 0.009313605174689111]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.5340311663473645, 0.3087280296182504, 0.009313605174689111]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_539",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-39.77759005013914, 59.366531629118526, 4336.946909899631]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-39.77759005013914, 59.366531629118526, 4336.946909899631]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_540",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.241494903702094, -35.29420356261081, 34.21889249252923]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.241494903702094, -35.29420356261081, 34.21889249252923]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_541",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.033545545812366, -2.247299659639107, 0.26251074187614865]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.033545545812366, -2.247299659639107, 0.26251074187614865]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_542",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.74460130417099, 2.2784142609761333, -0.11728444056304335]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.74460130417099, 2.2784142609761333, -0.11728444056304335]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_543",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.3383326519017861, -0.8862929547470642, 0.4217940468003375]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3383326519017861, -0.8862929547470642, 0.4217940468003375]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_544",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-785.803111763702, 38763.366150681584, -54844.125145732636]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-785.803111763702, 38763.366150681584, -54844.125145732636]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_545",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.870779159084116, 1.2062394840218988, -0.09761787692403494]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.870779159084116, 1.2062394840218988, -0.09761787692403494]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_546",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.4774969382402053, -0.6277772086626136, -0.05277105038000288]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4774969382402053, -0.6277772086626136, -0.05277105038000288]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_547",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.7316688286523055, -0.06926455616378815, 0.0003281054150508813]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7316688286523055, -0.06926455616378815, 0.0003281054150508813]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_548",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[198.42169057339848, 146.2785059959278, 2.4323225792746355]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[198.42169057339848, 146.2785059959278, 2.4323225792746355]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_549",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.2779044370192976, 2.4928979488450853, 0.4309842652714627]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.2779044370192976, 2.4928979488450853, 0.4309842652714627]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_550",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.0316071636311366, -1.8283613853443073, 0.6830643871132464]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0316071636311366, -1.8283613853443073, 0.6830643871132464]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_551",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-15.47135403121323, -18.960453864258493, 233.98503651224794]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-15.47135403121323, -18.960453864258493, 233.98503651224794]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_552",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[30.704971114219347, 27.88126700364294, -15.0808982872749]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[30.704971114219347, 27.88126700364294, -15.0808982872749]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_553",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[15.492593106316589, 6.154767253326787, -12.095359417844827]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[15.492593106316589, 6.154767253326787, -12.095359417844827]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_554",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.115937539948816, -9.993709465148664, 0.17178475145431682]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.115937539948816, -9.993709465148664, 0.17178475145431682]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_555",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.70726513564113, 0.4847200476452596, -0.006971808886266571]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.70726513564113, 0.4847200476452596, -0.006971808886266571]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_556",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6860222099659739, -3.4823462908244034, -3.2985482213170596]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6860222099659739, -3.4823462908244034, -3.2985482213170596]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_557",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[11.1182743188108, -4.243156000579325, -2.3045384781279226]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.1182743188108, -4.243156000579325, -2.3045384781279226]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_558",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.678256680526888, 0.49365115342436106, 0.044914500122114454]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.678256680526888, 0.49365115342436106, 0.044914500122114454]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_559",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.174494797054303, 1.2777580794701904, -1.8249467422693824]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.174494797054303, 1.2777580794701904, -1.8249467422693824]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_560",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-15.611085828870197, 32.904426272980636, -7.191030867357158]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-15.611085828870197, 32.904426272980636, -7.191030867357158]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_561",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.4932553473509852, -0.4416108745566713, -0.022141292335815584]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4932553473509852, -0.4416108745566713, -0.022141292335815584]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_562",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-30.879784761145874, 47.050680364351365, 41.798526963735625]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-30.879784761145874, 47.050680364351365, 41.798526963735625]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_563",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.8939964725491036, 0.7309583340956413, 0.07539412381387674]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8939964725491036, 0.7309583340956413, 0.07539412381387674]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_564",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.7849007307531246, -0.10214593069505312, 0.9685695558606452]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.7849007307531246, -0.10214593069505312, 0.9685695558606452]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_565",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.8132189227558655, 3.6910599115784914, -0.11415699172130851]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.8132189227558655, 3.6910599115784914, -0.11415699172130851]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_566",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.16251921919847215, -0.6555527544328993, 0.010697689742213953]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.16251921919847215, -0.6555527544328993, 0.010697689742213953]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_567",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.001281301518829, 1.5360779043243364, -0.045385051831263006]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.001281301518829, 1.5360779043243364, -0.045385051831263006]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_568",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.727952277331417, -16.985118008627246, -3.4238695547266222]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.727952277331417, -16.985118008627246, -3.4238695547266222]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_569",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.3664520210590008, 0.5871523649794327, 0.07730158662190256]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3664520210590008, 0.5871523649794327, 0.07730158662190256]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_570",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[443.12756641716436, -443.3436275563092, 92.13164455318908]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[443.12756641716436, -443.3436275563092, 92.13164455318908]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_571",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5156065920628027, -0.05566151240016144, -0.0002959825470359334]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5156065920628027, -0.05566151240016144, -0.0002959825470359334]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_572",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8134237647748451, -0.019562683623825995, -0.00058491457716147]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8134237647748451, -0.019562683623825995, -0.00058491457716147]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_573",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.9725971093874026, 1.9239040532907088, 0.09007016398229438]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.9725971093874026, 1.9239040532907088, 0.09007016398229438]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_574",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.6788585967373943, 0.07795346550724738, -0.031849405787440443]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6788585967373943, 0.07795346550724738, -0.031849405787440443]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_575",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.5117370171264441, -2.679426816735578, 0.7213322158561948]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5117370171264441, -2.679426816735578, 0.7213322158561948]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_576",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.6571119437079673, -1.3764584834743983, 0.14582657140076946]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6571119437079673, -1.3764584834743983, 0.14582657140076946]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_577",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-14.928270073951184, 22.79561264372325, 28.89409306275477]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-14.928270073951184, 22.79561264372325, 28.89409306275477]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_578",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.900690884611984, 5.697305762321738, -0.17946806896153256]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.900690884611984, 5.697305762321738, -0.17946806896153256]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_579",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[149.40624535700775, -921.9611381682998, 1051.6018688482463]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[149.40624535700775, -921.9611381682998, 1051.6018688482463]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_580",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-570.0508822154635, -1164.0137072098714, -309.1878635649304]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-570.0508822154635, -1164.0137072098714, -309.1878635649304]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_581",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.12217704392249062, -0.13558732381179806, -0.009430787283318195]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.12217704392249062, -0.13558732381179806, -0.009430787283318195]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_582",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.77468890070356, 10.302676567626794, -3.1613146823767098]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.77468890070356, 10.302676567626794, -3.1613146823767098]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_583",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.883593939148099, 5.437808426037593, 1.1797630562648924]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.883593939148099, 5.437808426037593, 1.1797630562648924]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_584",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[26.61018785459894, 25.368480750187132, 5.827263314720636]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[26.61018785459894, 25.368480750187132, 5.827263314720636]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_585",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.1718880028125634, 0.0036932420375444548, -0.0002307929091041318]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1718880028125634, 0.0036932420375444548, -0.0002307929091041318]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_586",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7293249587648969, -102.41204714247331, -6.9993233299699495]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7293249587648969, -102.41204714247331, -6.9993233299699495]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_587",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.1797563952526744, -96.27908024420572, 3.7887767124120697]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1797563952526744, -96.27908024420572, 3.7887767124120697]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_588",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.8257579078672619, 0.4572009821661005, -0.06620584054653984]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8257579078672619, 0.4572009821661005, -0.06620584054653984]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_589",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-37.40279250307158, 50.50602118997769, 7.295661057046268]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-37.40279250307158, 50.50602118997769, 7.295661057046268]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_590",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-24.333057390297974, 1.4880214532678373, 8.7206492280774]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-24.333057390297974, 1.4880214532678373, 8.7206492280774]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_591",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[9.236457294003765, -31.55062430320901, 16.008568974974487]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.236457294003765, -31.55062430320901, 16.008568974974487]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_592",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5809781779710013, 0.03503089483620227, -0.009316373512243788]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5809781779710013, 0.03503089483620227, -0.009316373512243788]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_593",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-30.5704013047896, 32.90093036628638, -6.804752007087833]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-30.5704013047896, 32.90093036628638, -6.804752007087833]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_594",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.591899174464125, 0.017785721052060208, 0.014874474081471089]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.591899174464125, 0.017785721052060208, 0.014874474081471089]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_595",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.6958012644861276, 0.7758114547827457, 0.08136125090043046]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6958012644861276, 0.7758114547827457, 0.08136125090043046]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_596",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6284620526597399, -0.7661822770763191, 0.15050955719226314]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6284620526597399, -0.7661822770763191, 0.15050955719226314]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_597",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[34.309372103120054, -325.45726743316266, 36.54875381745654]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[34.309372103120054, -325.45726743316266, 36.54875381745654]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_598",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.7662830504929032, -1.2051539709615928, -0.1542868873929737]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.7662830504929032, -1.2051539709615928, -0.1542868873929737]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_599",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.11181117635988116, -0.07262646171706509, 0.0035541930807568537]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11181117635988116, -0.07262646171706509, 0.0035541930807568537]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_600",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5304321145142433, -0.670408403529462, -0.11542861849728417]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5304321145142433, -0.670408403529462, -0.11542861849728417]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_601",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[11.516430487517868, 19.447830603665665, 7.8676282495392]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.516430487517868, 19.447830603665665, 7.8676282495392]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_602",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.0416800464203, 3.6101940732934636, 0.1743470190594459]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.0416800464203, 3.6101940732934636, 0.1743470190594459]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_603",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.9474775447859178, -50.41369606799612, 152.14118946900285]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9474775447859178, -50.41369606799612, 152.14118946900285]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_604",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-154.46048620980014, 149.50441123675014, 383.30743924689443]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-154.46048620980014, 149.50441123675014, 383.30743924689443]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_605",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.8709320039330042, -2.8298715028706996, 0.28955511288537145]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8709320039330042, -2.8298715028706996, 0.28955511288537145]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_606",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.14410423263235622, -0.0060231132890652544, -0.0009072874301815167]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.14410423263235622, -0.0060231132890652544, -0.0009072874301815167]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_607",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.009594237658966, -65.64278679603315, -100.5435339517954]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.009594237658966, -65.64278679603315, -100.5435339517954]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_608",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[43.95740812372432, -51.08174241193849, 14.6414840737174]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[43.95740812372432, -51.08174241193849, 14.6414840737174]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_609",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3740350061309044, -3.5308527618096575, -1.4773039477456709]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3740350061309044, -3.5308527618096575, -1.4773039477456709]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_610",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[75.80479104315667, -122.56080824165015, 47.42530478413775]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[75.80479104315667, -122.56080824165015, 47.42530478413775]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_611",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.17255355820119, -2.4782051485831422, 0.3335897177341189]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.17255355820119, -2.4782051485831422, 0.3335897177341189]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_612",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[11.387891245943099, -17.202400904046, -3.3371898966228857]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.387891245943099, -17.202400904046, -3.3371898966228857]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_613",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6508527773767163, -7.145909182875094, 7.174522206108616]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6508527773767163, -7.145909182875094, 7.174522206108616]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_614",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-706.7095952243045, 49225.560297626376, 49768.24614239141]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-706.7095952243045, 49225.560297626376, 49768.24614239141]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_615",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[11.346488534614364, 17.395480117412383, 7.1908878220458154]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.346488534614364, 17.395480117412383, 7.1908878220458154]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_616",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[11.003605735869035, -65.4627323398134, -4.775439078937879]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.003605735869035, -65.4627323398134, -4.775439078937879]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_617",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.23410608348079903, -0.5533758411818115, 0.2011426035606974]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.23410608348079903, -0.5533758411818115, 0.2011426035606974]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_618",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.4787475225174687, 0.9710868213280902, -0.08841671192101369]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.4787475225174687, 0.9710868213280902, -0.08841671192101369]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_619",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-15.496707926828133, 27.16399754087735, -0.5348982222663369]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-15.496707926828133, 27.16399754087735, -0.5348982222663369]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_620",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[17.183744970071228, 51.730560121587615, 29.510525192433875]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[17.183744970071228, 51.730560121587615, 29.510525192433875]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_621",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8847045482054116, 0.1679561993437566, 0.012659601205681508]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8847045482054116, 0.1679561993437566, 0.012659601205681508]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_622",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.010175539230888, 0.5029371095986878, 0.12268394569486339]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.010175539230888, 0.5029371095986878, 0.12268394569486339]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_623",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[13.66242899327025, -7.455323979390342, 0.8031485555770512]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[13.66242899327025, -7.455323979390342, 0.8031485555770512]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_624",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.3340874604062045, 0.7041795848184097, -0.04023204669433196]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.3340874604062045, 0.7041795848184097, -0.04023204669433196]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_625",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[61.82759793256108, 180.19098212663562, 123.94011582693025]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[61.82759793256108, 180.19098212663562, 123.94011582693025]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_626",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-343.9708869624364, 11796.264411839922, -1892.606497762335]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-343.9708869624364, 11796.264411839922, -1892.606497762335]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_627",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[14.776163905835766, 63.301688647298874, 83.97557918630145]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[14.776163905835766, 63.301688647298874, 83.97557918630145]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_628",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-57.31288734121998, 296.42881044897035, 58.50253815935074]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-57.31288734121998, 296.42881044897035, 58.50253815935074]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_629",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-8.214742490530124, -460.2685798041823, 121.6432829326758]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.214742490530124, -460.2685798041823, 121.6432829326758]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_630",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-24.960104857792967, -37.23067286764664, -9.001809082265597]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-24.960104857792967, -37.23067286764664, -9.001809082265597]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_631",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.908907925023975, -3.8434373172042413, -56.355112611008785]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.908907925023975, -3.8434373172042413, -56.355112611008785]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_632",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.109505409626668, -28.010192871012983, -24.278669143651012]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.109505409626668, -28.010192871012983, -24.278669143651012]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_633",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.099243018267063, -13962.79677202412, -96090.66180570592]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.099243018267063, -13962.79677202412, -96090.66180570592]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_634",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.459644952705401, -1.7847898172780718, 0.1093318814847388]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.459644952705401, -1.7847898172780718, 0.1093318814847388]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_635",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-260.0774174642149, 1630.2104598210465, 109.62929135884237]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-260.0774174642149, 1630.2104598210465, 109.62929135884237]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_636",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.9505219443032369, -8.113405122847027, 1.8731045565852826]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.9505219443032369, -8.113405122847027, 1.8731045565852826]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_637",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.01197360538052, -38.89749855232959, -40.6098099379475]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.01197360538052, -38.89749855232959, -40.6098099379475]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_638",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[17.295852658382078, 63.545342879017554, -14.558725781632893]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[17.295852658382078, 63.545342879017554, -14.558725781632893]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_639",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.704251902571256, -10.472048324852363, 2.9595526811652753]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.704251902571256, -10.472048324852363, 2.9595526811652753]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_640",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.18026577929342805, -0.043673161625447446, -0.001716050904503215]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.18026577929342805, -0.043673161625447446, -0.001716050904503215]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_641",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.218201418903883, 11.992636449340504, 4.4061910209182535]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.218201418903883, 11.992636449340504, 4.4061910209182535]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_642",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[142.11717903811504, -25.802216403106172, 0.7055966099822256]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[142.11717903811504, -25.802216403106172, 0.7055966099822256]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_643",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-41.22758276508556, 107.91497613144773, 10.78390987273848]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-41.22758276508556, 107.91497613144773, 10.78390987273848]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_644",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[24.513738841142313, 199.05520006903797, 535.8073069050106]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[24.513738841142313, 199.05520006903797, 535.8073069050106]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_645",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-15.619706575715142, -15650.064691587992, -405212.5273005867]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-15.619706575715142, -15650.064691587992, -405212.5273005867]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_646",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.9538864651944232, 0.4026593061518585, 0.20324170199458091]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.9538864651944232, 0.4026593061518585, 0.20324170199458091]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_647",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.478867306530441, -8.07379903728179, -0.36683068835155774]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.478867306530441, -8.07379903728179, -0.36683068835155774]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_648",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.98725748412611, -16.089201979655545, 2.8901627961940415]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.98725748412611, -16.089201979655545, 2.8901627961940415]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_649",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.2077112601406035, 1.3347105891192936, 0.16640572159445544]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.2077112601406035, 1.3347105891192936, 0.16640572159445544]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_650",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-108.09720916823048, 238.07437369707986, -129.77574924362796]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-108.09720916823048, 238.07437369707986, -129.77574924362796]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_651",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.0098852085682715, -2.085296607669892, -0.009536736770139016]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0098852085682715, -2.085296607669892, -0.009536736770139016]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_652",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-22.00239859389034, 24.477030582614546, -4.711353786560877]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-22.00239859389034, 24.477030582614546, -4.711353786560877]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_653",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.021784097658978, -29.68428999945492, -46.77258920785759]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.021784097658978, -29.68428999945492, -46.77258920785759]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_654",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-379.2766927938362, 857.1026016179347, 69.36193078983891]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-379.2766927938362, 857.1026016179347, 69.36193078983891]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_655",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-92.4988145113683, 353.5167816035216, 490.249324947206]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-92.4988145113683, 353.5167816035216, 490.249324947206]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_656",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[456.58845094837983, -1675.9958494470848, 1259.9322941848823]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[456.58845094837983, -1675.9958494470848, 1259.9322941848823]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_657",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-29.72562728575374, 256.5782904294549, -560.5787951482605]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-29.72562728575374, 256.5782904294549, -560.5787951482605]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_658",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.218790469727415, 0.25044496266166283, 0.0034723338505040593]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.218790469727415, 0.25044496266166283, 0.0034723338505040593]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_659",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-17.12045108325077, 1.8307532141847211, 0.03123792594166874]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-17.12045108325077, 1.8307532141847211, 0.03123792594166874]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_660",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.0358097041999685, -5.171202211382161, -2.9721682973078125]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0358097041999685, -5.171202211382161, -2.9721682973078125]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_661",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.2062454639887182, 0.011739736151264132, 0.0001992669641997879]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2062454639887182, 0.011739736151264132, 0.0001992669641997879]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_662",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.9611474279655123, -0.34516350383733263, -0.6460703584870281]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.9611474279655123, -0.34516350383733263, -0.6460703584870281]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_663",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.22034944494287645, -0.33855132903862784, 0.014216751523926947]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.22034944494287645, -0.33855132903862784, 0.014216751523926947]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_664",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-11.605181429983121, -1.1065441376552823, 1.039524214037327]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.605181429983121, -1.1065441376552823, 1.039524214037327]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_665",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1037.004349956788, 67400.92797979283, -822355.6672607742]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1037.004349956788, 67400.92797979283, -822355.6672607742]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_666",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.532867651571483, -0.025329978392742286, -0.01982507298707664]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.532867651571483, -0.025329978392742286, -0.01982507298707664]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_667",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-47.110805378833945, 169.6614850254729, -48.26803397949662]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-47.110805378833945, 169.6614850254729, -48.26803397949662]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_668",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.799256597824288, -24.203315314638274, 6.299943191455683]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.799256597824288, -24.203315314638274, 6.299943191455683]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_669",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.9445854305358699, -0.3380448793584698, 0.012005936436197975]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9445854305358699, -0.3380448793584698, 0.012005936436197975]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_670",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.302396301364535, -5.744813006914444, -0.013235442926553669]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.302396301364535, -5.744813006914444, -0.013235442926553669]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_671",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.347986855974201, 0.20704037906355094, 0.004223180643069365]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.347986855974201, 0.20704037906355094, 0.004223180643069365]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_672",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.2587149101072512, -2.226761087283249, 0.13513062738791715]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.2587149101072512, -2.226761087283249, 0.13513062738791715]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_673",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.0841887222710005, 0.5317630535987738, 2.497033620304037]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.0841887222710005, 0.5317630535987738, 2.497033620304037]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_674",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.0803667859655186, -0.2614574813153707, -0.5941080977782912]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.0803667859655186, -0.2614574813153707, -0.5941080977782912]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_675",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.3773259698260563, -0.04396848874048173, -0.030852571407948854]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.3773259698260563, -0.04396848874048173, -0.030852571407948854]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_676",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[12.688271420241414, -1.4535009791031475, -1.4960908470778445]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.688271420241414, -1.4535009791031475, -1.4960908470778445]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_677",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.5000206550523565, -0.5582945102340284, 0.34829156551896023]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.5000206550523565, -0.5582945102340284, 0.34829156551896023]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_678",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[195.17212404027205, -1779.7554799157688, 304.59583372202127]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[195.17212404027205, -1779.7554799157688, 304.59583372202127]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_679",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.553322100130888, -14.093706768728348, 0.38737593189023156]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.553322100130888, -14.093706768728348, 0.38737593189023156]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_680",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.6783441614763617, -2.7509190083345203, 0.5330039799632905]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6783441614763617, -2.7509190083345203, 0.5330039799632905]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_681",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.372546230530914, 1.9121556112085158, 0.17478205591765003]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.372546230530914, 1.9121556112085158, 0.17478205591765003]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_682",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.9443455737710247, 0.2857838922766628, -0.013402454999602591]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.9443455737710247, 0.2857838922766628, -0.013402454999602591]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_683",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.9321826091437933, 3.677540030001357, 0.2699052813839436]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.9321826091437933, 3.677540030001357, 0.2699052813839436]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_684",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-22.441438521456018, 67.06547823732562, -18.816842438553792]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-22.441438521456018, 67.06547823732562, -18.816842438553792]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_685",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.83472439301555, 1.846387704241633, 0.15685704130865843]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.83472439301555, 1.846387704241633, 0.15685704130865843]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_686",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[11.326557888981702, -0.7456936207819383, -0.06774071299653102]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.326557888981702, -0.7456936207819383, -0.06774071299653102]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_687",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.004914270635846, -13.667243923679889, 6.479624148449964]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.004914270635846, -13.667243923679889, 6.479624148449964]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_688",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.0778859322995626, -0.18003127089170634, 0.01851745008906415]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0778859322995626, -0.18003127089170634, 0.01851745008906415]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_689",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.282424825999172, -11.002612531058421, -1.7847898973122818]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.282424825999172, -11.002612531058421, -1.7847898973122818]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_690",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-114.62084105148723, 191.88610968194354, 799.721096485875]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-114.62084105148723, 191.88610968194354, 799.721096485875]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_691",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-14.73440440661048, 34.57101802424094, -21.986310964225343]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-14.73440440661048, 34.57101802424094, -21.986310964225343]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_692",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[51.77666047986363, -249.90183751010616, -0.7101124440820153]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[51.77666047986363, -249.90183751010616, -0.7101124440820153]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_693",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[35.32438695282144, -5.293862519693436, -1.071433809609415]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[35.32438695282144, -5.293862519693436, -1.071433809609415]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_694",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.12993584029253027, -0.29810212708798667, -0.0041769480902356885]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.12993584029253027, -0.29810212708798667, -0.0041769480902356885]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_695",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.668700176371725, 2.58964806599739, 5.982727001134359]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.668700176371725, 2.58964806599739, 5.982727001134359]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_696",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[183.9456902414356, 15.155366938209, -19.40339577534012]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[183.9456902414356, 15.155366938209, -19.40339577534012]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_697",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[28.230376751318268, -8.576782679751346, -375.19475337423177]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[28.230376751318268, -8.576782679751346, -375.19475337423177]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_698",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.737293414646917, 3.8833765326590983, 4.7389407828405075]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.737293414646917, 3.8833765326590983, 4.7389407828405075]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_699",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.07009929546883582, 0.0007777594219435725, -2.0665769791763826e-06]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.07009929546883582, 0.0007777594219435725, -2.0665769791763826e-06]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_700",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.009660877322891503, -0.12612748881349184, 0.015921425182950068]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.009660877322891503, -0.12612748881349184, 0.015921425182950068]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_701",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.172014057353607, -5665.041874402667, 1189.7375590069655]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.172014057353607, -5665.041874402667, 1189.7375590069655]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_702",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.415091010756618, 1.2930431885990714, 0.12491014257005234]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.415091010756618, 1.2930431885990714, 0.12491014257005234]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_703",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.43568567585877677, -0.18020613094236848, -0.045648198505556514]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.43568567585877677, -0.18020613094236848, -0.045648198505556514]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_704",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.4001879912260908, -0.14661096736584248, 0.0008002043033794313]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.4001879912260908, -0.14661096736584248, 0.0008002043033794313]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_705",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.2522129996342492, -0.05057684539146909, 0.0018567126206833111]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2522129996342492, -0.05057684539146909, 0.0018567126206833111]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_706",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.371867273873383, 5.011334734570488, -1.653097539493091]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.371867273873383, 5.011334734570488, -1.653097539493091]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_707",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.866396347721936, 2.903125890919289, 0.41137818558019673]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.866396347721936, 2.903125890919289, 0.41137818558019673]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_708",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.423574664644708, 6.87700917576714, -1.3973397999394555]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.423574664644708, 6.87700917576714, -1.3973397999394555]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_709",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7324894596770838, -0.10880921738201049, 0.08922481011255333]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7324894596770838, -0.10880921738201049, 0.08922481011255333]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_710",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-139.37283172718173, 145.750467331977, -19.15671124694042]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-139.37283172718173, 145.750467331977, -19.15671124694042]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_711",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-59.52378656162286, 1140.1057776887824, -6976.775137737542]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-59.52378656162286, 1140.1057776887824, -6976.775137737542]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_712",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.0053620060867474, -18.265676853649524, 0.3383357729939492]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.0053620060867474, -18.265676853649524, 0.3383357729939492]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_713",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.3765884119467928, -0.032197313430688324, 0.2634960092404563]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3765884119467928, -0.032197313430688324, 0.2634960092404563]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_714",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[18.802799673487883, -128.6658707132052, -443.8530843241335]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[18.802799673487883, -128.6658707132052, -443.8530843241335]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_715",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.6364192635311388, 1.0496748590810574, -0.07679316883022416]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.6364192635311388, 1.0496748590810574, -0.07679316883022416]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_716",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.6247346716651685, -0.7755144680266426, 0.04504453872227902]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.6247346716651685, -0.7755144680266426, 0.04504453872227902]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_717",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-21.367526277126792, -638.5162964806173, 2459.0899820455757]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-21.367526277126792, -638.5162964806173, 2459.0899820455757]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_718",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[16.75817205604879, 31.103712542046924, 15.286801023735606]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[16.75817205604879, 31.103712542046924, 15.286801023735606]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_719",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-154.3411602249867, 186.41874703230053, 109.67518756448742]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-154.3411602249867, 186.41874703230053, 109.67518756448742]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_720",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.5925279188406403, 0.5545041197207596, 0.052281122964469955]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5925279188406403, 0.5545041197207596, 0.052281122964469955]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_721",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.010603743580084, -0.4660107462601026, 0.007005843631621102]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.010603743580084, -0.4660107462601026, 0.007005843631621102]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_722",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[13.56991049393547, 42.710188511482016, -13.00257532298419]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[13.56991049393547, 42.710188511482016, -13.00257532298419]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_723",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5476606218300922, -0.030509360529664534, -0.02260830635145916]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5476606218300922, -0.030509360529664534, -0.02260830635145916]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_724",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-56.53459819739522, -2.0086691547908657, 170.525693167565]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-56.53459819739522, -2.0086691547908657, 170.525693167565]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_725",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.164253155051423, -0.8094635015425933, 2.6493122882446025]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.164253155051423, -0.8094635015425933, 2.6493122882446025]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_726",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.21343767772707722, 0.01340379502988285, 0.00022303217307275422]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.21343767772707722, 0.01340379502988285, 0.00022303217307275422]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_727",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-97.45458248489112, 889.0998494441794, 1916.5986193447902]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-97.45458248489112, 889.0998494441794, 1916.5986193447902]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_728",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-145.37568760775923, 1373.1512577826245, -2454.3589896807543]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-145.37568760775923, 1373.1512577826245, -2454.3589896807543]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_729",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.710169963220929, -26.36109768022488, 4.837618880182943]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.710169963220929, -26.36109768022488, 4.837618880182943]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_730",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[112.55097551228502, 2373.2082319866795, -36792.72719240213]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[112.55097551228502, 2373.2082319866795, -36792.72719240213]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_731",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.4750628829075136, -0.70078644209839, 0.14387037881874742]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.4750628829075136, -0.70078644209839, 0.14387037881874742]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_732",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-60.84221934657271, 885.6867686726276, 113.04468504705018]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-60.84221934657271, 885.6867686726276, 113.04468504705018]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_733",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.8632742194001914, 3.442341030330711, -0.8805181128654473]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.8632742194001914, 3.442341030330711, -0.8805181128654473]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_734",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.4367381973722533, -1.0287230536231597, -0.14761968013283164]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4367381973722533, -1.0287230536231597, -0.14761968013283164]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_735",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[27.61685823665151, 188.96866421205394, 126.75285530444509]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[27.61685823665151, 188.96866421205394, 126.75285530444509]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_736",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[122.51943160397303, -64.40492190774509, -82.18628640876031]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[122.51943160397303, -64.40492190774509, -82.18628640876031]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_737",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.265910792614375, 0.8630467225697742, -0.16679116396912094]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.265910792614375, 0.8630467225697742, -0.16679116396912094]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_738",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.9460549446386308, 0.3905805670923472, 0.34472739666559477]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.9460549446386308, 0.3905805670923472, 0.34472739666559477]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_739",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.5845351536799537, -0.1514082472648507, 0.0058933724310349005]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5845351536799537, -0.1514082472648507, 0.0058933724310349005]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_740",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.9819465345773972, 2.5428886534807407, 0.5813041578767996]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.9819465345773972, 2.5428886534807407, 0.5813041578767996]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_741",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5311610257184871, -0.09628375872199853, -0.013829051128987965]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5311610257184871, -0.09628375872199853, -0.013829051128987965]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_742",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.71845611616655, 2.046615102596233, 10.112627104349464]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.71845611616655, 2.046615102596233, 10.112627104349464]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_743",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.06656758523725234, 0.0005831287604198987, -5.729539554296298e-07]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06656758523725234, 0.0005831287604198987, -5.729539554296298e-07]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_744",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.095979374501475, 0.9104223088970022, 0.19760343717118672]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.095979374501475, 0.9104223088970022, 0.19760343717118672]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_745",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-21.319158158131014, -36.19553167351376, 0.9389425501512562]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-21.319158158131014, -36.19553167351376, 0.9389425501512562]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_746",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[15.854616405995463, -8.712609870020897, -2.030356284980256]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[15.854616405995463, -8.712609870020897, -2.030356284980256]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_747",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[188.5459081966238, -1750.7566464116194, -1102.262867979131]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[188.5459081966238, -1750.7566464116194, -1102.262867979131]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_748",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-24.916973375879465, -23.47121915653588, 2.248384983194883]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-24.916973375879465, -23.47121915653588, 2.248384983194883]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_749",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.037307248830036, 0.14572524501849748, -0.06264502426154556]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.037307248830036, 0.14572524501849748, -0.06264502426154556]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_750",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.266332404265688, -1.4962242175819178, -0.9240929391207701]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.266332404265688, -1.4962242175819178, -0.9240929391207701]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_751",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[158.3679118266467, 229.95180025192846, -102.18111463049081]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[158.3679118266467, 229.95180025192846, -102.18111463049081]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_752",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-50.269475505584126, -22.92630268686741, -2.0992228425731057]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-50.269475505584126, -22.92630268686741, -2.0992228425731057]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_753",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.8038685158862817, -46.09772619274641, -7.450396398035673]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.8038685158862817, -46.09772619274641, -7.450396398035673]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_754",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-17.59693168466538, 18.29623664943573, -3.456621973072672]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-17.59693168466538, 18.29623664943573, -3.456621973072672]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_755",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.9002114611534331, 0.05332894222852828, -0.00026953987768055135]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9002114611534331, 0.05332894222852828, -0.00026953987768055135]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_756",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[52.45588035075908, -957.1369403441493, -76.81955757319732]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[52.45588035075908, -957.1369403441493, -76.81955757319732]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_757",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-409.9805616595019, -669.7949400537327, -85.67589587012638]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-409.9805616595019, -669.7949400537327, -85.67589587012638]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_758",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[10.096661888890031, -4.667432474747531, 0.0517230331005002]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.096661888890031, -4.667432474747531, 0.0517230331005002]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_759",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[268.15639393602635, -1333.1989862661167, -198.27092672314643]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[268.15639393602635, -1333.1989862661167, -198.27092672314643]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_760",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.31195598784910117, -2.6380278771882026, -0.18880385303778532]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.31195598784910117, -2.6380278771882026, -0.18880385303778532]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_761",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-16.49148243101134, -8.967345238735675, -0.47668972020444067]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.49148243101134, -8.967345238735675, -0.47668972020444067]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_762",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.9065071816484755, -1.9017038339089583, 0.3996724807682447]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.9065071816484755, -1.9017038339089583, 0.3996724807682447]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_763",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.565137907123555, -2.209814084878588, -0.028091705630217085]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.565137907123555, -2.209814084878588, -0.028091705630217085]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_764",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.462713658868682, 0.4811607627528195, -0.1201143563342659]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.462713658868682, 0.4811607627528195, -0.1201143563342659]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_765",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.7287931682963364, 1.1421116277589847, 0.0370777466768562]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.7287931682963364, 1.1421116277589847, 0.0370777466768562]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_766",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.8128134885115155, 0.4233636176137093, 0.15911767024123874]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8128134885115155, 0.4233636176137093, 0.15911767024123874]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_767",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-459.3320991981988, 13.364137182809484, 3.4363958898802296]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-459.3320991981988, 13.364137182809484, 3.4363958898802296]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_768",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.770403325108397, 3.041242217023621, -0.8955509356271221]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.770403325108397, 3.041242217023621, -0.8955509356271221]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_769",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.9373633671241475, 0.4128602589100048, -0.26040840564431866]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.9373633671241475, 0.4128602589100048, -0.26040840564431866]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_770",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.8223783735125214, 0.557594082826864, 0.025832664697959435]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.8223783735125214, 0.557594082826864, 0.025832664697959435]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_771",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.23816896600916038, -2.487431415598001, 1.2575565568827842]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.23816896600916038, -2.487431415598001, 1.2575565568827842]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_772",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.8540947058892632, 0.6464362311626642, -0.0626464795649764]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8540947058892632, 0.6464362311626642, -0.0626464795649764]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_773",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-34.10596709189364, -22.110257615268868, -0.07754280871386146]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-34.10596709189364, -22.110257615268868, -0.07754280871386146]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_774",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.673692245334404, -3.53939654384622, -0.14736277788230845]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.673692245334404, -3.53939654384622, -0.14736277788230845]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_775",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-55.32795163838594, 62.32265453863597, -12.960787681640522]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-55.32795163838594, 62.32265453863597, -12.960787681640522]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_776",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-31.29603093834865, 0.7789974650195362, 27.40506174109135]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-31.29603093834865, 0.7789974650195362, 27.40506174109135]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_777",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.9209335278845766, -0.032940313543005195, 0.07939540707953269]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9209335278845766, -0.032940313543005195, 0.07939540707953269]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_778",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[39.28072202720393, -35.97067048594727, 5.538949844571987]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[39.28072202720393, -35.97067048594727, 5.538949844571987]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_779",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.297123940973183, 3.941138749413104, 0.7455077385312959]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.297123940973183, 3.941138749413104, 0.7455077385312959]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_780",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.17923737999480113, -0.059411219320132644, 0.0007705321733056554]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.17923737999480113, -0.059411219320132644, 0.0007705321733056554]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_781",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.2050333184141415, 1.0260512795123455, -0.1324896592327868]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.2050333184141415, 1.0260512795123455, -0.1324896592327868]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_782",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.9042764691302105, 9.51227162894332, 3.7046743120244936]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.9042764691302105, 9.51227162894332, 3.7046743120244936]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_783",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-15.845189649203151, 61.895301489222305, -5.4545625927023895]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-15.845189649203151, 61.895301489222305, -5.4545625927023895]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_784",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.6055401097400077, 0.007474011629924015, 0.0024685973938940848]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.6055401097400077, 0.007474011629924015, 0.0024685973938940848]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_785",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8840495986828749, 0.19286062092880843, 0.012422378293318758]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8840495986828749, 0.19286062092880843, 0.012422378293318758]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_786",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-11.115257365180678, -20.95641181002417, 2.6807420321697877]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.115257365180678, -20.95641181002417, 2.6807420321697877]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_787",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.328035933060367, 14.885068719474027, 32.48145746590008]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.328035933060367, 14.885068719474027, 32.48145746590008]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_788",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-718.1159995475585, 20689.520180974087, -928.0461312413844]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-718.1159995475585, 20689.520180974087, -928.0461312413844]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_789",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.046621445284697, 2.205448858874816, -0.4205063847234411]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.046621445284697, 2.205448858874816, -0.4205063847234411]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_790",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.667740113538833, -1.1525172581427516, -0.8138306936229432]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.667740113538833, -1.1525172581427516, -0.8138306936229432]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_791",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[7.2229410470843165, -16.137653045805102, 1.00202679532863]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.2229410470843165, -16.137653045805102, 1.00202679532863]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_792",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.7581565250488533, -7.643975040540682, 0.7486015091244694]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.7581565250488533, -7.643975040540682, 0.7486015091244694]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_793",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-184.54768393863554, -193.76897364099855, 4.703750513775804]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-184.54768393863554, -193.76897364099855, 4.703750513775804]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_794",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.590848038132543, 0.5875282705060295, 0.019953313650121048]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.590848038132543, 0.5875282705060295, 0.019953313650121048]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_795",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.4291494195693977, -0.13803139242806728, 0.018834671240340856]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4291494195693977, -0.13803139242806728, 0.018834671240340856]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_796",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[316.0784971770551, -4126.089727343349, 12629.666024640323]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[316.0784971770551, -4126.089727343349, 12629.666024640323]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_797",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.2167161861174107, -21.347157706159294, 15.197441884000883]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.2167161861174107, -21.347157706159294, 15.197441884000883]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_798",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8379560728053816, 0.1935882667714175, -0.007361273959218128]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8379560728053816, 0.1935882667714175, -0.007361273959218128]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_799",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-751.429564414665, 46088.22837556606, -4134.023812388163]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-751.429564414665, 46088.22837556606, -4134.023812388163]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_800",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[10.368261316063718, 6.634594278157003, -5.0909582275607335]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.368261316063718, 6.634594278157003, -5.0909582275607335]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_801",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6916298215656268, -1.0732792177915504, -0.17756640649729205]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6916298215656268, -1.0732792177915504, -0.17756640649729205]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_802",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-21.23233935187773, 22.264386697890153, -5.32607010421861]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-21.23233935187773, 22.264386697890153, -5.32607010421861]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_803",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.542508702978316, 0.13933606898841353, 0.32956297522539707]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.542508702978316, 0.13933606898841353, 0.32956297522539707]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_804",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[776.6206368084421, -89607.8542249866, -3756.8367509009813]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[776.6206368084421, -89607.8542249866, -3756.8367509009813]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_805",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-675.8398945627945, 9830.510267004473, -6971.380584010702]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-675.8398945627945, 9830.510267004473, -6971.380584010702]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_806",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.32901435868989, 6.809885003339733, -0.6760505548725866]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.32901435868989, 6.809885003339733, -0.6760505548725866]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_807",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[137.95693929402555, 782.0290592082338, 1037.0778995241317]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[137.95693929402555, 782.0290592082338, 1037.0778995241317]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_808",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.630945424125271, -16.151037763518104, -0.032825089414296356]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.630945424125271, -16.151037763518104, -0.032825089414296356]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_809",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.9554763635781439, -0.0621122748329731, 0.024618216841673788]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9554763635781439, -0.0621122748329731, 0.024618216841673788]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_810",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[129.44806668487806, -55.108391037883905, -22.84757426016595]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[129.44806668487806, -55.108391037883905, -22.84757426016595]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_811",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-14.01540213742143, 26.370738614704514, -3.9556974767135253]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-14.01540213742143, 26.370738614704514, -3.9556974767135253]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_812",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.505705460577662, 4.409960889240284, -0.905860964353616]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.505705460577662, 4.409960889240284, -0.905860964353616]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_813",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.2824576936597298, -2.216097827592792, -0.6647020380776166]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2824576936597298, -2.216097827592792, -0.6647020380776166]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_814",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-16.850655850512943, -23.872831698616658, -4.049284622146399]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.850655850512943, -23.872831698616658, -4.049284622146399]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_815",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[19.65613079142864, 5.113735441151796, -0.2200227062641949]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[19.65613079142864, 5.113735441151796, -0.2200227062641949]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_816",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.29223226096725435, 0.0188016628865866, 9.643211992910543e-05]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.29223226096725435, 0.0188016628865866, 9.643211992910543e-05]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_817",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.214514392745203, -6.508739306255627, -2.5330906626437595]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.214514392745203, -6.508739306255627, -2.5330906626437595]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_818",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[12.042165221517369, 21.658390420814662, 10.294876566861113]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.042165221517369, 21.658390420814662, 10.294876566861113]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_819",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8860794029783492, -0.8082319415460735, 0.02689474226214349]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8860794029783492, -0.8082319415460735, 0.02689474226214349]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_820",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-96.88972060012114, -282.5969520787571, 1666.3419737990491]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-96.88972060012114, -282.5969520787571, 1666.3419737990491]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_821",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6080796554666368, -0.08519006535019251, 0.007341749820899085]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6080796554666368, -0.08519006535019251, 0.007341749820899085]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_822",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.1512435774572323, 0.7377951967240002, -0.45136922043267413]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.1512435774572323, 0.7377951967240002, -0.45136922043267413]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_823",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.013253654594457, -14.669684679297017, -1.888101663794191]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.013253654594457, -14.669684679297017, -1.888101663794191]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_824",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.027744344512634, 4.752755927175479, 1.7339398329334883]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.027744344512634, 4.752755927175479, 1.7339398329334883]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_825",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.0762850076167942, 0.7443977862693717, -0.09502471911509296]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.0762850076167942, 0.7443977862693717, -0.09502471911509296]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_826",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.18029742990040132, -0.6534930820015573, 0.012676895395011795]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.18029742990040132, -0.6534930820015573, 0.012676895395011795]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_827",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.21087907416095214, -0.10180370128521278, -0.006347158826258731]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.21087907416095214, -0.10180370128521278, -0.006347158826258731]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_828",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.274380908394003, 0.24576913367164507, 0.011654974470405772]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.274380908394003, 0.24576913367164507, 0.011654974470405772]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_829",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.208443550726013, 2.061811325270263, 0.20198992537950292]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.208443550726013, 2.061811325270263, 0.20198992537950292]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_830",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.30465300682708385, -0.5316136981831201, -0.05611449642777627]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.30465300682708385, -0.5316136981831201, -0.05611449642777627]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_831",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-8.99940060799385, 11.831804890469629, -3.6680491841189284]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.99940060799385, 11.831804890469629, -3.6680491841189284]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_832",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-382.0445111854509, -690.146996419219, 99.29453828136504]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-382.0445111854509, -690.146996419219, 99.29453828136504]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_833",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[9.462224848168018, 5.792747573996921, -0.18945654080123348]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.462224848168018, 5.792747573996921, -0.18945654080123348]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_834",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.261437741289465, 1.398989313449261, -0.42985867794494215]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.261437741289465, 1.398989313449261, -0.42985867794494215]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_835",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.485440654075564, -121.81187909912043, 26.708929612826925]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.485440654075564, -121.81187909912043, 26.708929612826925]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_836",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-20.36366625279652, 52.37087074570881, -5.957308554934067]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-20.36366625279652, 52.37087074570881, -5.957308554934067]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_837",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-158.2460854838806, -1406.7609491848175, 110.26248034696746]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-158.2460854838806, -1406.7609491848175, 110.26248034696746]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_838",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.76702030113701, -45.07797543996905, -73.273495502191]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.76702030113701, -45.07797543996905, -73.273495502191]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_839",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[9.537289387316658, 14.405187272091556, 2.6275134471959194]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.537289387316658, 14.405187272091556, 2.6275134471959194]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_840",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-220.90381190626485, -56.08893510643418, 68.6482082618849]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-220.90381190626485, -56.08893510643418, 68.6482082618849]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_841",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[10.473783288923368, 22.59848569737278, 0.48429981957689294]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.473783288923368, 22.59848569737278, 0.48429981957689294]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_842",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.6106804757032587, -0.008266291015655347, 0.01002253750935998]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.6106804757032587, -0.008266291015655347, 0.01002253750935998]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_843",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.017416849565425607, -0.09943593737445376, 0.0014589442562750554]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.017416849565425607, -0.09943593737445376, 0.0014589442562750554]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_844",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.1075042012153138, 0.3819730210027777, -0.04184223056366663]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1075042012153138, 0.3819730210027777, -0.04184223056366663]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_845",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[37.37007742201457, 58.26529776644428, -13.888670620908147]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[37.37007742201457, 58.26529776644428, -13.888670620908147]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_846",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.097551670537375, -1.5040958769481239, 0.04758152370428878]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.097551670537375, -1.5040958769481239, 0.04758152370428878]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_847",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-764.8471389951166, -5426.407113541987, 9519.866224534257]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-764.8471389951166, -5426.407113541987, 9519.866224534257]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_848",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-11.296506910854674, 17.5108255712954, -2.2407069865290903]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.296506910854674, 17.5108255712954, -2.2407069865290903]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_849",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[148.10669806462124, -224.08033162801775, 82.01748131398519]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[148.10669806462124, -224.08033162801775, 82.01748131398519]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_850",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.037785014921992, -292.7801352677203, 0.3219924784416479]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.037785014921992, -292.7801352677203, 0.3219924784416479]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_851",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.657810924240688, -19.14553351056125, 22.33113234755335]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.657810924240688, -19.14553351056125, 22.33113234755335]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_852",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.71936676982572, -14.757925845241417, -7.056981933200034]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.71936676982572, -14.757925845241417, -7.056981933200034]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_853",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[30.630091549669753, -2.8360855944288605, -9.029555954883609]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[30.630091549669753, -2.8360855944288605, -9.029555954883609]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_854",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.1929743075437895, -0.1911926362715874, -0.0003800735588498197]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1929743075437895, -0.1911926362715874, -0.0003800735588498197]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_855",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[22.603359402065227, -11.147618952358199, -11.170183822423406]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[22.603359402065227, -11.147618952358199, -11.170183822423406]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_856",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-16.240668616439493, -34.19355880743217, -3.0607580936818324]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.240668616439493, -34.19355880743217, -3.0607580936818324]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_857",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.664151059848487, 16.535344667391637, -1.9508567648333475]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.664151059848487, 16.535344667391637, -1.9508567648333475]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_858",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.765872128800169, 3.403335251060801, 9.479803485512562]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.765872128800169, 3.403335251060801, 9.479803485512562]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_859",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-54.3484341149075, 73.54709252786998, -24.236230704599187]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-54.3484341149075, 73.54709252786998, -24.236230704599187]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_860",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[787.1588787838248, 1379.4408157217615, -2213.3916385594243]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[787.1588787838248, 1379.4408157217615, -2213.3916385594243]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_861",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[117.15543670367052, -5505.993906306363, 12753.884922906447]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[117.15543670367052, -5505.993906306363, 12753.884922906447]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_862",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-63.09003686999464, 79.30514794399618, -24.66877945474674]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-63.09003686999464, 79.30514794399618, -24.66877945474674]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_863",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.6163347393518672, 0.7246627339011176, -0.08661667318023862]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.6163347393518672, 0.7246627339011176, -0.08661667318023862]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_864",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.40300144061298093, -0.7068790023085745, -0.2141601345622588]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.40300144061298093, -0.7068790023085745, -0.2141601345622588]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_865",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.6975514220132055, -5.331768337271766, 0.9658891867212404]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.6975514220132055, -5.331768337271766, 0.9658891867212404]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_866",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.5106614601723725, -58.74779659146084, 23.006301438383726]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.5106614601723725, -58.74779659146084, 23.006301438383726]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_867",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.656038835163563, -1.4226680047215061, 0.06877539807092099]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.656038835163563, -1.4226680047215061, 0.06877539807092099]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_868",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[33.68936929014906, -66.82416238766285, 5.044191198910058]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[33.68936929014906, -66.82416238766285, 5.044191198910058]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_869",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6684089403941824, 0.004994682363752114, 0.002362707796661957]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6684089403941824, 0.004994682363752114, 0.002362707796661957]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_870",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[48.94030292307365, 20.067212879400415, -1.6471951948891759]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[48.94030292307365, 20.067212879400415, -1.6471951948891759]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_871",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.022174393560677, -0.8097632817317926, 0.07346693383501644]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.022174393560677, -0.8097632817317926, 0.07346693383501644]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_872",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[22.11258178293961, -5.245313558629056, -0.36074479832088907]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[22.11258178293961, -5.245313558629056, -0.36074479832088907]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_873",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[31.100215242891867, -42.23035820028706, -30.770605595473967]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[31.100215242891867, -42.23035820028706, -30.770605595473967]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_874",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[276.27627535446254, -1614.1643296846032, -22.707120848430854]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[276.27627535446254, -1614.1643296846032, -22.707120848430854]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_875",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.7898832042675044, 0.5063676087330264, -0.2797970581845769]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7898832042675044, 0.5063676087330264, -0.2797970581845769]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_876",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.9179673365321097, -1.5026381646393654, 1.8239468089542992]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.9179673365321097, -1.5026381646393654, 1.8239468089542992]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_877",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[399.50545369663587, 7851.349461805632, -123440.36398236721]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[399.50545369663587, 7851.349461805632, -123440.36398236721]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_878",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.495226949765623, -1062.1384303954374, -3057.178267661279]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.495226949765623, -1062.1384303954374, -3057.178267661279]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_879",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.0031236271455721276, -10.194183695483307, -12.335463849855287]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0031236271455721276, -10.194183695483307, -12.335463849855287]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_880",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[131.1467214801221, -296.6277554773425, -1250.1028783224542]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[131.1467214801221, -296.6277554773425, -1250.1028783224542]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_881",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.0656445945851383, -17.861142648809995, 34.910936266018325]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.0656445945851383, -17.861142648809995, 34.910936266018325]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_882",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.989043185694061, 0.7639974721055022, 0.047791848553242214]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.989043185694061, 0.7639974721055022, 0.047791848553242214]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_883",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[119.53299453751613, -63.74574307027167, 8.43804214382057]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[119.53299453751613, -63.74574307027167, 8.43804214382057]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_884",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.7451356861390344, -4.698876864808394, 0.7314328097773166]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.7451356861390344, -4.698876864808394, 0.7314328097773166]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_885",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.7823939382699274, -7.734217488944687, -4.140359946600118]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.7823939382699274, -7.734217488944687, -4.140359946600118]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_886",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6220657722141484, -0.3008865130424712, -0.009013280617966043]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6220657722141484, -0.3008865130424712, -0.009013280617966043]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_887",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.609356088075394, -0.5714061949128775, 0.02438967036783261]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.609356088075394, -0.5714061949128775, 0.02438967036783261]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_888",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-12.431734183740202, 3.80541903702285, -0.10826086887716886]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.431734183740202, 3.80541903702285, -0.10826086887716886]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_889",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[46.00083850923984, -8.527777981782892, 0.31652525176461294]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[46.00083850923984, -8.527777981782892, 0.31652525176461294]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_890",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.19486774850835697, -1.080320472436085, 0.0769694810927488]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.19486774850835697, -1.080320472436085, 0.0769694810927488]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_891",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.40368522039454197, -0.03372065990745189, -0.004274194277104158]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.40368522039454197, -0.03372065990745189, -0.004274194277104158]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_892",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.2441350379232485, 0.5054219732280264, -0.06692241633123984]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2441350379232485, 0.5054219732280264, -0.06692241633123984]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_893",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.946093718943184, -3.2161170155792598, 0.1824248132649096]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.946093718943184, -3.2161170155792598, 0.1824248132649096]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_894",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[22.025098666172156, 9.404974141808708, -926.1443152650842]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[22.025098666172156, 9.404974141808708, -926.1443152650842]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_895",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-20.247287577394577, 36.97400879437341, -17.649596669421474]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-20.247287577394577, 36.97400879437341, -17.649596669421474]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_896",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[70.94666770518204, 216.1612798260918, -141.30852198425472]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[70.94666770518204, 216.1612798260918, -141.30852198425472]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_897",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.536294108217257, -42.94141420962247, -59.875454792269714]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.536294108217257, -42.94141420962247, -59.875454792269714]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_898",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-22.914030986401578, 1.662241630187258, 0.7034319969750429]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-22.914030986401578, 1.662241630187258, 0.7034319969750429]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_899",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[47.84236558474874, -28.354645079940987, -8.112734337607295]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[47.84236558474874, -28.354645079940987, -8.112734337607295]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_900",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.90688785505332, -0.03992370324026484, 0.12727675091268453]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.90688785505332, -0.03992370324026484, 0.12727675091268453]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_901",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.6136223255245479, 0.48603087060052885, -0.01631325068242006]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.6136223255245479, 0.48603087060052885, -0.01631325068242006]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_902",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.49376051716128, 9.501833248622999, -3.3957420121084123]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.49376051716128, 9.501833248622999, -3.3957420121084123]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_903",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.360227230324198, -42.11853978920449, -17.77215418823876]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.360227230324198, -42.11853978920449, -17.77215418823876]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_904",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-13.61038317369315, -23.16736932679971, -3.7016478755781104]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-13.61038317369315, -23.16736932679971, -3.7016478755781104]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_905",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.974926161648395, 0.011008628076371485, -0.18019864291945364]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.974926161648395, 0.011008628076371485, -0.18019864291945364]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_906",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-15.095128770070387, 52.714391432358845, -46.106234234126596]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-15.095128770070387, 52.714391432358845, -46.106234234126596]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_907",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.272870797937286, -2.2383412999387047, -0.015175124965671938]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.272870797937286, -2.2383412999387047, -0.015175124965671938]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_908",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[497.22440355594273, 253.50622100300052, -966.6661077099598]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[497.22440355594273, 253.50622100300052, -966.6661077099598]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_909",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[12.63460755743772, 29.799768285968597, -15.710180426296539]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.63460755743772, 29.799768285968597, -15.710180426296539]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_910",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.8161246450129243, -26.684232188128178, -1.8722356992948967]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8161246450129243, -26.684232188128178, -1.8722356992948967]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_911",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.625869266577434, 0.3137518669898851, -0.0022706478681405067]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.625869266577434, 0.3137518669898851, -0.0022706478681405067]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_912",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.5244703453272488, 0.17342618436509522, 0.02000371758735696]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5244703453272488, 0.17342618436509522, 0.02000371758735696]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_913",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[9.048523579088636, 2.3231943356712303, -17.261383112386483]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.048523579088636, 2.3231943356712303, -17.261383112386483]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_914",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-237.09679962945572, 2188.778761800352, -5131.753518147336]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-237.09679962945572, 2188.778761800352, -5131.753518147336]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_915",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.2426036165741401, -0.014781588363831444, -0.0027386025014552325]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2426036165741401, -0.014781588363831444, -0.0027386025014552325]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_916",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.9760285103754274, 0.002422484947141146, 0.03828729577607338]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9760285103754274, 0.002422484947141146, 0.03828729577607338]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_917",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[14.603738905225114, 7.793942312991493, 0.813902787552412]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[14.603738905225114, 7.793942312991493, 0.813902787552412]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_918",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-120.63421630834799, 54.685123137672996, 199.2112452298545]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-120.63421630834799, 54.685123137672996, 199.2112452298545]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_919",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-41.658547366567504, -1462.23829778195, -3093.605963862402]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-41.658547366567504, -1462.23829778195, -3093.605963862402]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_920",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.469946333848419, 0.9610422616047533, 0.017545034769925184]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.469946333848419, 0.9610422616047533, 0.017545034769925184]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_921",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-25.347147631186488, 31.383439657799194, -3.0848713723780055]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-25.347147631186488, 31.383439657799194, -3.0848713723780055]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_922",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-118.48576011950263, -147.95983193820314, -35.98483462495645]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-118.48576011950263, -147.95983193820314, -35.98483462495645]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_923",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.2742383603017913, 0.016717023055366632, 1.054307545698831e-05]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2742383603017913, 0.016717023055366632, 1.054307545698831e-05]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_924",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[16.294891390898556, 28.045153404895625, -42.9919977616968]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[16.294891390898556, 28.045153404895625, -42.9919977616968]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_925",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.688877831565073, -1.379384497675676, 0.00020064410769785805]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.688877831565073, -1.379384497675676, 0.00020064410769785805]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_926",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.907509111001021, -12.926192826067053, -5.77349684371202]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.907509111001021, -12.926192826067053, -5.77349684371202]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_927",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.602427785187036, 2.8623641586822863, 0.02602688825611873]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.602427785187036, 2.8623641586822863, 0.02602688825611873]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_928",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.657860484535156, 5.94002569550228, 1.1962448521184812]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.657860484535156, 5.94002569550228, 1.1962448521184812]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_929",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[14.771916503829793, 27.905770929677296, 10.680715320002184]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[14.771916503829793, 27.905770929677296, 10.680715320002184]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_930",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.7681280440885145, 0.2439761461727133, -0.2665330006497715]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.7681280440885145, 0.2439761461727133, -0.2665330006497715]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_931",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.012103403440049, 1.4388095817022166, 1.0883166067085581]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.012103403440049, 1.4388095817022166, 1.0883166067085581]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_932",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6745785551918333, -2.213807789244544, 0.5038866608980795]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6745785551918333, -2.213807789244544, 0.5038866608980795]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_933",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.126829327755892, -0.5404292024225363, 0.04504125638374078]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.126829327755892, -0.5404292024225363, 0.04504125638374078]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_934",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.18601545176239842, -11.935989938208515, 15.215246730609712]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.18601545176239842, -11.935989938208515, 15.215246730609712]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_935",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[16.91062003651581, -32.42758995130413, 12.291884166462868]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[16.91062003651581, -32.42758995130413, 12.291884166462868]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_936",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5530534417524453, -0.05768467278337866, -0.019242236186617682]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5530534417524453, -0.05768467278337866, -0.019242236186617682]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_937",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.1427663958537675, -1.9000077069081394, 0.03332354776992959]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.1427663958537675, -1.9000077069081394, 0.03332354776992959]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_938",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[14.045223894600634, 26.003016144685496, 12.622993484514101]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[14.045223894600634, 26.003016144685496, 12.622993484514101]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_939",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.0566948694491893, -2.571340993434531, 0.5901646157021677]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0566948694491893, -2.571340993434531, 0.5901646157021677]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_940",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.345450366029321, 0.38264111213039537, 0.048182644977384295]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.345450366029321, 0.38264111213039537, 0.048182644977384295]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_941",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.4989920454494388, -5.248429678177326, 2.7701646814242307]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.4989920454494388, -5.248429678177326, 2.7701646814242307]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_942",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[203.82018315878386, 635.5791181751206, -169.08709457483712]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[203.82018315878386, 635.5791181751206, -169.08709457483712]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_943",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.6225036202178327, 0.11717048632919355, 0.020514755756358426]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.6225036202178327, 0.11717048632919355, 0.020514755756358426]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_944",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.1394528465442808, -0.331701986650053, 0.05879690472149683]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1394528465442808, -0.331701986650053, 0.05879690472149683]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_945",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.3325715266217302, -0.7418934718351444, -0.041982228426705376]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3325715266217302, -0.7418934718351444, -0.041982228426705376]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_946",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[54.93719324838236, 102.45259709809615, 48.030250854102306]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[54.93719324838236, 102.45259709809615, 48.030250854102306]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_947",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.561487230587519, 14.191927520077297, -4.03692615364648]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.561487230587519, 14.191927520077297, -4.03692615364648]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_948",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.735019263426613, 0.09773211005746416, -0.002747342447369917]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.735019263426613, 0.09773211005746416, -0.002747342447369917]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_949",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[368.19679050264716, 211.1230153881377, 19.960793728820185]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[368.19679050264716, 211.1230153881377, 19.960793728820185]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_950",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[746.6662621774659, -4542.81441839193, -384.1660436693027]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[746.6662621774659, -4542.81441839193, -384.1660436693027]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_951",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.851529373391986, 4.577971838831371, -0.22230344313158276]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.851529373391986, 4.577971838831371, -0.22230344313158276]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_952",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-404.49793281127864, 107.57302965957099, 103.96491518764556]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-404.49793281127864, 107.57302965957099, 103.96491518764556]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_953",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.4897563701104561, -0.15658924266704746, -0.00133523001815849]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4897563701104561, -0.15658924266704746, -0.00133523001815849]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_954",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-149.99734600342566, 5421.98397539566, 188.2632726895439]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-149.99734600342566, 5421.98397539566, 188.2632726895439]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_955",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[9.815312534092158, -476.2327150476057, 38.26912947680543]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.815312534092158, -476.2327150476057, 38.26912947680543]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_956",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[19.108871312270956, 80.01450743976824, 1.7666213161990811]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[19.108871312270956, 80.01450743976824, 1.7666213161990811]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_957",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.8692651516033629, -0.023502271277536596, 0.10091039358928632]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8692651516033629, -0.023502271277536596, 0.10091039358928632]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_958",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-110.73819028053323, 250.26435122087193, -78.20980708251443]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-110.73819028053323, 250.26435122087193, -78.20980708251443]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_959",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-22.51859833832873, 45.70877209081912, -23.176533919180404]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-22.51859833832873, 45.70877209081912, -23.176533919180404]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_960",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-16.807161223027208, -34.44562826674185, 92.82401719612677]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.807161223027208, -34.44562826674185, 92.82401719612677]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_961",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.181686508217751, -6.0627554110798645, 1.995713268799879]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.181686508217751, -6.0627554110798645, 1.995713268799879]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_962",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.017474535008903, -13.342620024733684, -8.414098498336983]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.017474535008903, -13.342620024733684, -8.414098498336983]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_963",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-11.491233080736038, 11.497753177528699, -1.1426687381766574]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.491233080736038, 11.497753177528699, -1.1426687381766574]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_964",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[97.9372868477857, 1166.3324872190522, 142.56216531405832]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[97.9372868477857, 1166.3324872190522, 142.56216531405832]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_965",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[155.32027258035725, -159.69900679395235, -2.4583577026525125]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[155.32027258035725, -159.69900679395235, -2.4583577026525125]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_966",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[11.66423845112778, 32.23783131812802, -6.724254031018974]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.66423845112778, 32.23783131812802, -6.724254031018974]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_967",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.0974486111296469, 0.3480163845498152, 0.026235001603511676]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0974486111296469, 0.3480163845498152, 0.026235001603511676]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_968",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.19073705195056, 0.1553029375317485, 0.9065245712270689]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.19073705195056, 0.1553029375317485, 0.9065245712270689]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_969",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[26.63947080869091, -299.2173911282216, 466.5671992890791]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[26.63947080869091, -299.2173911282216, 466.5671992890791]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_970",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.08797054511081459, -1.8004295895454605, 0.013132381075726195]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08797054511081459, -1.8004295895454605, 0.013132381075726195]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_971",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[9.24492777912172, 24.038446280247705, 12.434963652657329]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.24492777912172, 24.038446280247705, 12.434963652657329]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_972",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[16.614729091210016, 53.5330942449553, -76.65284752875338]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[16.614729091210016, 53.5330942449553, -76.65284752875338]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_973",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-18.49277939026293, -7.586775272520245, 3.982971214256301]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-18.49277939026293, -7.586775272520245, 3.982971214256301]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_974",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-539.3607689295517, 1154.0394708385256, -504.1968510617475]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-539.3607689295517, 1154.0394708385256, -504.1968510617475]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_975",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-66.18612160300646, 1020.1294548242248, 499.5941767619093]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-66.18612160300646, 1020.1294548242248, 499.5941767619093]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_976",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[39.24207131372363, -365.570924165031, -13378.262359088845]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[39.24207131372363, -365.570924165031, -13378.262359088845]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_977",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.710938282873901, -36.89253334984113, 17.692423491141835]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.710938282873901, -36.89253334984113, 17.692423491141835]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_978",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.406839363901348, 1.7344636936513629, 1.5885818181297402]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.406839363901348, 1.7344636936513629, 1.5885818181297402]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_979",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.2032261886675923, -0.12059339148295611, 0.06688166647049493]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2032261886675923, -0.12059339148295611, 0.06688166647049493]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_980",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.795978710968127, 1.2283537944097014, -1.4001957303505934]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.795978710968127, 1.2283537944097014, -1.4001957303505934]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_981",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.342007173593556, 3.9368833562129284, 2.515374765626594]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.342007173593556, 3.9368833562129284, 2.515374765626594]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_982",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.279202009195936, -1.3445672712189252, -0.1902695426587403]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.279202009195936, -1.3445672712189252, -0.1902695426587403]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_983",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.2010238159341986, 1.0533604427773113, -0.15283970415129805]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.2010238159341986, 1.0533604427773113, -0.15283970415129805]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_984",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.606034458386153, -8.788254299365974, -3.0560079889821994]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.606034458386153, -8.788254299365974, -3.0560079889821994]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_985",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.406935928522444, -165.18853791894279, -192.29973682787505]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.406935928522444, -165.18853791894279, -192.29973682787505]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_986",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-54.8355105574008, 367.08732841607537, -235.37213751263448]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-54.8355105574008, 367.08732841607537, -235.37213751263448]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_987",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.183736386347265, -165.73597120385273, -406.6475631965362]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.183736386347265, -165.73597120385273, -406.6475631965362]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_988",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.228935258033551, -7.436303129873118, 0.5622367475882434]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.228935258033551, -7.436303129873118, 0.5622367475882434]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_989",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.094697992261868, 4.030456794794464, 0.4482374103284646]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.094697992261868, 4.030456794794464, 0.4482374103284646]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_990",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1079.0115228994246, 278332.5911467027, 2921256.912043147]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1079.0115228994246, 278332.5911467027, 2921256.912043147]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_991",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-84.00092001088045, 97.34861126222935, -4.498992825662556]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-84.00092001088045, 97.34861126222935, -4.498992825662556]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_992",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.867025267997407, 4.488718720955409, -0.31351707442831195]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.867025267997407, 4.488718720955409, -0.31351707442831195]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_993",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.5418339779966868, 0.3758825954933857, -0.0017436434332145532]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5418339779966868, 0.3758825954933857, -0.0017436434332145532]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_994",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.119565411960723, 1.1089341746728418, -0.014944013305924939]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.119565411960723, 1.1089341746728418, -0.014944013305924939]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_995",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.418990157895158, 0.6624850738257007, -0.4919184603878539]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.418990157895158, 0.6624850738257007, -0.4919184603878539]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_996",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.9385073556913013, -0.06530587631462373, 0.02922860182871223]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.9385073556913013, -0.06530587631462373, 0.02922860182871223]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_997",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-35.03670451404956, -239.3021635081593, -328.0910598138792]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-35.03670451404956, -239.3021635081593, -328.0910598138792]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_998",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-18.01529992386857, -0.10787588375359891, 0.03920347617359119]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-18.01529992386857, -0.10787588375359891, 0.03920347617359119]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_999",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-23.048829076114, 130.41172499654792, -24.231566681717233]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-23.048829076114, 130.41172499654792, -24.231566681717233]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  }
]