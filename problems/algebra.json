[
  {
    "name": "QuadraticRoot_0",
    "sat": "def sat(x: float, coeffs: List[float]=[2.5, 1.3, -0.5]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.5, 1.3, -0.5]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.5, 1.3, -0.5]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_1",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.02594949198759851, 4.446531071872568, 1.3753336407819672]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.02594949198759851, 4.446531071872568, 1.3753336407819672]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.02594949198759851, 4.446531071872568, 1.3753336407819672]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_2",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.944385008053097, 0.36615224054270373, 1.4935226216174675]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.944385008053097, 0.36615224054270373, 1.4935226216174675]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.944385008053097, 0.36615224054270373, 1.4935226216174675]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_3",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.628239486906232, -13.602730413345855, -2.404441810616588]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.628239486906232, -13.602730413345855, -2.404441810616588]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.628239486906232, -13.602730413345855, -2.404441810616588]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_4",
    "sat": "def sat(x: float, coeffs: List[float]=[1.2739654714795383, 0.21125441653587332, -0.07556481262706893]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2739654714795383, 0.21125441653587332, -0.07556481262706893]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.2739654714795383, 0.21125441653587332, -0.07556481262706893]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_5",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.7597041805603966, 11.472736092713452, -0.45073410652592905]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.7597041805603966, 11.472736092713452, -0.45073410652592905]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.7597041805603966, 11.472736092713452, -0.45073410652592905]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_6",
    "sat": "def sat(x: float, coeffs: List[float]=[0.25030982730798024, -3.110775258534664, -1.92322244410389]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.25030982730798024, -3.110775258534664, -1.92322244410389]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.25030982730798024, -3.110775258534664, -1.92322244410389]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_7",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.0509005839779774, -2.505987240951752, 26850.718956273195]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.0509005839779774, -2.505987240951752, 26850.718956273195]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.0509005839779774, -2.505987240951752, 26850.718956273195]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_8",
    "sat": "def sat(x: float, coeffs: List[float]=[0.016400383619349073, 0.37717487206938244, 2.087222894700811]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.016400383619349073, 0.37717487206938244, 2.087222894700811]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.016400383619349073, 0.37717487206938244, 2.087222894700811]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_9",
    "sat": "def sat(x: float, coeffs: List[float]=[3.5275661471956883, -48.91394818774358, -84944.07300084886]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.5275661471956883, -48.91394818774358, -84944.07300084886]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.5275661471956883, -48.91394818774358, -84944.07300084886]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_10",
    "sat": "def sat(x: float, coeffs: List[float]=[0.10642209727983946, 0.052791379283444906, -0.0020826534264528837]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.10642209727983946, 0.052791379283444906, -0.0020826534264528837]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.10642209727983946, 0.052791379283444906, -0.0020826534264528837]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_11",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1091547997599523, -3.9488159659251, -0.07817122928796245]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1091547997599523, -3.9488159659251, -0.07817122928796245]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.1091547997599523, -3.9488159659251, -0.07817122928796245]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_12",
    "sat": "def sat(x: float, coeffs: List[float]=[0.9528998872679934, -1.7632067387795731, -12.060755845541053]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9528998872679934, -1.7632067387795731, -12.060755845541053]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.9528998872679934, -1.7632067387795731, -12.060755845541053]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_13",
    "sat": "def sat(x: float, coeffs: List[float]=[-16.783618029458452, 0.9196438579773226, 1.132865758719414]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.783618029458452, 0.9196438579773226, 1.132865758719414]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-16.783618029458452, 0.9196438579773226, 1.132865758719414]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_14",
    "sat": "def sat(x: float, coeffs: List[float]=[5.0834702973510595, -5.3758622535682905, 1.313527926355551]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.0834702973510595, -5.3758622535682905, 1.313527926355551]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[5.0834702973510595, -5.3758622535682905, 1.313527926355551]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_15",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.1916247612605093, 0.15528269339796275, 16722.192143585882]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.1916247612605093, 0.15528269339796275, 16722.192143585882]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.1916247612605093, 0.15528269339796275, 16722.192143585882]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_16",
    "sat": "def sat(x: float, coeffs: List[float]=[-11.583206936928514, 0.19986836795198126, 20057.7265970644]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.583206936928514, 0.19986836795198126, 20057.7265970644]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-11.583206936928514, 0.19986836795198126, 20057.7265970644]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_17",
    "sat": "def sat(x: float, coeffs: List[float]=[0.19896644006130323, 3.410579649523974, 1.7026711972146715]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.19896644006130323, 3.410579649523974, 1.7026711972146715]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.19896644006130323, 3.410579649523974, 1.7026711972146715]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_18",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6099968038158584, -0.7639306474929489, -0.8403758406700981]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6099968038158584, -0.7639306474929489, -0.8403758406700981]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.6099968038158584, -0.7639306474929489, -0.8403758406700981]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_19",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5647972017409276, -0.8615922384021348, 0.025164421247119272]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5647972017409276, -0.8615922384021348, 0.025164421247119272]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5647972017409276, -0.8615922384021348, 0.025164421247119272]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_20",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.4053175594755696, -5.477663892247439, -1.5747574933487778]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.4053175594755696, -5.477663892247439, -1.5747574933487778]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.4053175594755696, -5.477663892247439, -1.5747574933487778]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_21",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8259177348233738, 0.4727899487029476, 0.06681808989334093]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8259177348233738, 0.4727899487029476, 0.06681808989334093]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.8259177348233738, 0.4727899487029476, 0.06681808989334093]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_22",
    "sat": "def sat(x: float, coeffs: List[float]=[0.29898446093735953, -1.0855740354953063, -2.029132634264055]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.29898446093735953, -1.0855740354953063, -2.029132634264055]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.29898446093735953, -1.0855740354953063, -2.029132634264055]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_23",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.3120125195784398, -0.2920609628201667, 473.3687512531099]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3120125195784398, -0.2920609628201667, 473.3687512531099]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.3120125195784398, -0.2920609628201667, 473.3687512531099]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_24",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.11285570200213783, -12.430836413365453, 22.321405750129433]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11285570200213783, -12.430836413365453, 22.321405750129433]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.11285570200213783, -12.430836413365453, 22.321405750129433]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_25",
    "sat": "def sat(x: float, coeffs: List[float]=[3.7243132021176053, -2.145435725647069, -5500.514746357927]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.7243132021176053, -2.145435725647069, -5500.514746357927]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[3.7243132021176053, -2.145435725647069, -5500.514746357927]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_26",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5059409249653041, 0.7107842168591595, -0.23461994487533752]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5059409249653041, 0.7107842168591595, -0.23461994487533752]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5059409249653041, 0.7107842168591595, -0.23461994487533752]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_27",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.0737677523997406, -13.556767707729511, 4663.000302477837]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0737677523997406, -13.556767707729511, 4663.000302477837]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.0737677523997406, -13.556767707729511, 4663.000302477837]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_28",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.4590455904379844, -0.09801881027653225, 0.25880833384289825]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.4590455904379844, -0.09801881027653225, 0.25880833384289825]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.4590455904379844, -0.09801881027653225, 0.25880833384289825]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_29",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.2208021838872654, 23.762697854070638, -41.71205710966069]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.2208021838872654, 23.762697854070638, -41.71205710966069]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.2208021838872654, 23.762697854070638, -41.71205710966069]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_30",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.025094748168202303, -5.4993129890636, -5.0526503452507345]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.025094748168202303, -5.4993129890636, -5.0526503452507345]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.025094748168202303, -5.4993129890636, -5.0526503452507345]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_31",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.13815458940458267, 0.04822966934801953, 1.473128003610811]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.13815458940458267, 0.04822966934801953, 1.473128003610811]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.13815458940458267, 0.04822966934801953, 1.473128003610811]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_32",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.22723364716533015, -2.947459230897594, -3.7640478535588793]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.22723364716533015, -2.947459230897594, -3.7640478535588793]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.22723364716533015, -2.947459230897594, -3.7640478535588793]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_33",
    "sat": "def sat(x: float, coeffs: List[float]=[0.28359137712105076, -0.7897251409579741, -0.6482711573011863]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.28359137712105076, -0.7897251409579741, -0.6482711573011863]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.28359137712105076, -0.7897251409579741, -0.6482711573011863]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_34",
    "sat": "def sat(x: float, coeffs: List[float]=[4.2281368116141245, -0.8893956363155294, -306.4254285144874]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.2281368116141245, -0.8893956363155294, -306.4254285144874]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[4.2281368116141245, -0.8893956363155294, -306.4254285144874]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_35",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.1584595335342587, -0.17321233239096268, 542.5509617954903]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.1584595335342587, -0.17321233239096268, 542.5509617954903]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-3.1584595335342587, -0.17321233239096268, 542.5509617954903]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_36",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8426794809110717, 591.9932833245488, -302.0940159110804]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8426794809110717, 591.9932833245488, -302.0940159110804]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.8426794809110717, 591.9932833245488, -302.0940159110804]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_37",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.00525437630205, -14.780541989338674, -39.61804099299928]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.00525437630205, -14.780541989338674, -39.61804099299928]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.00525437630205, -14.780541989338674, -39.61804099299928]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_38",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.16460832302357273, -43.02989194537053, 39.32473305052239]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.16460832302357273, -43.02989194537053, 39.32473305052239]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.16460832302357273, -43.02989194537053, 39.32473305052239]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_39",
    "sat": "def sat(x: float, coeffs: List[float]=[127.51761646119286, -13.658745480306658, -1931.3501121419245]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[127.51761646119286, -13.658745480306658, -1931.3501121419245]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[127.51761646119286, -13.658745480306658, -1931.3501121419245]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_40",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.2161829151667825, -0.8613623547537702, 2.9207263581819274]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.2161829151667825, -0.8613623547537702, 2.9207263581819274]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.2161829151667825, -0.8613623547537702, 2.9207263581819274]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_41",
    "sat": "def sat(x: float, coeffs: List[float]=[541.3777385307939, 3.2952372852112677, -1213.5122256345273]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[541.3777385307939, 3.2952372852112677, -1213.5122256345273]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[541.3777385307939, 3.2952372852112677, -1213.5122256345273]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_42",
    "sat": "def sat(x: float, coeffs: List[float]=[0.22214702015316176, 18.08945442629953, -2.7807388202783785]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.22214702015316176, 18.08945442629953, -2.7807388202783785]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.22214702015316176, 18.08945442629953, -2.7807388202783785]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_43",
    "sat": "def sat(x: float, coeffs: List[float]=[0.08517287447851718, 50.378396792955876, 48.2092314528994]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08517287447851718, 50.378396792955876, 48.2092314528994]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.08517287447851718, 50.378396792955876, 48.2092314528994]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_44",
    "sat": "def sat(x: float, coeffs: List[float]=[0.9505610920853899, -0.5518981058801669, -0.24133093135436917]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9505610920853899, -0.5518981058801669, -0.24133093135436917]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.9505610920853899, -0.5518981058801669, -0.24133093135436917]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_45",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8782690073169156, 11.044125600820829, -2.80210332210639]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8782690073169156, 11.044125600820829, -2.80210332210639]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.8782690073169156, 11.044125600820829, -2.80210332210639]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_46",
    "sat": "def sat(x: float, coeffs: List[float]=[0.11164061491981192, 31.509688760689002, 40.09581752850506]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.11164061491981192, 31.509688760689002, 40.09581752850506]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.11164061491981192, 31.509688760689002, 40.09581752850506]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_47",
    "sat": "def sat(x: float, coeffs: List[float]=[12.342279081197828, 0.09565215923700632, -41.653177101419224]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.342279081197828, 0.09565215923700632, -41.653177101419224]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[12.342279081197828, 0.09565215923700632, -41.653177101419224]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_48",
    "sat": "def sat(x: float, coeffs: List[float]=[0.8600865566173027, -5.840607194566549, -62.47175062739821]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8600865566173027, -5.840607194566549, -62.47175062739821]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.8600865566173027, -5.840607194566549, -62.47175062739821]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_49",
    "sat": "def sat(x: float, coeffs: List[float]=[0.32319810713515923, -0.491236380564309, -0.22856309302828073]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.32319810713515923, -0.491236380564309, -0.22856309302828073]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.32319810713515923, -0.491236380564309, -0.22856309302828073]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_50",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5376706401141611, -6.920342564610617, 20.86933213014707]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5376706401141611, -6.920342564610617, 20.86933213014707]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5376706401141611, -6.920342564610617, 20.86933213014707]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_51",
    "sat": "def sat(x: float, coeffs: List[float]=[-55.90000969169264, -0.12024739410169112, 5.924527808160676]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-55.90000969169264, -0.12024739410169112, 5.924527808160676]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-55.90000969169264, -0.12024739410169112, 5.924527808160676]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_52",
    "sat": "def sat(x: float, coeffs: List[float]=[-19.590118981153207, 0.041341321648885966, 0.8620854425420105]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-19.590118981153207, 0.041341321648885966, 0.8620854425420105]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-19.590118981153207, 0.041341321648885966, 0.8620854425420105]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_53",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3254656741044164, 0.5238450422596412, -0.006206999812511225]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3254656741044164, 0.5238450422596412, -0.006206999812511225]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.3254656741044164, 0.5238450422596412, -0.006206999812511225]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_54",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.4547101786326355, 0.8334015494317809, 0.21760736071520131]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.4547101786326355, 0.8334015494317809, 0.21760736071520131]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.4547101786326355, 0.8334015494317809, 0.21760736071520131]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_55",
    "sat": "def sat(x: float, coeffs: List[float]=[0.03348585202220944, 0.18287255792458113, -0.3210703749945458]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.03348585202220944, 0.18287255792458113, -0.3210703749945458]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.03348585202220944, 0.18287255792458113, -0.3210703749945458]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_56",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.22683259020062238, -0.40352089818179654, 4.7684327124984245]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.22683259020062238, -0.40352089818179654, 4.7684327124984245]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.22683259020062238, -0.40352089818179654, 4.7684327124984245]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_57",
    "sat": "def sat(x: float, coeffs: List[float]=[-224.26493664196224, 0.36179884205598095, 539308.5357185107]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-224.26493664196224, 0.36179884205598095, 539308.5357185107]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-224.26493664196224, 0.36179884205598095, 539308.5357185107]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_58",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.33832275995192623, -0.3907974244602686, 1.0708886148646362]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.33832275995192623, -0.3907974244602686, 1.0708886148646362]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.33832275995192623, -0.3907974244602686, 1.0708886148646362]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_59",
    "sat": "def sat(x: float, coeffs: List[float]=[1.0504740585513048, -51.38730041737738, -9178.058027461098]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0504740585513048, -51.38730041737738, -9178.058027461098]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.0504740585513048, -51.38730041737738, -9178.058027461098]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_60",
    "sat": "def sat(x: float, coeffs: List[float]=[1.29488408407095, 0.4069668693195985, -34.665226091858514]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.29488408407095, 0.4069668693195985, -34.665226091858514]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.29488408407095, 0.4069668693195985, -34.665226091858514]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_61",
    "sat": "def sat(x: float, coeffs: List[float]=[2.7048175822341407, 443.34716757235475, 181.74637472700726]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.7048175822341407, 443.34716757235475, 181.74637472700726]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.7048175822341407, 443.34716757235475, 181.74637472700726]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_62",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7397485947118815, 180.931559392145, 15332.896566988842]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7397485947118815, 180.931559392145, 15332.896566988842]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.7397485947118815, 180.931559392145, 15332.896566988842]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_63",
    "sat": "def sat(x: float, coeffs: List[float]=[0.13263669107469492, -1.1055273385450086, -0.8233744943600209]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.13263669107469492, -1.1055273385450086, -0.8233744943600209]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.13263669107469492, -1.1055273385450086, -0.8233744943600209]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_64",
    "sat": "def sat(x: float, coeffs: List[float]=[1.284662515274433, 0.6453331821785927, -0.8596456146625434]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.284662515274433, 0.6453331821785927, -0.8596456146625434]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.284662515274433, 0.6453331821785927, -0.8596456146625434]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_65",
    "sat": "def sat(x: float, coeffs: List[float]=[0.06021348783945779, -0.1646508262005136, -0.023748177574264475]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06021348783945779, -0.1646508262005136, -0.023748177574264475]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.06021348783945779, -0.1646508262005136, -0.023748177574264475]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_66",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.1642428671338665, -0.1665410041377655, -0.005831732719093287]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1642428671338665, -0.1665410041377655, -0.005831732719093287]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.1642428671338665, -0.1665410041377655, -0.005831732719093287]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_67",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.648729213692245, -0.9443675854135075, 7.697054029683643]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.648729213692245, -0.9443675854135075, 7.697054029683643]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-5.648729213692245, -0.9443675854135075, 7.697054029683643]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_68",
    "sat": "def sat(x: float, coeffs: List[float]=[0.17375171217344695, -2.2610909259340475, -1.789887838992595]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.17375171217344695, -2.2610909259340475, -1.789887838992595]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.17375171217344695, -2.2610909259340475, -1.789887838992595]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_69",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7919268551981494, -0.9837592871777683, -0.12378852604502094]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7919268551981494, -0.9837592871777683, -0.12378852604502094]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.7919268551981494, -0.9837592871777683, -0.12378852604502094]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_70",
    "sat": "def sat(x: float, coeffs: List[float]=[0.051010768229960535, -0.1390192624925981, -3.740635710988787]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.051010768229960535, -0.1390192624925981, -3.740635710988787]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.051010768229960535, -0.1390192624925981, -3.740635710988787]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_71",
    "sat": "def sat(x: float, coeffs: List[float]=[0.18771424775041892, -0.12207680631399602, -0.007499249857812638]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.18771424775041892, -0.12207680631399602, -0.007499249857812638]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.18771424775041892, -0.12207680631399602, -0.007499249857812638]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_72",
    "sat": "def sat(x: float, coeffs: List[float]=[0.42800292611372875, 0.08112637823365694, -0.016621608751330216]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.42800292611372875, 0.08112637823365694, -0.016621608751330216]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.42800292611372875, 0.08112637823365694, -0.016621608751330216]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_73",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.17001953799278935, -0.05992111637166553, -0.005234841787325063]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.17001953799278935, -0.05992111637166553, -0.005234841787325063]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.17001953799278935, -0.05992111637166553, -0.005234841787325063]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_74",
    "sat": "def sat(x: float, coeffs: List[float]=[0.10047637089388517, 75.78069947852337, 67.46716102832725]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.10047637089388517, 75.78069947852337, 67.46716102832725]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.10047637089388517, 75.78069947852337, 67.46716102832725]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_75",
    "sat": "def sat(x: float, coeffs: List[float]=[2.673930067423339, 6.862926814854056, 2.969663146226809]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.673930067423339, 6.862926814854056, 2.969663146226809]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[2.673930067423339, 6.862926814854056, 2.969663146226809]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_76",
    "sat": "def sat(x: float, coeffs: List[float]=[-25.001854912376587, 0.195744472351408, 0.061798960626665386]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-25.001854912376587, 0.195744472351408, 0.061798960626665386]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-25.001854912376587, 0.195744472351408, 0.061798960626665386]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_77",
    "sat": "def sat(x: float, coeffs: List[float]=[-7.394136861231946, 0.47786201015199986, 0.29934983596242526]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.394136861231946, 0.47786201015199986, 0.29934983596242526]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-7.394136861231946, 0.47786201015199986, 0.29934983596242526]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_78",
    "sat": "def sat(x: float, coeffs: List[float]=[0.22842645952645171, 1.2507507659538752, -21.432055348475863]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.22842645952645171, 1.2507507659538752, -21.432055348475863]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.22842645952645171, 1.2507507659538752, -21.432055348475863]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_79",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.008549207918145582, -0.07656991509386739, -0.16731847525417762]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.008549207918145582, -0.07656991509386739, -0.16731847525417762]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.008549207918145582, -0.07656991509386739, -0.16731847525417762]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_80",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.7701865634451603, 3.5013244246665054, 17.255352752940457]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.7701865634451603, 3.5013244246665054, 17.255352752940457]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-1.7701865634451603, 3.5013244246665054, 17.255352752940457]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_81",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.2989782926391027, -0.5138441692355514, 0.11585103004472205]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.2989782926391027, -0.5138441692355514, 0.11585103004472205]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.2989782926391027, -0.5138441692355514, 0.11585103004472205]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_82",
    "sat": "def sat(x: float, coeffs: List[float]=[0.41275210607399043, 0.06433875336492949, -4.790731050160553]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.41275210607399043, 0.06433875336492949, -4.790731050160553]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.41275210607399043, 0.06433875336492949, -4.790731050160553]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_83",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2605950152678689, 0.3783611814705366, -0.5481846148537834]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2605950152678689, 0.3783611814705366, -0.5481846148537834]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.2605950152678689, 0.3783611814705366, -0.5481846148537834]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_84",
    "sat": "def sat(x: float, coeffs: List[float]=[-234.9724422898374, 0.2871411056195612, 16857.836545635982]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-234.9724422898374, 0.2871411056195612, 16857.836545635982]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-234.9724422898374, 0.2871411056195612, 16857.836545635982]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_85",
    "sat": "def sat(x: float, coeffs: List[float]=[1.2114863611634454, 1.8714389235776296, 0.5775802298283973]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.2114863611634454, 1.8714389235776296, 0.5775802298283973]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[1.2114863611634454, 1.8714389235776296, 0.5775802298283973]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_86",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1829546418169091, 0.141788680323933, -65.92459826412265]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1829546418169091, 0.141788680323933, -65.92459826412265]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.1829546418169091, 0.141788680323933, -65.92459826412265]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_87",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.002671141276742839, 0.2793844468400901, -3.5366982844139057]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.002671141276742839, 0.2793844468400901, -3.5366982844139057]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.002671141276742839, 0.2793844468400901, -3.5366982844139057]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_88",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5037740394950648, -19.845508069860184, -5.556270135222997]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5037740394950648, -19.845508069860184, -5.556270135222997]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.5037740394950648, -19.845508069860184, -5.556270135222997]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_89",
    "sat": "def sat(x: float, coeffs: List[float]=[0.20768323707107986, -10.143514833460733, 4.970736355556858]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.20768323707107986, -10.143514833460733, 4.970736355556858]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.20768323707107986, -10.143514833460733, 4.970736355556858]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_90",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8185107213945949, -3.004108914520048, 26132.173081852132]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8185107213945949, -3.004108914520048, 26132.173081852132]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.8185107213945949, -3.004108914520048, 26132.173081852132]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_91",
    "sat": "def sat(x: float, coeffs: List[float]=[0.700720646360122, -63.54212769847436, 29.663627907543283]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.700720646360122, -63.54212769847436, 29.663627907543283]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.700720646360122, -63.54212769847436, 29.663627907543283]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_92",
    "sat": "def sat(x: float, coeffs: List[float]=[12.47305978558524, -0.22974449436773123, -0.18853444135539923]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[12.47305978558524, -0.22974449436773123, -0.18853444135539923]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[12.47305978558524, -0.22974449436773123, -0.18853444135539923]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_93",
    "sat": "def sat(x: float, coeffs: List[float]=[13.81963911162437, 0.005766645045709525, -1.4234055804485624]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[13.81963911162437, 0.005766645045709525, -1.4234055804485624]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[13.81963911162437, 0.005766645045709525, -1.4234055804485624]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_94",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.28173575809622137, 0.030943598643532095, 2.059261023298312]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.28173575809622137, 0.030943598643532095, 2.059261023298312]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-0.28173575809622137, 0.030943598643532095, 2.059261023298312]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_95",
    "sat": "def sat(x: float, coeffs: List[float]=[-4.80487330141809, -0.08614274060295779, 12.801533667006375]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.80487330141809, -0.08614274060295779, 12.801533667006375]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-4.80487330141809, -0.08614274060295779, 12.801533667006375]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_96",
    "sat": "def sat(x: float, coeffs: List[float]=[6.8152142746914, -2.2170820159375855, -51.528340794633955]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.8152142746914, -2.2170820159375855, -51.528340794633955]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[6.8152142746914, -2.2170820159375855, -51.528340794633955]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_97",
    "sat": "def sat(x: float, coeffs: List[float]=[0.4774695791769834, 0.7630775990581024, -0.30357276099708386]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4774695791769834, 0.7630775990581024, -0.30357276099708386]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.4774695791769834, 0.7630775990581024, -0.30357276099708386]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_98",
    "sat": "def sat(x: float, coeffs: List[float]=[0.43579510570240093, -5.898193160177416, 2.3767760857845133]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.43579510570240093, -5.898193160177416, 2.3767760857845133]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[0.43579510570240093, -5.898193160177416, 2.3767760857845133]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "QuadraticRoot_99",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.5984551644672926, -39.190126548069834, -72.11055108101462]):\n    assert type(x) is float, 'x must be of type float'\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.5984551644672926, -39.190126548069834, -72.11055108101462]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "def sol(coeffs=[-2.5984551644672926, -39.190126548069834, -72.11055108101462]):\n    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ]
  },
  {
    "name": "AllQuadraticRoots_0",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.3, -0.5]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3, -0.5]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_1",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.4883591764389812, -0.04269178817779701]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4883591764389812, -0.04269178817779701]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_2",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.430202468425092, -2.7205642489840134]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.430202468425092, -2.7205642489840134]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_3",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.0663897295343405, -16718.908089477758]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.0663897295343405, -16718.908089477758]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_4",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.03350329203686845, -0.44634672818239335]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.03350329203686845, -0.44634672818239335]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_5",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.802579228809115, -0.12824716809969902]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.802579228809115, -0.12824716809969902]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_6",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7916837918544298, -677.9053645675502]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7916837918544298, -677.9053645675502]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_7",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.2995344344578265, 0.013150623448414195]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2995344344578265, 0.013150623448414195]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_8",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[13.764250547432011, 1.2379827142349586]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[13.764250547432011, 1.2379827142349586]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_9",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.016994529097454098, -0.3941392748174025]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.016994529097454098, -0.3941392748174025]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_10",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6746523261533092, -0.2691877316770924]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6746523261533092, -0.2691877316770924]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_11",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.1436829751481057, -3421.9823058968127]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1436829751481057, -3421.9823058968127]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_12",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-687.9562883626216, -1457.5298968687837]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-687.9562883626216, -1457.5298968687837]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_13",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[123.36975374138694, -2.98823651127739]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[123.36975374138694, -2.98823651127739]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_14",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.1855740527696311, -0.945583562501316]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1855740527696311, -0.945583562501316]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_15",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.1353786029678754, -3.027105938109256]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.1353786029678754, -3.027105938109256]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_16",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.15510272873440897, -951.9674476633012]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.15510272873440897, -951.9674476633012]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_17",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-23.17736275244249, -128.93680570025992]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-23.17736275244249, -128.93680570025992]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_18",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.3675477396771017, -0.8804992249796765]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3675477396771017, -0.8804992249796765]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_19",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.20160760491266183, -0.40407570222024014]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.20160760491266183, -0.40407570222024014]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_20",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.48132350019178477, 0.057419661019500204]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.48132350019178477, 0.057419661019500204]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_21",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.636453021482143, -40.89891017361483]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.636453021482143, -40.89891017361483]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_22",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.09910438416125156, -0.001151651158628947]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.09910438416125156, -0.001151651158628947]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_23",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[13.707583168446115, -22.66339486088194]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[13.707583168446115, -22.66339486088194]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_24",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.11473614042130476, 0.003193893505704727]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.11473614042130476, 0.003193893505704727]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_25",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.1163095446010303, 0.13667696951063624]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.1163095446010303, 0.13667696951063624]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_26",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.06719369028131417, -0.008106398096493293]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.06719369028131417, -0.008106398096493293]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_27",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.2207632056733093, 0.8083724674525061]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.2207632056733093, 0.8083724674525061]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_28",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.05798143497470254, -2.9302829415559097]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.05798143497470254, -2.9302829415559097]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_29",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.632693852552215, -0.2013546055076868]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.632693852552215, -0.2013546055076868]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_30",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[15.79885325622581, -1.2054735280918687]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[15.79885325622581, -1.2054735280918687]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_31",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.189428898650176, -0.7244293617325729]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.189428898650176, -0.7244293617325729]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_32",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7267502611134479, -0.027492726776481374]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7267502611134479, -0.027492726776481374]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_33",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.103956370134093, -12434.373722652008]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.103956370134093, -12434.373722652008]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_34",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-12.583713443838292, -11.155941323114359]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-12.583713443838292, -11.155941323114359]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_35",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-21.036284371096343, -53.084416238178]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-21.036284371096343, -53.084416238178]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_36",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.9946023678959464, -24.65390420853619]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.9946023678959464, -24.65390420853619]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_37",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.02018852422853401, -0.15656799663664936]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.02018852422853401, -0.15656799663664936]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_38",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.042104653027301785, -895.1902652768423]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.042104653027301785, -895.1902652768423]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_39",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6025148051114454, 0.06607169097950649]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6025148051114454, 0.06607169097950649]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_40",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.330636919295993, -1066.7960805336565]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.330636919295993, -1066.7960805336565]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_41",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.16211749369565767, -0.03146581301258777]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.16211749369565767, -0.03146581301258777]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_42",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5977692496782884, 0.013942498448020252]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5977692496782884, 0.013942498448020252]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_43",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.818665546611533, -3.575846709103053]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.818665546611533, -3.575846709103053]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_44",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.21636142619456256, -33.20147387745207]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.21636142619456256, -33.20147387745207]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_45",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.632935967067831, 7.511509675728]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.632935967067831, 7.511509675728]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_46",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.0036116214536594526, -102.4439385237057]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.0036116214536594526, -102.4439385237057]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_47",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.18093423199807193, -20.48262512477172]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.18093423199807193, -20.48262512477172]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_48",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.9634414273386422, 3.332409791166927]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.9634414273386422, 3.332409791166927]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_49",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[22.858223345618068, -19344.359825021453]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[22.858223345618068, -19344.359825021453]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_50",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.679096880248214, -13.241397656834021]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.679096880248214, -13.241397656834021]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_51",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[18.898108772179203, -22.912811739961953]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[18.898108772179203, -22.912811739961953]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_52",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.10997910766651404, 0.0004344333999321543]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.10997910766651404, 0.0004344333999321543]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_53",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[190.19860657406835, -393.368333900987]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[190.19860657406835, -393.368333900987]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_54",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5714199750100514, -0.02332873075787567]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5714199750100514, -0.02332873075787567]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_55",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-4.625009058044054, 0.7911014879103426]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-4.625009058044054, 0.7911014879103426]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_56",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.7242743775910062, -2.863706310683148]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7242743775910062, -2.863706310683148]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_57",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.10579635226190875, -0.019803744980181677]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.10579635226190875, -0.019803744980181677]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_58",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.16976782397788845, -53.685281375716066]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.16976782397788845, -53.685281375716066]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_59",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.597388240994857, -0.2994910064290375]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.597388240994857, -0.2994910064290375]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_60",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.9349618558273344, -960.1468831185695]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.9349618558273344, -960.1468831185695]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_61",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.5682776402942085, -0.48726391403783564]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5682776402942085, -0.48726391403783564]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_62",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7249646708998969, 0.13123240128061886]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7249646708998969, 0.13123240128061886]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_63",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6026247789849065, -244.9791920251854]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6026247789849065, -244.9791920251854]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_64",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.9095702341101041, -92.6458311030759]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9095702341101041, -92.6458311030759]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_65",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.45465823208804973, -10.58277349450643]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.45465823208804973, -10.58277349450643]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_66",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.021310727023708953, -719.7550213791922]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.021310727023708953, -719.7550213791922]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_67",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.418729851478276, -7298.911314319898]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.418729851478276, -7298.911314319898]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_68",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.699143356434129, 0.8956021877951724]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.699143356434129, 0.8956021877951724]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_69",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.024366398775258997, -1105.6050258243665]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.024366398775258997, -1105.6050258243665]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_70",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.678290959735627, 0.362271426779617]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.678290959735627, 0.362271426779617]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_71",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.522134952539895, -0.20684479552587962]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.522134952539895, -0.20684479552587962]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_72",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[436.70853514027925, -292.18885635645427]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[436.70853514027925, -292.18885635645427]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_73",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.398418201622534, -57.8977673957375]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.398418201622534, -57.8977673957375]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_74",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-9.944270696270104, 18.729130743810956]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.944270696270104, 18.729130743810956]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_75",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.4138040337556516, -0.08586577257568229]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.4138040337556516, -0.08586577257568229]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_76",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.09753153205350766, -372.3535675720161]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.09753153205350766, -372.3535675720161]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_77",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-41.64030552391953, -1.3247159336805667]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-41.64030552391953, -1.3247159336805667]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_78",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.013829444186815865, -12.59243881083689]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.013829444186815865, -12.59243881083689]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_79",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-20.568225913859358, -62.729256339107124]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-20.568225913859358, -62.729256339107124]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_80",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.6998395309585594, -3.303340856733609]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.6998395309585594, -3.303340856733609]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_81",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.6482675280447344, -21.461199080490196]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6482675280447344, -21.461199080490196]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_82",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5095631597431006, -1448.6929271329004]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5095631597431006, -1448.6929271329004]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_83",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.1932209061291057, -2.0776464832951542]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.1932209061291057, -2.0776464832951542]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_84",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[9.70203748307487, 2.217428043501129]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.70203748307487, 2.217428043501129]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_85",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8260356231854636, -0.09491880964820508]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8260356231854636, -0.09491880964820508]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_86",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[30.32050031983974, 0.2078072753138973]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[30.32050031983974, 0.2078072753138973]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_87",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.0168658107995225, -1.98607105328928]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0168658107995225, -1.98607105328928]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_88",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.44371953768749456, -20751.362290908375]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.44371953768749456, -20751.362290908375]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_89",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.42751789894634706, -16.948660552035737]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.42751789894634706, -16.948660552035737]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_90",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-11.510747103367287, -0.3378896499370978]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.510747103367287, -0.3378896499370978]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_91",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.10505734766632362, -1.1783847345877672]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.10505734766632362, -1.1783847345877672]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_92",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.3699056679941009, -2.2956435235873505]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.3699056679941009, -2.2956435235873505]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_93",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3138490777719001, -0.1785834910757689]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3138490777719001, -0.1785834910757689]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_94",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.573843744872974, 1.2581825387694239]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.573843744872974, 1.2581825387694239]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_95",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.3177930100716277, -0.27357959638161433]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3177930100716277, -0.27357959638161433]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_96",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[55.43863703211542, -0.9057704038006216]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[55.43863703211542, -0.9057704038006216]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_97",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[10.027325208309616, -19.00640349091701]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.027325208309616, -19.00640349091701]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_98",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5744932980497454, -91.4498419860153]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5744932980497454, -91.4498419860153]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "AllQuadraticRoots_99",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.0636282172013805, 0.09706052006304054]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.0636282172013805, 0.09706052006304054]):\n    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ]
  },
  {
    "name": "CubicRoot_0",
    "sat": "def sat(x: float, coeffs: List[float]=[2.0, 1.0, 0.0, 8.0]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.0, 1.0, 0.0, 8.0]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_1",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.03932984889383717, -1.0692346091139955, 306.1134183924369, -479.90508728277655]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.03932984889383717, -1.0692346091139955, 306.1134183924369, -479.90508728277655]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_2",
    "sat": "def sat(x: float, coeffs: List[float]=[-5.095594560467563, -159.99679096427255, -0.159259144144972, 165.51976014660275]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.095594560467563, -159.99679096427255, -0.159259144144972, 165.51976014660275]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_3",
    "sat": "def sat(x: float, coeffs: List[float]=[0.35582099786362303, -0.4241362406061328, 0.0011329740131772088, 4.854179980043295]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.35582099786362303, -0.4241362406061328, 0.0011329740131772088, 4.854179980043295]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_4",
    "sat": "def sat(x: float, coeffs: List[float]=[18.690428451179034, 0.08520860313687839, -0.3730150434187456, 496166.3748157323]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[18.690428451179034, 0.08520860313687839, -0.3730150434187456, 496166.3748157323]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_5",
    "sat": "def sat(x: float, coeffs: List[float]=[-213.05384666034604, -0.35190493861107264, -0.11968160452076974, -0.01769844531929937]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-213.05384666034604, -0.35190493861107264, -0.11968160452076974, -0.01769844531929937]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_6",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8408066229176652, -7.923092599532541, 0.047644023186922256, 25.08201267014103]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8408066229176652, -7.923092599532541, 0.047644023186922256, 25.08201267014103]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_7",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.025089581813167783, 0.05240193492104087, 0.18617001479068981, -0.24831610885678787]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.025089581813167783, 0.05240193492104087, 0.18617001479068981, -0.24831610885678787]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_8",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.49426113683437195, -0.07059330893184741, -12.24370513876915, 2.8591379014110045]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.49426113683437195, -0.07059330893184741, -12.24370513876915, 2.8591379014110045]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_9",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3603908159161862, -2.330297990567838, 0.38625568741482413, -59321.6993014932]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3603908159161862, -2.330297990567838, 0.38625568741482413, -59321.6993014932]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_10",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8554122589298997, 69.44472702432266, 3.6868504636465826, -4.305714502798976]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8554122589298997, 69.44472702432266, 3.6868504636465826, -4.305714502798976]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_11",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1467576139813848, -0.17074974095603235, -461.4112386008678, -292.3183042939679]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1467576139813848, -0.17074974095603235, -461.4112386008678, -292.3183042939679]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_12",
    "sat": "def sat(x: float, coeffs: List[float]=[3.7336103329334, 7.495068483819575, 6.66572032446935, -16966293.165855154]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.7336103329334, 7.495068483819575, 6.66572032446935, -16966293.165855154]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_13",
    "sat": "def sat(x: float, coeffs: List[float]=[-8.718135290695313, -11.032960090159536, 2.1378847905141134, 382.8278002302418]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.718135290695313, -11.032960090159536, 2.1378847905141134, 382.8278002302418]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_14",
    "sat": "def sat(x: float, coeffs: List[float]=[0.550864338083214, -0.08682111818207987, 16.89380383994726, -67.95077247756765]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.550864338083214, -0.08682111818207987, 16.89380383994726, -67.95077247756765]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_15",
    "sat": "def sat(x: float, coeffs: List[float]=[7.141717094009927, -0.08215472920263404, -1.716423871561721, -66447058.020537205]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[7.141717094009927, -0.08215472920263404, -1.716423871561721, -66447058.020537205]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_16",
    "sat": "def sat(x: float, coeffs: List[float]=[0.07810212171185797, 35.79474914006301, -0.20083357854261497, -0.22169400198738545]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.07810212171185797, 35.79474914006301, -0.20083357854261497, -0.22169400198738545]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_17",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.04780100367211215, 0.260335371219689, 28.918113878698332, 72.2195991375891]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.04780100367211215, 0.260335371219689, 28.918113878698332, 72.2195991375891]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_18",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.30366923120742745, 3.7211446786987388, 1.9508537446848857, -24.755036643756583]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.30366923120742745, 3.7211446786987388, 1.9508537446848857, -24.755036643756583]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_19",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.8698959629056375, -0.43401398962749216, 1.5428418452109216, -6510.087238141847]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.8698959629056375, -0.43401398962749216, 1.5428418452109216, -6510.087238141847]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_20",
    "sat": "def sat(x: float, coeffs: List[float]=[27.023637721842217, 3.181587450533927, -0.18185956824873042, -1249605.6455242445]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[27.023637721842217, 3.181587450533927, -0.18185956824873042, -1249605.6455242445]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_21",
    "sat": "def sat(x: float, coeffs: List[float]=[42.307299485885785, 0.41124703488474684, -1.070053334141219, -7484576.773582916]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[42.307299485885785, 0.41124703488474684, -1.070053334141219, -7484576.773582916]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_22",
    "sat": "def sat(x: float, coeffs: List[float]=[0.06880462833354277, -7.9057576691451485, 0.2999018335958972, 19.352883044598876]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.06880462833354277, -7.9057576691451485, 0.2999018335958972, 19.352883044598876]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_23",
    "sat": "def sat(x: float, coeffs: List[float]=[-10.697427885961323, -0.6637708620050725, 0.8271614952093103, -24140.981297407925]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-10.697427885961323, -0.6637708620050725, 0.8271614952093103, -24140.981297407925]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_24",
    "sat": "def sat(x: float, coeffs: List[float]=[-195.71373946547635, -0.7231698575972919, -2.521638118617938, -7943.426944353115]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-195.71373946547635, -0.7231698575972919, -2.521638118617938, -7943.426944353115]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_25",
    "sat": "def sat(x: float, coeffs: List[float]=[372.4101423843279, 105.90217898787104, 0.09304124750826455, -10118.244156297518]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[372.4101423843279, 105.90217898787104, 0.09304124750826455, -10118.244156297518]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_26",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2786935883283708, -0.010510937931341427, -35.011780227500346, 73.32776426884624]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2786935883283708, -0.010510937931341427, -35.011780227500346, 73.32776426884624]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_27",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2942692063384711, -0.09430221987051894, 67.38556083709747, -106.43940073756374]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2942692063384711, -0.09430221987051894, 67.38556083709747, -106.43940073756374]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_28",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.48096187202024154, -1.1968470646710212, -0.2864613142377303, -0.28750482347019624]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.48096187202024154, -1.1968470646710212, -0.2864613142377303, -0.28750482347019624]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_29",
    "sat": "def sat(x: float, coeffs: List[float]=[0.47627497277612435, 0.1473435462094829, -0.571232734229986, 144.16703976065455]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.47627497277612435, 0.1473435462094829, -0.571232734229986, 144.16703976065455]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_30",
    "sat": "def sat(x: float, coeffs: List[float]=[0.5993490698151515, 0.05365004935354337, 0.3833597416099333, 162.02147265760948]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.5993490698151515, 0.05365004935354337, 0.3833597416099333, 162.02147265760948]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_31",
    "sat": "def sat(x: float, coeffs: List[float]=[0.28494936870943316, 1.6982017222466108, -0.6407651837984298, -0.16783331992265577]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.28494936870943316, 1.6982017222466108, -0.6407651837984298, -0.16783331992265577]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_32",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.11001610050337485, -3.184377595320006, 0.1253058931824337, 91.62840262905745]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11001610050337485, -3.184377595320006, 0.1253058931824337, 91.62840262905745]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_33",
    "sat": "def sat(x: float, coeffs: List[float]=[0.3365160701581125, -21.927496366681012, -43.10572071870897, 10.393768900681044]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.3365160701581125, -21.927496366681012, -43.10572071870897, 10.393768900681044]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_34",
    "sat": "def sat(x: float, coeffs: List[float]=[0.10053688197423442, 1.2757819247770292, 0.07549487341613766, -1073.6839555785152]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.10053688197423442, 1.2757819247770292, 0.07549487341613766, -1073.6839555785152]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_35",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1589053678953766, 0.47476508711079496, 11.46987807930949, -1.4887660337767268]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1589053678953766, 0.47476508711079496, 11.46987807930949, -1.4887660337767268]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_36",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.28007498296292477, 0.15212271874341043, -2.093017968997651, 0.44729040519420166]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.28007498296292477, 0.15212271874341043, -2.093017968997651, 0.44729040519420166]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_37",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.728186341398938, 0.1574167633262069, -5.123064280342466, 2.2213763899772676]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.728186341398938, 0.1574167633262069, -5.123064280342466, 2.2213763899772676]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_38",
    "sat": "def sat(x: float, coeffs: List[float]=[0.1447880257668769, -1.5344984730796287, -20.991903831099187, -7.018587281049086]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.1447880257668769, -1.5344984730796287, -20.991903831099187, -7.018587281049086]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_39",
    "sat": "def sat(x: float, coeffs: List[float]=[1.5171337610566973, -482.50304671481314, 0.29803710763632724, 3.6132011648622684]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.5171337610566973, -482.50304671481314, 0.29803710763632724, 3.6132011648622684]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_40",
    "sat": "def sat(x: float, coeffs: List[float]=[4.085043925037192, 1.1328760091182277, -13.208610124592726, 6.654040305188418]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.085043925037192, 1.1328760091182277, -13.208610124592726, 6.654040305188418]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_41",
    "sat": "def sat(x: float, coeffs: List[float]=[4.32089167702578, -0.7517333187451914, -0.14793347274910076, -27.692170152547384]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.32089167702578, -0.7517333187451914, -0.14793347274910076, -27.692170152547384]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_42",
    "sat": "def sat(x: float, coeffs: List[float]=[11.626791697794573, 44.09784710987291, 1.1666795487869959, -85.39760728693716]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[11.626791697794573, 44.09784710987291, 1.1666795487869959, -85.39760728693716]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_43",
    "sat": "def sat(x: float, coeffs: List[float]=[0.138034619951515, -0.39400065119286093, 6.028398984939186, -1.3448464649687717]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.138034619951515, -0.39400065119286093, 6.028398984939186, -1.3448464649687717]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_44",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.26335013792787065, -0.2322259444503858, -140.29134747240406, -15.668868714836867]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.26335013792787065, -0.2322259444503858, -140.29134747240406, -15.668868714836867]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_45",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.4733343149761929, 0.007514736581579602, -0.010031780129597045, 370.13984174195025]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.4733343149761929, 0.007514736581579602, -0.010031780129597045, 370.13984174195025]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_46",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2840465326511135, 6.703744743899539, -0.10922701747702786, -0.5165668904224607]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2840465326511135, 6.703744743899539, -0.10922701747702786, -0.5165668904224607]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_47",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.619022121927216, 264.59366273065865, 0.2790908556667499, -350.1156979902463]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.619022121927216, 264.59366273065865, 0.2790908556667499, -350.1156979902463]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_48",
    "sat": "def sat(x: float, coeffs: List[float]=[0.7403951110192257, -0.756740352578181, -1.525227931378334, -0.1627382082562151]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.7403951110192257, -0.756740352578181, -1.525227931378334, -0.1627382082562151]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_49",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.045362356527460346, 0.4871052086117986, -0.8953048431007308, 0.4105190034939693]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.045362356527460346, 0.4871052086117986, -0.8953048431007308, 0.4105190034939693]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_50",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2645282098844208, 0.5512909442374224, -0.9041973083397737, -0.7247669746133434]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2645282098844208, 0.5512909442374224, -0.9041973083397737, -0.7247669746133434]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_51",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.19804062814080484, -0.10864795634175735, 0.003472297013468554, -0.005010436551006397]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.19804062814080484, -0.10864795634175735, 0.003472297013468554, -0.005010436551006397]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_52",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.18195416300929654, -4.177593474007311, -4.487496391954033, 3.3770040819112594]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.18195416300929654, -4.177593474007311, -4.487496391954033, 3.3770040819112594]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_53",
    "sat": "def sat(x: float, coeffs: List[float]=[40.84452865755687, -0.6642529694514264, -0.4773567347236159, -870935.6737697705]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[40.84452865755687, -0.6642529694514264, -0.4773567347236159, -870935.6737697705]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_54",
    "sat": "def sat(x: float, coeffs: List[float]=[0.050297473100062495, 3.708311131218043, 1.0363046048706976, -30.055152750113372]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.050297473100062495, 3.708311131218043, 1.0363046048706976, -30.055152750113372]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_55",
    "sat": "def sat(x: float, coeffs: List[float]=[15.693168681209725, -0.3204548028488849, 0.7247580494837527, -5232.8976939676695]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[15.693168681209725, -0.3204548028488849, 0.7247580494837527, -5232.8976939676695]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_56",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.16744369541066514, -0.6315939642366094, -170.70431642580024, 414.69688069678386]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.16744369541066514, -0.6315939642366094, -170.70431642580024, 414.69688069678386]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_57",
    "sat": "def sat(x: float, coeffs: List[float]=[9.416752570165075, -1.7009007087455157, 66.2946282713168, 13.436707431516629]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[9.416752570165075, -1.7009007087455157, 66.2946282713168, 13.436707431516629]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_58",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.18757926614152587, 2.3105469317604688, -1.1178140993074115, 0.13797522161464415]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.18757926614152587, 2.3105469317604688, -1.1178140993074115, 0.13797522161464415]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_59",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.5287963172123943, 0.07515139454261432, 12.873433418093569, 4.470498932055268]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5287963172123943, 0.07515139454261432, 12.873433418093569, 4.470498932055268]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_60",
    "sat": "def sat(x: float, coeffs: List[float]=[1.1314972248142183, 15.995195563503763, -613.5224847484279, -4407.727498760365]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1314972248142183, 15.995195563503763, -613.5224847484279, -4407.727498760365]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_61",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6233172549984115, -4.6947255620123265, 1.1323387290470377, 4.102014254129755]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6233172549984115, -4.6947255620123265, 1.1323387290470377, 4.102014254129755]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_62",
    "sat": "def sat(x: float, coeffs: List[float]=[-18.90301041247293, 1.149931999305003, -26.476595962536944, 6.1308317370121586]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-18.90301041247293, 1.149931999305003, -26.476595962536944, 6.1308317370121586]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_63",
    "sat": "def sat(x: float, coeffs: List[float]=[-16.596172958338123, -1.6163199764322211, -0.007227953169565519, -12976.067588745294]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.596172958338123, -1.6163199764322211, -0.007227953169565519, -12976.067588745294]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_64",
    "sat": "def sat(x: float, coeffs: List[float]=[2.9986286974718657, -0.5680227215774242, -6.141560194795313, -0.867465587374639]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.9986286974718657, -0.5680227215774242, -6.141560194795313, -0.867465587374639]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_65",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.3500183161657398, -0.051005621602416396, 1.1282676458543441, -9.099179262929589]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.3500183161657398, -0.051005621602416396, 1.1282676458543441, -9.099179262929589]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_66",
    "sat": "def sat(x: float, coeffs: List[float]=[6.841392580212756, 0.049831385438806976, 11.500927242262643, -1527.1030056990644]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.841392580212756, 0.049831385438806976, 11.500927242262643, -1527.1030056990644]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_67",
    "sat": "def sat(x: float, coeffs: List[float]=[2.5487429264618733, -0.05327472619226311, 0.03380920699176889, -2.7474424819986507]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.5487429264618733, -0.05327472619226311, 0.03380920699176889, -2.7474424819986507]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_68",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.35152682205709834, 2.945358680404557, 0.3447687007735591, -21.8711265341566]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.35152682205709834, 2.945358680404557, 0.3447687007735591, -21.8711265341566]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_69",
    "sat": "def sat(x: float, coeffs: List[float]=[2.599413216785779, -1.4959061116486405, -0.6536847481295237, 378.33942780322093]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.599413216785779, -1.4959061116486405, -0.6536847481295237, 378.33942780322093]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_70",
    "sat": "def sat(x: float, coeffs: List[float]=[-57.94971471302347, 0.523527312345725, 18.37587051525356, -4.036392376210456]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-57.94971471302347, 0.523527312345725, 18.37587051525356, -4.036392376210456]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_71",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.7851098384010243, -95.7208940464189, -0.1557047087884076, 5.163399206556133]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7851098384010243, -95.7208940464189, -0.1557047087884076, 5.163399206556133]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_72",
    "sat": "def sat(x: float, coeffs: List[float]=[0.292236369598806, -0.008295864491020563, 0.6217177395560678, 0.01097274403357547]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.292236369598806, -0.008295864491020563, 0.6217177395560678, 0.01097274403357547]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_73",
    "sat": "def sat(x: float, coeffs: List[float]=[-150.4164053324269, 0.3951068965521962, -0.08687176845192053, 18912.78955554521]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-150.4164053324269, 0.3951068965521962, -0.08687176845192053, 18912.78955554521]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_74",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.33356424637451515, 3.342525298694513, 41.74245630692511, 18.73723321261468]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.33356424637451515, 3.342525298694513, 41.74245630692511, 18.73723321261468]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_75",
    "sat": "def sat(x: float, coeffs: List[float]=[0.2406299772884609, -0.4365009350149133, -0.11192783210021418, 0.10858207860814692]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.2406299772884609, -0.4365009350149133, -0.11192783210021418, 0.10858207860814692]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_76",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8622203699448368, -2.0876809161846817, 3.847168480145345, 1.105918346462323]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8622203699448368, -2.0876809161846817, 3.847168480145345, 1.105918346462323]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_77",
    "sat": "def sat(x: float, coeffs: List[float]=[-19.69083758156619, -0.3757689636533225, -0.4862662958332325, -1275905.8991484542]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-19.69083758156619, -0.3757689636533225, -0.4862662958332325, -1275905.8991484542]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_78",
    "sat": "def sat(x: float, coeffs: List[float]=[0.23972673086685595, 12.531423805828267, -0.8107465905211245, -0.6118773591759518]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.23972673086685595, 12.531423805828267, -0.8107465905211245, -0.6118773591759518]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_79",
    "sat": "def sat(x: float, coeffs: List[float]=[21.62047490575591, -37.31911607268593, 7.021402539467444, 4.580312827719445]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[21.62047490575591, -37.31911607268593, 7.021402539467444, 4.580312827719445]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_80",
    "sat": "def sat(x: float, coeffs: List[float]=[3.9350356927304837, 0.6762740463213732, 145.26383260444342, -52.625040267425206]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.9350356927304837, 0.6762740463213732, 145.26383260444342, -52.625040267425206]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_81",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8296550244213184, 1.4408554281605046, -0.211572619134852, -4.936846940420391]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8296550244213184, 1.4408554281605046, -0.211572619134852, -4.936846940420391]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_82",
    "sat": "def sat(x: float, coeffs: List[float]=[0.08522114751649879, -0.2492481435434725, -0.7072159985840224, 0.09389775392884617]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08522114751649879, -0.2492481435434725, -0.7072159985840224, 0.09389775392884617]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_83",
    "sat": "def sat(x: float, coeffs: List[float]=[-9.943388905661282, 1.2698933222610111, -0.0036675074207804434, 0.6445094380636585]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-9.943388905661282, 1.2698933222610111, -0.0036675074207804434, 0.6445094380636585]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_84",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.7295293129922467, -0.8296631912588892, 3.8456970328658824, 0.038106724597413356]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.7295293129922467, -0.8296631912588892, 3.8456970328658824, 0.038106724597413356]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_85",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.07679710678701435, 0.5643724874938951, 3.526705847826164, -0.6226767979508315]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.07679710678701435, 0.5643724874938951, 3.526705847826164, -0.6226767979508315]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_86",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.5415135928974126, 3.8479630549190795, -0.42092340912388426, -0.021632146343376287]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.5415135928974126, 3.8479630549190795, -0.42092340912388426, -0.021632146343376287]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_87",
    "sat": "def sat(x: float, coeffs: List[float]=[-1.228967478399354, 4.19015489304248, 0.10602193405700862, -2997.1086761508463]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.228967478399354, 4.19015489304248, 0.10602193405700862, -2997.1086761508463]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_88",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.11336672731038815, -0.057519027511776066, 2.1528828651079936, -1.4652344973145441]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11336672731038815, -0.057519027511776066, 2.1528828651079936, -1.4652344973145441]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_89",
    "sat": "def sat(x: float, coeffs: List[float]=[-38.776682042910345, 3.030494274815295, -8.641222394200438, -8565.871665107024]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-38.776682042910345, 3.030494274815295, -8.641222394200438, -8565.871665107024]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_90",
    "sat": "def sat(x: float, coeffs: List[float]=[2.8793707942268547, 4.6186238262439625, 1.507882982995234, 217391.21432356676]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.8793707942268547, 4.6186238262439625, 1.507882982995234, 217391.21432356676]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_91",
    "sat": "def sat(x: float, coeffs: List[float]=[1.9070084541316061, -0.2172844738581836, 0.8619565022454938, -0.38600793021747]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.9070084541316061, -0.2172844738581836, 0.8619565022454938, -0.38600793021747]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_92",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.8769016339125787, -0.3800903692219301, 0.24315785767793466, 0.07605424029470936]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.8769016339125787, -0.3800903692219301, 0.24315785767793466, 0.07605424029470936]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_93",
    "sat": "def sat(x: float, coeffs: List[float]=[-7.608499304621201, 4.589510193026787, -369.3182345886637, 128.32879088581646]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.608499304621201, 4.589510193026787, -369.3182345886637, 128.32879088581646]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_94",
    "sat": "def sat(x: float, coeffs: List[float]=[2.0547972685731537, -0.3149532739249646, 150.06567960903425, 1243.4386269119632]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.0547972685731537, -0.3149532739249646, 150.06567960903425, 1243.4386269119632]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_95",
    "sat": "def sat(x: float, coeffs: List[float]=[-2.3052558253409807, -215.96429315471062, -0.5138763571459172, -262623974.58555147]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.3052558253409807, -215.96429315471062, -0.5138763571459172, -262623974.58555147]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_96",
    "sat": "def sat(x: float, coeffs: List[float]=[-3.524993130996176, 0.8733233708901443, 0.3980172271754478, 0.11627026148845002]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.524993130996176, 0.8733233708901443, 0.3980172271754478, 0.11627026148845002]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_97",
    "sat": "def sat(x: float, coeffs: List[float]=[0.505778366277993, 0.08204039266226, 1.090413949141495, -0.6130122274504952]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.505778366277993, 0.08204039266226, 1.090413949141495, -0.6130122274504952]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_98",
    "sat": "def sat(x: float, coeffs: List[float]=[0.6161092409015442, -21.439085778424722, -1.0408592155259064, 7.00293565474888]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.6161092409015442, -21.439085778424722, -1.0408592155259064, 7.00293565474888]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "CubicRoot_99",
    "sat": "def sat(x: float, coeffs: List[float]=[-0.2820361648639129, 0.20895714026765236, 0.037485919635094365, 39.46192796355273]):\n    assert type(x) is float, 'x must be of type float'\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.2820361648639129, 0.20895714026765236, 0.037485919635094365, 39.46192796355273]):\n    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    answers = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ]
  },
  {
    "name": "AllCubicRoots_0",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.0, -2.0, -1.0]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.0, -2.0, -1.0]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_1",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[8.083273458744513, -3.56864182285186, 0.37798877506665396]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[8.083273458744513, -3.56864182285186, 0.37798877506665396]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_2",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.08173740811072872, -1.2059276267486685, -0.04393842101065364]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.08173740811072872, -1.2059276267486685, -0.04393842101065364]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_3",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-15.52825202746211, 8.744034807137623, 0.11281210004673718]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-15.52825202746211, 8.744034807137623, 0.11281210004673718]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_4",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[228.8713335007692, 12008.483715754948, -15734.247147119515]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[228.8713335007692, 12008.483715754948, -15734.247147119515]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_5",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[74.62649586016151, 22.757052413875996, -0.3093148244205085]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[74.62649586016151, 22.757052413875996, -0.3093148244205085]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_6",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[117.73639147355078, -662.2357158850707, 36.30917706928984]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[117.73639147355078, -662.2357158850707, 36.30917706928984]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_7",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-446.87361381045736, -8004.399377775023, -545.5407258309075]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-446.87361381045736, -8004.399377775023, -545.5407258309075]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_8",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.9361578746782118, -7.934084830629807, 15.116071886047843]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.9361578746782118, -7.934084830629807, 15.116071886047843]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_9",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.230014345068059, 0.2265191690717432, 0.0024145725642329328]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.230014345068059, 0.2265191690717432, 0.0024145725642329328]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_10",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5398531011734893, -0.19314024462281848, 0.09249263971462471]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5398531011734893, -0.19314024462281848, 0.09249263971462471]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_11",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[6.534100649930538, -22.63127227165879, -14.072768646503217]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[6.534100649930538, -22.63127227165879, -14.072768646503217]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_12",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.6494439417322515, -0.48611711776961875, 0.01585939187553353]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.6494439417322515, -0.48611711776961875, 0.01585939187553353]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_13",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.8077316005878665, -4.413103418934446, 3.634620511864172]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.8077316005878665, -4.413103418934446, 3.634620511864172]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_14",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[25.987568539279316, 109.30352551574808, -45.933011842422935]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[25.987568539279316, 109.30352551574808, -45.933011842422935]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_15",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-16.459783282320117, 3.5710598916285434, -0.10543832789980219]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-16.459783282320117, 3.5710598916285434, -0.10543832789980219]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_16",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.280251594069211, 1.5698166567473526, -0.3109102338430915]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.280251594069211, 1.5698166567473526, -0.3109102338430915]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_17",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.77915286785873, 1.6106170529912338, 0.10231259480289917]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.77915286785873, 1.6106170529912338, 0.10231259480289917]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_18",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.336307165511324, 1.7614118287147067, 0.4277512848901015]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.336307165511324, 1.7614118287147067, 0.4277512848901015]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_19",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.8886420641421924, -0.10698584000657246, -0.0006280576950071284]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.8886420641421924, -0.10698584000657246, -0.0006280576950071284]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_20",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[18.45070925850102, 75.4330842929218, 76.19770738659929]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[18.45070925850102, 75.4330842929218, 76.19770738659929]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_21",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-229.99673842482113, -21.06769597101419, 321.28312965710415]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-229.99673842482113, -21.06769597101419, 321.28312965710415]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_22",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[13.917983992734792, -231.51228562079388, -1.4179609218405127]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[13.917983992734792, -231.51228562079388, -1.4179609218405127]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_23",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[14.92074271039732, 54.34088249285153, 8.403516731226206]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[14.92074271039732, 54.34088249285153, 8.403516731226206]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_24",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.029684067693122, -7.990816079386567, 0.7030624156938999]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.029684067693122, -7.990816079386567, 0.7030624156938999]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_25",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.3336639974691962, 0.5323748315928585, 0.06575523592167717]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3336639974691962, 0.5323748315928585, 0.06575523592167717]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_26",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[45.70955368186439, 376.1966615474158, -3030.859712690805]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[45.70955368186439, 376.1966615474158, -3030.859712690805]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_27",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8541771965263978, -1.9322945883911864, -1.524482974093045]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8541771965263978, -1.9322945883911864, -1.524482974093045]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_28",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.9262479817133669, -0.00525245171059574, -0.0028548671196681943]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.9262479817133669, -0.00525245171059574, -0.0028548671196681943]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_29",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.592850440544578, -5.09054854675312, 0.2672102419547219]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.592850440544578, -5.09054854675312, 0.2672102419547219]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_30",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-8.231839207339144, 16.14078417003157, 1.471835568760396]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.231839207339144, 16.14078417003157, 1.471835568760396]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_31",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.7252642591068077, 1.4389877232978256, 0.3718859544395744]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.7252642591068077, 1.4389877232978256, 0.3718859544395744]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_32",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-33.53875909269622, -1088.2626591566468, 172.39180921749605]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-33.53875909269622, -1088.2626591566468, 172.39180921749605]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_33",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-11.954070933538357, 3.851886729420526, 0.1725945315579803]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-11.954070933538357, 3.851886729420526, 0.1725945315579803]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_34",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.5101194862077456, -7.013360553843931, -1.440267336396583]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.5101194862077456, -7.013360553843931, -1.440267336396583]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_35",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[49.59206997903881, 57.99057884052908, -1140.257062535307]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[49.59206997903881, 57.99057884052908, -1140.257062535307]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_36",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.381210893180956, -2.6406156984184235, 0.0014059673164838657]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.381210893180956, -2.6406156984184235, 0.0014059673164838657]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_37",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5283414785215601, -0.14224653283435298, 0.038424421351727224]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5283414785215601, -0.14224653283435298, 0.038424421351727224]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_38",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.9729668005466636, -0.5268990335720601, 0.005832479943205042]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.9729668005466636, -0.5268990335720601, 0.005832479943205042]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_39",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-30.07601199640478, 34.94946059251219, -8.392210898790957]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-30.07601199640478, 34.94946059251219, -8.392210898790957]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_40",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-10.017574841225091, 1.3054617104316868, 0.058874195414401254]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-10.017574841225091, 1.3054617104316868, 0.058874195414401254]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_41",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.241171368882898, -1.9035424915446422, 0.35896792788031545]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.241171368882898, -1.9035424915446422, 0.35896792788031545]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_42",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.5172935853420086, -0.25199891555316056, 0.7750344474349141]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.5172935853420086, -0.25199891555316056, 0.7750344474349141]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_43",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[5.041903590325223, 4.431311855391937, 0.8237683075672881]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[5.041903590325223, 4.431311855391937, 0.8237683075672881]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_44",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.296733398896146, 4.182112312092931, -0.950489799099786]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.296733398896146, 4.182112312092931, -0.950489799099786]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_45",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.1214130711757329, -2.761855750290419, 1.0460784719764904]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1214130711757329, -2.761855750290419, 1.0460784719764904]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_46",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-8.96000268070511, 24.215693268496107, -20.59700707534864]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.96000268070511, 24.215693268496107, -20.59700707534864]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_47",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-30.77822872840075, -10.222896150268284, 0.06150327904350033]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-30.77822872840075, -10.222896150268284, 0.06150327904350033]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_48",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-909.0768856443996, 273.50130295076826, 114.77218849037476]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-909.0768856443996, 273.50130295076826, 114.77218849037476]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_49",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.9003969721122783, -0.47514335102508626, 0.29732883092328116]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.9003969721122783, -0.47514335102508626, 0.29732883092328116]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_50",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.0136742503218725, -3.1106226710005034, 3.4312796565422685]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.0136742503218725, -3.1106226710005034, 3.4312796565422685]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_51",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-15.80443669420152, 7.47344764407012, 2.7675364970309957]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-15.80443669420152, 7.47344764407012, 2.7675364970309957]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_52",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[14.19215666729923, 3.442063903013148, 0.14421421680723348]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[14.19215666729923, 3.442063903013148, 0.14421421680723348]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_53",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-19.271626913810056, 41.28401764924661, 170.4497631906096]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-19.271626913810056, 41.28401764924661, 170.4497631906096]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_54",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.4279156413344651, 0.6410270861174256, 0.08698353985164774]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.4279156413344651, 0.6410270861174256, 0.08698353985164774]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_55",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.1684727182381867, -0.15154542733376977, -0.0006076465638243782]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.1684727182381867, -0.15154542733376977, -0.0006076465638243782]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_56",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-47.50174995133392, 308.93138944512754, -479.08419858597307]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-47.50174995133392, 308.93138944512754, -479.08419858597307]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_57",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[4.487450666866076, 4.566425015299338, 0.6152424374786305]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[4.487450666866076, 4.566425015299338, 0.6152424374786305]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_58",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.421752984196915, 1.0045620828161694, -0.057017430885659935]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.421752984196915, 1.0045620828161694, -0.057017430885659935]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_59",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.3545412227347973, 0.46430778685380836, 0.03055001071774803]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.3545412227347973, 0.46430778685380836, 0.03055001071774803]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_60",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-7.180860343964948, 0.5203238429757298, 0.44428313846669887]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-7.180860343964948, 0.5203238429757298, 0.44428313846669887]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_61",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[23.4909074228739, 17.126731468719278, 1.5598308557114589]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[23.4909074228739, 17.126731468719278, 1.5598308557114589]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_62",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.381841539516499, -0.3425441201936814, -0.00302327417737162]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.381841539516499, -0.3425441201936814, -0.00302327417737162]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_63",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[2.410093690233702, 0.27730004764914196, -0.32821207341585174]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[2.410093690233702, 0.27730004764914196, -0.32821207341585174]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_64",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.292810281190097, -19.799924036108543, -12.544578917111862]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.292810281190097, -19.799924036108543, -12.544578917111862]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_65",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.5923869099153438, -0.08881804548500888, 0.015534075113110321]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.5923869099153438, -0.08881804548500888, 0.015534075113110321]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_66",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-13.506769608271288, -3.7681817990862885, -0.10495384223825709]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-13.506769608271288, -3.7681817990862885, -0.10495384223825709]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_67",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-3.256656939946943, 3.0110297142198834, -0.5959906909373716]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-3.256656939946943, 3.0110297142198834, -0.5959906909373716]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_68",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.16196086617429, -4.415804491006428, 52.29996599108473]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.16196086617429, -4.415804491006428, 52.29996599108473]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_69",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-147.37879502031336, -234.93016460263308, -35.02950155190538]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-147.37879502031336, -234.93016460263308, -35.02950155190538]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_70",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-24.78200088248564, 8.224409238994427, -0.433729004131567]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-24.78200088248564, 8.224409238994427, -0.433729004131567]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_71",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[13.4417389202106, 43.49880309564108, 32.98887619997087]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[13.4417389202106, 43.49880309564108, 32.98887619997087]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_72",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-2.465073066460371, -3.203158110316016, -0.6225902437394643]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-2.465073066460371, -3.203158110316016, -0.6225902437394643]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_73",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[290.88197790388375, -123.26520870105779, -22.08423855962739]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[290.88197790388375, -123.26520870105779, -22.08423855962739]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_74",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.11131917851539674, -0.6496706158731202, -0.1297652124075862]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.11131917851539674, -0.6496706158731202, -0.1297652124075862]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_75",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.855389732734065, 8.48468711312843, 0.10812651854086744]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.855389732734065, 8.48468711312843, 0.10812651854086744]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_76",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.09835373061821044, -0.015969511234004138, -0.00045565826333596887]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.09835373061821044, -0.015969511234004138, -0.00045565826333596887]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_77",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[121.27905319783281, -4.169129934937512, 0.03474850411982947]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[121.27905319783281, -4.169129934937512, 0.03474850411982947]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_78",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-951.3501894767153, 2784.8536986938493, -709.9421628451574]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-951.3501894767153, 2784.8536986938493, -709.9421628451574]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_79",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[10.166525136449334, 6.207030249180962, -52.59701561050222]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[10.166525136449334, 6.207030249180962, -52.59701561050222]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_80",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.3989795406742442, 0.8844813546561903, -3.4358014069047584]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.3989795406742442, 0.8844813546561903, -3.4358014069047584]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_81",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[3.401182852510494, 2.529329169705025, -0.08562423523536077]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[3.401182852510494, 2.529329169705025, -0.08562423523536077]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_82",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-1.3599752336924684, -380.4564905362577, 350.5560119263906]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-1.3599752336924684, -380.4564905362577, 350.5560119263906]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_83",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[350.4426829839222, 30522.54649640785, 408352.39399654145]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[350.4426829839222, 30522.54649640785, 408352.39399654145]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_84",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[16.504476209535568, 27.204600922892766, 9.2300709810552]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[16.504476209535568, 27.204600922892766, 9.2300709810552]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_85",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[1.497792853986547, 0.5844986162253588, 0.040883250154684705]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[1.497792853986547, 0.5844986162253588, 0.040883250154684705]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_86",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.508049499382785, -3.5162829470538597, 3.2052006366006487]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.508049499382785, -3.5162829470538597, 3.2052006366006487]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_87",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[14.659013748609905, 51.20849190733076, -8.22971819695736]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[14.659013748609905, 51.20849190733076, -8.22971819695736]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_88",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-8.96227221020857, 1.79380215244287, 0.005527319201571134]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-8.96227221020857, 1.79380215244287, 0.005527319201571134]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_89",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-5.180740067191036, -4.150531497196431, 0.24900057641021517]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-5.180740067191036, -4.150531497196431, 0.24900057641021517]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_90",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-6.470531972741406, 5.775533741346709, -0.7968767856768296]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-6.470531972741406, 5.775533741346709, -0.7968767856768296]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_91",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.15636688847307398, -0.22174535784389132, 0.028251668916125766]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.15636688847307398, -0.22174535784389132, 0.028251668916125766]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_92",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.6875746516969284, -1.8875145614752382, -0.30694014315495377]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.6875746516969284, -1.8875145614752382, -0.30694014315495377]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_93",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.024316373239862688, -0.27122712104288554, -0.005698146645926604]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.024316373239862688, -0.27122712104288554, -0.005698146645926604]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_94",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[22.59558065248933, -54.257955639512396, 12.837673194593094]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[22.59558065248933, -54.257955639512396, 12.837673194593094]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_95",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-178.8600210275147, -21.063706546725772, 87.82416111294584]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-178.8600210275147, -21.063706546725772, 87.82416111294584]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_96",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[72.07528513989608, 464.7092386663957, 245.63717892939712]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[72.07528513989608, 464.7092386663957, 245.63717892939712]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_97",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-0.7060039904893841, 0.0023693983853678366, 0.0012276254930268034]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-0.7060039904893841, 0.0023693983853678366, 0.0012276254930268034]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_98",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[-30.37167968865042, -17.865953434429194, 15.49832794443232]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[-30.37167968865042, -17.865953434429194, 15.49832794443232]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  },
  {
    "name": "AllCubicRoots_99",
    "sat": "def sat(roots: List[float], coeffs: List[float]=[0.8398963310386983, -6.179848967835315, 1.4318334246925128]):\n    assert type(roots) is list and all(type(a) is float for a in roots), 'roots must be of type List[float]'\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "sols": [
      "def sol(coeffs=[0.8398963310386983, -6.179848967835315, 1.4318334246925128]):\n    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w!=0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans)==3:\n        return ans"
    ]
  }
]