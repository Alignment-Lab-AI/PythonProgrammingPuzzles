[
  {
    "name": "HelloWorld_0",
    "sat": "def sat(s: str):\n    assert type(s) is str, 's must be of type str'\n    return s + 'world' == 'Hello world'",
    "sols": []
  },
  {
    "name": "BackWorlds_0",
    "sat": "def sat(s: str):\n    assert type(s) is str, 's must be of type str'\n    return s[::-1] + 'world' == 'Hello world'",
    "sols": [
      "def sol():\n    return ' olleH'",
      "def sol():  # solution methods must begin with 'sol'\n    return 'Hello '[::-1]"
    ]
  },
  {
    "name": "StrAdd_0",
    "sat": "def sat(st: str, a: str=\"world\", b: str=\"Hello world\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"world\", b=\"Hello world\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_1",
    "sat": "def sat(st: str, a: str=\"yjiq\", b: str=\"fyjiq\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"yjiq\", b=\"fyjiq\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_2",
    "sat": "def sat(st: str, a: str=\"\", b: str=\"ce\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"\", b=\"ce\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_3",
    "sat": "def sat(st: str, a: str=\"banutextygucem\", b: str=\"bythibanutextygucem\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"banutextygucem\", b=\"bythibanutextygucem\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_4",
    "sat": "def sat(st: str, a: str=\"ajamisexotextuf\", b: str=\"pajamisexotextuf\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"ajamisexotextuf\", b=\"pajamisexotextuf\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_5",
    "sat": "def sat(st: str, a: str=\"haru\", b: str=\"risadehugeharu\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"haru\", b=\"risadehugeharu\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_6",
    "sat": "def sat(st: str, a: str=\"nedech\", b: str=\"thakaxunedech\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"nedech\", b=\"thakaxunedech\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_7",
    "sat": "def sat(st: str, a: str=\"extuquixyth\", b: str=\"textuquixyth\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"extuquixyth\", b=\"textuquixyth\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_8",
    "sat": "def sat(st: str, a: str=\"ezotad\", b: str=\"quozezotad\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"ezotad\", b=\"quozezotad\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_9",
    "sat": "def sat(st: str, a: str=\"i\", b: str=\"di\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"i\", b=\"di\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrSetLen_0",
    "sat": "def sat(s: str, dups: int=1000):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=1000):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_1",
    "sat": "def sat(s: str, dups: int=0):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=0):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_2",
    "sat": "def sat(s: str, dups: int=1):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=1):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_3",
    "sat": "def sat(s: str, dups: int=2):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=2):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_4",
    "sat": "def sat(s: str, dups: int=3):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=3):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_5",
    "sat": "def sat(s: str, dups: int=4):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=4):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_6",
    "sat": "def sat(s: str, dups: int=5):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=5):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_7",
    "sat": "def sat(s: str, dups: int=6):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=6):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_8",
    "sat": "def sat(s: str, dups: int=7):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=7):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_9",
    "sat": "def sat(s: str, dups: int=8):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=8):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrMul_0",
    "sat": "def sat(s: str, target: str=\"foofoofoofoo\", n: int=2):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"foofoofoofoo\", n=2):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_1",
    "sat": "def sat(s: str, target: str=\"\", n: int=0):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"\", n=0):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_2",
    "sat": "def sat(s: str, target: str=\"rulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadese\", n: int=7):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"rulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadese\", n=7):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_3",
    "sat": "def sat(s: str, target: str=\"lomucochelomucochelomucochelomucoche\", n: int=2):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"lomucochelomucochelomucochelomucoche\", n=2):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_4",
    "sat": "def sat(s: str, target: str=\"tychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxecho\", n: int=6):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"tychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxecho\", n=6):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_5",
    "sat": "def sat(s: str, target: str=\"rocochaxykyjutityrocochaxykyjutityrocochaxykyjutityrocochaxykyjutityrocochaxykyjutityrocochaxykyjutity\", n: int=6):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"rocochaxykyjutityrocochaxykyjutityrocochaxykyjutityrocochaxykyjutityrocochaxykyjutityrocochaxykyjutity\", n=6):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_6",
    "sat": "def sat(s: str, target: str=\"fibanizfibanizfibanizfibanizfibanizfibaniz\", n: int=3):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"fibanizfibanizfibanizfibanizfibanizfibaniz\", n=3):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_7",
    "sat": "def sat(s: str, target: str=\"xxx\", n: int=1):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"xxx\", n=1):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_8",
    "sat": "def sat(s: str, target: str=\"sixyquozygajafysixyquozygajafysixyquozygajafysixyquozygajafysixyquozygajafysixyquozygajafy\", n: int=2):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"sixyquozygajafysixyquozygajafysixyquozygajafysixyquozygajafysixyquozygajafysixyquozygajafy\", n=2):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_9",
    "sat": "def sat(s: str, target: str=\"vybavybavybavybavybavyba\", n: int=6):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"vybavybavybavybavybavyba\", n=6):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul2_0",
    "sat": "def sat(n: int, target: str=\"foofoofoofoo\", s: str=\"foofoo\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"foofoofoofoo\", s=\"foofoo\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_1",
    "sat": "def sat(n: int, target: str=\"lulogaplulogaplulogaplulogaplulogaplulogaplulogaplulogaplulogap\", s: str=\"lulogaplulogaplulogap\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"lulogaplulogaplulogaplulogaplulogaplulogaplulogaplulogaplulogap\", s=\"lulogaplulogaplulogap\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_2",
    "sat": "def sat(n: int, target: str=\"fipesepuwywakyjifipesepuwywakyjifipesepuwywakyjifipesepuwywakyjifipesepuwywakyjifipesepuwywakyji\", s: str=\"fipesepuwywakyjifipesepuwywakyji\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"fipesepuwywakyjifipesepuwywakyjifipesepuwywakyjifipesepuwywakyjifipesepuwywakyjifipesepuwywakyji\", s=\"fipesepuwywakyjifipesepuwywakyji\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_3",
    "sat": "def sat(n: int, target: str=\"\", s: str=\"fanidemochachfanidemochachfanidemochach\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"\", s=\"fanidemochachfanidemochachfanidemochach\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_4",
    "sat": "def sat(n: int, target: str=\"thuxyfypoquocyzezigthuxyfypoquocyzezigthuxyfypoquocyzezigthuxyfypoquocyzezigthuxyfypoquocyzezigthuxyfypoquocyzezig\", s: str=\"thuxyfypoquocyzezig\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"thuxyfypoquocyzezigthuxyfypoquocyzezigthuxyfypoquocyzezigthuxyfypoquocyzezigthuxyfypoquocyzezigthuxyfypoquocyzezig\", s=\"thuxyfypoquocyzezig\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_5",
    "sat": "def sat(n: int, target: str=\"mimixibinutoculotextmimixibinutoculotextmimixibinutoculotext\", s: str=\"mimixibinutoculotext\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"mimixibinutoculotextmimixibinutoculotextmimixibinutoculotext\", s=\"mimixibinutoculotext\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_6",
    "sat": "def sat(n: int, target: str=\"chezatextutexchezatextutexchezatextutexchezatextutexchezatextutexchezatextutex\", s: str=\"chezatextutex\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"chezatextutexchezatextutexchezatextutexchezatextutexchezatextutexchezatextutex\", s=\"chezatextutex\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_7",
    "sat": "def sat(n: int, target: str=\"dildildildildildildildildildildildildildildildildildildildildildildildildildildil\", s: str=\"dildildil\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"dildildildildildildildildildildildildildildildildildildildildildildildildildildil\", s=\"dildildil\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_8",
    "sat": "def sat(n: int, target: str=\"lytextelytexte\", s: str=\"lytexte\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"lytextelytexte\", s=\"lytexte\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_9",
    "sat": "def sat(n: int, target: str=\"vafuwivafuwivafuwivafuwivafuwivafuwivafuwivafuwivafuwivafuwivafuwivafuwivafuwivafuwi\", s: str=\"vafuwivafuwi\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"vafuwivafuwivafuwivafuwivafuwivafuwivafuwivafuwivafuwivafuwivafuwivafuwivafuwivafuwi\", s=\"vafuwivafuwi\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrLen_0",
    "sat": "def sat(s: str, n: int=1000):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=1000):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_1",
    "sat": "def sat(s: str, n: int=8):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=8):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_2",
    "sat": "def sat(s: str, n: int=2609):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=2609):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_3",
    "sat": "def sat(s: str, n: int=44):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=44):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_4",
    "sat": "def sat(s: str, n: int=3185):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=3185):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_5",
    "sat": "def sat(s: str, n: int=538):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=538):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_6",
    "sat": "def sat(s: str, n: int=47):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=47):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_7",
    "sat": "def sat(s: str, n: int=15):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=15):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_8",
    "sat": "def sat(s: str, n: int=51):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=51):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_9",
    "sat": "def sat(s: str, n: int=98):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=98):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrAt_0",
    "sat": "def sat(i: int, s: str=\"cat\", target: str=\"a\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"cat\", target=\"a\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_1",
    "sat": "def sat(i: int, s: str=\"quaqua\", target: str=\"a\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"quaqua\", target=\"a\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_2",
    "sat": "def sat(i: int, s: str=\"cemysukothufalutextu\", target: str=\"s\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"cemysukothufalutextu\", target=\"s\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_3",
    "sat": "def sat(i: int, s: str=\"tt\", target: str=\"t\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"tt\", target=\"t\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_4",
    "sat": "def sat(i: int, s: str=\"quesques\", target: str=\"q\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"quesques\", target=\"q\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_5",
    "sat": "def sat(i: int, s: str=\"hythowyc\", target: str=\"y\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"hythowyc\", target=\"y\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_6",
    "sat": "def sat(i: int, s: str=\"kezubywuz\", target: str=\"u\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"kezubywuz\", target=\"u\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_7",
    "sat": "def sat(i: int, s: str=\"nichotextoxexux\", target: str=\"e\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"nichotextoxexux\", target=\"e\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_8",
    "sat": "def sat(i: int, s: str=\"ragaxocychoragaxocycho\", target: str=\"g\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"ragaxocychoragaxocycho\", target=\"g\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_9",
    "sat": "def sat(i: int, s: str=\"kaka\", target: str=\"a\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"kaka\", target=\"a\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrNegAt_0",
    "sat": "def sat(i: int, s: str=\"cat\", target: str=\"a\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"cat\", target=\"a\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_1",
    "sat": "def sat(i: int, s: str=\"q\", target: str=\"q\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"q\", target=\"q\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_2",
    "sat": "def sat(i: int, s: str=\"qqq\", target: str=\"q\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"qqq\", target=\"q\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_3",
    "sat": "def sat(i: int, s: str=\"vyquahasoxasyrububvyquahasoxasyrububvyquahasoxasyrubub\", target: str=\"u\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"vyquahasoxasyrububvyquahasoxasyrububvyquahasoxasyrubub\", target=\"u\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_4",
    "sat": "def sat(i: int, s: str=\"chalulechalulechalule\", target: str=\"c\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"chalulechalulechalule\", target=\"c\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_5",
    "sat": "def sat(i: int, s: str=\"pib\", target: str=\"p\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"pib\", target=\"p\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_6",
    "sat": "def sat(i: int, s: str=\"zatekyvitexzatekyvitexzatekyvitex\", target: str=\"a\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"zatekyvitexzatekyvitexzatekyvitex\", target=\"a\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_7",
    "sat": "def sat(i: int, s: str=\"pepufoge\", target: str=\"e\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"pepufoge\", target=\"e\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_8",
    "sat": "def sat(i: int, s: str=\"muchimabacybmuchimabacyb\", target: str=\"y\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"muchimabacybmuchimabacyb\", target=\"y\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_9",
    "sat": "def sat(i: int, s: str=\"fatextysom\", target: str=\"x\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"fatextysom\", target=\"x\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrSlice_0",
    "sat": "def sat(inds: List[int], s: str=\"hello world\", target: str=\"do\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"hello world\", target=\"do\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_1",
    "sat": "def sat(inds: List[int], s: str=\"kunequykunequykunequy\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"kunequykunequykunequy\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_2",
    "sat": "def sat(inds: List[int], s: str=\"dakaxahejekox\", target: str=\"o\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"dakaxahejekox\", target=\"o\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_3",
    "sat": "def sat(inds: List[int], s: str=\"rohitextiryrurecesuw\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"rohitextiryrurecesuw\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_4",
    "sat": "def sat(inds: List[int], s: str=\"texto\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"texto\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_5",
    "sat": "def sat(inds: List[int], s: str=\"watextowatexto\", target: str=\"w\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"watextowatexto\", target=\"w\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_6",
    "sat": "def sat(inds: List[int], s: str=\"midapapiziwmidapapiziwmidapapiziw\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"midapapiziwmidapapiziwmidapapiziw\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_7",
    "sat": "def sat(inds: List[int], s: str=\"sochucekonedyquunsochucekonedyquunsochucekonedyquun\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"sochucekonedyquunsochucekonedyquunsochucekonedyquun\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_8",
    "sat": "def sat(inds: List[int], s: str=\"wyvwyvwyv\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"wyvwyvwyv\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_9",
    "sat": "def sat(inds: List[int], s: str=\"wumuzydyweziwumuzydywezi\", target: str=\"e\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"wumuzydyweziwumuzydywezi\", target=\"e\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrIndex_0",
    "sat": "def sat(s: str, big_str: str=\"foobar\", index: int=2):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"foobar\", index=2):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_1",
    "sat": "def sat(s: str, big_str: str=\"fuzurofynodi\", index: int=2):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"fuzurofynodi\", index=2):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_2",
    "sat": "def sat(s: str, big_str: str=\"redykuxethufoputa\", index: int=9):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"redykuxethufoputa\", index=9):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_3",
    "sat": "def sat(s: str, big_str: str=\"bikulytenuthapojiludixytovofabyho\", index: int=15):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"bikulytenuthapojiludixytovofabyho\", index=15):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_4",
    "sat": "def sat(s: str, big_str: str=\"kigydulithuzuchicequerewotextihifocirytextune\", index: int=15):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"kigydulithuzuchicequerewotextihifocirytextune\", index=15):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_5",
    "sat": "def sat(s: str, big_str: str=\"cholehupafochevyzivofaxequohakacuw\", index: int=22):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"cholehupafochevyzivofaxequohakacuw\", index=22):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_6",
    "sat": "def sat(s: str, big_str: str=\"ruryfywylesejesiquo\", index: int=4):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"ruryfywylesejesiquo\", index=4):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_7",
    "sat": "def sat(s: str, big_str: str=\"michulychugapajidecithiworuchetextoch\", index: int=9):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"michulychugapajidecithiworuchetextoch\", index=9):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_8",
    "sat": "def sat(s: str, big_str: str=\"savokypisothedetextanyxobibawesisyv\", index: int=6):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"savokypisothedetextanyxobibawesisyv\", index=6):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_9",
    "sat": "def sat(s: str, big_str: str=\"lajadewiryc\", index: int=3):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"lajadewiryc\", index=3):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex2_0",
    "sat": "def sat(big_str: str, sub_str: str=\"foobar\", index: int=2):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"foobar\", index=2):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_1",
    "sat": "def sat(big_str: str, sub_str: str=\"hyxuzerejybatepetextapisaxipujogifutextodatextas\", index: int=164):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"hyxuzerejybatepetextapisaxipujogifutextodatextas\", index=164):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_2",
    "sat": "def sat(big_str: str, sub_str: str=\"fotarehijahoragifechizaquonixipawewafedysatext\", index: int=911):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"fotarehijahoragifechizaquonixipawewafedysatext\", index=911):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_3",
    "sat": "def sat(big_str: str, sub_str: str=\"gowitichuwydychatextutebube\", index: int=456):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"gowitichuwydychatextutebube\", index=456):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_4",
    "sat": "def sat(big_str: str, sub_str: str=\"bechezibehogepenediquorevefachinive\", index: int=812):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"bechezibehogepenediquorevefachinive\", index=812):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_5",
    "sat": "def sat(big_str: str, sub_str: str=\"xaxygychythy\", index: int=544):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"xaxygychythy\", index=544):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_6",
    "sat": "def sat(big_str: str, sub_str: str=\"baxazatocugygyrutextipafys\", index: int=829):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"baxazatocugygyrutextipafys\", index=829):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_7",
    "sat": "def sat(big_str: str, sub_str: str=\"tidolaricuxufumoviquanihurif\", index: int=476):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"tidolaricuxufumoviquanihurif\", index=476):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_8",
    "sat": "def sat(big_str: str, sub_str: str=\"jocelypamoredojebepyzoxesiwotis\", index: int=619):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"jocelypamoredojebepyzoxesiwotis\", index=619):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_9",
    "sat": "def sat(big_str: str, sub_str: str=\"nygypivychenasebecunilyrecodymuwekequipybynybanyz\", index: int=746):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"nygypivychenasebecunilyrecodymuwekequipybynybanyz\", index=746):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIn_0",
    "sat": "def sat(s: str, a: str=\"hello\", b: str=\"yellow\", length: int=4):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"hello\", b=\"yellow\", length=4):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_1",
    "sat": "def sat(s: str, a: str=\"chalytextupiloniletextvilicynalelachet\", b: str=\"thygechoquiciloniletextvesegilegajuwesanet\", length: int=10):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"chalytextupiloniletextvilicynalelachet\", b=\"thygechoquiciloniletextvesegilegajuwesanet\", length=10):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_2",
    "sat": "def sat(s: str, a: str=\"textylupuzopodunibycchumupudocuvajyjy\", b: str=\"gabothotithesapuzopodunibycchywybotextyc\", length: int=13):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"textylupuzopodunibycchumupudocuvajyjy\", b=\"gabothotithesapuzopodunibycchywybotextyc\", length=13):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_3",
    "sat": "def sat(s: str, a: str=\"mapowafuzequuchochinunobmiguduzufamoq\", b: str=\"chuxupazibubolykuquuchochinunobvisubycoc\", length: int=14):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"mapowafuzequuchochinunobmiguduzufamoq\", b=\"chuxupazibubolykuquuchochinunobvisubycoc\", length=14):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_4",
    "sat": "def sat(s: str, a: str=\"gevitenoquejasosafithowawuchix\", b: str=\"vogecubutachysazvitenoquejane\", length: int=11):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"gevitenoquejasosafithowawuchix\", b=\"vogecubutachysazvitenoquejane\", length=11):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_5",
    "sat": "def sat(s: str, a: str=\"zywisuzysequechuquoticynymtofavugy\", b: str=\"luduwehetozysequechuquoticynymduchutazunu\", length: int=20):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"zywisuzysequechuquoticynymtofavugy\", b=\"luduwehetozysequechuquoticynymduchutazunu\", length=20):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_6",
    "sat": "def sat(s: str, a: str=\"witubypycegtextinudyhys\", b: str=\"rahunopuravepytextinulyzytextupilowimijuh\", length: int=7):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"witubypycegtextinudyhys\", b=\"rahunopuravepytextinulyzytextupilowimijuh\", length=7):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_7",
    "sat": "def sat(s: str, a: str=\"zumecc\", b: str=\"pcthasekex\", length: int=1):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"zumecc\", b=\"pcthasekex\", length=1):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_8",
    "sat": "def sat(s: str, a: str=\"jirysythogykenegiceramoqutextuchihefa\", b: str=\"textelusugykenegiceramoquketesuwop\", length: int=16):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"jirysythogykenegiceramoqutextuchihefa\", b=\"textelusugykenegiceramoquketesuwop\", length=16):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_9",
    "sat": "def sat(s: str, a: str=\"hivacycusopeletextydavorerac\", b: str=\"textadavecheduguwavytextyratuhiroce\", length: int=5):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"hivacycusopeletextydavorerac\", b=\"textadavecheduguwavytextyratuhiroce\", length=5):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn2_0",
    "sat": "def sat(substrings: List[str], s: str=\"hello\", count: int=15):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"hello\", count=15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_1",
    "sat": "def sat(substrings: List[str], s: str=\"pathotextafaxevi\", count: int=131):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"pathotextafaxevi\", count=131):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_2",
    "sat": "def sat(substrings: List[str], s: str=\"quivavithafathuquixaleguvytext\", count: int=445):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"quivavithafathuquixaleguvytext\", count=445):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_3",
    "sat": "def sat(substrings: List[str], s: str=\"quegehamotextihaduxet\", count: int=222):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"quegehamotextihaduxet\", count=222):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_4",
    "sat": "def sat(substrings: List[str], s: str=\"textarotextesuch\", count: int=124):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"textarotextesuch\", count=124):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_5",
    "sat": "def sat(substrings: List[str], s: str=\"xefisichetuchocywebixysede\", count: int=339):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"xefisichetuchocywebixysede\", count=339):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_6",
    "sat": "def sat(substrings: List[str], s: str=\"cyfidanuwuraquos\", count: int=134):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"cyfidanuwuraquos\", count=134):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_7",
    "sat": "def sat(substrings: List[str], s: str=\"wycipolysyfitextohymotextotextesysudyzexoheziwuq\", count: int=1122):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"wycipolysyfitextohymotextotextesysudyzexoheziwuq\", count=1122):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_8",
    "sat": "def sat(substrings: List[str], s: str=\"jetotextijithachitytol\", count: int=241):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"jetotextijithachitytol\", count=241):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_9",
    "sat": "def sat(substrings: List[str], s: str=\"gicenygityquapychiquukitextekoledegetychizyle\", count: int=997):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"gicenygityquapychiquukitextekoledegetychizyle\", count=997):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "IntNeg_0",
    "sat": "def sat(x: int, a: int=93252338):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=93252338):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_1",
    "sat": "def sat(x: int, a: int=4049686500912271):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=4049686500912271):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_2",
    "sat": "def sat(x: int, a: int=-5265448566146980):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-5265448566146980):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_3",
    "sat": "def sat(x: int, a: int=-4834665945138205):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-4834665945138205):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_4",
    "sat": "def sat(x: int, a: int=-5823517687190129):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-5823517687190129):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_5",
    "sat": "def sat(x: int, a: int=1515808234018224):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=1515808234018224):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_6",
    "sat": "def sat(x: int, a: int=1020926640036032):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=1020926640036032):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_7",
    "sat": "def sat(x: int, a: int=1711287852473850):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=1711287852473850):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_8",
    "sat": "def sat(x: int, a: int=3343289863649145):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=3343289863649145):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_9",
    "sat": "def sat(x: int, a: int=824607560812449):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=824607560812449):\n    return - a"
    ]
  },
  {
    "name": "IntSum_0",
    "sat": "def sat(x: int, a: int=1073258, b: int=72352549):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=1073258, b=72352549):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_1",
    "sat": "def sat(x: int, a: int=-4409639721754490, b: int=-6766299988946046):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-4409639721754490, b=-6766299988946046):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_2",
    "sat": "def sat(x: int, a: int=7510482572021838, b: int=9866493058900717):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=7510482572021838, b=9866493058900717):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_3",
    "sat": "def sat(x: int, a: int=8545201987196955, b: int=1459110478225232):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=8545201987196955, b=1459110478225232):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_4",
    "sat": "def sat(x: int, a: int=1988965450726496, b: int=-1290612934183996):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=1988965450726496, b=-1290612934183996):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_5",
    "sat": "def sat(x: int, a: int=-6962491706548488, b: int=-99525792397132):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-6962491706548488, b=-99525792397132):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_6",
    "sat": "def sat(x: int, a: int=-263718410072670, b: int=-4155957958452126):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-263718410072670, b=-4155957958452126):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_7",
    "sat": "def sat(x: int, a: int=-1271342619889177, b: int=282195446595479):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-1271342619889177, b=282195446595479):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_8",
    "sat": "def sat(x: int, a: int=9186767397136658, b: int=9447893866975791):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=9186767397136658, b=9447893866975791):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_9",
    "sat": "def sat(x: int, a: int=1183108251630020, b: int=-8971593062694477):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=1183108251630020, b=-8971593062694477):\n    return b - a"
    ]
  },
  {
    "name": "IntSub_0",
    "sat": "def sat(x: int, a: int=-382, b: int=14546310):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-382, b=14546310):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_1",
    "sat": "def sat(x: int, a: int=-5696912309070896, b: int=-4935938808607900):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-5696912309070896, b=-4935938808607900):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_2",
    "sat": "def sat(x: int, a: int=-8504724235682997, b: int=-9850951821603470):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-8504724235682997, b=-9850951821603470):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_3",
    "sat": "def sat(x: int, a: int=-3040032028080806, b: int=5268210473342776):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-3040032028080806, b=5268210473342776):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_4",
    "sat": "def sat(x: int, a: int=-7605080516988163, b: int=3120045344753124):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-7605080516988163, b=3120045344753124):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_5",
    "sat": "def sat(x: int, a: int=-3663966793671135, b: int=9608517444279546):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-3663966793671135, b=9608517444279546):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_6",
    "sat": "def sat(x: int, a: int=2467817229510006, b: int=3499955809256602):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=2467817229510006, b=3499955809256602):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_7",
    "sat": "def sat(x: int, a: int=8264299051499720, b: int=1047316249324030):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=8264299051499720, b=1047316249324030):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_8",
    "sat": "def sat(x: int, a: int=-138875504353782, b: int=-7831948770430099):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-138875504353782, b=-7831948770430099):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_9",
    "sat": "def sat(x: int, a: int=1104335871996829, b: int=-3379839223384184):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=1104335871996829, b=-3379839223384184):\n    return a + b"
    ]
  },
  {
    "name": "IntSub2_0",
    "sat": "def sat(x: int, a: int=8665464, b: int=-93206):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=8665464, b=-93206):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_1",
    "sat": "def sat(x: int, a: int=-7133109280527597, b: int=9626561269367859):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-7133109280527597, b=9626561269367859):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_2",
    "sat": "def sat(x: int, a: int=-4697972202857238, b: int=-6108910256823769):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-4697972202857238, b=-6108910256823769):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_3",
    "sat": "def sat(x: int, a: int=9384583139960334, b: int=-6840945281448047):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=9384583139960334, b=-6840945281448047):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_4",
    "sat": "def sat(x: int, a: int=-6737256782948453, b: int=9894824337858863):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-6737256782948453, b=9894824337858863):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_5",
    "sat": "def sat(x: int, a: int=-2629554919383172, b: int=2951110195405000):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-2629554919383172, b=2951110195405000):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_6",
    "sat": "def sat(x: int, a: int=-1965597811309620, b: int=9211411496364323):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-1965597811309620, b=9211411496364323):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_7",
    "sat": "def sat(x: int, a: int=-5888709151111803, b: int=-9757459191680661):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-5888709151111803, b=-9757459191680661):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_8",
    "sat": "def sat(x: int, a: int=1011838795087466, b: int=-9206869013311444):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=1011838795087466, b=-9206869013311444):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_9",
    "sat": "def sat(x: int, a: int=-5401407088664577, b: int=2259507187220884):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-5401407088664577, b=2259507187220884):\n    return a - b"
    ]
  },
  {
    "name": "IntMul_0",
    "sat": "def sat(n: int, a: int=14302, b: int=5):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=14302, b=5):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_1",
    "sat": "def sat(n: int, a: int=-172453, b: int=-28):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-172453, b=-28):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_2",
    "sat": "def sat(n: int, a: int=-459895, b: int=16):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-459895, b=16):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_3",
    "sat": "def sat(n: int, a: int=957972, b: int=18):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=957972, b=18):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_4",
    "sat": "def sat(n: int, a: int=888455, b: int=26):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=888455, b=26):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_5",
    "sat": "def sat(n: int, a: int=-84603, b: int=-14):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-84603, b=-14):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_6",
    "sat": "def sat(n: int, a: int=752084, b: int=-67):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=752084, b=-67):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_7",
    "sat": "def sat(n: int, a: int=926791, b: int=-12):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=926791, b=-12):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_8",
    "sat": "def sat(n: int, a: int=616369, b: int=56):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=616369, b=56):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_9",
    "sat": "def sat(n: int, a: int=-234155, b: int=4):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-234155, b=4):\n    return a // b"
    ]
  },
  {
    "name": "IntDiv_0",
    "sat": "def sat(n: int, a: int=3, b: int=23463462):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=3, b=23463462):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_1",
    "sat": "def sat(n: int, a: int=-4, b: int=5119247419786893):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-4, b=5119247419786893):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_2",
    "sat": "def sat(n: int, a: int=1, b: int=-7700704530622710):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=1, b=-7700704530622710):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_3",
    "sat": "def sat(n: int, a: int=0, b: int=4639160842844549):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=0, b=4639160842844549):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_4",
    "sat": "def sat(n: int, a: int=-8, b: int=7670588577596794):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-8, b=7670588577596794):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_5",
    "sat": "def sat(n: int, a: int=0, b: int=2226551485116260):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=0, b=2226551485116260):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_6",
    "sat": "def sat(n: int, a: int=0, b: int=3462706835993406):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=0, b=3462706835993406):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_7",
    "sat": "def sat(n: int, a: int=5, b: int=-8636791365736394):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=5, b=-8636791365736394):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_8",
    "sat": "def sat(n: int, a: int=-6, b: int=-3480117744584705):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-6, b=-3480117744584705):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_9",
    "sat": "def sat(n: int, a: int=1, b: int=-5161509055049613):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=1, b=-5161509055049613):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv2_0",
    "sat": "def sat(n: int, a: int=345346363, b: int=10):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=345346363, b=10):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_1",
    "sat": "def sat(n: int, a: int=3236350200572569, b: int=-7452172995690236):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=3236350200572569, b=-7452172995690236):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_2",
    "sat": "def sat(n: int, a: int=3767855497920841, b: int=-668549766238957):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=3767855497920841, b=-668549766238957):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_3",
    "sat": "def sat(n: int, a: int=-2546392076412183, b: int=8289765252651651):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-2546392076412183, b=8289765252651651):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_4",
    "sat": "def sat(n: int, a: int=6106964800719675, b: int=-4827030838900489):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=6106964800719675, b=-4827030838900489):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_5",
    "sat": "def sat(n: int, a: int=-2637590294153322, b: int=-8870429643863250):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-2637590294153322, b=-8870429643863250):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_6",
    "sat": "def sat(n: int, a: int=-1122716503489773, b: int=2058316649277962):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-1122716503489773, b=2058316649277962):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_7",
    "sat": "def sat(n: int, a: int=4867964224299231, b: int=-9708418025793821):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=4867964224299231, b=-9708418025793821):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_8",
    "sat": "def sat(n: int, a: int=-6446387894275597, b: int=2704150518491613):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-6446387894275597, b=2704150518491613):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_9",
    "sat": "def sat(n: int, a: int=9805622816026564, b: int=-1413687631647022):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=9805622816026564, b=-1413687631647022):\n    return a * b"
    ]
  },
  {
    "name": "SquareRoot_0",
    "sat": "def sat(x: int, a: int=10201202001):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=10201202001):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_1",
    "sat": "def sat(x: int, a: int=1443212389575062500):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=1443212389575062500):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_2",
    "sat": "def sat(x: int, a: int=3313406478203402256):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=3313406478203402256):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_3",
    "sat": "def sat(x: int, a: int=4112258334861715236):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=4112258334861715236):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_4",
    "sat": "def sat(x: int, a: int=3693175672515361344):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=3693175672515361344):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_5",
    "sat": "def sat(x: int, a: int=1603343234707465216):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=1603343234707465216):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_6",
    "sat": "def sat(x: int, a: int=3604153367370502521):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=3604153367370502521):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_7",
    "sat": "def sat(x: int, a: int=812418064351847424):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=812418064351847424):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_8",
    "sat": "def sat(x: int, a: int=896033457313031844):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=896033457313031844):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_9",
    "sat": "def sat(x: int, a: int=1580010825140584225):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=1580010825140584225):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_0",
    "sat": "def sat(n: int, a: int=10000200001):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=10000200001):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_1",
    "sat": "def sat(n: int, a: int=597006308174919889):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=597006308174919889):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_2",
    "sat": "def sat(n: int, a: int=2035087713490650025):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=2035087713490650025):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_3",
    "sat": "def sat(n: int, a: int=2761749464120678656):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=2761749464120678656):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_4",
    "sat": "def sat(n: int, a: int=3142556364895073344):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=3142556364895073344):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_5",
    "sat": "def sat(n: int, a: int=3814355874825910404):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=3814355874825910404):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_6",
    "sat": "def sat(n: int, a: int=4005572623532514241):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=4005572623532514241):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_7",
    "sat": "def sat(n: int, a: int=4124858719474032400):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=4124858719474032400):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_8",
    "sat": "def sat(n: int, a: int=224245118951010756):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=224245118951010756):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_9",
    "sat": "def sat(n: int, a: int=2570799336465880081):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=2570799336465880081):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRootFloat_0",
    "sat": "def sat(x: float, a: int=1020):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=1020):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_1",
    "sat": "def sat(x: float, a: int=1730948262):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=1730948262):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_2",
    "sat": "def sat(x: float, a: int=7940707210):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=7940707210):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_3",
    "sat": "def sat(x: float, a: int=4875600737):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=4875600737):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_4",
    "sat": "def sat(x: float, a: int=6915240025):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=6915240025):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_5",
    "sat": "def sat(x: float, a: int=5833669445):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=5833669445):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_6",
    "sat": "def sat(x: float, a: int=5566066403):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=5566066403):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_7",
    "sat": "def sat(x: float, a: int=5821310529):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=5821310529):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_8",
    "sat": "def sat(x: float, a: int=1706937488):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=1706937488):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_9",
    "sat": "def sat(x: float, a: int=5503229601):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=5503229601):\n    return a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_0",
    "sat": "def sat(x: float, a: int=1020):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=1020):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_1",
    "sat": "def sat(x: float, a: int=7305156549):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=7305156549):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_2",
    "sat": "def sat(x: float, a: int=9782882197):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=9782882197):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_3",
    "sat": "def sat(x: float, a: int=6219481049):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=6219481049):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_4",
    "sat": "def sat(x: float, a: int=1962150574):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=1962150574):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_5",
    "sat": "def sat(x: float, a: int=4740327862):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=4740327862):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_6",
    "sat": "def sat(x: float, a: int=3612757456):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=3612757456):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_7",
    "sat": "def sat(x: float, a: int=4234926043):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=4234926043):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_8",
    "sat": "def sat(x: float, a: int=9442226638):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=9442226638):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_9",
    "sat": "def sat(x: float, a: int=8883034683):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=8883034683):\n    return -a ** 0.5"
    ]
  }
]