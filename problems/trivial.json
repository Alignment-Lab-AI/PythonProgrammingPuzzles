[
  {
    "name": "HelloWorld_0",
    "sat": "def sat(s: str):\n    assert type(s) is str, 's must be of type str'\n    return s + 'world' == 'Hello world'",
    "sols": []
  },
  {
    "name": "BackWorlds_0",
    "sat": "def sat(s: str):\n    assert type(s) is str, 's must be of type str'\n    return s[::-1] + 'world' == 'Hello world'",
    "sols": [
      "def sol():\n    return ' olleH'",
      "def sol():  # solution methods must begin with 'sol'\n    return 'Hello '[::-1]"
    ]
  },
  {
    "name": "StrAdd_0",
    "sat": "def sat(st: str, a: str=\"world\", b: str=\"Hello world\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"world\", b=\"Hello world\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_1",
    "sat": "def sat(st: str, a: str=\"yjiq\", b: str=\"fyjiq\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"yjiq\", b=\"fyjiq\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_2",
    "sat": "def sat(st: str, a: str=\"\", b: str=\"ce\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"\", b=\"ce\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_3",
    "sat": "def sat(st: str, a: str=\"banutextygucem\", b: str=\"bythibanutextygucem\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"banutextygucem\", b=\"bythibanutextygucem\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_4",
    "sat": "def sat(st: str, a: str=\"ajamisexotextuf\", b: str=\"pajamisexotextuf\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"ajamisexotextuf\", b=\"pajamisexotextuf\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_5",
    "sat": "def sat(st: str, a: str=\"haru\", b: str=\"risadehugeharu\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"haru\", b=\"risadehugeharu\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_6",
    "sat": "def sat(st: str, a: str=\"nedech\", b: str=\"thakaxunedech\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"nedech\", b=\"thakaxunedech\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_7",
    "sat": "def sat(st: str, a: str=\"extuquixyth\", b: str=\"textuquixyth\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"extuquixyth\", b=\"textuquixyth\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_8",
    "sat": "def sat(st: str, a: str=\"ezotad\", b: str=\"quozezotad\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"ezotad\", b=\"quozezotad\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_9",
    "sat": "def sat(st: str, a: str=\"i\", b: str=\"di\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"i\", b=\"di\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_10",
    "sat": "def sat(st: str, a: str=\"ajygyjozogu\", b: str=\"textegejajygyjozogu\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"ajygyjozogu\", b=\"textegejajygyjozogu\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_11",
    "sat": "def sat(st: str, a: str=\"rok\", b: str=\"rok\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"rok\", b=\"rok\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_12",
    "sat": "def sat(st: str, a: str=\"not\", b: str=\"fufypydoquijezonot\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"not\", b=\"fufypydoquijezonot\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_13",
    "sat": "def sat(st: str, a: str=\"atexter\", b: str=\"chatexter\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"atexter\", b=\"chatexter\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_14",
    "sat": "def sat(st: str, a: str=\"atextefeje\", b: str=\"hibapatextefeje\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"atextefeje\", b=\"hibapatextefeje\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_15",
    "sat": "def sat(st: str, a: str=\"\", b: str=\"dybyr\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"\", b=\"dybyr\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_16",
    "sat": "def sat(st: str, a: str=\"o\", b: str=\"gyzo\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"o\", b=\"gyzo\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_17",
    "sat": "def sat(st: str, a: str=\"xtodix\", b: str=\"textydacitextodix\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"xtodix\", b=\"textydacitextodix\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_18",
    "sat": "def sat(st: str, a: str=\"ofethuchyquo\", b: str=\"xivudarofethuchyquo\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"ofethuchyquo\", b=\"xivudarofethuchyquo\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_19",
    "sat": "def sat(st: str, a: str=\"oz\", b: str=\"sofoz\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"oz\", b=\"sofoz\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_20",
    "sat": "def sat(st: str, a: str=\"siwequi\", b: str=\"chysesiwequi\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"siwequi\", b=\"chysesiwequi\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_21",
    "sat": "def sat(st: str, a: str=\"ysasyjihulutex\", b: str=\"coquipysasyjihulutex\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"ysasyjihulutex\", b=\"coquipysasyjihulutex\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_22",
    "sat": "def sat(st: str, a: str=\"dith\", b: str=\"nihydith\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"dith\", b=\"nihydith\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_23",
    "sat": "def sat(st: str, a: str=\"miworeh\", b: str=\"dakymiworeh\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"miworeh\", b=\"dakymiworeh\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_24",
    "sat": "def sat(st: str, a: str=\"omitiragachoquuty\", b: str=\"bomitiragachoquuty\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"omitiragachoquuty\", b=\"bomitiragachoquuty\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_25",
    "sat": "def sat(st: str, a: str=\"\", b: str=\"textojuthup\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"\", b=\"textojuthup\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_26",
    "sat": "def sat(st: str, a: str=\"yceji\", b: str=\"cyceji\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"yceji\", b=\"cyceji\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_27",
    "sat": "def sat(st: str, a: str=\"\", b: str=\"cho\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"\", b=\"cho\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_28",
    "sat": "def sat(st: str, a: str=\"medaw\", b: str=\"pochonamedaw\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"medaw\", b=\"pochonamedaw\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_29",
    "sat": "def sat(st: str, a: str=\"ji\", b: str=\"thyxiji\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"ji\", b=\"thyxiji\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_30",
    "sat": "def sat(st: str, a: str=\"egixowehesich\", b: str=\"chejyvegixowehesich\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"egixowehesich\", b=\"chejyvegixowehesich\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_31",
    "sat": "def sat(st: str, a: str=\"oc\", b: str=\"thafugoc\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"oc\", b=\"thafugoc\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_32",
    "sat": "def sat(st: str, a: str=\"hucixiboracechanyw\", b: str=\"thucixiboracechanyw\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"hucixiboracechanyw\", b=\"thucixiboracechanyw\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_33",
    "sat": "def sat(st: str, a: str=\"enesigu\", b: str=\"cenesigu\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"enesigu\", b=\"cenesigu\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_34",
    "sat": "def sat(st: str, a: str=\"quady\", b: str=\"soquady\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"quady\", b=\"soquady\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_35",
    "sat": "def sat(st: str, a: str=\"elebunybekasek\", b: str=\"kelebunybekasek\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"elebunybekasek\", b=\"kelebunybekasek\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_36",
    "sat": "def sat(st: str, a: str=\"m\", b: str=\"sasotextum\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"m\", b=\"sasotextum\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_37",
    "sat": "def sat(st: str, a: str=\"pyvakyvegatywemite\", b: str=\"pyvakyvegatywemite\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"pyvakyvegatywemite\", b=\"pyvakyvegatywemite\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_38",
    "sat": "def sat(st: str, a: str=\"i\", b: str=\"lopi\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"i\", b=\"lopi\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_39",
    "sat": "def sat(st: str, a: str=\"cydinan\", b: str=\"zarokohyhicydinan\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"cydinan\", b=\"zarokohyhicydinan\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_40",
    "sat": "def sat(st: str, a: str=\"ninone\", b: str=\"ninone\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"ninone\", b=\"ninone\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_41",
    "sat": "def sat(st: str, a: str=\"wu\", b: str=\"fyjahiwu\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"wu\", b=\"fyjahiwu\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_42",
    "sat": "def sat(st: str, a: str=\"jeruxid\", b: str=\"jeruxid\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"jeruxid\", b=\"jeruxid\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_43",
    "sat": "def sat(st: str, a: str=\"i\", b: str=\"suti\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"i\", b=\"suti\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_44",
    "sat": "def sat(st: str, a: str=\"wusonizy\", b: str=\"xewusonizy\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"wusonizy\", b=\"xewusonizy\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_45",
    "sat": "def sat(st: str, a: str=\"cigesofucy\", b: str=\"wagacigesofucy\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"cigesofucy\", b=\"wagacigesofucy\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_46",
    "sat": "def sat(st: str, a: str=\"cihizazok\", b: str=\"lacihizazok\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"cihizazok\", b=\"lacihizazok\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_47",
    "sat": "def sat(st: str, a: str=\"c\", b: str=\"c\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"c\", b=\"c\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_48",
    "sat": "def sat(st: str, a: str=\"wyracapapakadef\", b: str=\"lewyracapapakadef\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"wyracapapakadef\", b=\"lewyracapapakadef\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_49",
    "sat": "def sat(st: str, a: str=\"vacyjezelut\", b: str=\"nilivacyjezelut\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"vacyjezelut\", b=\"nilivacyjezelut\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_50",
    "sat": "def sat(st: str, a: str=\"dachu\", b: str=\"xunemepidachu\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"dachu\", b=\"xunemepidachu\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_51",
    "sat": "def sat(st: str, a: str=\"t\", b: str=\"cit\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"t\", b=\"cit\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_52",
    "sat": "def sat(st: str, a: str=\"a\", b: str=\"fotuluquychala\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"a\", b=\"fotuluquychala\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_53",
    "sat": "def sat(st: str, a: str=\"ydohajoquepusyde\", b: str=\"hydohajoquepusyde\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"ydohajoquepusyde\", b=\"hydohajoquepusyde\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_54",
    "sat": "def sat(st: str, a: str=\"ejexoreth\", b: str=\"quonamothejexoreth\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"ejexoreth\", b=\"quonamothejexoreth\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_55",
    "sat": "def sat(st: str, a: str=\"h\", b: str=\"th\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"h\", b=\"th\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_56",
    "sat": "def sat(st: str, a: str=\"ugymywo\", b: str=\"dyquyjibixuxugymywo\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"ugymywo\", b=\"dyquyjibixuxugymywo\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_57",
    "sat": "def sat(st: str, a: str=\"\", b: str=\"q\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"\", b=\"q\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_58",
    "sat": "def sat(st: str, a: str=\"ef\", b: str=\"quyrarutextef\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"ef\", b=\"quyrarutextef\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_59",
    "sat": "def sat(st: str, a: str=\"ewi\", b: str=\"sifewi\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"ewi\", b=\"sifewi\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_60",
    "sat": "def sat(st: str, a: str=\"vis\", b: str=\"vis\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"vis\", b=\"vis\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_61",
    "sat": "def sat(st: str, a: str=\"u\", b: str=\"thubu\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"u\", b=\"thubu\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_62",
    "sat": "def sat(st: str, a: str=\"iquasuri\", b: str=\"tusiseciquasuri\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"iquasuri\", b=\"tusiseciquasuri\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_63",
    "sat": "def sat(st: str, a: str=\"wyzaty\", b: str=\"quawyzaty\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"wyzaty\", b=\"quawyzaty\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_64",
    "sat": "def sat(st: str, a: str=\"cu\", b: str=\"chacu\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"cu\", b=\"chacu\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_65",
    "sat": "def sat(st: str, a: str=\"ohigolequ\", b: str=\"rohigolequ\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"ohigolequ\", b=\"rohigolequ\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_66",
    "sat": "def sat(st: str, a: str=\"ch\", b: str=\"domygicucatuch\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"ch\", b=\"domygicucatuch\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_67",
    "sat": "def sat(st: str, a: str=\"eren\", b: str=\"quiletaweren\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"eren\", b=\"quiletaweren\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_68",
    "sat": "def sat(st: str, a: str=\"rady\", b: str=\"wypyrady\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"rady\", b=\"wypyrady\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_69",
    "sat": "def sat(st: str, a: str=\"ywecu\", b: str=\"mujafywecu\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"ywecu\", b=\"mujafywecu\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_70",
    "sat": "def sat(st: str, a: str=\"\", b: str=\"wuvothohusuhefizewyf\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"\", b=\"wuvothohusuhefizewyf\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_71",
    "sat": "def sat(st: str, a: str=\"uusa\", b: str=\"quusa\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"uusa\", b=\"quusa\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_72",
    "sat": "def sat(st: str, a: str=\"cure\", b: str=\"cure\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"cure\", b=\"cure\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_73",
    "sat": "def sat(st: str, a: str=\"quoryxof\", b: str=\"somynyryquoryxof\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"quoryxof\", b=\"somynyryquoryxof\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_74",
    "sat": "def sat(st: str, a: str=\"a\", b: str=\"ja\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"a\", b=\"ja\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_75",
    "sat": "def sat(st: str, a: str=\"ueq\", b: str=\"lohoqueq\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"ueq\", b=\"lohoqueq\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_76",
    "sat": "def sat(st: str, a: str=\"epoc\", b: str=\"favykepoc\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"epoc\", b=\"favykepoc\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_77",
    "sat": "def sat(st: str, a: str=\"ucyra\", b: str=\"xipelivuxuzivowucyra\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"ucyra\", b=\"xipelivuxuzivowucyra\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_78",
    "sat": "def sat(st: str, a: str=\"f\", b: str=\"dif\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"f\", b=\"dif\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_79",
    "sat": "def sat(st: str, a: str=\"k\", b: str=\"tik\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"k\", b=\"tik\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_80",
    "sat": "def sat(st: str, a: str=\"\", b: str=\"wichaful\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"\", b=\"wichaful\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_81",
    "sat": "def sat(st: str, a: str=\"yvehixef\", b: str=\"chyvequyquyvehixef\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"yvehixef\", b=\"chyvequyquyvehixef\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_82",
    "sat": "def sat(st: str, a: str=\"he\", b: str=\"che\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"he\", b=\"che\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_83",
    "sat": "def sat(st: str, a: str=\"\", b: str=\"cys\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"\", b=\"cys\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_84",
    "sat": "def sat(st: str, a: str=\"m\", b: str=\"rybithym\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"m\", b=\"rybithym\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_85",
    "sat": "def sat(st: str, a: str=\"tych\", b: str=\"sotych\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"tych\", b=\"sotych\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_86",
    "sat": "def sat(st: str, a: str=\"iryminacof\", b: str=\"ciryminacof\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"iryminacof\", b=\"ciryminacof\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_87",
    "sat": "def sat(st: str, a: str=\"\", b: str=\"chujit\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"\", b=\"chujit\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_88",
    "sat": "def sat(st: str, a: str=\"\", b: str=\"pynix\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"\", b=\"pynix\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_89",
    "sat": "def sat(st: str, a: str=\"ocha\", b: str=\"focha\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"ocha\", b=\"focha\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_90",
    "sat": "def sat(st: str, a: str=\"jelothov\", b: str=\"jelothov\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"jelothov\", b=\"jelothov\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_91",
    "sat": "def sat(st: str, a: str=\"textaji\", b: str=\"tolynatetextaji\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"textaji\", b=\"tolynatetextaji\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_92",
    "sat": "def sat(st: str, a: str=\"ixonuhahevyv\", b: str=\"duwixonuhahevyv\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"ixonuhahevyv\", b=\"duwixonuhahevyv\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_93",
    "sat": "def sat(st: str, a: str=\"\", b: str=\"pa\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"\", b=\"pa\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_94",
    "sat": "def sat(st: str, a: str=\"l\", b: str=\"l\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"l\", b=\"l\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_95",
    "sat": "def sat(st: str, a: str=\"uyvudyfoxa\", b: str=\"quyvudyfoxa\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"uyvudyfoxa\", b=\"quyvudyfoxa\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_96",
    "sat": "def sat(st: str, a: str=\"h\", b: str=\"cucheh\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"h\", b=\"cucheh\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_97",
    "sat": "def sat(st: str, a: str=\"id\", b: str=\"mid\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"id\", b=\"mid\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_98",
    "sat": "def sat(st: str, a: str=\"haziguquut\", b: str=\"xezachaziguquut\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"haziguquut\", b=\"xezachaziguquut\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrAdd_99",
    "sat": "def sat(st: str, a: str=\"uj\", b: str=\"nexuj\"):\n    assert type(st) is str, 'st must be of type str'\n    return st + a == b",
    "sols": [
      "def sol(a=\"uj\", b=\"nexuj\"):\n    return b[:len(b) - len(a)]"
    ]
  },
  {
    "name": "StrSetLen_0",
    "sat": "def sat(s: str, dups: int=1000):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=1000):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_1",
    "sat": "def sat(s: str, dups: int=0):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=0):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_2",
    "sat": "def sat(s: str, dups: int=1):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=1):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_3",
    "sat": "def sat(s: str, dups: int=2):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=2):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_4",
    "sat": "def sat(s: str, dups: int=3):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=3):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_5",
    "sat": "def sat(s: str, dups: int=4):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=4):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_6",
    "sat": "def sat(s: str, dups: int=5):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=5):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_7",
    "sat": "def sat(s: str, dups: int=6):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=6):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_8",
    "sat": "def sat(s: str, dups: int=7):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=7):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_9",
    "sat": "def sat(s: str, dups: int=8):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=8):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_10",
    "sat": "def sat(s: str, dups: int=9):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=9):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_11",
    "sat": "def sat(s: str, dups: int=10):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=10):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_12",
    "sat": "def sat(s: str, dups: int=11):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=11):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_13",
    "sat": "def sat(s: str, dups: int=12):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=12):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_14",
    "sat": "def sat(s: str, dups: int=13):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=13):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_15",
    "sat": "def sat(s: str, dups: int=14):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=14):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_16",
    "sat": "def sat(s: str, dups: int=15):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=15):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_17",
    "sat": "def sat(s: str, dups: int=16):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=16):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_18",
    "sat": "def sat(s: str, dups: int=17):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=17):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_19",
    "sat": "def sat(s: str, dups: int=18):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=18):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_20",
    "sat": "def sat(s: str, dups: int=19):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=19):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_21",
    "sat": "def sat(s: str, dups: int=20):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=20):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_22",
    "sat": "def sat(s: str, dups: int=21):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=21):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_23",
    "sat": "def sat(s: str, dups: int=22):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=22):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_24",
    "sat": "def sat(s: str, dups: int=23):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=23):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_25",
    "sat": "def sat(s: str, dups: int=24):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=24):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_26",
    "sat": "def sat(s: str, dups: int=25):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=25):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_27",
    "sat": "def sat(s: str, dups: int=26):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=26):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_28",
    "sat": "def sat(s: str, dups: int=27):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=27):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_29",
    "sat": "def sat(s: str, dups: int=28):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=28):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_30",
    "sat": "def sat(s: str, dups: int=29):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=29):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_31",
    "sat": "def sat(s: str, dups: int=30):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=30):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_32",
    "sat": "def sat(s: str, dups: int=31):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=31):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_33",
    "sat": "def sat(s: str, dups: int=32):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=32):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_34",
    "sat": "def sat(s: str, dups: int=33):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=33):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_35",
    "sat": "def sat(s: str, dups: int=34):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=34):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_36",
    "sat": "def sat(s: str, dups: int=35):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=35):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_37",
    "sat": "def sat(s: str, dups: int=36):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=36):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_38",
    "sat": "def sat(s: str, dups: int=37):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=37):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_39",
    "sat": "def sat(s: str, dups: int=38):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=38):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_40",
    "sat": "def sat(s: str, dups: int=39):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=39):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_41",
    "sat": "def sat(s: str, dups: int=40):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=40):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_42",
    "sat": "def sat(s: str, dups: int=41):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=41):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_43",
    "sat": "def sat(s: str, dups: int=42):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=42):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_44",
    "sat": "def sat(s: str, dups: int=43):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=43):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_45",
    "sat": "def sat(s: str, dups: int=44):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=44):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_46",
    "sat": "def sat(s: str, dups: int=45):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=45):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_47",
    "sat": "def sat(s: str, dups: int=46):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=46):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_48",
    "sat": "def sat(s: str, dups: int=47):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=47):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_49",
    "sat": "def sat(s: str, dups: int=48):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=48):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_50",
    "sat": "def sat(s: str, dups: int=49):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=49):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_51",
    "sat": "def sat(s: str, dups: int=50):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=50):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_52",
    "sat": "def sat(s: str, dups: int=51):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=51):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_53",
    "sat": "def sat(s: str, dups: int=52):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=52):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_54",
    "sat": "def sat(s: str, dups: int=53):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=53):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_55",
    "sat": "def sat(s: str, dups: int=54):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=54):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_56",
    "sat": "def sat(s: str, dups: int=55):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=55):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_57",
    "sat": "def sat(s: str, dups: int=56):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=56):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_58",
    "sat": "def sat(s: str, dups: int=57):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=57):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_59",
    "sat": "def sat(s: str, dups: int=58):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=58):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_60",
    "sat": "def sat(s: str, dups: int=59):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=59):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_61",
    "sat": "def sat(s: str, dups: int=60):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=60):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_62",
    "sat": "def sat(s: str, dups: int=61):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=61):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_63",
    "sat": "def sat(s: str, dups: int=62):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=62):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_64",
    "sat": "def sat(s: str, dups: int=63):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=63):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_65",
    "sat": "def sat(s: str, dups: int=64):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=64):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_66",
    "sat": "def sat(s: str, dups: int=65):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=65):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_67",
    "sat": "def sat(s: str, dups: int=66):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=66):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_68",
    "sat": "def sat(s: str, dups: int=67):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=67):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_69",
    "sat": "def sat(s: str, dups: int=68):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=68):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_70",
    "sat": "def sat(s: str, dups: int=69):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=69):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_71",
    "sat": "def sat(s: str, dups: int=70):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=70):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_72",
    "sat": "def sat(s: str, dups: int=71):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=71):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_73",
    "sat": "def sat(s: str, dups: int=72):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=72):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_74",
    "sat": "def sat(s: str, dups: int=73):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=73):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_75",
    "sat": "def sat(s: str, dups: int=74):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=74):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_76",
    "sat": "def sat(s: str, dups: int=75):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=75):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_77",
    "sat": "def sat(s: str, dups: int=76):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=76):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_78",
    "sat": "def sat(s: str, dups: int=77):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=77):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_79",
    "sat": "def sat(s: str, dups: int=78):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=78):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_80",
    "sat": "def sat(s: str, dups: int=79):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=79):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_81",
    "sat": "def sat(s: str, dups: int=80):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=80):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_82",
    "sat": "def sat(s: str, dups: int=81):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=81):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_83",
    "sat": "def sat(s: str, dups: int=82):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=82):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_84",
    "sat": "def sat(s: str, dups: int=83):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=83):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_85",
    "sat": "def sat(s: str, dups: int=84):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=84):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_86",
    "sat": "def sat(s: str, dups: int=85):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=85):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_87",
    "sat": "def sat(s: str, dups: int=86):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=86):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_88",
    "sat": "def sat(s: str, dups: int=87):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=87):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_89",
    "sat": "def sat(s: str, dups: int=88):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=88):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_90",
    "sat": "def sat(s: str, dups: int=89):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=89):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_91",
    "sat": "def sat(s: str, dups: int=90):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=90):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_92",
    "sat": "def sat(s: str, dups: int=91):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=91):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_93",
    "sat": "def sat(s: str, dups: int=92):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=92):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_94",
    "sat": "def sat(s: str, dups: int=93):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=93):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_95",
    "sat": "def sat(s: str, dups: int=94):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=94):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_96",
    "sat": "def sat(s: str, dups: int=95):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=95):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_97",
    "sat": "def sat(s: str, dups: int=96):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=96):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrSetLen_98",
    "sat": "def sat(s: str, dups: int=97):\n    assert type(s) is str, 's must be of type str'\n    return len(set(s)) == len(s) - dups",
    "sols": [
      "def sol(dups=97):\n    return \"a\" * (dups + 1)"
    ]
  },
  {
    "name": "StrMul_0",
    "sat": "def sat(s: str, target: str=\"foofoofoofoo\", n: int=2):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"foofoofoofoo\", n=2):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_1",
    "sat": "def sat(s: str, target: str=\"\", n: int=0):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"\", n=0):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_2",
    "sat": "def sat(s: str, target: str=\"rulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadese\", n: int=7):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"rulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadeserulekubytextadese\", n=7):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_3",
    "sat": "def sat(s: str, target: str=\"lomucochelomucochelomucochelomucoche\", n: int=2):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"lomucochelomucochelomucochelomucoche\", n=2):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_4",
    "sat": "def sat(s: str, target: str=\"tychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxecho\", n: int=6):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"tychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxechotychytamufuxecho\", n=6):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_5",
    "sat": "def sat(s: str, target: str=\"rocochaxykyjutityrocochaxykyjutityrocochaxykyjutityrocochaxykyjutityrocochaxykyjutityrocochaxykyjutity\", n: int=6):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"rocochaxykyjutityrocochaxykyjutityrocochaxykyjutityrocochaxykyjutityrocochaxykyjutityrocochaxykyjutity\", n=6):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_6",
    "sat": "def sat(s: str, target: str=\"fibanizfibanizfibanizfibanizfibanizfibaniz\", n: int=3):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"fibanizfibanizfibanizfibanizfibanizfibaniz\", n=3):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_7",
    "sat": "def sat(s: str, target: str=\"xxx\", n: int=1):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"xxx\", n=1):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_8",
    "sat": "def sat(s: str, target: str=\"sixyquozygajafysixyquozygajafysixyquozygajafysixyquozygajafysixyquozygajafysixyquozygajafy\", n: int=2):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"sixyquozygajafysixyquozygajafysixyquozygajafysixyquozygajafysixyquozygajafysixyquozygajafy\", n=2):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_9",
    "sat": "def sat(s: str, target: str=\"vybavybavybavybavybavyba\", n: int=6):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"vybavybavybavybavybavyba\", n=6):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_10",
    "sat": "def sat(s: str, target: str=\"wetextegatucopowetextegatucopowetextegatucopowetextegatucopowetextegatucopowetextegatucopowetextegatucopowetextegatucopowetextegatucopowetextegatucopowetextegatucopowetextegatucopowetextegatucopowetextegatucopowetextegatucopowetextegatucopowetextegatucopowetextegatucopowetextegatucopowetextegatucopowetextegatucopo\", n: int=7):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"wetextegatucopowetextegatucopowetextegatucopowetextegatucopowetextegatucopowetextegatucopowetextegatucopowetextegatucopowetextegatucopowetextegatucopowetextegatucopowetextegatucopowetextegatucopowetextegatucopowetextegatucopowetextegatucopowetextegatucopowetextegatucopowetextegatucopowetextegatucopowetextegatucopo\", n=7):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_11",
    "sat": "def sat(s: str, target: str=\"nyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotel\", n: int=7):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"nyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotelnyvazobivotel\", n=7):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_12",
    "sat": "def sat(s: str, target: str=\"thoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythem\", n: int=7):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"thoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythemthoxusobuchyrythem\", n=7):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_13",
    "sat": "def sat(s: str, target: str=\"jiriquorusupalizysjiriquorusupalizys\", n: int=1):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"jiriquorusupalizysjiriquorusupalizys\", n=1):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_14",
    "sat": "def sat(s: str, target: str=\"lulululululululululululululululu\", n: int=8):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"lulululululululululululululululu\", n=8):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_15",
    "sat": "def sat(s: str, target: str=\"quyliquyliquyliquyliquyliquyliquyliquyliquyliquyliquyliquyliquyliquyliquyliquyli\", n: int=8):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"quyliquyliquyliquyliquyliquyliquyliquyliquyliquyliquyliquyliquyliquyliquyliquyli\", n=8):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_16",
    "sat": "def sat(s: str, target: str=\"chaxythutchaxythutchaxythutchaxythut\", n: int=4):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"chaxythutchaxythutchaxythutchaxythut\", n=4):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_17",
    "sat": "def sat(s: str, target: str=\"ziwuzubekelequeso\", n: int=1):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"ziwuzubekelequeso\", n=1):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_18",
    "sat": "def sat(s: str, target: str=\"fytextetfytextetfytextetfytextetfytextetfytextet\", n: int=2):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"fytextetfytextetfytextetfytextetfytextetfytextet\", n=2):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_19",
    "sat": "def sat(s: str, target: str=\"jithysamikyjithysamikyjithysamikyjithysamikyjithysamikyjithysamikyjithysamikyjithysamikyjithysamikyjithysamikyjithysamikyjithysamiky\", n: int=6):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"jithysamikyjithysamikyjithysamikyjithysamikyjithysamikyjithysamikyjithysamikyjithysamikyjithysamikyjithysamikyjithysamikyjithysamiky\", n=6):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_20",
    "sat": "def sat(s: str, target: str=\"thenopyquochachithenopyquochachithenopyquochachithenopyquochachithenopyquochachithenopyquochachithenopyquochachithenopyquochachi\", n: int=8):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"thenopyquochachithenopyquochachithenopyquochachithenopyquochachithenopyquochachithenopyquochachithenopyquochachithenopyquochachi\", n=8):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_21",
    "sat": "def sat(s: str, target: str=\"dotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutexto\", n: int=7):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"dotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutextodotethefikejutexto\", n=7):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_22",
    "sat": "def sat(s: str, target: str=\"thochukidexthochukidexthochukidexthochukidexthochukidexthochukidex\", n: int=3):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"thochukidexthochukidexthochukidexthochukidexthochukidexthochukidex\", n=3):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_23",
    "sat": "def sat(s: str, target: str=\"tixtixtixtixtixtixtixtixtixtixtixtixtixtixtixtixtixtixtixtixtixtixtixtix\", n: int=8):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"tixtixtixtixtixtixtixtixtixtixtixtixtixtixtixtixtixtixtixtixtixtixtixtix\", n=8):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_24",
    "sat": "def sat(s: str, target: str=\"quyduchopyquyduchopyquyduchopyquyduchopyquyduchopyquyduchopyquyduchopyquyduchopy\", n: int=8):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"quyduchopyquyduchopyquyduchopyquyduchopyquyduchopyquyduchopyquyduchopyquyduchopy\", n=8):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_25",
    "sat": "def sat(s: str, target: str=\"xatextulizochipazulxatextulizochipazulxatextulizochipazulxatextulizochipazulxatextulizochipazul\", n: int=5):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"xatextulizochipazulxatextulizochipazulxatextulizochipazulxatextulizochipazulxatextulizochipazul\", n=5):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_26",
    "sat": "def sat(s: str, target: str=\"megugegoquuwonewmegugegoquuwonewmegugegoquuwonewmegugegoquuwonewmegugegoquuwonewmegugegoquuwonewmegugegoquuwonewmegugegoquuwonewmegugegoquuwonewmegugegoquuwonewmegugegoquuwonewmegugegoquuwonew\", n: int=6):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"megugegoquuwonewmegugegoquuwonewmegugegoquuwonewmegugegoquuwonewmegugegoquuwonewmegugegoquuwonewmegugegoquuwonewmegugegoquuwonewmegugegoquuwonewmegugegoquuwonewmegugegoquuwonewmegugegoquuwonew\", n=6):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_27",
    "sat": "def sat(s: str, target: str=\"rotextanuthudilrotextanuthudilrotextanuthudilrotextanuthudilrotextanuthudilrotextanuthudilrotextanuthudilrotextanuthudilrotextanuthudilrotextanuthudilrotextanuthudilrotextanuthudil\", n: int=6):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"rotextanuthudilrotextanuthudilrotextanuthudilrotextanuthudilrotextanuthudilrotextanuthudilrotextanuthudilrotextanuthudilrotextanuthudilrotextanuthudilrotextanuthudilrotextanuthudil\", n=6):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_28",
    "sat": "def sat(s: str, target: str=\"faronufaronufaronufaronufaronufaronufaronufaronufaronu\", n: int=3):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"faronufaronufaronufaronufaronufaronufaronufaronufaronu\", n=3):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_29",
    "sat": "def sat(s: str, target: str=\"kythotutextekythotutextekythotutextekythotutextekythotutextekythotutextekythotutextekythotutextekythotutextekythotutextekythotutextekythotutexte\", n: int=4):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"kythotutextekythotutextekythotutextekythotutextekythotutextekythotutextekythotutextekythotutextekythotutextekythotutextekythotutextekythotutexte\", n=4):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_30",
    "sat": "def sat(s: str, target: str=\"quyxuchyxytquyxuchyxytquyxuchyxyt\", n: int=3):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"quyxuchyxytquyxuchyxytquyxuchyxyt\", n=3):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_31",
    "sat": "def sat(s: str, target: str=\"sosososososososososo\", n: int=5):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"sosososososososososo\", n=5):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_32",
    "sat": "def sat(s: str, target: str=\"junjunjunjunjun\", n: int=5):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"junjunjunjunjun\", n=5):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_33",
    "sat": "def sat(s: str, target: str=\"metextevelmetextevelmetextevelmetextevelmetextevelmetextevelmetextevelmetextevelmetextevel\", n: int=3):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"metextevelmetextevelmetextevelmetextevelmetextevelmetextevelmetextevelmetextevelmetextevel\", n=3):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_34",
    "sat": "def sat(s: str, target: str=\"tesiharithtesiharithtesiharithtesiharithtesiharithtesiharithtesiharithtesiharithtesiharithtesiharithtesiharithtesiharith\", n: int=6):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"tesiharithtesiharithtesiharithtesiharithtesiharithtesiharithtesiharithtesiharithtesiharithtesiharithtesiharithtesiharith\", n=6):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_35",
    "sat": "def sat(s: str, target: str=\"kitkitkit\", n: int=1):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"kitkitkit\", n=1):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_36",
    "sat": "def sat(s: str, target: str=\"jonulejonulejonulejonulejonulejonulejonulejonulejonulejonulejonulejonule\", n: int=4):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"jonulejonulejonulejonulejonulejonulejonulejonulejonulejonulejonulejonule\", n=4):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_37",
    "sat": "def sat(s: str, target: str=\"gofagofagofagofagofagofa\", n: int=3):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"gofagofagofagofagofagofa\", n=3):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_38",
    "sat": "def sat(s: str, target: str=\"katextihaquirkatextihaquirkatextihaquirkatextihaquirkatextihaquirkatextihaquirkatextihaquirkatextihaquirkatextihaquirkatextihaquirkatextihaquirkatextihaquir\", n: int=6):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"katextihaquirkatextihaquirkatextihaquirkatextihaquirkatextihaquirkatextihaquirkatextihaquirkatextihaquirkatextihaquirkatextihaquirkatextihaquirkatextihaquir\", n=6):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_39",
    "sat": "def sat(s: str, target: str=\"pipufihoguryrakynepipufihoguryrakynepipufihoguryrakynepipufihoguryrakynepipufihoguryrakynepipufihoguryrakyne\", n: int=3):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"pipufihoguryrakynepipufihoguryrakynepipufihoguryrakynepipufihoguryrakynepipufihoguryrakynepipufihoguryrakyne\", n=3):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_40",
    "sat": "def sat(s: str, target: str=\"duminysopedoduminysopedoduminysopedoduminysopedoduminysopedoduminysopedoduminysopedoduminysopedoduminysopedoduminysopedoduminysopedoduminysopedo\", n: int=4):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"duminysopedoduminysopedoduminysopedoduminysopedoduminysopedoduminysopedoduminysopedoduminysopedoduminysopedoduminysopedoduminysopedoduminysopedo\", n=4):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_41",
    "sat": "def sat(s: str, target: str=\"cidowuribotecidowuribotecidowuribotecidowuribotecidowuribotecidowuribotecidowuribotecidowuribotecidowuribotecidowuribotecidowuribotecidowuribotecidowuribotecidowuribotecidowuribotecidowuribotecidowuribotecidowuribote\", n: int=6):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"cidowuribotecidowuribotecidowuribotecidowuribotecidowuribotecidowuribotecidowuribotecidowuribotecidowuribotecidowuribotecidowuribotecidowuribotecidowuribotecidowuribotecidowuribotecidowuribotecidowuribotecidowuribote\", n=6):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_42",
    "sat": "def sat(s: str, target: str=\"roladebofujeroladebofujeroladebofujeroladebofujeroladebofujeroladebofujeroladebofujeroladebofujeroladebofuje\", n: int=3):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"roladebofujeroladebofujeroladebofujeroladebofujeroladebofujeroladebofujeroladebofujeroladebofujeroladebofuje\", n=3):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_43",
    "sat": "def sat(s: str, target: str=\"vichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenoka\", n: int=9):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"vichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenokavichutextosenoka\", n=9):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_44",
    "sat": "def sat(s: str, target: str=\"chutextuquehohasoxibchutextuquehohasoxibchutextuquehohasoxibchutextuquehohasoxibchutextuquehohasoxibchutextuquehohasoxibchutextuquehohasoxibchutextuquehohasoxibchutextuquehohasoxib\", n: int=3):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"chutextuquehohasoxibchutextuquehohasoxibchutextuquehohasoxibchutextuquehohasoxibchutextuquehohasoxibchutextuquehohasoxibchutextuquehohasoxibchutextuquehohasoxibchutextuquehohasoxib\", n=3):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_45",
    "sat": "def sat(s: str, target: str=\"fovopidfovopid\", n: int=2):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"fovopidfovopid\", n=2):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_46",
    "sat": "def sat(s: str, target: str=\"kewitextolykewitextolykewitextolykewitextolykewitextolykewitextolykewitextolykewitextolykewitextoly\", n: int=3):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"kewitextolykewitextolykewitextolykewitextolykewitextolykewitextolykewitextolykewitextolykewitextoly\", n=3):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_47",
    "sat": "def sat(s: str, target: str=\"kibichegihusijibukibichegihusijibukibichegihusijibukibichegihusijibukibichegihusijibukibichegihusijibukibichegihusijibukibichegihusijibukibichegihusijibu\", n: int=9):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"kibichegihusijibukibichegihusijibukibichegihusijibukibichegihusijibukibichegihusijibukibichegihusijibukibichegihusijibukibichegihusijibukibichegihusijibu\", n=9):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_48",
    "sat": "def sat(s: str, target: str=\"wetimyquekaticwetimyquekaticwetimyquekaticwetimyquekaticwetimyquekaticwetimyquekaticwetimyquekaticwetimyquekaticwetimyquekaticwetimyquekaticwetimyquekaticwetimyquekaticwetimyquekaticwetimyquekaticwetimyquekaticwetimyquekaticwetimyquekaticwetimyquekaticwetimyquekaticwetimyquekaticwetimyquekatic\", n: int=7):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"wetimyquekaticwetimyquekaticwetimyquekaticwetimyquekaticwetimyquekaticwetimyquekaticwetimyquekaticwetimyquekaticwetimyquekaticwetimyquekaticwetimyquekaticwetimyquekaticwetimyquekaticwetimyquekaticwetimyquekaticwetimyquekaticwetimyquekaticwetimyquekaticwetimyquekaticwetimyquekaticwetimyquekatic\", n=7):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_49",
    "sat": "def sat(s: str, target: str=\"lireriflireriflireriflireriflireriflireriflireriflireriflireriflireriflireriflireriflireriflireriflireriflirerif\", n: int=8):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"lireriflireriflireriflireriflireriflireriflireriflireriflireriflireriflireriflireriflireriflireriflireriflirerif\", n=8):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_50",
    "sat": "def sat(s: str, target: str=\"xxxxxxxxxxxx\", n: int=6):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"xxxxxxxxxxxx\", n=6):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_51",
    "sat": "def sat(s: str, target: str=\"fagicowechalunomfagicowechalunomfagicowechalunomfagicowechalunomfagicowechalunom\", n: int=5):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"fagicowechalunomfagicowechalunomfagicowechalunomfagicowechalunomfagicowechalunom\", n=5):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_52",
    "sat": "def sat(s: str, target: str=\"quotquotquotquotquot\", n: int=5):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"quotquotquotquotquot\", n=5):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_53",
    "sat": "def sat(s: str, target: str=\"ruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochu\", n: int=9):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"ruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochuruquachochu\", n=9):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_54",
    "sat": "def sat(s: str, target: str=\"zyquibzyquibzyquibzyquibzyquibzyquibzyquibzyquibzyquibzyquibzyquibzyquibzyquibzyquibzyquib\", n: int=5):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"zyquibzyquibzyquibzyquibzyquibzyquibzyquibzyquibzyquibzyquibzyquibzyquibzyquibzyquibzyquib\", n=5):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_55",
    "sat": "def sat(s: str, target: str=\"thosutexthosutexthosutexthosutexthosutexthosutexthosutexthosutexthosutexthosutexthosutexthosutexthosutexthosutexthosutexthosutexthosutexthosutex\", n: int=9):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"thosutexthosutexthosutexthosutexthosutexthosutexthosutexthosutexthosutexthosutexthosutexthosutexthosutexthosutexthosutexthosutexthosutexthosutex\", n=9):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_56",
    "sat": "def sat(s: str, target: str=\"wiwiwiwiwiwiwiwiwiwi\", n: int=5):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"wiwiwiwiwiwiwiwiwiwi\", n=5):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_57",
    "sat": "def sat(s: str, target: str=\"nuvycewasocikohychnuvycewasocikohychnuvycewasocikohychnuvycewasocikohychnuvycewasocikohychnuvycewasocikohychnuvycewasocikohychnuvycewasocikohychnuvycewasocikohychnuvycewasocikohychnuvycewasocikohychnuvycewasocikohychnuvycewasocikohychnuvycewasocikohychnuvycewasocikohychnuvycewasocikohychnuvycewasocikohychnuvycewasocikohych\", n: int=6):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"nuvycewasocikohychnuvycewasocikohychnuvycewasocikohychnuvycewasocikohychnuvycewasocikohychnuvycewasocikohychnuvycewasocikohychnuvycewasocikohychnuvycewasocikohychnuvycewasocikohychnuvycewasocikohychnuvycewasocikohychnuvycewasocikohychnuvycewasocikohychnuvycewasocikohychnuvycewasocikohychnuvycewasocikohychnuvycewasocikohych\", n=6):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_58",
    "sat": "def sat(s: str, target: str=\"pppppppppppppppp\", n: int=8):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"pppppppppppppppp\", n=8):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_59",
    "sat": "def sat(s: str, target: str=\"zechuvuzimaquazechuvuzimaquazechuvuzimaqua\", n: int=3):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"zechuvuzimaquazechuvuzimaquazechuvuzimaqua\", n=3):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_60",
    "sat": "def sat(s: str, target: str=\"nuqnuqnuqnuqnuqnuqnuqnuqnuqnuqnuqnuqnuqnuqnuqnuqnuqnuqnuqnuqnuqnuqnuqnuqnuqnuqnuq\", n: int=9):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"nuqnuqnuqnuqnuqnuqnuqnuqnuqnuqnuqnuqnuqnuqnuqnuqnuqnuqnuqnuqnuqnuqnuqnuqnuqnuqnuq\", n=9):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_61",
    "sat": "def sat(s: str, target: str=\"zizi\", n: int=2):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"zizi\", n=2):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_62",
    "sat": "def sat(s: str, target: str=\"vifetextufylykypecevifetextufylykypecevifetextufylykypecevifetextufylykypecevifetextufylykypecevifetextufylykypecevifetextufylykypecevifetextufylykypecevifetextufylykypecevifetextufylykypecevifetextufylykypecevifetextufylykypecevifetextufylykypecevifetextufylykypecevifetextufylykypecevifetextufylykypece\", n: int=8):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"vifetextufylykypecevifetextufylykypecevifetextufylykypecevifetextufylykypecevifetextufylykypecevifetextufylykypecevifetextufylykypecevifetextufylykypecevifetextufylykypecevifetextufylykypecevifetextufylykypecevifetextufylykypecevifetextufylykypecevifetextufylykypecevifetextufylykypecevifetextufylykypece\", n=8):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_63",
    "sat": "def sat(s: str, target: str=\"hybevichejugefajuhybevichejugefajuhybevichejugefajuhybevichejugefaju\", n: int=2):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"hybevichejugefajuhybevichejugefajuhybevichejugefajuhybevichejugefaju\", n=2):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_64",
    "sat": "def sat(s: str, target: str=\"quexenozaripykequexenozaripykequexenozaripykequexenozaripykequexenozaripykequexenozaripyke\", n: int=2):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"quexenozaripykequexenozaripykequexenozaripykequexenozaripykequexenozaripykequexenozaripyke\", n=2):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_65",
    "sat": "def sat(s: str, target: str=\"japipeniwotecojapipeniwoteco\", n: int=1):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"japipeniwotecojapipeniwoteco\", n=1):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_66",
    "sat": "def sat(s: str, target: str=\"quathesaxotquathesaxotquathesaxotquathesaxotquathesaxotquathesaxotquathesaxotquathesaxotquathesaxot\", n: int=9):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"quathesaxotquathesaxotquathesaxotquathesaxotquathesaxotquathesaxotquathesaxotquathesaxotquathesaxot\", n=9):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_67",
    "sat": "def sat(s: str, target: str=\"gykahagykahagykahagykahagykahagykahagykahagykahagykaha\", n: int=3):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"gykahagykahagykahagykahagykahagykahagykahagykahagykaha\", n=3):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_68",
    "sat": "def sat(s: str, target: str=\"thinowthinowthinowthinowthinowthinowthinowthinowthinowthinowthinowthinowthinowthinowthinowthinowthinowthinowthinowthinowthinow\", n: int=7):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"thinowthinowthinowthinowthinowthinowthinowthinowthinowthinowthinowthinowthinowthinowthinowthinowthinowthinowthinowthinowthinow\", n=7):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_69",
    "sat": "def sat(s: str, target: str=\"bavamufehuquothedojybavamufehuquothedojybavamufehuquothedojybavamufehuquothedojybavamufehuquothedojybavamufehuquothedojybavamufehuquothedojybavamufehuquothedojybavamufehuquothedojybavamufehuquothedojy\", n: int=5):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"bavamufehuquothedojybavamufehuquothedojybavamufehuquothedojybavamufehuquothedojybavamufehuquothedojybavamufehuquothedojybavamufehuquothedojybavamufehuquothedojybavamufehuquothedojybavamufehuquothedojy\", n=5):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_70",
    "sat": "def sat(s: str, target: str=\"pomochefichukogpomochefichukogpomochefichukogpomochefichukogpomochefichukogpomochefichukogpomochefichukogpomochefichukogpomochefichukog\", n: int=3):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"pomochefichukogpomochefichukogpomochefichukogpomochefichukogpomochefichukogpomochefichukogpomochefichukogpomochefichukogpomochefichukog\", n=3):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_71",
    "sat": "def sat(s: str, target: str=\"pojyrawpojyrawpojyrawpojyraw\", n: int=2):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"pojyrawpojyrawpojyrawpojyraw\", n=2):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_72",
    "sat": "def sat(s: str, target: str=\"conetconetconetconetconetconetconetconetconetconetconetconet\", n: int=6):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"conetconetconetconetconetconetconetconetconetconetconetconet\", n=6):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_73",
    "sat": "def sat(s: str, target: str=\"tytyjepiwarogeloztytyjepiwarogeloztytyjepiwarogeloztytyjepiwarogeloztytyjepiwarogeloztytyjepiwarogeloztytyjepiwarogeloztytyjepiwarogeloztytyjepiwarogeloztytyjepiwarogeloztytyjepiwarogeloztytyjepiwarogeloz\", n: int=4):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"tytyjepiwarogeloztytyjepiwarogeloztytyjepiwarogeloztytyjepiwarogeloztytyjepiwarogeloztytyjepiwarogeloztytyjepiwarogeloztytyjepiwarogeloztytyjepiwarogeloztytyjepiwarogeloztytyjepiwarogeloztytyjepiwarogeloz\", n=4):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_74",
    "sat": "def sat(s: str, target: str=\"textatextetitextatextetitextatextetitextatextetitextatextetitextatextetitextatextetitextatextetitextatextetitextatextetitextatextetitextatextetitextatextetitextatextetitextatextetitextatexteti\", n: int=8):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"textatextetitextatextetitextatextetitextatextetitextatextetitextatextetitextatextetitextatextetitextatextetitextatextetitextatextetitextatextetitextatextetitextatextetitextatextetitextatexteti\", n=8):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_75",
    "sat": "def sat(s: str, target: str=\"nyzinathuquexinyzinathuquexinyzinathuquexinyzinathuquexinyzinathuquexinyzinathuquexinyzinathuquexinyzinathuquexinyzinathuquexi\", n: int=9):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"nyzinathuquexinyzinathuquexinyzinathuquexinyzinathuquexinyzinathuquexinyzinathuquexinyzinathuquexinyzinathuquexinyzinathuquexi\", n=9):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_76",
    "sat": "def sat(s: str, target: str=\"xetextexetextexetextexetextexetextexetextexetextexetexte\", n: int=8):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"xetextexetextexetextexetextexetextexetextexetextexetexte\", n=8):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_77",
    "sat": "def sat(s: str, target: str=\"koxyvilihifesysakoxyvilihifesysakoxyvilihifesysakoxyvilihifesysa\", n: int=2):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"koxyvilihifesysakoxyvilihifesysakoxyvilihifesysakoxyvilihifesysa\", n=2):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_78",
    "sat": "def sat(s: str, target: str=\"gggggg\", n: int=3):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"gggggg\", n=3):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_79",
    "sat": "def sat(s: str, target: str=\"totimimyripiforumudtotimimyripiforumudtotimimyripiforumudtotimimyripiforumudtotimimyripiforumudtotimimyripiforumudtotimimyripiforumud\", n: int=7):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"totimimyripiforumudtotimimyripiforumudtotimimyripiforumudtotimimyripiforumudtotimimyripiforumudtotimimyripiforumudtotimimyripiforumud\", n=7):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_80",
    "sat": "def sat(s: str, target: str=\"gogyzabagogyzaba\", n: int=2):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"gogyzabagogyzaba\", n=2):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_81",
    "sat": "def sat(s: str, target: str=\"cyquuxerolevcyquuxerolevcyquuxerolevcyquuxerolevcyquuxerolevcyquuxerolevcyquuxerolevcyquuxerolevcyquuxerolevcyquuxerolevcyquuxerolevcyquuxerolevcyquuxerolevcyquuxerolevcyquuxerolevcyquuxerolevcyquuxerolevcyquuxerolev\", n: int=9):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"cyquuxerolevcyquuxerolevcyquuxerolevcyquuxerolevcyquuxerolevcyquuxerolevcyquuxerolevcyquuxerolevcyquuxerolevcyquuxerolevcyquuxerolevcyquuxerolevcyquuxerolevcyquuxerolevcyquuxerolevcyquuxerolevcyquuxerolevcyquuxerolev\", n=9):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_82",
    "sat": "def sat(s: str, target: str=\"vuvuvuvuvuvuvuvuvuvuvuvuvuvuvuvuvuvuvuvuvu\", n: int=7):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"vuvuvuvuvuvuvuvuvuvuvuvuvuvuvuvuvuvuvuvuvu\", n=7):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_83",
    "sat": "def sat(s: str, target: str=\"fugathokylfugathokylfugathokylfugathokylfugathokylfugathokylfugathokylfugathokylfugathokylfugathokylfugathokylfugathokylfugathokylfugathokyl\", n: int=7):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"fugathokylfugathokylfugathokylfugathokylfugathokylfugathokylfugathokylfugathokylfugathokylfugathokylfugathokylfugathokylfugathokylfugathokyl\", n=7):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_84",
    "sat": "def sat(s: str, target: str=\"coxanezosowexacoxanezosowexacoxanezosowexacoxanezosowexacoxanezosowexacoxanezosowexacoxanezosowexacoxanezosowexa\", n: int=4):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"coxanezosowexacoxanezosowexacoxanezosowexacoxanezosowexacoxanezosowexacoxanezosowexacoxanezosowexacoxanezosowexa\", n=4):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_85",
    "sat": "def sat(s: str, target: str=\"bababa\", n: int=3):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"bababa\", n=3):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_86",
    "sat": "def sat(s: str, target: str=\"gogogogogogogogogogogogogogogogo\", n: int=8):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"gogogogogogogogogogogogogogogogo\", n=8):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_87",
    "sat": "def sat(s: str, target: str=\"wehepabucawutorubewehepabucawutorubewehepabucawutorubewehepabucawutorubewehepabucawutorubewehepabucawutorubewehepabucawutorubewehepabucawutorubewehepabucawutorubewehepabucawutorubewehepabucawutorubewehepabucawutorube\", n: int=6):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"wehepabucawutorubewehepabucawutorubewehepabucawutorubewehepabucawutorubewehepabucawutorubewehepabucawutorubewehepabucawutorubewehepabucawutorubewehepabucawutorubewehepabucawutorubewehepabucawutorubewehepabucawutorube\", n=6):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_88",
    "sat": "def sat(s: str, target: str=\"vyvyvyvyvyvyvyvyvyvyvyvyvyvyvyvyvyvyvyvyvyvyvyvyvyvyvy\", n: int=9):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"vyvyvyvyvyvyvyvyvyvyvyvyvyvyvyvyvyvyvyvyvyvyvyvyvyvyvy\", n=9):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_89",
    "sat": "def sat(s: str, target: str=\"padecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugyth\", n: int=9):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"padecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugythpadecugyth\", n=9):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_90",
    "sat": "def sat(s: str, target: str=\"xakuvucxakuvucxakuvucxakuvucxakuvucxakuvucxakuvucxakuvucxakuvucxakuvucxakuvucxakuvucxakuvucxakuvucxakuvucxakuvucxakuvucxakuvucxakuvucxakuvucxakuvuc\", n: int=7):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"xakuvucxakuvucxakuvucxakuvucxakuvucxakuvucxakuvucxakuvucxakuvucxakuvucxakuvucxakuvucxakuvucxakuvucxakuvucxakuvucxakuvucxakuvucxakuvucxakuvucxakuvuc\", n=7):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_91",
    "sat": "def sat(s: str, target: str=\"hitexhitexhitexhitexhitexhitexhitexhitexhitexhitexhitexhitexhitexhitexhitexhitexhitexhitexhitexhitexhitexhitexhitexhitex\", n: int=8):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"hitexhitexhitexhitexhitexhitexhitexhitexhitexhitexhitexhitexhitexhitexhitexhitexhitexhitexhitexhitexhitexhitexhitexhitex\", n=8):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_92",
    "sat": "def sat(s: str, target: str=\"quaquocefomefuzugquaquocefomefuzugquaquocefomefuzugquaquocefomefuzugquaquocefomefuzugquaquocefomefuzugquaquocefomefuzugquaquocefomefuzugquaquocefomefuzugquaquocefomefuzugquaquocefomefuzugquaquocefomefuzug\", n: int=6):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"quaquocefomefuzugquaquocefomefuzugquaquocefomefuzugquaquocefomefuzugquaquocefomefuzugquaquocefomefuzugquaquocefomefuzugquaquocefomefuzugquaquocefomefuzugquaquocefomefuzugquaquocefomefuzugquaquocefomefuzug\", n=6):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_93",
    "sat": "def sat(s: str, target: str=\"vatykulamarvatykulamarvatykulamarvatykulamarvatykulamarvatykulamarvatykulamarvatykulamarvatykulamarvatykulamarvatykulamarvatykulamar\", n: int=4):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"vatykulamarvatykulamarvatykulamarvatykulamarvatykulamarvatykulamarvatykulamarvatykulamarvatykulamarvatykulamarvatykulamarvatykulamar\", n=4):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_94",
    "sat": "def sat(s: str, target: str=\"quyquakepquyquakepquyquakepquyquakepquyquakepquyquakepquyquakepquyquakepquyquakepquyquakepquyquakepquyquakepquyquakepquyquakepquyquakepquyquakepquyquakepquyquakep\", n: int=9):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"quyquakepquyquakepquyquakepquyquakepquyquakepquyquakepquyquakepquyquakepquyquakepquyquakepquyquakepquyquakepquyquakepquyquakepquyquakepquyquakepquyquakepquyquakep\", n=9):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_95",
    "sat": "def sat(s: str, target: str=\"jewaxagy\", n: int=1):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"jewaxagy\", n=1):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_96",
    "sat": "def sat(s: str, target: str=\"kilyposehipyxehkilyposehipyxeh\", n: int=1):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"kilyposehipyxehkilyposehipyxeh\", n=1):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_97",
    "sat": "def sat(s: str, target: str=\"ccccccccc\", n: int=9):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"ccccccccc\", n=9):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_98",
    "sat": "def sat(s: str, target: str=\"byxasevinunyjafunibyxasevinunyjafunibyxasevinunyjafunibyxasevinunyjafunibyxasevinunyjafunibyxasevinunyjafunibyxasevinunyjafunibyxasevinunyjafuni\", n: int=8):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"byxasevinunyjafunibyxasevinunyjafunibyxasevinunyjafunibyxasevinunyjafunibyxasevinunyjafunibyxasevinunyjafunibyxasevinunyjafunibyxasevinunyjafuni\", n=8):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul_99",
    "sat": "def sat(s: str, target: str=\"cccccccccccc\", n: int=6):\n    assert type(s) is str, 's must be of type str'\n    return s * n == target",
    "sols": [
      "def sol(target=\"cccccccccccc\", n=6):\n    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ]
  },
  {
    "name": "StrMul2_0",
    "sat": "def sat(n: int, target: str=\"foofoofoofoo\", s: str=\"foofoo\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"foofoofoofoo\", s=\"foofoo\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_1",
    "sat": "def sat(n: int, target: str=\"lulogaplulogaplulogaplulogaplulogaplulogaplulogaplulogaplulogap\", s: str=\"lulogaplulogaplulogap\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"lulogaplulogaplulogaplulogaplulogaplulogaplulogaplulogaplulogap\", s=\"lulogaplulogaplulogap\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_2",
    "sat": "def sat(n: int, target: str=\"fipesepuwywakyjifipesepuwywakyjifipesepuwywakyjifipesepuwywakyjifipesepuwywakyjifipesepuwywakyji\", s: str=\"fipesepuwywakyjifipesepuwywakyji\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"fipesepuwywakyjifipesepuwywakyjifipesepuwywakyjifipesepuwywakyjifipesepuwywakyjifipesepuwywakyji\", s=\"fipesepuwywakyjifipesepuwywakyji\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_3",
    "sat": "def sat(n: int, target: str=\"\", s: str=\"fanidemochachfanidemochachfanidemochach\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"\", s=\"fanidemochachfanidemochachfanidemochach\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_4",
    "sat": "def sat(n: int, target: str=\"thuxyfypoquocyzezigthuxyfypoquocyzezigthuxyfypoquocyzezigthuxyfypoquocyzezigthuxyfypoquocyzezigthuxyfypoquocyzezig\", s: str=\"thuxyfypoquocyzezig\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"thuxyfypoquocyzezigthuxyfypoquocyzezigthuxyfypoquocyzezigthuxyfypoquocyzezigthuxyfypoquocyzezigthuxyfypoquocyzezig\", s=\"thuxyfypoquocyzezig\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_5",
    "sat": "def sat(n: int, target: str=\"mimixibinutoculotextmimixibinutoculotextmimixibinutoculotext\", s: str=\"mimixibinutoculotext\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"mimixibinutoculotextmimixibinutoculotextmimixibinutoculotext\", s=\"mimixibinutoculotext\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_6",
    "sat": "def sat(n: int, target: str=\"chezatextutexchezatextutexchezatextutexchezatextutexchezatextutexchezatextutex\", s: str=\"chezatextutex\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"chezatextutexchezatextutexchezatextutexchezatextutexchezatextutexchezatextutex\", s=\"chezatextutex\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_7",
    "sat": "def sat(n: int, target: str=\"dildildildildildildildildildildildildildildildildildildildildildildildildildildil\", s: str=\"dildildil\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"dildildildildildildildildildildildildildildildildildildildildildildildildildildil\", s=\"dildildil\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_8",
    "sat": "def sat(n: int, target: str=\"lytextelytexte\", s: str=\"lytexte\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"lytextelytexte\", s=\"lytexte\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_9",
    "sat": "def sat(n: int, target: str=\"vafuwivafuwivafuwivafuwivafuwivafuwivafuwivafuwivafuwivafuwivafuwivafuwivafuwivafuwi\", s: str=\"vafuwivafuwi\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"vafuwivafuwivafuwivafuwivafuwivafuwivafuwivafuwivafuwivafuwivafuwivafuwivafuwivafuwi\", s=\"vafuwivafuwi\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_10",
    "sat": "def sat(n: int, target: str=\"wylumityzazechexwylumityzazechexwylumityzazechexwylumityzazechexwylumityzazechexwylumityzazechexwylumityzazechexwylumityzazechexwylumityzazechexwylumityzazechexwylumityzazechexwylumityzazechexwylumityzazechexwylumityzazechexwylumityzazechexwylumityzazechexwylumityzazechexwylumityzazechex\", s: str=\"wylumityzazechexwylumityzazechexwylumityzazechex\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"wylumityzazechexwylumityzazechexwylumityzazechexwylumityzazechexwylumityzazechexwylumityzazechexwylumityzazechexwylumityzazechexwylumityzazechexwylumityzazechexwylumityzazechexwylumityzazechexwylumityzazechexwylumityzazechexwylumityzazechexwylumityzazechexwylumityzazechexwylumityzazechex\", s=\"wylumityzazechexwylumityzazechexwylumityzazechex\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_11",
    "sat": "def sat(n: int, target: str=\"\", s: str=\"ketextiwiveketextiwiveketextiwive\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"\", s=\"ketextiwiveketextiwiveketextiwive\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_12",
    "sat": "def sat(n: int, target: str=\"wufwufwuf\", s: str=\"wufwufwuf\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"wufwufwuf\", s=\"wufwufwuf\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_13",
    "sat": "def sat(n: int, target: str=\"wuzunihufyjijymucwuzunihufyjijymucwuzunihufyjijymucwuzunihufyjijymucwuzunihufyjijymucwuzunihufyjijymucwuzunihufyjijymucwuzunihufyjijymucwuzunihufyjijymucwuzunihufyjijymucwuzunihufyjijymucwuzunihufyjijymuc\", s: str=\"wuzunihufyjijymucwuzunihufyjijymuc\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"wuzunihufyjijymucwuzunihufyjijymucwuzunihufyjijymucwuzunihufyjijymucwuzunihufyjijymucwuzunihufyjijymucwuzunihufyjijymucwuzunihufyjijymucwuzunihufyjijymucwuzunihufyjijymucwuzunihufyjijymucwuzunihufyjijymuc\", s=\"wuzunihufyjijymucwuzunihufyjijymuc\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_14",
    "sat": "def sat(n: int, target: str=\"thetextetawalthetextetawalthetextetawalthetextetawalthetextetawalthetextetawalthetextetawalthetextetawalthetextetawalthetextetawalthetextetawalthetextetawalthetextetawalthetextetawalthetextetawalthetextetawalthetextetawalthetextetawalthetextetawalthetextetawalthetextetawal\", s: str=\"thetextetawalthetextetawalthetextetawal\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"thetextetawalthetextetawalthetextetawalthetextetawalthetextetawalthetextetawalthetextetawalthetextetawalthetextetawalthetextetawalthetextetawalthetextetawalthetextetawalthetextetawalthetextetawalthetextetawalthetextetawalthetextetawalthetextetawalthetextetawalthetextetawal\", s=\"thetextetawalthetextetawalthetextetawal\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_15",
    "sat": "def sat(n: int, target: str=\"wisenethoquwisenethoquwisenethoquwisenethoquwisenethoquwisenethoquwisenethoquwisenethoquwisenethoquwisenethoquwisenethoquwisenethoquwisenethoquwisenethoqu\", s: str=\"wisenethoquwisenethoqu\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"wisenethoquwisenethoquwisenethoquwisenethoquwisenethoquwisenethoquwisenethoquwisenethoquwisenethoquwisenethoquwisenethoquwisenethoquwisenethoquwisenethoqu\", s=\"wisenethoquwisenethoqu\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_16",
    "sat": "def sat(n: int, target: str=\"mymoxachuxaxolefynmymoxachuxaxolefynmymoxachuxaxolefynmymoxachuxaxolefynmymoxachuxaxolefynmymoxachuxaxolefynmymoxachuxaxolefynmymoxachuxaxolefynmymoxachuxaxolefynmymoxachuxaxolefynmymoxachuxaxolefynmymoxachuxaxolefynmymoxachuxaxolefynmymoxachuxaxolefynmymoxachuxaxolefynmymoxachuxaxolefyn\", s: str=\"mymoxachuxaxolefynmymoxachuxaxolefyn\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"mymoxachuxaxolefynmymoxachuxaxolefynmymoxachuxaxolefynmymoxachuxaxolefynmymoxachuxaxolefynmymoxachuxaxolefynmymoxachuxaxolefynmymoxachuxaxolefynmymoxachuxaxolefynmymoxachuxaxolefynmymoxachuxaxolefynmymoxachuxaxolefynmymoxachuxaxolefynmymoxachuxaxolefynmymoxachuxaxolefynmymoxachuxaxolefyn\", s=\"mymoxachuxaxolefynmymoxachuxaxolefyn\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_17",
    "sat": "def sat(n: int, target: str=\"\", s: str=\"hete\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"\", s=\"hete\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_18",
    "sat": "def sat(n: int, target: str=\"dyzicatextetadyzicatextetadyzicatextetadyzicatexteta\", s: str=\"dyzicatextetadyzicatexteta\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"dyzicatextetadyzicatextetadyzicatextetadyzicatexteta\", s=\"dyzicatextetadyzicatexteta\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_19",
    "sat": "def sat(n: int, target: str=\"jivilojivilojivilojivilojivilojivilojivilojivilojivilojivilojivilojivilojivilojivilojivilo\", s: str=\"jivilojivilojivilo\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"jivilojivilojivilojivilojivilojivilojivilojivilojivilojivilojivilojivilojivilojivilojivilo\", s=\"jivilojivilojivilo\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_20",
    "sat": "def sat(n: int, target: str=\"coxubichethoderycoxubichethoderycoxubichethodery\", s: str=\"coxubichethodery\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"coxubichethoderycoxubichethoderycoxubichethodery\", s=\"coxubichethodery\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_21",
    "sat": "def sat(n: int, target: str=\"vunamafothuhurewvunamafothuhurewvunamafothuhurewvunamafothuhurewvunamafothuhurewvunamafothuhurewvunamafothuhurewvunamafothuhurewvunamafothuhurew\", s: str=\"vunamafothuhurew\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"vunamafothuhurewvunamafothuhurewvunamafothuhurewvunamafothuhurewvunamafothuhurewvunamafothuhurewvunamafothuhurewvunamafothuhurewvunamafothuhurew\", s=\"vunamafothuhurew\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_22",
    "sat": "def sat(n: int, target: str=\"lotextylotextylotextylotextylotextylotextylotextylotextylotexty\", s: str=\"lotextylotextylotexty\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"lotextylotextylotextylotextylotextylotextylotextylotextylotexty\", s=\"lotextylotextylotexty\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_23",
    "sat": "def sat(n: int, target: str=\"quuzejethysequuzejethysequuzejethysequuzejethysequuzejethysequuzejethysequuzejethysequuzejethyse\", s: str=\"quuzejethyse\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"quuzejethysequuzejethysequuzejethysequuzejethysequuzejethysequuzejethysequuzejethysequuzejethyse\", s=\"quuzejethyse\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_24",
    "sat": "def sat(n: int, target: str=\"timerotimerotimero\", s: str=\"timerotimerotimero\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"timerotimerotimero\", s=\"timerotimerotimero\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_25",
    "sat": "def sat(n: int, target: str=\"wohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequuk\", s: str=\"wohozinybopegerequukwohozinybopegerequukwohozinybopegerequuk\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"wohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequukwohozinybopegerequuk\", s=\"wohozinybopegerequukwohozinybopegerequukwohozinybopegerequuk\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_26",
    "sat": "def sat(n: int, target: str=\"vycagomuvycagomuvycagomuvycagomuvycagomuvycagomuvycagomuvycagomu\", s: str=\"vycagomu\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"vycagomuvycagomuvycagomuvycagomuvycagomuvycagomuvycagomuvycagomu\", s=\"vycagomu\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_27",
    "sat": "def sat(n: int, target: str=\"zuribazuribazuribazuribazuribazuribazuribazuriba\", s: str=\"zuriba\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"zuribazuribazuribazuribazuribazuribazuribazuriba\", s=\"zuriba\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_28",
    "sat": "def sat(n: int, target: str=\"logutextlogutextlogutextlogutextlogutextlogutextlogutextlogutextlogutextlogutextlogutextlogutextlogutextlogutextlogutextlogutextlogutextlogutextlogutextlogutextlogutext\", s: str=\"logutextlogutextlogutext\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"logutextlogutextlogutextlogutextlogutextlogutextlogutextlogutextlogutextlogutextlogutextlogutextlogutextlogutextlogutextlogutextlogutextlogutextlogutextlogutextlogutext\", s=\"logutextlogutextlogutext\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_29",
    "sat": "def sat(n: int, target: str=\"wewedowewedowewedo\", s: str=\"wewedo\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"wewedowewedowewedo\", s=\"wewedo\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_30",
    "sat": "def sat(n: int, target: str=\"g\", s: str=\"g\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"g\", s=\"g\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_31",
    "sat": "def sat(n: int, target: str=\"tttt\", s: str=\"tt\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"tttt\", s=\"tt\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_32",
    "sat": "def sat(n: int, target: str=\"pujoxuwyvpujoxuwyvpujoxuwyv\", s: str=\"pujoxuwyv\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"pujoxuwyvpujoxuwyvpujoxuwyv\", s=\"pujoxuwyv\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_33",
    "sat": "def sat(n: int, target: str=\"\", s: str=\"papa\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"\", s=\"papa\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_34",
    "sat": "def sat(n: int, target: str=\"tocetocetocetocetoce\", s: str=\"toce\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"tocetocetocetocetoce\", s=\"toce\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_35",
    "sat": "def sat(n: int, target: str=\"lynalytewafutequylynalytewafutequylynalytewafutequylynalytewafutequy\", s: str=\"lynalytewafutequy\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"lynalytewafutequylynalytewafutequylynalytewafutequylynalytewafutequy\", s=\"lynalytewafutequy\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_36",
    "sat": "def sat(n: int, target: str=\"vilyvilyvilyvily\", s: str=\"vily\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"vilyvilyvilyvily\", s=\"vily\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_37",
    "sat": "def sat(n: int, target: str=\"nubunyvaxykipanubunyvaxykipanubunyvaxykipanubunyvaxykipanubunyvaxykipanubunyvaxykipanubunyvaxykipanubunyvaxykipanubunyvaxykipanubunyvaxykipanubunyvaxykipanubunyvaxykipa\", s: str=\"nubunyvaxykipanubunyvaxykipa\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"nubunyvaxykipanubunyvaxykipanubunyvaxykipanubunyvaxykipanubunyvaxykipanubunyvaxykipanubunyvaxykipanubunyvaxykipanubunyvaxykipanubunyvaxykipanubunyvaxykipanubunyvaxykipa\", s=\"nubunyvaxykipanubunyvaxykipa\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_38",
    "sat": "def sat(n: int, target: str=\"ccc\", s: str=\"c\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"ccc\", s=\"c\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_39",
    "sat": "def sat(n: int, target: str=\"\", s: str=\"textuwowaquitextuwowaqui\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"\", s=\"textuwowaquitextuwowaqui\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_40",
    "sat": "def sat(n: int, target: str=\"quiquiquiquiqui\", s: str=\"qui\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"quiquiquiquiqui\", s=\"qui\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_41",
    "sat": "def sat(n: int, target: str=\"\", s: str=\"metextmetext\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"\", s=\"metextmetext\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_42",
    "sat": "def sat(n: int, target: str=\"sesyquyzyditextyqusesyquyzyditextyqusesyquyzyditextyqusesyquyzyditextyqusesyquyzyditextyqusesyquyzyditextyqu\", s: str=\"sesyquyzyditextyqu\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"sesyquyzyditextyqusesyquyzyditextyqusesyquyzyditextyqusesyquyzyditextyqusesyquyzyditextyqusesyquyzyditextyqu\", s=\"sesyquyzyditextyqu\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_43",
    "sat": "def sat(n: int, target: str=\"xuthisuvadehxuthisuvadehxuthisuvadehxuthisuvadehxuthisuvadehxuthisuvadehxuthisuvadehxuthisuvadehxuthisuvadehxuthisuvadehxuthisuvadehxuthisuvadehxuthisuvadehxuthisuvadehxuthisuvadehxuthisuvadehxuthisuvadehxuthisuvadeh\", s: str=\"xuthisuvadehxuthisuvadehxuthisuvadeh\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"xuthisuvadehxuthisuvadehxuthisuvadehxuthisuvadehxuthisuvadehxuthisuvadehxuthisuvadehxuthisuvadehxuthisuvadehxuthisuvadehxuthisuvadehxuthisuvadehxuthisuvadehxuthisuvadehxuthisuvadehxuthisuvadehxuthisuvadehxuthisuvadeh\", s=\"xuthisuvadehxuthisuvadehxuthisuvadeh\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_44",
    "sat": "def sat(n: int, target: str=\"pppppp\", s: str=\"ppp\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"pppppp\", s=\"ppp\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_45",
    "sat": "def sat(n: int, target: str=\"firomuquofiromuquofiromuquo\", s: str=\"firomuquo\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"firomuquofiromuquofiromuquo\", s=\"firomuquo\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_46",
    "sat": "def sat(n: int, target: str=\"textojejababohyxytextojejababohyxytextojejababohyxytextojejababohyxytextojejababohyxy\", s: str=\"textojejababohyxy\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"textojejababohyxytextojejababohyxytextojejababohyxytextojejababohyxytextojejababohyxy\", s=\"textojejababohyxy\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_47",
    "sat": "def sat(n: int, target: str=\"sssssssssssssssssssssssssss\", s: str=\"sss\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"sssssssssssssssssssssssssss\", s=\"sss\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_48",
    "sat": "def sat(n: int, target: str=\"raxiwuhyzywavovythilraxiwuhyzywavovythilraxiwuhyzywavovythilraxiwuhyzywavovythilraxiwuhyzywavovythilraxiwuhyzywavovythilraxiwuhyzywavovythilraxiwuhyzywavovythil\", s: str=\"raxiwuhyzywavovythilraxiwuhyzywavovythil\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"raxiwuhyzywavovythilraxiwuhyzywavovythilraxiwuhyzywavovythilraxiwuhyzywavovythilraxiwuhyzywavovythilraxiwuhyzywavovythilraxiwuhyzywavovythilraxiwuhyzywavovythil\", s=\"raxiwuhyzywavovythilraxiwuhyzywavovythil\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_49",
    "sat": "def sat(n: int, target: str=\"tejilatextasiwutukiltejilatextasiwutukiltejilatextasiwutukiltejilatextasiwutukil\", s: str=\"tejilatextasiwutukil\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"tejilatextasiwutukiltejilatextasiwutukiltejilatextasiwutukiltejilatextasiwutukil\", s=\"tejilatextasiwutukil\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_50",
    "sat": "def sat(n: int, target: str=\"\", s: str=\"sylathexysylathexysylathexy\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"\", s=\"sylathexysylathexysylathexy\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_51",
    "sat": "def sat(n: int, target: str=\"zicuhitezicuhitezicuhitezicuhitezicuhitezicuhitezicuhitezicuhitezicuhitezicuhitezicuhitezicuhitezicuhitezicuhitezicuhitezicuhitezicuhitezicuhite\", s: str=\"zicuhitezicuhitezicuhite\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"zicuhitezicuhitezicuhitezicuhitezicuhitezicuhitezicuhitezicuhitezicuhitezicuhitezicuhitezicuhitezicuhitezicuhitezicuhitezicuhitezicuhitezicuhite\", s=\"zicuhitezicuhitezicuhite\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_52",
    "sat": "def sat(n: int, target: str=\"mytepetexmytepetexmytepetexmytepetexmytepetexmytepetexmytepetexmytepetexmytepetexmytepetexmytepetexmytepetexmytepetexmytepetexmytepetexmytepetex\", s: str=\"mytepetexmytepetex\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"mytepetexmytepetexmytepetexmytepetexmytepetexmytepetexmytepetexmytepetexmytepetexmytepetexmytepetexmytepetexmytepetexmytepetexmytepetexmytepetex\", s=\"mytepetexmytepetex\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_53",
    "sat": "def sat(n: int, target: str=\"fytextujumequicfytextujumequicfytextujumequicfytextujumequicfytextujumequicfytextujumequic\", s: str=\"fytextujumequic\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"fytextujumequicfytextujumequicfytextujumequicfytextujumequicfytextujumequicfytextujumequic\", s=\"fytextujumequic\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_54",
    "sat": "def sat(n: int, target: str=\"textilichytextilichytextilichytextilichytextilichytextilichytextilichytextilichytextilichy\", s: str=\"textilichy\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"textilichytextilichytextilichytextilichytextilichytextilichytextilichytextilichytextilichy\", s=\"textilichy\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_55",
    "sat": "def sat(n: int, target: str=\"lyhalechyzadotelyhalechyzadotelyhalechyzadotelyhalechyzadotelyhalechyzadotelyhalechyzadotelyhalechyzadotelyhalechyzadote\", s: str=\"lyhalechyzadote\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"lyhalechyzadotelyhalechyzadotelyhalechyzadotelyhalechyzadotelyhalechyzadotelyhalechyzadotelyhalechyzadotelyhalechyzadote\", s=\"lyhalechyzadote\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_56",
    "sat": "def sat(n: int, target: str=\"\", s: str=\"quosigacetextetufolquosigacetextetufolquosigacetextetufol\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"\", s=\"quosigacetextetufolquosigacetextetufolquosigacetextetufol\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_57",
    "sat": "def sat(n: int, target: str=\"nilipucewizelnilipucewizelnilipucewizelnilipucewizelnilipucewizelnilipucewizelnilipucewizelnilipucewizelnilipucewizelnilipucewizelnilipucewizelnilipucewizelnilipucewizelnilipucewizelnilipucewizelnilipucewizel\", s: str=\"nilipucewizelnilipucewizel\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"nilipucewizelnilipucewizelnilipucewizelnilipucewizelnilipucewizelnilipucewizelnilipucewizelnilipucewizelnilipucewizelnilipucewizelnilipucewizelnilipucewizelnilipucewizelnilipucewizelnilipucewizelnilipucewizel\", s=\"nilipucewizelnilipucewizel\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_58",
    "sat": "def sat(n: int, target: str=\"tttttttttt\", s: str=\"tt\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"tttttttttt\", s=\"tt\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_59",
    "sat": "def sat(n: int, target: str=\"vupotepaditextuzavupotepaditextuza\", s: str=\"vupotepaditextuza\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"vupotepaditextuzavupotepaditextuza\", s=\"vupotepaditextuza\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_60",
    "sat": "def sat(n: int, target: str=\"tetetetetetetetetetetetetetetetetete\", s: str=\"tete\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"tetetetetetetetetetetetetetetetetete\", s=\"tete\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_61",
    "sat": "def sat(n: int, target: str=\"kikikiki\", s: str=\"kiki\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"kikikiki\", s=\"kiki\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_62",
    "sat": "def sat(n: int, target: str=\"lonivowasylonivowasylonivowasylonivowasylonivowasylonivowasylonivowasylonivowasy\", s: str=\"lonivowasylonivowasy\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"lonivowasylonivowasylonivowasylonivowasylonivowasylonivowasylonivowasylonivowasy\", s=\"lonivowasylonivowasy\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_63",
    "sat": "def sat(n: int, target: str=\"\", s: str=\"dalupepathamelopdalupepathamelop\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"\", s=\"dalupepathamelopdalupepathamelop\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_64",
    "sat": "def sat(n: int, target: str=\"jofjofjof\", s: str=\"jof\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"jofjofjof\", s=\"jof\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_65",
    "sat": "def sat(n: int, target: str=\"ryfyxryfyx\", s: str=\"ryfyxryfyx\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"ryfyxryfyx\", s=\"ryfyxryfyx\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_66",
    "sat": "def sat(n: int, target: str=\"dinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexy\", s: str=\"dinutextavebugequexydinutextavebugequexydinutextavebugequexy\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"dinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexydinutextavebugequexy\", s=\"dinutextavebugequexydinutextavebugequexydinutextavebugequexy\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_67",
    "sat": "def sat(n: int, target: str=\"cyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextaw\", s: str=\"cyfowyhatextawcyfowyhatextawcyfowyhatextaw\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"cyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextawcyfowyhatextaw\", s=\"cyfowyhatextawcyfowyhatextawcyfowyhatextaw\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_68",
    "sat": "def sat(n: int, target: str=\"lazuwoblazuwoblazuwoblazuwoblazuwoblazuwob\", s: str=\"lazuwoblazuwoblazuwob\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"lazuwoblazuwoblazuwoblazuwoblazuwoblazuwob\", s=\"lazuwoblazuwoblazuwob\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_69",
    "sat": "def sat(n: int, target: str=\"patextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapeth\", s: str=\"patextuxapethpatextuxapethpatextuxapeth\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"patextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapethpatextuxapeth\", s=\"patextuxapethpatextuxapethpatextuxapeth\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_70",
    "sat": "def sat(n: int, target: str=\"vuzetextvuzetextvuzetextvuzetextvuzetext\", s: str=\"vuzetext\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"vuzetextvuzetextvuzetextvuzetextvuzetext\", s=\"vuzetext\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_71",
    "sat": "def sat(n: int, target: str=\"xykequiwecyxezicxykequiwecyxezicxykequiwecyxezicxykequiwecyxezicxykequiwecyxezicxykequiwecyxezicxykequiwecyxezicxykequiwecyxezicxykequiwecyxezicxykequiwecyxezic\", s: str=\"xykequiwecyxezicxykequiwecyxezic\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"xykequiwecyxezicxykequiwecyxezicxykequiwecyxezicxykequiwecyxezicxykequiwecyxezicxykequiwecyxezicxykequiwecyxezicxykequiwecyxezicxykequiwecyxezicxykequiwecyxezic\", s=\"xykequiwecyxezicxykequiwecyxezic\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_72",
    "sat": "def sat(n: int, target: str=\"xutafexutafexutafexutafe\", s: str=\"xutafexutafe\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"xutafexutafexutafexutafe\", s=\"xutafexutafe\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_73",
    "sat": "def sat(n: int, target: str=\"vocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepava\", s: str=\"vocotextimihepavavocotextimihepavavocotextimihepava\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"vocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepavavocotextimihepava\", s=\"vocotextimihepavavocotextimihepavavocotextimihepava\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_74",
    "sat": "def sat(n: int, target: str=\"juzyjuzyjuzy\", s: str=\"juzyjuzyjuzy\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"juzyjuzyjuzy\", s=\"juzyjuzyjuzy\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_75",
    "sat": "def sat(n: int, target: str=\"zefyperozefyperozefyperozefyperozefyperozefypero\", s: str=\"zefyperozefyperozefypero\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"zefyperozefyperozefyperozefyperozefyperozefypero\", s=\"zefyperozefyperozefypero\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_76",
    "sat": "def sat(n: int, target: str=\"textegewecektextegewecek\", s: str=\"textegewecektextegewecek\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"textegewecektextegewecek\", s=\"textegewecektextegewecek\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_77",
    "sat": "def sat(n: int, target: str=\"jaxiloderujaxiloderujaxiloderu\", s: str=\"jaxiloderu\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"jaxiloderujaxiloderujaxiloderu\", s=\"jaxiloderu\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_78",
    "sat": "def sat(n: int, target: str=\"quohaquohaquohaquohaquoha\", s: str=\"quoha\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"quohaquohaquohaquohaquoha\", s=\"quoha\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_79",
    "sat": "def sat(n: int, target: str=\"jimiquarosuxyjimiquarosuxy\", s: str=\"jimiquarosuxyjimiquarosuxy\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"jimiquarosuxyjimiquarosuxy\", s=\"jimiquarosuxyjimiquarosuxy\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_80",
    "sat": "def sat(n: int, target: str=\"galuwusiquotextychgaluwusiquotextychgaluwusiquotextychgaluwusiquotextychgaluwusiquotextychgaluwusiquotextychgaluwusiquotextychgaluwusiquotextychgaluwusiquotextychgaluwusiquotextychgaluwusiquotextychgaluwusiquotextychgaluwusiquotextychgaluwusiquotextychgaluwusiquotextychgaluwusiquotextych\", s: str=\"galuwusiquotextychgaluwusiquotextych\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"galuwusiquotextychgaluwusiquotextychgaluwusiquotextychgaluwusiquotextychgaluwusiquotextychgaluwusiquotextychgaluwusiquotextychgaluwusiquotextychgaluwusiquotextychgaluwusiquotextychgaluwusiquotextychgaluwusiquotextychgaluwusiquotextychgaluwusiquotextychgaluwusiquotextychgaluwusiquotextych\", s=\"galuwusiquotextychgaluwusiquotextych\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_81",
    "sat": "def sat(n: int, target: str=\"cepebocepebocepebocepebocepebocepebocepebocepebocepebocepebo\", s: str=\"cepebocepebo\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"cepebocepebocepebocepebocepebocepebocepebocepebocepebocepebo\", s=\"cepebocepebo\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_82",
    "sat": "def sat(n: int, target: str=\"famfamfamfamfamfamfam\", s: str=\"fam\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"famfamfamfamfamfamfam\", s=\"fam\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_83",
    "sat": "def sat(n: int, target: str=\"zevequachyhafonezevequachyhafonezevequachyhafonezevequachyhafonezevequachyhafonezevequachyhafonezevequachyhafonezevequachyhafonezevequachyhafonezevequachyhafonezevequachyhafonezevequachyhafonezevequachyhafonezevequachyhafonezevequachyhafone\", s: str=\"zevequachyhafonezevequachyhafonezevequachyhafone\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"zevequachyhafonezevequachyhafonezevequachyhafonezevequachyhafonezevequachyhafonezevequachyhafonezevequachyhafonezevequachyhafonezevequachyhafonezevequachyhafonezevequachyhafonezevequachyhafonezevequachyhafonezevequachyhafonezevequachyhafone\", s=\"zevequachyhafonezevequachyhafonezevequachyhafone\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_84",
    "sat": "def sat(n: int, target: str=\"cajetidyfobykecajetidyfobykecajetidyfobykecajetidyfobykecajetidyfobykecajetidyfobykecajetidyfobykecajetidyfobykecajetidyfobykecajetidyfobykecajetidyfobykecajetidyfobykecajetidyfobykecajetidyfobykecajetidyfobykecajetidyfobyke\", s: str=\"cajetidyfobykecajetidyfobyke\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"cajetidyfobykecajetidyfobykecajetidyfobykecajetidyfobykecajetidyfobykecajetidyfobykecajetidyfobykecajetidyfobykecajetidyfobykecajetidyfobykecajetidyfobykecajetidyfobykecajetidyfobykecajetidyfobykecajetidyfobykecajetidyfobyke\", s=\"cajetidyfobykecajetidyfobyke\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_85",
    "sat": "def sat(n: int, target: str=\"hopyrhopyrhopyrhopyrhopyrhopyr\", s: str=\"hopyrhopyrhopyr\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"hopyrhopyrhopyrhopyrhopyrhopyr\", s=\"hopyrhopyrhopyr\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_86",
    "sat": "def sat(n: int, target: str=\"kovkovkovkovkovkov\", s: str=\"kovkovkov\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"kovkovkovkovkovkov\", s=\"kovkovkov\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_87",
    "sat": "def sat(n: int, target: str=\"babababababababababababababababababa\", s: str=\"baba\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"babababababababababababababababababa\", s=\"baba\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_88",
    "sat": "def sat(n: int, target: str=\"textequuhalyfuxitextequuhalyfuxitextequuhalyfuxitextequuhalyfuxitextequuhalyfuxitextequuhalyfuxi\", s: str=\"textequuhalyfuxitextequuhalyfuxi\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"textequuhalyfuxitextequuhalyfuxitextequuhalyfuxitextequuhalyfuxitextequuhalyfuxitextequuhalyfuxi\", s=\"textequuhalyfuxitextequuhalyfuxi\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_89",
    "sat": "def sat(n: int, target: str=\"tejuwipetyfitejuwipetyfitejuwipetyfi\", s: str=\"tejuwipetyfitejuwipetyfitejuwipetyfi\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"tejuwipetyfitejuwipetyfitejuwipetyfi\", s=\"tejuwipetyfitejuwipetyfitejuwipetyfi\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_90",
    "sat": "def sat(n: int, target: str=\"totetotetotetotetotetotetote\", s: str=\"tote\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"totetotetotetotetotetotetote\", s=\"tote\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_91",
    "sat": "def sat(n: int, target: str=\"chitextchitextchitextchitextchitextchitextchitextchitextchitextchitextchitextchitextchitextchitextchitextchitextchitextchitextchitextchitextchitextchitextchitextchitextchitextchitextchitext\", s: str=\"chitextchitextchitext\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"chitextchitextchitextchitextchitextchitextchitextchitextchitextchitextchitextchitextchitextchitextchitextchitextchitextchitextchitextchitextchitextchitextchitextchitextchitextchitextchitext\", s=\"chitextchitextchitext\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_92",
    "sat": "def sat(n: int, target: str=\"churykchurykchurykchurykchurykchuryk\", s: str=\"churyk\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"churykchurykchurykchurykchurykchuryk\", s=\"churyk\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_93",
    "sat": "def sat(n: int, target: str=\"miquycetupysmiquycetupysmiquycetupysmiquycetupys\", s: str=\"miquycetupysmiquycetupys\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"miquycetupysmiquycetupysmiquycetupysmiquycetupys\", s=\"miquycetupysmiquycetupys\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_94",
    "sat": "def sat(n: int, target: str=\"zzzzzz\", s: str=\"z\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"zzzzzz\", s=\"z\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_95",
    "sat": "def sat(n: int, target: str=\"gyjybomopygamatgyjybomopygamatgyjybomopygamatgyjybomopygamatgyjybomopygamatgyjybomopygamatgyjybomopygamatgyjybomopygamatgyjybomopygamat\", s: str=\"gyjybomopygamat\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"gyjybomopygamatgyjybomopygamatgyjybomopygamatgyjybomopygamatgyjybomopygamatgyjybomopygamatgyjybomopygamatgyjybomopygamatgyjybomopygamat\", s=\"gyjybomopygamat\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_96",
    "sat": "def sat(n: int, target: str=\"textevosugisapitextextevosugisapitextextevosugisapitextextevosugisapitextextevosugisapitextextevosugisapitex\", s: str=\"textevosugisapitex\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"textevosugisapitextextevosugisapitextextevosugisapitextextevosugisapitextextevosugisapitextextevosugisapitex\", s=\"textevosugisapitex\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_97",
    "sat": "def sat(n: int, target: str=\"vythevythevythevythevythevythevythevythevythe\", s: str=\"vythevythevythe\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"vythevythevythevythevythevythevythevythevythe\", s=\"vythevythevythe\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_98",
    "sat": "def sat(n: int, target: str=\"hyrythelechhyrythelech\", s: str=\"hyrythelechhyrythelech\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"hyrythelechhyrythelech\", s=\"hyrythelechhyrythelech\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrMul2_99",
    "sat": "def sat(n: int, target: str=\"dothedothedothedothedothedothedothedothedothedothedothedothedothedothedothedothedothedothedothedothedothe\", s: str=\"dothedothedothe\"):\n    assert type(n) is int, 'n must be of type int'\n    return s * n == target",
    "sols": [
      "def sol(target=\"dothedothedothedothedothedothedothedothedothedothedothedothedothedothedothedothedothedothedothedothedothe\", s=\"dothedothedothe\"):\n    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ]
  },
  {
    "name": "StrLen_0",
    "sat": "def sat(s: str, n: int=1000):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=1000):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_1",
    "sat": "def sat(s: str, n: int=8):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=8):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_2",
    "sat": "def sat(s: str, n: int=2609):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=2609):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_3",
    "sat": "def sat(s: str, n: int=44):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=44):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_4",
    "sat": "def sat(s: str, n: int=3185):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=3185):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_5",
    "sat": "def sat(s: str, n: int=538):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=538):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_6",
    "sat": "def sat(s: str, n: int=47):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=47):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_7",
    "sat": "def sat(s: str, n: int=15):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=15):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_8",
    "sat": "def sat(s: str, n: int=51):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=51):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_9",
    "sat": "def sat(s: str, n: int=98):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=98):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_10",
    "sat": "def sat(s: str, n: int=6305):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=6305):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_11",
    "sat": "def sat(s: str, n: int=791):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=791):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_12",
    "sat": "def sat(s: str, n: int=5156):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=5156):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_13",
    "sat": "def sat(s: str, n: int=6509):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=6509):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_14",
    "sat": "def sat(s: str, n: int=5):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=5):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_15",
    "sat": "def sat(s: str, n: int=77):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=77):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_16",
    "sat": "def sat(s: str, n: int=7456):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=7456):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_17",
    "sat": "def sat(s: str, n: int=165):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=165):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_18",
    "sat": "def sat(s: str, n: int=7623):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=7623):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_19",
    "sat": "def sat(s: str, n: int=2):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=2):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_20",
    "sat": "def sat(s: str, n: int=60):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=60):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_21",
    "sat": "def sat(s: str, n: int=230):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=230):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_22",
    "sat": "def sat(s: str, n: int=6773):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=6773):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_23",
    "sat": "def sat(s: str, n: int=7115):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=7115):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_24",
    "sat": "def sat(s: str, n: int=659):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=659):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_25",
    "sat": "def sat(s: str, n: int=6476):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=6476):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_26",
    "sat": "def sat(s: str, n: int=38):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=38):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_27",
    "sat": "def sat(s: str, n: int=170):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=170):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_28",
    "sat": "def sat(s: str, n: int=75):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=75):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_29",
    "sat": "def sat(s: str, n: int=145):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=145):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_30",
    "sat": "def sat(s: str, n: int=8368):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=8368):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_31",
    "sat": "def sat(s: str, n: int=9):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=9):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_32",
    "sat": "def sat(s: str, n: int=71):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=71):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_33",
    "sat": "def sat(s: str, n: int=2754):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=2754):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_34",
    "sat": "def sat(s: str, n: int=970):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=970):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_35",
    "sat": "def sat(s: str, n: int=0):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=0):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_36",
    "sat": "def sat(s: str, n: int=288):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=288):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_37",
    "sat": "def sat(s: str, n: int=81):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=81):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_38",
    "sat": "def sat(s: str, n: int=3):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=3):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_39",
    "sat": "def sat(s: str, n: int=7435):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=7435):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_40",
    "sat": "def sat(s: str, n: int=6):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=6):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_41",
    "sat": "def sat(s: str, n: int=46):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=46):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_42",
    "sat": "def sat(s: str, n: int=854):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=854):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_43",
    "sat": "def sat(s: str, n: int=5997):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=5997):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_44",
    "sat": "def sat(s: str, n: int=360):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=360):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_45",
    "sat": "def sat(s: str, n: int=743):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=743):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_46",
    "sat": "def sat(s: str, n: int=32):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=32):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_47",
    "sat": "def sat(s: str, n: int=721):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=721):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_48",
    "sat": "def sat(s: str, n: int=803):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=803):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_49",
    "sat": "def sat(s: str, n: int=24):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=24):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_50",
    "sat": "def sat(s: str, n: int=824):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=824):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_51",
    "sat": "def sat(s: str, n: int=5375):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=5375):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_52",
    "sat": "def sat(s: str, n: int=1726):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=1726):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_53",
    "sat": "def sat(s: str, n: int=501):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=501):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_54",
    "sat": "def sat(s: str, n: int=323):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=323):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_55",
    "sat": "def sat(s: str, n: int=7):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=7):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_56",
    "sat": "def sat(s: str, n: int=57):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=57):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_57",
    "sat": "def sat(s: str, n: int=62):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=62):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_58",
    "sat": "def sat(s: str, n: int=932):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=932):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_59",
    "sat": "def sat(s: str, n: int=13):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=13):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_60",
    "sat": "def sat(s: str, n: int=4):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=4):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_61",
    "sat": "def sat(s: str, n: int=6201):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=6201):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_62",
    "sat": "def sat(s: str, n: int=380):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=380):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_63",
    "sat": "def sat(s: str, n: int=406):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=406):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_64",
    "sat": "def sat(s: str, n: int=25):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=25):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_65",
    "sat": "def sat(s: str, n: int=852):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=852):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_66",
    "sat": "def sat(s: str, n: int=557):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=557):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_67",
    "sat": "def sat(s: str, n: int=4454):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=4454):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_68",
    "sat": "def sat(s: str, n: int=876):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=876):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_69",
    "sat": "def sat(s: str, n: int=789):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=789):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_70",
    "sat": "def sat(s: str, n: int=2482):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=2482):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_71",
    "sat": "def sat(s: str, n: int=91):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=91):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_72",
    "sat": "def sat(s: str, n: int=90):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=90):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_73",
    "sat": "def sat(s: str, n: int=3677):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=3677):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_74",
    "sat": "def sat(s: str, n: int=41):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=41):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_75",
    "sat": "def sat(s: str, n: int=29):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=29):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_76",
    "sat": "def sat(s: str, n: int=92):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=92):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_77",
    "sat": "def sat(s: str, n: int=213):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=213):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_78",
    "sat": "def sat(s: str, n: int=93):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=93):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_79",
    "sat": "def sat(s: str, n: int=18):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=18):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_80",
    "sat": "def sat(s: str, n: int=74):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=74):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_81",
    "sat": "def sat(s: str, n: int=645):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=645):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_82",
    "sat": "def sat(s: str, n: int=8149):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=8149):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_83",
    "sat": "def sat(s: str, n: int=865):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=865):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_84",
    "sat": "def sat(s: str, n: int=2317):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=2317):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_85",
    "sat": "def sat(s: str, n: int=79):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=79):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_86",
    "sat": "def sat(s: str, n: int=5308):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=5308):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_87",
    "sat": "def sat(s: str, n: int=878):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=878):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_88",
    "sat": "def sat(s: str, n: int=8374):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=8374):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_89",
    "sat": "def sat(s: str, n: int=255):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=255):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_90",
    "sat": "def sat(s: str, n: int=39):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=39):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_91",
    "sat": "def sat(s: str, n: int=778):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=778):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_92",
    "sat": "def sat(s: str, n: int=9473):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=9473):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_93",
    "sat": "def sat(s: str, n: int=199):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=199):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_94",
    "sat": "def sat(s: str, n: int=68):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=68):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_95",
    "sat": "def sat(s: str, n: int=712):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=712):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_96",
    "sat": "def sat(s: str, n: int=146):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=146):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_97",
    "sat": "def sat(s: str, n: int=9063):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=9063):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_98",
    "sat": "def sat(s: str, n: int=97):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=97):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrLen_99",
    "sat": "def sat(s: str, n: int=684):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == n",
    "sols": [
      "def sol(n=684):\n    return 'a' * n"
    ]
  },
  {
    "name": "StrAt_0",
    "sat": "def sat(i: int, s: str=\"cat\", target: str=\"a\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"cat\", target=\"a\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_1",
    "sat": "def sat(i: int, s: str=\"quaqua\", target: str=\"a\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"quaqua\", target=\"a\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_2",
    "sat": "def sat(i: int, s: str=\"cemysukothufalutextu\", target: str=\"s\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"cemysukothufalutextu\", target=\"s\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_3",
    "sat": "def sat(i: int, s: str=\"tt\", target: str=\"t\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"tt\", target=\"t\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_4",
    "sat": "def sat(i: int, s: str=\"quesques\", target: str=\"q\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"quesques\", target=\"q\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_5",
    "sat": "def sat(i: int, s: str=\"hythowyc\", target: str=\"y\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"hythowyc\", target=\"y\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_6",
    "sat": "def sat(i: int, s: str=\"kezubywuz\", target: str=\"u\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"kezubywuz\", target=\"u\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_7",
    "sat": "def sat(i: int, s: str=\"nichotextoxexux\", target: str=\"e\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"nichotextoxexux\", target=\"e\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_8",
    "sat": "def sat(i: int, s: str=\"ragaxocychoragaxocycho\", target: str=\"g\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"ragaxocychoragaxocycho\", target=\"g\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_9",
    "sat": "def sat(i: int, s: str=\"kaka\", target: str=\"a\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"kaka\", target=\"a\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_10",
    "sat": "def sat(i: int, s: str=\"quete\", target: str=\"q\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"quete\", target=\"q\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_11",
    "sat": "def sat(i: int, s: str=\"thunehequaluzuzithunehequaluzuzithunehequaluzuzi\", target: str=\"e\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"thunehequaluzuzithunehequaluzuzithunehequaluzuzi\", target=\"e\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_12",
    "sat": "def sat(i: int, s: str=\"xupumyti\", target: str=\"u\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"xupumyti\", target=\"u\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_13",
    "sat": "def sat(i: int, s: str=\"witwit\", target: str=\"i\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"witwit\", target=\"i\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_14",
    "sat": "def sat(i: int, s: str=\"sukuligafygyvisukuligafygyvisukuligafygyvi\", target: str=\"g\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"sukuligafygyvisukuligafygyvisukuligafygyvi\", target=\"g\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_15",
    "sat": "def sat(i: int, s: str=\"saretexsaretexsaretex\", target: str=\"s\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"saretexsaretexsaretex\", target=\"s\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_16",
    "sat": "def sat(i: int, s: str=\"hh\", target: str=\"h\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"hh\", target=\"h\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_17",
    "sat": "def sat(i: int, s: str=\"thihathiha\", target: str=\"a\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"thihathiha\", target=\"a\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_18",
    "sat": "def sat(i: int, s: str=\"dozebytextududozebytextudu\", target: str=\"u\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"dozebytextududozebytextudu\", target=\"u\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_19",
    "sat": "def sat(i: int, s: str=\"vazibinesoquepiwy\", target: str=\"i\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"vazibinesoquepiwy\", target=\"i\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_20",
    "sat": "def sat(i: int, s: str=\"textocithipicugebyqtextocithipicugebyq\", target: str=\"q\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"textocithipicugebyqtextocithipicugebyq\", target=\"q\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_21",
    "sat": "def sat(i: int, s: str=\"ri\", target: str=\"r\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"ri\", target=\"r\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_22",
    "sat": "def sat(i: int, s: str=\"supyquazyzumylanu\", target: str=\"s\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"supyquazyzumylanu\", target=\"s\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_23",
    "sat": "def sat(i: int, s: str=\"vefywyvobivuwytextirvefywyvobivuwytextirvefywyvobivuwytextir\", target: str=\"f\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"vefywyvobivuwytextirvefywyvobivuwytextirvefywyvobivuwytextir\", target=\"f\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_24",
    "sat": "def sat(i: int, s: str=\"textybupattextybupattextybupat\", target: str=\"t\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"textybupattextybupattextybupat\", target=\"t\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_25",
    "sat": "def sat(i: int, s: str=\"wylenetacyhygy\", target: str=\"y\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"wylenetacyhygy\", target=\"y\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_26",
    "sat": "def sat(i: int, s: str=\"poxaxisybofiquavyspoxaxisybofiquavyspoxaxisybofiquavys\", target: str=\"i\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"poxaxisybofiquavyspoxaxisybofiquavyspoxaxisybofiquavys\", target=\"i\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_27",
    "sat": "def sat(i: int, s: str=\"kuquakecawerytoqu\", target: str=\"k\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"kuquakecawerytoqu\", target=\"k\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_28",
    "sat": "def sat(i: int, s: str=\"vyzuquuq\", target: str=\"z\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"vyzuquuq\", target=\"z\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_29",
    "sat": "def sat(i: int, s: str=\"gokenyfothe\", target: str=\"h\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"gokenyfothe\", target=\"h\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_30",
    "sat": "def sat(i: int, s: str=\"thibawyzowebynothuthibawyzowebynothu\", target: str=\"w\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"thibawyzowebynothuthibawyzowebynothu\", target=\"w\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_31",
    "sat": "def sat(i: int, s: str=\"momo\", target: str=\"m\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"momo\", target=\"m\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_32",
    "sat": "def sat(i: int, s: str=\"tasigylipotasigylipotasigylipo\", target: str=\"o\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"tasigylipotasigylipotasigylipo\", target=\"o\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_33",
    "sat": "def sat(i: int, s: str=\"neralathezaw\", target: str=\"a\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"neralathezaw\", target=\"a\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_34",
    "sat": "def sat(i: int, s: str=\"huhipisukahuhipisuka\", target: str=\"u\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"huhipisukahuhipisuka\", target=\"u\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_35",
    "sat": "def sat(i: int, s: str=\"xujigovothykuhobusydxujigovothykuhobusyd\", target: str=\"h\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"xujigovothykuhobusydxujigovothykuhobusyd\", target=\"h\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_36",
    "sat": "def sat(i: int, s: str=\"zoquubuquzoquubuqu\", target: str=\"u\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"zoquubuquzoquubuqu\", target=\"u\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_37",
    "sat": "def sat(i: int, s: str=\"lywuzadonezanejlywuzadonezanej\", target: str=\"l\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"lywuzadonezanejlywuzadonezanej\", target=\"l\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_38",
    "sat": "def sat(i: int, s: str=\"textykytykichotextykytykicho\", target: str=\"t\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"textykytykichotextykytykicho\", target=\"t\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_39",
    "sat": "def sat(i: int, s: str=\"rohurohurohu\", target: str=\"o\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"rohurohurohu\", target=\"o\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_40",
    "sat": "def sat(i: int, s: str=\"kenutextkenutext\", target: str=\"e\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"kenutextkenutext\", target=\"e\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_41",
    "sat": "def sat(i: int, s: str=\"vexequetatonivexequetatonivexequetatoni\", target: str=\"t\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"vexequetatonivexequetatonivexequetatoni\", target=\"t\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_42",
    "sat": "def sat(i: int, s: str=\"kujesisizenukujesisizenu\", target: str=\"s\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"kujesisizenukujesisizenu\", target=\"s\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_43",
    "sat": "def sat(i: int, s: str=\"ki\", target: str=\"k\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"ki\", target=\"k\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_44",
    "sat": "def sat(i: int, s: str=\"wuge\", target: str=\"g\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"wuge\", target=\"g\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_45",
    "sat": "def sat(i: int, s: str=\"ruquuquasukasotalocruquuquasukasotalocruquuquasukasotaloc\", target: str=\"s\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"ruquuquasukasotalocruquuquasukasotalocruquuquasukasotaloc\", target=\"s\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_46",
    "sat": "def sat(i: int, s: str=\"textuvibufefomumetextuvibufefomume\", target: str=\"u\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"textuvibufefomumetextuvibufefomume\", target=\"u\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_47",
    "sat": "def sat(i: int, s: str=\"buquyfifybyhydizoxybuquyfifybyhydizoxybuquyfifybyhydizoxy\", target: str=\"b\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"buquyfifybyhydizoxybuquyfifybyhydizoxybuquyfifybyhydizoxy\", target=\"b\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_48",
    "sat": "def sat(i: int, s: str=\"ticuryritticuryritticuryrit\", target: str=\"i\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"ticuryritticuryritticuryrit\", target=\"i\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_49",
    "sat": "def sat(i: int, s: str=\"wojofapwojofap\", target: str=\"o\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"wojofapwojofap\", target=\"o\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_50",
    "sat": "def sat(i: int, s: str=\"quysidedonuchquysidedonuchquysidedonuch\", target: str=\"o\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"quysidedonuchquysidedonuchquysidedonuch\", target=\"o\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_51",
    "sat": "def sat(i: int, s: str=\"wunuwihuwunuwihu\", target: str=\"n\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"wunuwihuwunuwihu\", target=\"n\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_52",
    "sat": "def sat(i: int, s: str=\"wejuhazo\", target: str=\"j\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"wejuhazo\", target=\"j\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_53",
    "sat": "def sat(i: int, s: str=\"jotybesacachejotybesacachejotybesacache\", target: str=\"s\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"jotybesacachejotybesacachejotybesacache\", target=\"s\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_54",
    "sat": "def sat(i: int, s: str=\"nojozyjnojozyjnojozyj\", target: str=\"n\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"nojozyjnojozyjnojozyj\", target=\"n\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_55",
    "sat": "def sat(i: int, s: str=\"motmotmot\", target: str=\"t\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"motmotmot\", target=\"t\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_56",
    "sat": "def sat(i: int, s: str=\"nnn\", target: str=\"n\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"nnn\", target=\"n\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_57",
    "sat": "def sat(i: int, s: str=\"zujylawedykethequuc\", target: str=\"u\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"zujylawedykethequuc\", target=\"u\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_58",
    "sat": "def sat(i: int, s: str=\"kitextylunokojihychakitextylunokojihychakitextylunokojihycha\", target: str=\"n\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"kitextylunokojihychakitextylunokojihychakitextylunokojihycha\", target=\"n\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_59",
    "sat": "def sat(i: int, s: str=\"quawilygahquawilygah\", target: str=\"l\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"quawilygahquawilygah\", target=\"l\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_60",
    "sat": "def sat(i: int, s: str=\"fojyduthyzocejuhuvi\", target: str=\"f\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"fojyduthyzocejuhuvi\", target=\"f\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_61",
    "sat": "def sat(i: int, s: str=\"nuragythnuragythnuragyth\", target: str=\"u\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"nuragythnuragythnuragyth\", target=\"u\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_62",
    "sat": "def sat(i: int, s: str=\"sokeluchidinesokeluchidinesokeluchidine\", target: str=\"u\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"sokeluchidinesokeluchidinesokeluchidine\", target=\"u\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_63",
    "sat": "def sat(i: int, s: str=\"fevfev\", target: str=\"v\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"fevfev\", target=\"v\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_64",
    "sat": "def sat(i: int, s: str=\"jorehezevezokerjorehezevezoker\", target: str=\"e\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"jorehezevezokerjorehezevezoker\", target=\"e\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_65",
    "sat": "def sat(i: int, s: str=\"quyquetumecopacyviwquyquetumecopacyviw\", target: str=\"t\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"quyquetumecopacyviwquyquetumecopacyviw\", target=\"t\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_66",
    "sat": "def sat(i: int, s: str=\"gygy\", target: str=\"g\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"gygy\", target=\"g\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_67",
    "sat": "def sat(i: int, s: str=\"godihedapytexgodihedapytex\", target: str=\"o\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"godihedapytexgodihedapytex\", target=\"o\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_68",
    "sat": "def sat(i: int, s: str=\"votoruwachybarixetovotoruwachybarixetovotoruwachybarixeto\", target: str=\"v\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"votoruwachybarixetovotoruwachybarixetovotoruwachybarixeto\", target=\"v\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_69",
    "sat": "def sat(i: int, s: str=\"fuxapugifomochachakefuxapugifomochachake\", target: str=\"m\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"fuxapugifomochachakefuxapugifomochachake\", target=\"m\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_70",
    "sat": "def sat(i: int, s: str=\"pimedyxisunamixofenpimedyxisunamixofen\", target: str=\"x\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"pimedyxisunamixofenpimedyxisunamixofen\", target=\"x\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_71",
    "sat": "def sat(i: int, s: str=\"jechomahiquivadovu\", target: str=\"j\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"jechomahiquivadovu\", target=\"j\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_72",
    "sat": "def sat(i: int, s: str=\"hichilivoxagukukobir\", target: str=\"l\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"hichilivoxagukukobir\", target=\"l\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_73",
    "sat": "def sat(i: int, s: str=\"dewikufachiwytextdewikufachiwytext\", target: str=\"e\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"dewikufachiwytextdewikufachiwytext\", target=\"e\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_74",
    "sat": "def sat(i: int, s: str=\"cefaxogonurechatextycefaxogonurechatexty\", target: str=\"o\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"cefaxogonurechatextycefaxogonurechatexty\", target=\"o\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_75",
    "sat": "def sat(i: int, s: str=\"pequathyxitexto\", target: str=\"y\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"pequathyxitexto\", target=\"y\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_76",
    "sat": "def sat(i: int, s: str=\"kocinoc\", target: str=\"k\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"kocinoc\", target=\"k\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_77",
    "sat": "def sat(i: int, s: str=\"bupuduchygoth\", target: str=\"b\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"bupuduchygoth\", target=\"b\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_78",
    "sat": "def sat(i: int, s: str=\"gapyzufyg\", target: str=\"g\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"gapyzufyg\", target=\"g\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_79",
    "sat": "def sat(i: int, s: str=\"hejythejyt\", target: str=\"y\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"hejythejyt\", target=\"y\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_80",
    "sat": "def sat(i: int, s: str=\"mekisychunyzmekisychunyzmekisychunyz\", target: str=\"e\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"mekisychunyzmekisychunyzmekisychunyz\", target=\"e\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_81",
    "sat": "def sat(i: int, s: str=\"luvipaduthyfluvipaduthyf\", target: str=\"u\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"luvipaduthyfluvipaduthyf\", target=\"u\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_82",
    "sat": "def sat(i: int, s: str=\"redamyni\", target: str=\"r\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"redamyni\", target=\"r\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_83",
    "sat": "def sat(i: int, s: str=\"chytharihipolyh\", target: str=\"o\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"chytharihipolyh\", target=\"o\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_84",
    "sat": "def sat(i: int, s: str=\"thasunuquylovatthasunuquylovatthasunuquylovat\", target: str=\"u\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"thasunuquylovatthasunuquylovatthasunuquylovat\", target=\"u\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_85",
    "sat": "def sat(i: int, s: str=\"bixucijyb\", target: str=\"i\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"bixucijyb\", target=\"i\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_86",
    "sat": "def sat(i: int, s: str=\"dichivac\", target: str=\"v\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"dichivac\", target=\"v\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_87",
    "sat": "def sat(i: int, s: str=\"neze\", target: str=\"n\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"neze\", target=\"n\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_88",
    "sat": "def sat(i: int, s: str=\"xufxufxuf\", target: str=\"f\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"xufxufxuf\", target=\"f\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_89",
    "sat": "def sat(i: int, s: str=\"potikehyzaquapupotikehyzaquapupotikehyzaquapu\", target: str=\"a\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"potikehyzaquapupotikehyzaquapupotikehyzaquapu\", target=\"a\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_90",
    "sat": "def sat(i: int, s: str=\"xidxidxid\", target: str=\"x\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"xidxidxid\", target=\"x\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_91",
    "sat": "def sat(i: int, s: str=\"vekavekaveka\", target: str=\"a\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"vekavekaveka\", target=\"a\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_92",
    "sat": "def sat(i: int, s: str=\"lathodusatextyzamyhlathodusatextyzamyh\", target: str=\"h\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"lathodusatextyzamyhlathodusatextyzamyh\", target=\"h\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_93",
    "sat": "def sat(i: int, s: str=\"losuquerydinuchilosuquerydinuchilosuquerydinuchi\", target: str=\"n\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"losuquerydinuchilosuquerydinuchilosuquerydinuchi\", target=\"n\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_94",
    "sat": "def sat(i: int, s: str=\"textotextotexto\", target: str=\"t\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"textotextotexto\", target=\"t\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_95",
    "sat": "def sat(i: int, s: str=\"pohichypimozypohichypimozypohichypimozy\", target: str=\"o\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"pohichypimozypohichypimozypohichypimozy\", target=\"o\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_96",
    "sat": "def sat(i: int, s: str=\"gachiratextyqugachiratextyqugachiratextyqu\", target: str=\"g\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"gachiratextyqugachiratextyqugachiratextyqu\", target=\"g\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_97",
    "sat": "def sat(i: int, s: str=\"quipomovylaxezquipomovylaxezquipomovylaxez\", target: str=\"o\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"quipomovylaxezquipomovylaxezquipomovylaxez\", target=\"o\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_98",
    "sat": "def sat(i: int, s: str=\"zadyjugozadyjugozadyjugo\", target: str=\"z\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"zadyjugozadyjugozadyjugo\", target=\"z\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrAt_99",
    "sat": "def sat(i: int, s: str=\"textaxanany\", target: str=\"a\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target",
    "sols": [
      "def sol(s=\"textaxanany\", target=\"a\"):\n    return s.index(target)"
    ]
  },
  {
    "name": "StrNegAt_0",
    "sat": "def sat(i: int, s: str=\"cat\", target: str=\"a\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"cat\", target=\"a\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_1",
    "sat": "def sat(i: int, s: str=\"q\", target: str=\"q\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"q\", target=\"q\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_2",
    "sat": "def sat(i: int, s: str=\"qqq\", target: str=\"q\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"qqq\", target=\"q\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_3",
    "sat": "def sat(i: int, s: str=\"vyquahasoxasyrububvyquahasoxasyrububvyquahasoxasyrubub\", target: str=\"u\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"vyquahasoxasyrububvyquahasoxasyrububvyquahasoxasyrubub\", target=\"u\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_4",
    "sat": "def sat(i: int, s: str=\"chalulechalulechalule\", target: str=\"c\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"chalulechalulechalule\", target=\"c\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_5",
    "sat": "def sat(i: int, s: str=\"pib\", target: str=\"p\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"pib\", target=\"p\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_6",
    "sat": "def sat(i: int, s: str=\"zatekyvitexzatekyvitexzatekyvitex\", target: str=\"a\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"zatekyvitexzatekyvitexzatekyvitex\", target=\"a\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_7",
    "sat": "def sat(i: int, s: str=\"pepufoge\", target: str=\"e\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"pepufoge\", target=\"e\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_8",
    "sat": "def sat(i: int, s: str=\"muchimabacybmuchimabacyb\", target: str=\"y\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"muchimabacybmuchimabacyb\", target=\"y\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_9",
    "sat": "def sat(i: int, s: str=\"fatextysom\", target: str=\"x\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"fatextysom\", target=\"x\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_10",
    "sat": "def sat(i: int, s: str=\"nuquethequulofnuquethequulofnuquethequulof\", target: str=\"l\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"nuquethequulofnuquethequulofnuquethequulof\", target=\"l\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_11",
    "sat": "def sat(i: int, s: str=\"sisi\", target: str=\"s\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"sisi\", target=\"s\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_12",
    "sat": "def sat(i: int, s: str=\"xequatilazifixuxequatilazifixuxequatilazifixu\", target: str=\"i\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"xequatilazifixuxequatilazifixuxequatilazifixu\", target=\"i\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_13",
    "sat": "def sat(i: int, s: str=\"lothegaklothegak\", target: str=\"a\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"lothegaklothegak\", target=\"a\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_14",
    "sat": "def sat(i: int, s: str=\"hojyfavhojyfavhojyfav\", target: str=\"v\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"hojyfavhojyfavhojyfav\", target=\"v\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_15",
    "sat": "def sat(i: int, s: str=\"thikunytyrytex\", target: str=\"x\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"thikunytyrytex\", target=\"x\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_16",
    "sat": "def sat(i: int, s: str=\"rr\", target: str=\"r\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"rr\", target=\"r\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_17",
    "sat": "def sat(i: int, s: str=\"nexynijoh\", target: str=\"x\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"nexynijoh\", target=\"x\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_18",
    "sat": "def sat(i: int, s: str=\"chy\", target: str=\"h\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"chy\", target=\"h\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_19",
    "sat": "def sat(i: int, s: str=\"rifalusadilomasigac\", target: str=\"g\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"rifalusadilomasigac\", target=\"g\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_20",
    "sat": "def sat(i: int, s: str=\"rezaborezabo\", target: str=\"o\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"rezaborezabo\", target=\"o\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_21",
    "sat": "def sat(i: int, s: str=\"cafygebufafy\", target: str=\"g\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"cafygebufafy\", target=\"g\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_22",
    "sat": "def sat(i: int, s: str=\"jithutavjithutavjithutav\", target: str=\"v\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"jithutavjithutavjithutav\", target=\"v\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_23",
    "sat": "def sat(i: int, s: str=\"fizutehydukoxuqfizutehydukoxuqfizutehydukoxuq\", target: str=\"o\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"fizutehydukoxuqfizutehydukoxuqfizutehydukoxuq\", target=\"o\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_24",
    "sat": "def sat(i: int, s: str=\"xequybulxequybulxequybul\", target: str=\"b\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"xequybulxequybulxequybul\", target=\"b\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_25",
    "sat": "def sat(i: int, s: str=\"cecovihawajcecovihawajcecovihawaj\", target: str=\"h\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"cecovihawajcecovihawajcecovihawaj\", target=\"h\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_26",
    "sat": "def sat(i: int, s: str=\"fff\", target: str=\"f\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"fff\", target=\"f\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_27",
    "sat": "def sat(i: int, s: str=\"roluquasydroluquasyd\", target: str=\"r\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"roluquasydroluquasyd\", target=\"r\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_28",
    "sat": "def sat(i: int, s: str=\"thizivonuzyvarecymithizivonuzyvarecymithizivonuzyvarecymi\", target: str=\"o\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"thizivonuzyvarecymithizivonuzyvarecymithizivonuzyvarecymi\", target=\"o\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_29",
    "sat": "def sat(i: int, s: str=\"xechupytextatexteruv\", target: str=\"e\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"xechupytextatexteruv\", target=\"e\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_30",
    "sat": "def sat(i: int, s: str=\"cavyvufcavyvufcavyvuf\", target: str=\"a\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"cavyvufcavyvufcavyvuf\", target=\"a\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_31",
    "sat": "def sat(i: int, s: str=\"kyvydawowedycekoluka\", target: str=\"k\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"kyvydawowedycekoluka\", target=\"k\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_32",
    "sat": "def sat(i: int, s: str=\"chaxukotextypyheroco\", target: str=\"y\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"chaxukotextypyheroco\", target=\"y\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_33",
    "sat": "def sat(i: int, s: str=\"vogychiquekyzab\", target: str=\"e\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"vogychiquekyzab\", target=\"e\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_34",
    "sat": "def sat(i: int, s: str=\"jerikjerikjerik\", target: str=\"k\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"jerikjerikjerik\", target=\"k\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_35",
    "sat": "def sat(i: int, s: str=\"lupapipomochaduducot\", target: str=\"u\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"lupapipomochaduducot\", target=\"u\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_36",
    "sat": "def sat(i: int, s: str=\"chekikithorytextugchekikithorytextugchekikithorytextug\", target: str=\"k\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"chekikithorytextugchekikithorytextugchekikithorytextug\", target=\"k\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_37",
    "sat": "def sat(i: int, s: str=\"vothekyzevavothekyzeva\", target: str=\"y\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"vothekyzevavothekyzeva\", target=\"y\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_38",
    "sat": "def sat(i: int, s: str=\"k\", target: str=\"k\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"k\", target=\"k\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_39",
    "sat": "def sat(i: int, s: str=\"sethecomsethecom\", target: str=\"e\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"sethecomsethecom\", target=\"e\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_40",
    "sat": "def sat(i: int, s: str=\"hyrivemuvotihyrivemuvoti\", target: str=\"h\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"hyrivemuvotihyrivemuvoti\", target=\"h\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_41",
    "sat": "def sat(i: int, s: str=\"ruvochiquixruvochiquixruvochiquix\", target: str=\"i\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"ruvochiquixruvochiquixruvochiquix\", target=\"i\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_42",
    "sat": "def sat(i: int, s: str=\"chyxchyxchyx\", target: str=\"x\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"chyxchyxchyx\", target=\"x\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_43",
    "sat": "def sat(i: int, s: str=\"rywakrywakrywak\", target: str=\"y\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"rywakrywakrywak\", target=\"y\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_44",
    "sat": "def sat(i: int, s: str=\"dijohazusathdijohazusath\", target: str=\"s\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"dijohazusathdijohazusath\", target=\"s\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_45",
    "sat": "def sat(i: int, s: str=\"nitextinitextinitexti\", target: str=\"e\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"nitextinitextinitexti\", target=\"e\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_46",
    "sat": "def sat(i: int, s: str=\"thadadunywitextuthadadunywitextuthadadunywitextu\", target: str=\"t\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"thadadunywitextuthadadunywitextuthadadunywitextu\", target=\"t\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_47",
    "sat": "def sat(i: int, s: str=\"rawomizitextrawomizitextrawomizitext\", target: str=\"e\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"rawomizitextrawomizitextrawomizitext\", target=\"e\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_48",
    "sat": "def sat(i: int, s: str=\"vivi\", target: str=\"i\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"vivi\", target=\"i\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_49",
    "sat": "def sat(i: int, s: str=\"dehemugomikijanuwyxydehemugomikijanuwyxy\", target: str=\"x\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"dehemugomikijanuwyxydehemugomikijanuwyxy\", target=\"x\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_50",
    "sat": "def sat(i: int, s: str=\"lavitextarisoglavitextarisoglavitextarisog\", target: str=\"a\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"lavitextarisoglavitextarisoglavitextarisog\", target=\"a\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_51",
    "sat": "def sat(i: int, s: str=\"pp\", target: str=\"p\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"pp\", target=\"p\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_52",
    "sat": "def sat(i: int, s: str=\"textukutextuku\", target: str=\"x\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"textukutextuku\", target=\"x\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_53",
    "sat": "def sat(i: int, s: str=\"kethyrkethyrkethyr\", target: str=\"h\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"kethyrkethyrkethyr\", target=\"h\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_54",
    "sat": "def sat(i: int, s: str=\"thiv\", target: str=\"v\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"thiv\", target=\"v\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_55",
    "sat": "def sat(i: int, s: str=\"textitekacucomysu\", target: str=\"k\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"textitekacucomysu\", target=\"k\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_56",
    "sat": "def sat(i: int, s: str=\"losofesilosofesilosofesi\", target: str=\"o\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"losofesilosofesilosofesi\", target=\"o\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_57",
    "sat": "def sat(i: int, s: str=\"jalaburicusavipewjalaburicusavipewjalaburicusavipew\", target: str=\"i\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"jalaburicusavipewjalaburicusavipewjalaburicusavipew\", target=\"i\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_58",
    "sat": "def sat(i: int, s: str=\"roquyf\", target: str=\"y\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"roquyf\", target=\"y\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_59",
    "sat": "def sat(i: int, s: str=\"jaqjaqjaq\", target: str=\"a\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"jaqjaqjaq\", target=\"a\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_60",
    "sat": "def sat(i: int, s: str=\"zichuszichus\", target: str=\"i\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"zichuszichus\", target=\"i\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_61",
    "sat": "def sat(i: int, s: str=\"repygelojitexturepygelojitexturepygelojitextu\", target: str=\"t\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"repygelojitexturepygelojitexturepygelojitextu\", target=\"t\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_62",
    "sat": "def sat(i: int, s: str=\"popopo\", target: str=\"o\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"popopo\", target=\"o\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_63",
    "sat": "def sat(i: int, s: str=\"fufufu\", target: str=\"f\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"fufufu\", target=\"f\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_64",
    "sat": "def sat(i: int, s: str=\"rathedofarylezrathedofarylez\", target: str=\"y\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"rathedofarylezrathedofarylez\", target=\"y\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_65",
    "sat": "def sat(i: int, s: str=\"kigele\", target: str=\"i\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"kigele\", target=\"i\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_66",
    "sat": "def sat(i: int, s: str=\"charupes\", target: str=\"e\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"charupes\", target=\"e\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_67",
    "sat": "def sat(i: int, s: str=\"wogodychufytex\", target: str=\"o\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"wogodychufytex\", target=\"o\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_68",
    "sat": "def sat(i: int, s: str=\"zaxicumanozaxicumano\", target: str=\"i\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"zaxicumanozaxicumano\", target=\"i\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_69",
    "sat": "def sat(i: int, s: str=\"vv\", target: str=\"v\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"vv\", target=\"v\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_70",
    "sat": "def sat(i: int, s: str=\"tewuvozowigath\", target: str=\"t\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"tewuvozowigath\", target=\"t\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_71",
    "sat": "def sat(i: int, s: str=\"lygecere\", target: str=\"l\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"lygecere\", target=\"l\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_72",
    "sat": "def sat(i: int, s: str=\"guquate\", target: str=\"u\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"guquate\", target=\"u\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_73",
    "sat": "def sat(i: int, s: str=\"luboquizusyxivunyrytluboquizusyxivunyryt\", target: str=\"o\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"luboquizusyxivunyrytluboquizusyxivunyryt\", target=\"o\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_74",
    "sat": "def sat(i: int, s: str=\"zih\", target: str=\"i\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"zih\", target=\"i\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_75",
    "sat": "def sat(i: int, s: str=\"nygynygy\", target: str=\"y\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"nygynygy\", target=\"y\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_76",
    "sat": "def sat(i: int, s: str=\"fethetovarafethetovarafethetovara\", target: str=\"a\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"fethetovarafethetovarafethetovara\", target=\"a\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_77",
    "sat": "def sat(i: int, s: str=\"cysinesifusufynyzcysinesifusufynyz\", target: str=\"f\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"cysinesifusufynyzcysinesifusufynyz\", target=\"f\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_78",
    "sat": "def sat(i: int, s: str=\"sss\", target: str=\"s\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"sss\", target=\"s\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_79",
    "sat": "def sat(i: int, s: str=\"cedigabiputascedigabiputas\", target: str=\"s\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"cedigabiputascedigabiputas\", target=\"s\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_80",
    "sat": "def sat(i: int, s: str=\"fihokowawfihokowawfihokowaw\", target: str=\"o\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"fihokowawfihokowawfihokowaw\", target=\"o\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_81",
    "sat": "def sat(i: int, s: str=\"calonofibivozikywopcalonofibivozikywopcalonofibivozikywop\", target: str=\"p\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"calonofibivozikywopcalonofibivozikywopcalonofibivozikywop\", target=\"p\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_82",
    "sat": "def sat(i: int, s: str=\"rowaricytextofunapo\", target: str=\"f\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"rowaricytextofunapo\", target=\"f\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_83",
    "sat": "def sat(i: int, s: str=\"catutofodyquivethcatutofodyquiveth\", target: str=\"h\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"catutofodyquivethcatutofodyquiveth\", target=\"h\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_84",
    "sat": "def sat(i: int, s: str=\"xetachorofur\", target: str=\"c\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"xetachorofur\", target=\"c\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_85",
    "sat": "def sat(i: int, s: str=\"kuth\", target: str=\"k\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"kuth\", target=\"k\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_86",
    "sat": "def sat(i: int, s: str=\"textetexte\", target: str=\"t\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"textetexte\", target=\"t\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_87",
    "sat": "def sat(i: int, s: str=\"vagywyl\", target: str=\"a\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"vagywyl\", target=\"a\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_88",
    "sat": "def sat(i: int, s: str=\"thibabechudo\", target: str=\"a\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"thibabechudo\", target=\"a\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_89",
    "sat": "def sat(i: int, s: str=\"zycinyfet\", target: str=\"f\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"zycinyfet\", target=\"f\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_90",
    "sat": "def sat(i: int, s: str=\"thichulibu\", target: str=\"h\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"thichulibu\", target=\"h\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_91",
    "sat": "def sat(i: int, s: str=\"luvasokysluvasokysluvasokys\", target: str=\"v\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"luvasokysluvasokysluvasokys\", target=\"v\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_92",
    "sat": "def sat(i: int, s: str=\"seq\", target: str=\"e\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"seq\", target=\"e\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_93",
    "sat": "def sat(i: int, s: str=\"behebehe\", target: str=\"e\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"behebehe\", target=\"e\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_94",
    "sat": "def sat(i: int, s: str=\"thypumathypumathypuma\", target: str=\"t\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"thypumathypumathypuma\", target=\"t\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_95",
    "sat": "def sat(i: int, s: str=\"xazylalathenineqxazylalathenineq\", target: str=\"h\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"xazylalathenineqxazylalathenineq\", target=\"h\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_96",
    "sat": "def sat(i: int, s: str=\"gochihujepirgochihujepirgochihujepir\", target: str=\"h\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"gochihujepirgochihujepirgochihujepir\", target=\"h\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_97",
    "sat": "def sat(i: int, s: str=\"hivaliquibi\", target: str=\"b\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"hivaliquibi\", target=\"b\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_98",
    "sat": "def sat(i: int, s: str=\"zujothzujothzujoth\", target: str=\"z\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"zujothzujothzujoth\", target=\"z\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrNegAt_99",
    "sat": "def sat(i: int, s: str=\"turevowudoquic\", target: str=\"u\"):\n    assert type(i) is int, 'i must be of type int'\n    return s[i] == target and i < 0",
    "sols": [
      "def sol(s=\"turevowudoquic\", target=\"u\"):\n    return - (len(s) - s.index(target))"
    ]
  },
  {
    "name": "StrSlice_0",
    "sat": "def sat(inds: List[int], s: str=\"hello world\", target: str=\"do\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"hello world\", target=\"do\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_1",
    "sat": "def sat(inds: List[int], s: str=\"kunequykunequykunequy\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"kunequykunequykunequy\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_2",
    "sat": "def sat(inds: List[int], s: str=\"dakaxahejekox\", target: str=\"o\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"dakaxahejekox\", target=\"o\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_3",
    "sat": "def sat(inds: List[int], s: str=\"rohitextiryrurecesuw\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"rohitextiryrurecesuw\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_4",
    "sat": "def sat(inds: List[int], s: str=\"texto\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"texto\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_5",
    "sat": "def sat(inds: List[int], s: str=\"watextowatexto\", target: str=\"w\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"watextowatexto\", target=\"w\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_6",
    "sat": "def sat(inds: List[int], s: str=\"midapapiziwmidapapiziwmidapapiziw\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"midapapiziwmidapapiziwmidapapiziw\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_7",
    "sat": "def sat(inds: List[int], s: str=\"sochucekonedyquunsochucekonedyquunsochucekonedyquun\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"sochucekonedyquunsochucekonedyquunsochucekonedyquun\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_8",
    "sat": "def sat(inds: List[int], s: str=\"wyvwyvwyv\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"wyvwyvwyv\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_9",
    "sat": "def sat(inds: List[int], s: str=\"wumuzydyweziwumuzydywezi\", target: str=\"e\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"wumuzydyweziwumuzydywezi\", target=\"e\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_10",
    "sat": "def sat(inds: List[int], s: str=\"tapojebydizidytapojebydizidytapojebydizidy\", target: str=\"pd\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"tapojebydizidytapojebydizidytapojebydizidy\", target=\"pd\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_11",
    "sat": "def sat(inds: List[int], s: str=\"musypulijychimobego\", target: str=\"i\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"musypulijychimobego\", target=\"i\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_12",
    "sat": "def sat(inds: List[int], s: str=\"pytatilajumpytatilajumpytatilajum\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"pytatilajumpytatilajumpytatilajum\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_13",
    "sat": "def sat(inds: List[int], s: str=\"quitavurahiquitavurahi\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"quitavurahiquitavurahi\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_14",
    "sat": "def sat(inds: List[int], s: str=\"gawamubgawamubgawamub\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"gawamubgawamubgawamub\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_15",
    "sat": "def sat(inds: List[int], s: str=\"dajidajidaji\", target: str=\"i\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"dajidajidaji\", target=\"i\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_16",
    "sat": "def sat(inds: List[int], s: str=\"datu\", target: str=\"utad\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"datu\", target=\"utad\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_17",
    "sat": "def sat(inds: List[int], s: str=\"san\", target: str=\"n\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"san\", target=\"n\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_18",
    "sat": "def sat(inds: List[int], s: str=\"tictictic\", target: str=\"t\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"tictictic\", target=\"t\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_19",
    "sat": "def sat(inds: List[int], s: str=\"chothuk\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"chothuk\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_20",
    "sat": "def sat(inds: List[int], s: str=\"gojuhuvojymoh\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"gojuhuvojymoh\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_21",
    "sat": "def sat(inds: List[int], s: str=\"muzokydywy\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"muzokydywy\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_22",
    "sat": "def sat(inds: List[int], s: str=\"thatex\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"thatex\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_23",
    "sat": "def sat(inds: List[int], s: str=\"tezagtezagtezag\", target: str=\"zt\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"tezagtezagtezag\", target=\"zt\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_24",
    "sat": "def sat(inds: List[int], s: str=\"mutycmutycmutyc\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"mutycmutycmutyc\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_25",
    "sat": "def sat(inds: List[int], s: str=\"mochajyt\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"mochajyt\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_26",
    "sat": "def sat(inds: List[int], s: str=\"femajujibifemajujibifemajujibi\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"femajujibifemajujibifemajujibi\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_27",
    "sat": "def sat(inds: List[int], s: str=\"fytex\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"fytex\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_28",
    "sat": "def sat(inds: List[int], s: str=\"luhinuwuvuloquik\", target: str=\"hu\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"luhinuwuvuloquik\", target=\"hu\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_29",
    "sat": "def sat(inds: List[int], s: str=\"lona\", target: str=\"n\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"lona\", target=\"n\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_30",
    "sat": "def sat(inds: List[int], s: str=\"quehyzuquukotextonotquehyzuquukotextonot\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"quehyzuquukotextonotquehyzuquukotextonot\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_31",
    "sat": "def sat(inds: List[int], s: str=\"sa\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"sa\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_32",
    "sat": "def sat(inds: List[int], s: str=\"saxovuzotextegekapeb\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"saxovuzotextegekapeb\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_33",
    "sat": "def sat(inds: List[int], s: str=\"xodothelyfokome\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"xodothelyfokome\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_34",
    "sat": "def sat(inds: List[int], s: str=\"viceditexviceditexviceditex\", target: str=\"t\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"viceditexviceditexviceditex\", target=\"t\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_35",
    "sat": "def sat(inds: List[int], s: str=\"xxx\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"xxx\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_36",
    "sat": "def sat(inds: List[int], s: str=\"xalylozytextigefyxalylozytextigefy\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"xalylozytextigefyxalylozytextigefy\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_37",
    "sat": "def sat(inds: List[int], s: str=\"zowiwukedumaxizowiwukedumaxizowiwukedumaxi\", target: str=\"i\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"zowiwukedumaxizowiwukedumaxizowiwukedumaxi\", target=\"i\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_38",
    "sat": "def sat(inds: List[int], s: str=\"xutuquidat\", target: str=\"q\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"xutuquidat\", target=\"q\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_39",
    "sat": "def sat(inds: List[int], s: str=\"raxevyraxevy\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"raxevyraxevy\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_40",
    "sat": "def sat(inds: List[int], s: str=\"quakytoparothi\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"quakytoparothi\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_41",
    "sat": "def sat(inds: List[int], s: str=\"marykiponodyte\", target: str=\"yo\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"marykiponodyte\", target=\"yo\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_42",
    "sat": "def sat(inds: List[int], s: str=\"vuxopezelajihoxoko\", target: str=\"v\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"vuxopezelajihoxoko\", target=\"v\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_43",
    "sat": "def sat(inds: List[int], s: str=\"nynyny\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"nynyny\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_44",
    "sat": "def sat(inds: List[int], s: str=\"jixusytextuthijixusytextuthi\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"jixusytextuthijixusytextuthi\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_45",
    "sat": "def sat(inds: List[int], s: str=\"z\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"z\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_46",
    "sat": "def sat(inds: List[int], s: str=\"lololo\", target: str=\"o\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"lololo\", target=\"o\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_47",
    "sat": "def sat(inds: List[int], s: str=\"pylycudodihyfi\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"pylycudodihyfi\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_48",
    "sat": "def sat(inds: List[int], s: str=\"vodevutvodevut\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"vodevutvodevut\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_49",
    "sat": "def sat(inds: List[int], s: str=\"zywotextyvewigevepzywotextyvewigevepzywotextyvewigevep\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"zywotextyvewigevepzywotextyvewigevepzywotextyvewigevep\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_50",
    "sat": "def sat(inds: List[int], s: str=\"gusidacarusixe\", target: str=\"ii\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"gusidacarusixe\", target=\"ii\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_51",
    "sat": "def sat(inds: List[int], s: str=\"rororo\", target: str=\"r\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"rororo\", target=\"r\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_52",
    "sat": "def sat(inds: List[int], s: str=\"bykebamyb\", target: str=\"yby\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"bykebamyb\", target=\"yby\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_53",
    "sat": "def sat(inds: List[int], s: str=\"jetesylusocudizojetesylusocudizojetesylusocudizo\", target: str=\"i\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"jetesylusocudizojetesylusocudizojetesylusocudizo\", target=\"i\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_54",
    "sat": "def sat(inds: List[int], s: str=\"likakahynuceqlikakahynuceqlikakahynuceq\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"likakahynuceqlikakahynuceqlikakahynuceq\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_55",
    "sat": "def sat(inds: List[int], s: str=\"topapitewifowigotopapitewifowigo\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"topapitewifowigotopapitewifowigo\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_56",
    "sat": "def sat(inds: List[int], s: str=\"chupiwusachunevchupiwusachunev\", target: str=\"h\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"chupiwusachunevchupiwusachunev\", target=\"h\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_57",
    "sat": "def sat(inds: List[int], s: str=\"zechat\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"zechat\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_58",
    "sat": "def sat(inds: List[int], s: str=\"chikukefenyhoqui\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"chikukefenyhoqui\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_59",
    "sat": "def sat(inds: List[int], s: str=\"mujovymujovymujovy\", target: str=\"o\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"mujovymujovymujovy\", target=\"o\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_60",
    "sat": "def sat(inds: List[int], s: str=\"byxigysycyvecimaquafbyxigysycyvecimaquaf\", target: str=\"q\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"byxigysycyvecimaquafbyxigysycyvecimaquaf\", target=\"q\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_61",
    "sat": "def sat(inds: List[int], s: str=\"kod\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"kod\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_62",
    "sat": "def sat(inds: List[int], s: str=\"nuvilymycnuvilymyc\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"nuvilymycnuvilymyc\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_63",
    "sat": "def sat(inds: List[int], s: str=\"wojoqu\", target: str=\"j\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"wojoqu\", target=\"j\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_64",
    "sat": "def sat(inds: List[int], s: str=\"nufydysednufydysed\", target: str=\"y\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"nufydysednufydysed\", target=\"y\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_65",
    "sat": "def sat(inds: List[int], s: str=\"cyzysathixufecha\", target: str=\"h\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"cyzysathixufecha\", target=\"h\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_66",
    "sat": "def sat(inds: List[int], s: str=\"xihotextipetextatyt\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"xihotextipetextatyt\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_67",
    "sat": "def sat(inds: List[int], s: str=\"ricijesyboxiwetricijesyboxiwet\", target: str=\"c\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"ricijesyboxiwetricijesyboxiwet\", target=\"c\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_68",
    "sat": "def sat(inds: List[int], s: str=\"sesese\", target: str=\"s\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"sesese\", target=\"s\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_69",
    "sat": "def sat(inds: List[int], s: str=\"wywywy\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"wywywy\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_70",
    "sat": "def sat(inds: List[int], s: str=\"lagisyvofigilagisyvofigi\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"lagisyvofigilagisyvofigi\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_71",
    "sat": "def sat(inds: List[int], s: str=\"vumikovakywymybahuchvumikovakywymybahuchvumikovakywymybahuch\", target: str=\"vhmk\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"vumikovakywymybahuchvumikovakywymybahuchvumikovakywymybahuch\", target=\"vhmk\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_72",
    "sat": "def sat(inds: List[int], s: str=\"zyhozavereramumeszyhozavereramumeszyhozavereramumes\", target: str=\"z\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"zyhozavereramumeszyhozavereramumeszyhozavereramumes\", target=\"z\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_73",
    "sat": "def sat(inds: List[int], s: str=\"pugexoba\", target: str=\"p\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"pugexoba\", target=\"p\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_74",
    "sat": "def sat(inds: List[int], s: str=\"chasazepyzetatichasazepyzetati\", target: str=\"a\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"chasazepyzetatichasazepyzetati\", target=\"a\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_75",
    "sat": "def sat(inds: List[int], s: str=\"jyjobutachejyjobutache\", target: str=\"c\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"jyjobutachejyjobutache\", target=\"c\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_76",
    "sat": "def sat(inds: List[int], s: str=\"xixemizudakuzyraxycexixemizudakuzyraxycexixemizudakuzyraxyce\", target: str=\"r\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"xixemizudakuzyraxycexixemizudakuzyraxycexixemizudakuzyraxyce\", target=\"r\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_77",
    "sat": "def sat(inds: List[int], s: str=\"dyvasethucochehimawu\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"dyvasethucochehimawu\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_78",
    "sat": "def sat(inds: List[int], s: str=\"rychidecigilotrychidecigilotrychidecigilot\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"rychidecigilotrychidecigilotrychidecigilot\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_79",
    "sat": "def sat(inds: List[int], s: str=\"hocitohocito\", target: str=\"o\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"hocitohocito\", target=\"o\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_80",
    "sat": "def sat(inds: List[int], s: str=\"thabuwukozytextexyth\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"thabuwukozytextexyth\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_81",
    "sat": "def sat(inds: List[int], s: str=\"habogesyxohathomoquyhabogesyxohathomoquy\", target: str=\"hq\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"habogesyxohathomoquyhabogesyxohathomoquy\", target=\"hq\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_82",
    "sat": "def sat(inds: List[int], s: str=\"wyrukoxochubejawyrukoxochubeja\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"wyrukoxochubejawyrukoxochubeja\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_83",
    "sat": "def sat(inds: List[int], s: str=\"rabodovuzyzrabodovuzyzrabodovuzyz\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"rabodovuzyzrabodovuzyzrabodovuzyz\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_84",
    "sat": "def sat(inds: List[int], s: str=\"chefuchyjyruzchefuchyjyruzchefuchyjyruz\", target: str=\"y\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"chefuchyjyruzchefuchyjyruzchefuchyjyruz\", target=\"y\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_85",
    "sat": "def sat(inds: List[int], s: str=\"nysabuxolnysabuxol\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"nysabuxolnysabuxol\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_86",
    "sat": "def sat(inds: List[int], s: str=\"thithakuthithaku\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"thithakuthithaku\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_87",
    "sat": "def sat(inds: List[int], s: str=\"kychkychkych\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"kychkychkych\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_88",
    "sat": "def sat(inds: List[int], s: str=\"bozaquunogojevet\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"bozaquunogojevet\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_89",
    "sat": "def sat(inds: List[int], s: str=\"thazomecapyt\", target: str=\"a\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"thazomecapyt\", target=\"a\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_90",
    "sat": "def sat(inds: List[int], s: str=\"cymipamogicymipamogi\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"cymipamogicymipamogi\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_91",
    "sat": "def sat(inds: List[int], s: str=\"dymovonanutiradymovonanutira\", target: str=\"vi\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"dymovonanutiradymovonanutira\", target=\"vi\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_92",
    "sat": "def sat(inds: List[int], s: str=\"tivibuxodumybuzutivibuxodumybuzu\", target: str=\"i\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"tivibuxodumybuzutivibuxodumybuzu\", target=\"i\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_93",
    "sat": "def sat(inds: List[int], s: str=\"kabodobewizisuby\", target: str=\"kz\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"kabodobewizisuby\", target=\"kz\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_94",
    "sat": "def sat(inds: List[int], s: str=\"vv\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"vv\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_95",
    "sat": "def sat(inds: List[int], s: str=\"lathafupimybofy\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"lathafupimybofy\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_96",
    "sat": "def sat(inds: List[int], s: str=\"genykathodiduruces\", target: str=\"o\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"genykathodiduruces\", target=\"o\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_97",
    "sat": "def sat(inds: List[int], s: str=\"hytextutugepohytextutugepo\", target: str=\"\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"hytextutugepohytextutugepo\", target=\"\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_98",
    "sat": "def sat(inds: List[int], s: str=\"relokatrelokatrelokat\", target: str=\"a\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"relokatrelokatrelokat\", target=\"a\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrSlice_99",
    "sat": "def sat(inds: List[int], s: str=\"menesusamyquyth\", target: str=\"s\"):\n    assert type(inds) is list and all(type(a) is int for a in inds), 'inds must be of type List[int]'\n    i, j, k = inds\n    return s[i:j:k] == target",
    "sols": [
      "def sol(s=\"menesusamyquyth\", target=\"s\"):\n    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ]
  },
  {
    "name": "StrIndex_0",
    "sat": "def sat(s: str, big_str: str=\"foobar\", index: int=2):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"foobar\", index=2):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_1",
    "sat": "def sat(s: str, big_str: str=\"fuzurofynodi\", index: int=2):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"fuzurofynodi\", index=2):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_2",
    "sat": "def sat(s: str, big_str: str=\"redykuxethufoputa\", index: int=9):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"redykuxethufoputa\", index=9):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_3",
    "sat": "def sat(s: str, big_str: str=\"bikulytenuthapojiludixytovofabyho\", index: int=15):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"bikulytenuthapojiludixytovofabyho\", index=15):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_4",
    "sat": "def sat(s: str, big_str: str=\"kigydulithuzuchicequerewotextihifocirytextune\", index: int=15):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"kigydulithuzuchicequerewotextihifocirytextune\", index=15):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_5",
    "sat": "def sat(s: str, big_str: str=\"cholehupafochevyzivofaxequohakacuw\", index: int=22):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"cholehupafochevyzivofaxequohakacuw\", index=22):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_6",
    "sat": "def sat(s: str, big_str: str=\"ruryfywylesejesiquo\", index: int=4):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"ruryfywylesejesiquo\", index=4):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_7",
    "sat": "def sat(s: str, big_str: str=\"michulychugapajidecithiworuchetextoch\", index: int=9):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"michulychugapajidecithiworuchetextoch\", index=9):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_8",
    "sat": "def sat(s: str, big_str: str=\"savokypisothedetextanyxobibawesisyv\", index: int=6):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"savokypisothedetextanyxobibawesisyv\", index=6):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_9",
    "sat": "def sat(s: str, big_str: str=\"lajadewiryc\", index: int=3):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"lajadewiryc\", index=3):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_10",
    "sat": "def sat(s: str, big_str: str=\"thudasexumilypek\", index: int=1):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"thudasexumilypek\", index=1):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_11",
    "sat": "def sat(s: str, big_str: str=\"dywoxajopechojemosuchyxobagudinimav\", index: int=28):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"dywoxajopechojemosuchyxobagudinimav\", index=28):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_12",
    "sat": "def sat(s: str, big_str: str=\"wihekyxodajebiremutyvuxupubibefehycivichufug\", index: int=16):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"wihekyxodajebiremutyvuxupubibefehycivichufug\", index=16):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_13",
    "sat": "def sat(s: str, big_str: str=\"xudyvu\", index: int=2):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"xudyvu\", index=2):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_14",
    "sat": "def sat(s: str, big_str: str=\"wejedibilucewuzomoduquaramewysaroduhobiciqu\", index: int=8):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"wejedibilucewuzomoduquaramewysaroduhobiciqu\", index=8):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_15",
    "sat": "def sat(s: str, big_str: str=\"padatifatobyvohiwychedevekulajututyho\", index: int=6):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"padatifatobyvohiwychedevekulajututyho\", index=6):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_16",
    "sat": "def sat(s: str, big_str: str=\"tadivutextechecitextuvajytextuji\", index: int=12):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"tadivutextechecitextuvajytextuji\", index=12):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_17",
    "sat": "def sat(s: str, big_str: str=\"chuducymiryxythudihomufikutem\", index: int=8):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"chuducymiryxythudihomufikutem\", index=8):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_18",
    "sat": "def sat(s: str, big_str: str=\"textothathosymivocichijudetaq\", index: int=27):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"textothathosymivocichijudetaq\", index=27):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_19",
    "sat": "def sat(s: str, big_str: str=\"wo\", index: int=1):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"wo\", index=1):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_20",
    "sat": "def sat(s: str, big_str: str=\"quelodykelahometextesazy\", index: int=5):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"quelodykelahometextesazy\", index=5):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_21",
    "sat": "def sat(s: str, big_str: str=\"zycatimujitunujichutexterufichenuryte\", index: int=17):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"zycatimujitunujichutexterufichenuryte\", index=17):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_22",
    "sat": "def sat(s: str, big_str: str=\"vutextyragixebikegowitatesitextucoluc\", index: int=14):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"vutextyragixebikegowitatesitextucoluc\", index=14):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_23",
    "sat": "def sat(s: str, big_str: str=\"binychycumothyfipitextakacetegatextatudeca\", index: int=36):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"binychycumothyfipitextakacetegatextatudeca\", index=36):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_24",
    "sat": "def sat(s: str, big_str: str=\"j\", index: int=0):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"j\", index=0):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_25",
    "sat": "def sat(s: str, big_str: str=\"hosuwepoxutigydychecoquycyb\", index: int=17):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"hosuwepoxutigydychecoquycyb\", index=17):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_26",
    "sat": "def sat(s: str, big_str: str=\"kohadavukithozaquiwobathajilehepizisosethetext\", index: int=20):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"kohadavukithozaquiwobathajilehepizisosethetext\", index=20):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_27",
    "sat": "def sat(s: str, big_str: str=\"textigydatithytextugujece\", index: int=5):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"textigydatithytextugujece\", index=5):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_28",
    "sat": "def sat(s: str, big_str: str=\"quezowulegiriporot\", index: int=15):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"quezowulegiriporot\", index=15):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_29",
    "sat": "def sat(s: str, big_str: str=\"hehesacicopaquujepur\", index: int=8):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"hehesacicopaquujepur\", index=8):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_30",
    "sat": "def sat(s: str, big_str: str=\"xajutextatextotextyryquogovojoxejatexovychuhasutex\", index: int=45):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"xajutextatextotextyryquogovojoxejatexovychuhasutex\", index=45):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_31",
    "sat": "def sat(s: str, big_str: str=\"binoxapisoquygosatex\", index: int=16):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"binoxapisoquygosatex\", index=16):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_32",
    "sat": "def sat(s: str, big_str: str=\"therowerahexelogezudichehotextezuhojyvuxizyhiweb\", index: int=21):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"therowerahexelogezudichehotextezuhojyvuxizyhiweb\", index=21):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_33",
    "sat": "def sat(s: str, big_str: str=\"gytextufupowychekeq\", index: int=1):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"gytextufupowychekeq\", index=1):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_34",
    "sat": "def sat(s: str, big_str: str=\"hypovemywuritythu\", index: int=12):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"hypovemywuritythu\", index=12):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_35",
    "sat": "def sat(s: str, big_str: str=\"fatextufudevizopymabethixi\", index: int=22):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"fatextufudevizopymabethixi\", index=22):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_36",
    "sat": "def sat(s: str, big_str: str=\"zyjigepepapytextaxequuvisocufuthufytav\", index: int=22):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"zyjigepepapytextaxequuvisocufuthufytav\", index=22):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_37",
    "sat": "def sat(s: str, big_str: str=\"wehoxothibechonynybibomequabotyquuwothofigyx\", index: int=5):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"wehoxothibechonynybibomequabotyquuwothofigyx\", index=5):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_38",
    "sat": "def sat(s: str, big_str: str=\"m\", index: int=0):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"m\", index=0):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_39",
    "sat": "def sat(s: str, big_str: str=\"narotextathiraxunijofanepuvaherylolujetathupathet\", index: int=39):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"narotextathiraxunijofanepuvaherylolujetathupathet\", index=39):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_40",
    "sat": "def sat(s: str, big_str: str=\"fitextequyrenovomaxilodukathixureguriwe\", index: int=0):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"fitextequyrenovomaxilodukathixureguriwe\", index=0):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_41",
    "sat": "def sat(s: str, big_str: str=\"firuwobyfyxecyvyzurozethokulazedy\", index: int=7):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"firuwobyfyxecyvyzurozethokulazedy\", index=7):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_42",
    "sat": "def sat(s: str, big_str: str=\"fogezymipejabajin\", index: int=4):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"fogezymipejabajin\", index=4):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_43",
    "sat": "def sat(s: str, big_str: str=\"gel\", index: int=0):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"gel\", index=0):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_44",
    "sat": "def sat(s: str, big_str: str=\"cochumaxifuhenakelujanu\", index: int=16):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"cochumaxifuhenakelujanu\", index=16):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_45",
    "sat": "def sat(s: str, big_str: str=\"mufychosogucuvuwubukitextokodynurerec\", index: int=23):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"mufychosogucuvuwubukitextokodynurerec\", index=23):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_46",
    "sat": "def sat(s: str, big_str: str=\"byvogazilucagoziwabo\", index: int=8):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"byvogazilucagoziwabo\", index=8):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_47",
    "sat": "def sat(s: str, big_str: str=\"fodidytextowajytibijukigol\", index: int=17):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"fodidytextowajytibijukigol\", index=17):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_48",
    "sat": "def sat(s: str, big_str: str=\"bifud\", index: int=1):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"bifud\", index=1):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_49",
    "sat": "def sat(s: str, big_str: str=\"syfijudyjodinuwekyvynitithetextyquijidycimow\", index: int=7):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"syfijudyjodinuwekyvynitithetextyquijidycimow\", index=7):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_50",
    "sat": "def sat(s: str, big_str: str=\"cinuhyruthedevehitextokanevythokathimythocuthi\", index: int=19):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"cinuhyruthedevehitextokanevythokathimythocuthi\", index=19):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_51",
    "sat": "def sat(s: str, big_str: str=\"text\", index: int=0):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"text\", index=0):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_52",
    "sat": "def sat(s: str, big_str: str=\"hetextopuhedigutextenovizuzynafeg\", index: int=14):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"hetextopuhedigutextenovizuzynafeg\", index=14):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_53",
    "sat": "def sat(s: str, big_str: str=\"quydysidogyjukukatextydufebavedimelytexti\", index: int=28):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"quydysidogyjukukatextydufebavedimelytexti\", index=28):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_54",
    "sat": "def sat(s: str, big_str: str=\"deg\", index: int=0):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"deg\", index=0):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_55",
    "sat": "def sat(s: str, big_str: str=\"quydulumechalareranajyrokakiwur\", index: int=11):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"quydulumechalareranajyrokakiwur\", index=11):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_56",
    "sat": "def sat(s: str, big_str: str=\"garimybazyhatuthowovubacywe\", index: int=19):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"garimybazyhatuthowovubacywe\", index=19):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_57",
    "sat": "def sat(s: str, big_str: str=\"cyxyluthybiquihywyryd\", index: int=5):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"cyxyluthybiquihywyryd\", index=5):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_58",
    "sat": "def sat(s: str, big_str: str=\"dykoquyxodijamucholuquafuwaryjynutextythezatextuwy\", index: int=25):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"dykoquyxodijamucholuquafuwaryjynutextythezatextuwy\", index=25):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_59",
    "sat": "def sat(s: str, big_str: str=\"retextiquagi\", index: int=1):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"retextiquagi\", index=1):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_60",
    "sat": "def sat(s: str, big_str: str=\"hyf\", index: int=2):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"hyf\", index=2):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_61",
    "sat": "def sat(s: str, big_str: str=\"kisithukychujetextuqu\", index: int=15):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"kisithukychujetextuqu\", index=15):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_62",
    "sat": "def sat(s: str, big_str: str=\"typuwutextochypahithu\", index: int=13):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"typuwutextochypahithu\", index=13):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_63",
    "sat": "def sat(s: str, big_str: str=\"jacuhyzicamihaducu\", index: int=9):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"jacuhyzicamihaducu\", index=9):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_64",
    "sat": "def sat(s: str, big_str: str=\"dihejicivedi\", index: int=9):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"dihejicivedi\", index=9):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_65",
    "sat": "def sat(s: str, big_str: str=\"taquogisibyjukej\", index: int=11):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"taquogisibyjukej\", index=11):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_66",
    "sat": "def sat(s: str, big_str: str=\"textudytowinidechejegopapyjechupujabafohunyhavaqu\", index: int=8):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"textudytowinidechejegopapyjechupujabafohunyhavaqu\", index=8):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_67",
    "sat": "def sat(s: str, big_str: str=\"thothezybivyvokuvil\", index: int=0):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"thothezybivyvokuvil\", index=0):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_68",
    "sat": "def sat(s: str, big_str: str=\"quidydosychozuwatochique\", index: int=1):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"quidydosychozuwatochique\", index=1):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_69",
    "sat": "def sat(s: str, big_str: str=\"vegasycofuquythavu\", index: int=5):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"vegasycofuquythavu\", index=5):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_70",
    "sat": "def sat(s: str, big_str: str=\"dylythynem\", index: int=2):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"dylythynem\", index=2):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_71",
    "sat": "def sat(s: str, big_str: str=\"bemubopihagovyjivyl\", index: int=13):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"bemubopihagovyjivyl\", index=13):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_72",
    "sat": "def sat(s: str, big_str: str=\"gazotextamifufegygumahoxurijyquijisonokechutexty\", index: int=16):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"gazotextamifufegygumahoxurijyquijisonokechutexty\", index=16):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_73",
    "sat": "def sat(s: str, big_str: str=\"koverudes\", index: int=1):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"koverudes\", index=1):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_74",
    "sat": "def sat(s: str, big_str: str=\"kyhonagadufequelisabufixupyl\", index: int=21):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"kyhonagadufequelisabufixupyl\", index=21):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_75",
    "sat": "def sat(s: str, big_str: str=\"xutokedopi\", index: int=1):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"xutokedopi\", index=1):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_76",
    "sat": "def sat(s: str, big_str: str=\"quekoxymachytevenunisonisubaquuwal\", index: int=15):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"quekoxymachytevenunisonisubaquuwal\", index=15):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_77",
    "sat": "def sat(s: str, big_str: str=\"jicisuzati\", index: int=0):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"jicisuzati\", index=0):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_78",
    "sat": "def sat(s: str, big_str: str=\"lykicehafyhujicelexecequywothufym\", index: int=22):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"lykicehafyhujicelexecequywothufym\", index=22):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_79",
    "sat": "def sat(s: str, big_str: str=\"jisochymirychegihequojefosakoch\", index: int=16):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"jisochymirychegihequojefosakoch\", index=16):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_80",
    "sat": "def sat(s: str, big_str: str=\"tatextetafepahechejowufyjenodykufafejopuf\", index: int=29):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"tatextetafepahechejowufyjenodykufafejopuf\", index=29):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_81",
    "sat": "def sat(s: str, big_str: str=\"voxycuxyvurasyquenokahichit\", index: int=14):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"voxycuxyvurasyquenokahichit\", index=14):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_82",
    "sat": "def sat(s: str, big_str: str=\"jyzucucipothothyrolothicysunihiky\", index: int=18):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"jyzucucipothothyrolothicysunihiky\", index=18):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_83",
    "sat": "def sat(s: str, big_str: str=\"chyvosunukakufugub\", index: int=8):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"chyvosunukakufugub\", index=8):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_84",
    "sat": "def sat(s: str, big_str: str=\"tujaxutextumosotihinapipakup\", index: int=9):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"tujaxutextumosotihinapipakup\", index=9):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_85",
    "sat": "def sat(s: str, big_str: str=\"myhirite\", index: int=5):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"myhirite\", index=5):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_86",
    "sat": "def sat(s: str, big_str: str=\"kezyrepatugoche\", index: int=4):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"kezyrepatugoche\", index=4):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_87",
    "sat": "def sat(s: str, big_str: str=\"thoveratinatextezocatextit\", index: int=1):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"thoveratinatextezocatextit\", index=1):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_88",
    "sat": "def sat(s: str, big_str: str=\"zychitextenunetextuhuthoduthyc\", index: int=12):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"zychitextenunetextuhuthoduthyc\", index=12):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_89",
    "sat": "def sat(s: str, big_str: str=\"kulysyxawogabotoxebuhyrepyfedopifadyhefurejy\", index: int=32):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"kulysyxawogabotoxebuhyrepyfedopifadyhefurejy\", index=32):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_90",
    "sat": "def sat(s: str, big_str: str=\"guvozydolemevythitextogydiz\", index: int=6):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"guvozydolemevythitextogydiz\", index=6):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_91",
    "sat": "def sat(s: str, big_str: str=\"tholegobozepumacethiwadypy\", index: int=18):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"tholegobozepumacethiwadypy\", index=18):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_92",
    "sat": "def sat(s: str, big_str: str=\"capakiquuvovynarekyciqu\", index: int=19):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"capakiquuvovynarekyciqu\", index=19):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_93",
    "sat": "def sat(s: str, big_str: str=\"tygathyxich\", index: int=6):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"tygathyxich\", index=6):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_94",
    "sat": "def sat(s: str, big_str: str=\"dothanetextuhyhochyxugytextyvojomitextethi\", index: int=12):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"dothanetextuhyhochyxugytextyvojomitextethi\", index=12):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_95",
    "sat": "def sat(s: str, big_str: str=\"chijubapycorizitextawizicuzamotextific\", index: int=8):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"chijubapycorizitextawizicuzamotextific\", index=8):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_96",
    "sat": "def sat(s: str, big_str: str=\"cutextagecifyjofetumexaq\", index: int=18):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"cutextagecifyjofetumexaq\", index=18):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_97",
    "sat": "def sat(s: str, big_str: str=\"thepahami\", index: int=4):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"thepahami\", index=4):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_98",
    "sat": "def sat(s: str, big_str: str=\"jatextothidechidexe\", index: int=1):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"jatextothidechidexe\", index=1):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex_99",
    "sat": "def sat(s: str, big_str: str=\"nafich\", index: int=5):\n    assert type(s) is str, 's must be of type str'\n    return big_str.index(s) == index",
    "sols": [
      "def sol(big_str=\"nafich\", index=5):\n    return big_str[index:]"
    ]
  },
  {
    "name": "StrIndex2_0",
    "sat": "def sat(big_str: str, sub_str: str=\"foobar\", index: int=2):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"foobar\", index=2):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_1",
    "sat": "def sat(big_str: str, sub_str: str=\"hyxuzerejybatepetextapisaxipujogifutextodatextas\", index: int=164):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"hyxuzerejybatepetextapisaxipujogifutextodatextas\", index=164):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_2",
    "sat": "def sat(big_str: str, sub_str: str=\"fotarehijahoragifechizaquonixipawewafedysatext\", index: int=911):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"fotarehijahoragifechizaquonixipawewafedysatext\", index=911):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_3",
    "sat": "def sat(big_str: str, sub_str: str=\"gowitichuwydychatextutebube\", index: int=456):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"gowitichuwydychatextutebube\", index=456):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_4",
    "sat": "def sat(big_str: str, sub_str: str=\"bechezibehogepenediquorevefachinive\", index: int=812):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"bechezibehogepenediquorevefachinive\", index=812):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_5",
    "sat": "def sat(big_str: str, sub_str: str=\"xaxygychythy\", index: int=544):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"xaxygychythy\", index=544):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_6",
    "sat": "def sat(big_str: str, sub_str: str=\"baxazatocugygyrutextipafys\", index: int=829):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"baxazatocugygyrutextipafys\", index=829):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_7",
    "sat": "def sat(big_str: str, sub_str: str=\"tidolaricuxufumoviquanihurif\", index: int=476):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"tidolaricuxufumoviquanihurif\", index=476):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_8",
    "sat": "def sat(big_str: str, sub_str: str=\"jocelypamoredojebepyzoxesiwotis\", index: int=619):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"jocelypamoredojebepyzoxesiwotis\", index=619):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_9",
    "sat": "def sat(big_str: str, sub_str: str=\"nygypivychenasebecunilyrecodymuwekequipybynybanyz\", index: int=746):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"nygypivychenasebecunilyrecodymuwekequipybynybanyz\", index=746):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_10",
    "sat": "def sat(big_str: str, sub_str: str=\"xezicozurijuzachisul\", index: int=380):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"xezicozurijuzachisul\", index=380):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_11",
    "sat": "def sat(big_str: str, sub_str: str=\"xacodyvojuhuzikacozevuhaj\", index: int=715):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"xacodyvojuhuzikacozevuhaj\", index=715):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_12",
    "sat": "def sat(big_str: str, sub_str: str=\"xyzucybopyrokolezezotiryvigetextemomobybivywary\", index: int=532):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"xyzucybopyrokolezezotiryvigetextemomobybivywary\", index=532):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_13",
    "sat": "def sat(big_str: str, sub_str: str=\"quotijynaxuvewehybabazutywihe\", index: int=874):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"quotijynaxuvewehybabazutywihe\", index=874):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_14",
    "sat": "def sat(big_str: str, sub_str: str=\"cyfizymiwatextuchemaguthenagotochehechugylubu\", index: int=780):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"cyfizymiwatextuchemaguthenagotochehechugylubu\", index=780):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_15",
    "sat": "def sat(big_str: str, sub_str: str=\"sururaquathu\", index: int=389):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"sururaquathu\", index=389):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_16",
    "sat": "def sat(big_str: str, sub_str: str=\"japekyhihaperiziquebupythygocenequynipycag\", index: int=298):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"japekyhihaperiziquebupythygocenequynipycag\", index=298):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_17",
    "sat": "def sat(big_str: str, sub_str: str=\"gonutextaxefinathofivihud\", index: int=107):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"gonutextaxefinathofivihud\", index=107):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_18",
    "sat": "def sat(big_str: str, sub_str: str=\"talojacamivuchonamythahototextenykamoquohejoxekiba\", index: int=156):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"talojacamivuchonamythahototextenykamoquohejoxekiba\", index=156):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_19",
    "sat": "def sat(big_str: str, sub_str: str=\"seharichotihamyquathawydawomusidivujajygylicofy\", index: int=481):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"seharichotihamyquathawydawomusidivujajygylicofy\", index=481):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_20",
    "sat": "def sat(big_str: str, sub_str: str=\"textyhowegohucijechathadugiquofiquethubydelocere\", index: int=169):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"textyhowegohucijechathadugiquofiquethubydelocere\", index=169):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_21",
    "sat": "def sat(big_str: str, sub_str: str=\"thazulugivewedevodeniwokanyvuluwazoretiduchup\", index: int=315):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"thazulugivewedevodeniwokanyvuluwazoretiduchup\", index=315):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_22",
    "sat": "def sat(big_str: str, sub_str: str=\"quipegugete\", index: int=114):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"quipegugete\", index=114):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_23",
    "sat": "def sat(big_str: str, sub_str: str=\"lychetiruryrekin\", index: int=520):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"lychetiruryrekin\", index=520):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_24",
    "sat": "def sat(big_str: str, sub_str: str=\"licirexikutextukaxevylyp\", index: int=801):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"licirexikutextukaxevylyp\", index=801):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_25",
    "sat": "def sat(big_str: str, sub_str: str=\"basefycychasyniboth\", index: int=164):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"basefycychasyniboth\", index=164):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_26",
    "sat": "def sat(big_str: str, sub_str: str=\"tazejitextitextychesixytysigalytarimaj\", index: int=273):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"tazejitextitextychesixytysigalytarimaj\", index=273):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_27",
    "sat": "def sat(big_str: str, sub_str: str=\"tharuwufezodoxutetodowunazytudethamova\", index: int=648):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"tharuwufezodoxutetodowunazytudethamova\", index=648):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_28",
    "sat": "def sat(big_str: str, sub_str: str=\"kiwa\", index: int=942):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"kiwa\", index=942):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_29",
    "sat": "def sat(big_str: str, sub_str: str=\"fycizikyremuthiw\", index: int=787):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"fycizikyremuthiw\", index=787):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_30",
    "sat": "def sat(big_str: str, sub_str: str=\"hakyfolytextuzi\", index: int=625):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"hakyfolytextuzi\", index=625):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_31",
    "sat": "def sat(big_str: str, sub_str: str=\"wesas\", index: int=533):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"wesas\", index=533):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_32",
    "sat": "def sat(big_str: str, sub_str: str=\"likilapotextiquytextod\", index: int=89):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"likilapotextiquytextod\", index=89):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_33",
    "sat": "def sat(big_str: str, sub_str: str=\"gysegymachihochifysisabiqu\", index: int=638):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"gysegymachihochifysisabiqu\", index=638):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_34",
    "sat": "def sat(big_str: str, sub_str: str=\"cagex\", index: int=230):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"cagex\", index=230):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_35",
    "sat": "def sat(big_str: str, sub_str: str=\"sekukysigopetexteverutuw\", index: int=280):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"sekukysigopetexteverutuw\", index=280):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_36",
    "sat": "def sat(big_str: str, sub_str: str=\"jufikyquekechilarozaquukelusypihywaludomefel\", index: int=140):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"jufikyquekechilarozaquukelusypihywaludomefel\", index=140):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_37",
    "sat": "def sat(big_str: str, sub_str: str=\"quywatexticavycheceherupozyrifiv\", index: int=211):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"quywatexticavycheceherupozyrifiv\", index=211):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_38",
    "sat": "def sat(big_str: str, sub_str: str=\"hotharychyhotohakozuxotojyretextopahimuzihafavu\", index: int=237):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"hotharychyhotohakozuxotojyretextopahimuzihafavu\", index=237):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_39",
    "sat": "def sat(big_str: str, sub_str: str=\"kuthaquaxax\", index: int=303):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"kuthaquaxax\", index=303):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_40",
    "sat": "def sat(big_str: str, sub_str: str=\"rocuketextythibybyquitunokegesokagobachutuchenif\", index: int=206):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"rocuketextythibybyquitunokegesokagobachutuchenif\", index=206):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_41",
    "sat": "def sat(big_str: str, sub_str: str=\"teryquoquerovodyxahalumotextumujutextuthyp\", index: int=230):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"teryquoquerovodyxahalumotextumujutextuthyp\", index=230):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_42",
    "sat": "def sat(big_str: str, sub_str: str=\"nunaquyvochegodoquachetextofonechimytextaxychivog\", index: int=971):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"nunaquyvochegodoquachetextofonechimytextaxychivog\", index=971):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_43",
    "sat": "def sat(big_str: str, sub_str: str=\"cizijudaxisuc\", index: int=745):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"cizijudaxisuc\", index=745):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_44",
    "sat": "def sat(big_str: str, sub_str: str=\"nifutextesukedetextyvifase\", index: int=119):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"nifutextesukedetextyvifase\", index=119):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_45",
    "sat": "def sat(big_str: str, sub_str: str=\"tosuquosytextus\", index: int=451):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"tosuquosytextus\", index=451):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_46",
    "sat": "def sat(big_str: str, sub_str: str=\"nero\", index: int=229):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"nero\", index=229):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_47",
    "sat": "def sat(big_str: str, sub_str: str=\"fotonexunurymebejosuzotextohewepicy\", index: int=375):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"fotonexunurymebejosuzotextohewepicy\", index=375):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_48",
    "sat": "def sat(big_str: str, sub_str: str=\"nemaviwapopochynuzakiguhechotextachibeb\", index: int=844):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"nemaviwapopochynuzakiguhechotextachibeb\", index=844):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_49",
    "sat": "def sat(big_str: str, sub_str: str=\"vuvuhejyza\", index: int=813):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"vuvuhejyza\", index=813):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_50",
    "sat": "def sat(big_str: str, sub_str: str=\"dugucuquigihiquiquydasiwaxoxizygatextute\", index: int=721):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"dugucuquigihiquiquydasiwaxoxizygatextute\", index=721):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_51",
    "sat": "def sat(big_str: str, sub_str: str=\"gezumovequydequegotextolerykyfebequymano\", index: int=331):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"gezumovequydequegotextolerykyfebequymano\", index=331):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_52",
    "sat": "def sat(big_str: str, sub_str: str=\"fufewohelychalas\", index: int=820):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"fufewohelychalas\", index=820):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_53",
    "sat": "def sat(big_str: str, sub_str: str=\"zeketextytextawadovekofatifunuthe\", index: int=789):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"zeketextytextawadovekofatifunuthe\", index=789):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_54",
    "sat": "def sat(big_str: str, sub_str: str=\"textotextiwysezohowutextymucajidemuchoro\", index: int=134):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"textotextiwysezohowutextymucajidemuchoro\", index=134):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_55",
    "sat": "def sat(big_str: str, sub_str: str=\"wumulybajig\", index: int=986):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"wumulybajig\", index=986):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_56",
    "sat": "def sat(big_str: str, sub_str: str=\"pufupomozojehovotextufanobyhisysojady\", index: int=174):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"pufupomozojehovotextufanobyhisysojady\", index=174):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_57",
    "sat": "def sat(big_str: str, sub_str: str=\"sybopapebobawaqueky\", index: int=639):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"sybopapebobawaqueky\", index=639):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_58",
    "sat": "def sat(big_str: str, sub_str: str=\"chisegesygathehumesatextubuhipachur\", index: int=176):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"chisegesygathehumesatextubuhipachur\", index=176):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_59",
    "sat": "def sat(big_str: str, sub_str: str=\"petojerinohixutextocoxigethibykarubygitothu\", index: int=992):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"petojerinohixutextocoxigethibykarubygitothu\", index=992):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_60",
    "sat": "def sat(big_str: str, sub_str: str=\"wojychuchowawihimowukobyvozutext\", index: int=506):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"wojychuchowawihimowukobyvozutext\", index=506):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_61",
    "sat": "def sat(big_str: str, sub_str: str=\"gavyfutaquuk\", index: int=888):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"gavyfutaquuk\", index=888):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_62",
    "sat": "def sat(big_str: str, sub_str: str=\"zigyzigemonozypolyvejaqu\", index: int=104):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"zigyzigemonozypolyvejaqu\", index=104):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_63",
    "sat": "def sat(big_str: str, sub_str: str=\"xekekynywojathezicudowowolathakoxisy\", index: int=214):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"xekekynywojathezicudowowolathakoxisy\", index=214):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_64",
    "sat": "def sat(big_str: str, sub_str: str=\"kogoquyraxativathotholyluwafepejutextute\", index: int=332):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"kogoquyraxativathotholyluwafepejutextute\", index=332):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_65",
    "sat": "def sat(big_str: str, sub_str: str=\"cy\", index: int=169):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"cy\", index=169):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_66",
    "sat": "def sat(big_str: str, sub_str: str=\"buchechohulotextanazi\", index: int=129):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"buchechohulotextanazi\", index=129):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_67",
    "sat": "def sat(big_str: str, sub_str: str=\"bugosotextuquerufoharikexeryzozizisuze\", index: int=106):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"bugosotextuquerufoharikexeryzozizisuze\", index=106):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_68",
    "sat": "def sat(big_str: str, sub_str: str=\"pajebabozochechezikusyterute\", index: int=335):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"pajebabozochechezikusyterute\", index=335):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_69",
    "sat": "def sat(big_str: str, sub_str: str=\"lopilothirapaqueloxo\", index: int=129):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"lopilothirapaqueloxo\", index=129):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_70",
    "sat": "def sat(big_str: str, sub_str: str=\"chogyxuchuny\", index: int=451):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"chogyxuchuny\", index=451):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_71",
    "sat": "def sat(big_str: str, sub_str: str=\"vyruthucevadomycenathagusemudusuquoc\", index: int=553):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"vyruthucevadomycenathagusemudusuquoc\", index=553):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_72",
    "sat": "def sat(big_str: str, sub_str: str=\"sypiborazadicexeguthygygorykicytextodivucevizolil\", index: int=714):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"sypiborazadicexeguthygygorykicytextodivucevizolil\", index=714):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_73",
    "sat": "def sat(big_str: str, sub_str: str=\"fonatextygulyzuxajugychocige\", index: int=697):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"fonatextygulyzuxajugychocige\", index=697):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_74",
    "sat": "def sat(big_str: str, sub_str: str=\"gidytijutequisemolixesyriwovehepybanihymudatyputh\", index: int=377):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"gidytijutequisemolixesyriwovehepybanihymudatyputh\", index=377):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_75",
    "sat": "def sat(big_str: str, sub_str: str=\"nidyzuwadosirepuhus\", index: int=177):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"nidyzuwadosirepuhus\", index=177):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_76",
    "sat": "def sat(big_str: str, sub_str: str=\"cedyxafyxujimatelithokokixapisimozythulucafipiju\", index: int=922):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"cedyxafyxujimatelithokokixapisimozythulucafipiju\", index=922):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_77",
    "sat": "def sat(big_str: str, sub_str: str=\"fydomifuzehymixepirutusufuthuj\", index: int=22):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"fydomifuzehymixepirutusufuthuj\", index=22):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_78",
    "sat": "def sat(big_str: str, sub_str: str=\"hitugapylomithe\", index: int=877):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"hitugapylomithe\", index=877):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_79",
    "sat": "def sat(big_str: str, sub_str: str=\"biwavycezitywuch\", index: int=211):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"biwavycezitywuch\", index=211):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_80",
    "sat": "def sat(big_str: str, sub_str: str=\"xevuse\", index: int=676):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"xevuse\", index=676):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_81",
    "sat": "def sat(big_str: str, sub_str: str=\"thocathathu\", index: int=193):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"thocathathu\", index=193):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_82",
    "sat": "def sat(big_str: str, sub_str: str=\"didodyfukuwykumaroly\", index: int=971):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"didodyfukuwykumaroly\", index=971):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_83",
    "sat": "def sat(big_str: str, sub_str: str=\"dapizequekik\", index: int=810):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"dapizequekik\", index=810):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_84",
    "sat": "def sat(big_str: str, sub_str: str=\"quopujuquochochozytextavuty\", index: int=962):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"quopujuquochochozytextavuty\", index=962):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_85",
    "sat": "def sat(big_str: str, sub_str: str=\"kyfigobonogoteloparebyhuteg\", index: int=336):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"kyfigobonogoteloparebyhuteg\", index=336):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_86",
    "sat": "def sat(big_str: str, sub_str: str=\"hizozuguwahydidy\", index: int=222):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"hizozuguwahydidy\", index=222):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_87",
    "sat": "def sat(big_str: str, sub_str: str=\"vunimodavupitextydylemofubonofypom\", index: int=91):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"vunimodavupitextydylemofubonofypom\", index=91):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_88",
    "sat": "def sat(big_str: str, sub_str: str=\"tyvathykevyvaku\", index: int=447):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"tyvathykevyvaku\", index=447):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_89",
    "sat": "def sat(big_str: str, sub_str: str=\"nuchapitybykyfemotexticolac\", index: int=108):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"nuchapitybykyfemotexticolac\", index=108):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_90",
    "sat": "def sat(big_str: str, sub_str: str=\"gahu\", index: int=218):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"gahu\", index=218):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_91",
    "sat": "def sat(big_str: str, sub_str: str=\"quisylotextuzoquupanysyhelyjoda\", index: int=10):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"quisylotextuzoquupanysyhelyjoda\", index=10):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_92",
    "sat": "def sat(big_str: str, sub_str: str=\"bugav\", index: int=253):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"bugav\", index=253):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_93",
    "sat": "def sat(big_str: str, sub_str: str=\"vylytextopysahejodefuwekyfagotexti\", index: int=105):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"vylytextopysahejodefuwekyfagotexti\", index=105):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_94",
    "sat": "def sat(big_str: str, sub_str: str=\"mathojaxebuquasefathop\", index: int=873):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"mathojaxebuquasefathop\", index=873):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_95",
    "sat": "def sat(big_str: str, sub_str: str=\"quolofybonicu\", index: int=383):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"quolofybonicu\", index=383):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_96",
    "sat": "def sat(big_str: str, sub_str: str=\"xyxachamyjamehunojyjypetextavobixuchat\", index: int=931):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"xyxachamyjamehunojyjypetextavobixuchat\", index=931):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_97",
    "sat": "def sat(big_str: str, sub_str: str=\"begijawybawaxyquutixidochytextuviligex\", index: int=188):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"begijawybawaxyquutixidochytextuviligex\", index=188):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_98",
    "sat": "def sat(big_str: str, sub_str: str=\"thizechegetextuxyxynehegiposujypojylaxuthu\", index: int=607):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"thizechegetextuxyxynehegiposujypojylaxuthu\", index=607):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIndex2_99",
    "sat": "def sat(big_str: str, sub_str: str=\"chizigonuzixopewesyquocivuducotisigycekasynyv\", index: int=815):\n    assert type(big_str) is str, 'big_str must be of type str'\n    return big_str.index(sub_str) == index",
    "sols": [
      "def sol(sub_str=\"chizigonuzixopewesyquocivuducotisigycekasynyv\", index=815):\n    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i)*index + sub_str"
    ]
  },
  {
    "name": "StrIn_0",
    "sat": "def sat(s: str, a: str=\"hello\", b: str=\"yellow\", length: int=4):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"hello\", b=\"yellow\", length=4):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_1",
    "sat": "def sat(s: str, a: str=\"chalytextupiloniletextvilicynalelachet\", b: str=\"thygechoquiciloniletextvesegilegajuwesanet\", length: int=10):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"chalytextupiloniletextvilicynalelachet\", b=\"thygechoquiciloniletextvesegilegajuwesanet\", length=10):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_2",
    "sat": "def sat(s: str, a: str=\"textylupuzopodunibycchumupudocuvajyjy\", b: str=\"gabothotithesapuzopodunibycchywybotextyc\", length: int=13):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"textylupuzopodunibycchumupudocuvajyjy\", b=\"gabothotithesapuzopodunibycchywybotextyc\", length=13):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_3",
    "sat": "def sat(s: str, a: str=\"mapowafuzequuchochinunobmiguduzufamoq\", b: str=\"chuxupazibubolykuquuchochinunobvisubycoc\", length: int=14):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"mapowafuzequuchochinunobmiguduzufamoq\", b=\"chuxupazibubolykuquuchochinunobvisubycoc\", length=14):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_4",
    "sat": "def sat(s: str, a: str=\"gevitenoquejasosafithowawuchix\", b: str=\"vogecubutachysazvitenoquejane\", length: int=11):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"gevitenoquejasosafithowawuchix\", b=\"vogecubutachysazvitenoquejane\", length=11):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_5",
    "sat": "def sat(s: str, a: str=\"zywisuzysequechuquoticynymtofavugy\", b: str=\"luduwehetozysequechuquoticynymduchutazunu\", length: int=20):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"zywisuzysequechuquoticynymtofavugy\", b=\"luduwehetozysequechuquoticynymduchutazunu\", length=20):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_6",
    "sat": "def sat(s: str, a: str=\"witubypycegtextinudyhys\", b: str=\"rahunopuravepytextinulyzytextupilowimijuh\", length: int=7):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"witubypycegtextinudyhys\", b=\"rahunopuravepytextinulyzytextupilowimijuh\", length=7):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_7",
    "sat": "def sat(s: str, a: str=\"zumecc\", b: str=\"pcthasekex\", length: int=1):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"zumecc\", b=\"pcthasekex\", length=1):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_8",
    "sat": "def sat(s: str, a: str=\"jirysythogykenegiceramoqutextuchihefa\", b: str=\"textelusugykenegiceramoquketesuwop\", length: int=16):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"jirysythogykenegiceramoqutextuchihefa\", b=\"textelusugykenegiceramoquketesuwop\", length=16):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_9",
    "sat": "def sat(s: str, a: str=\"hivacycusopeletextydavorerac\", b: str=\"textadavecheduguwavytextyratuhiroce\", length: int=5):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"hivacycusopeletextydavorerac\", b=\"textadavecheduguwavytextyratuhiroce\", length=5):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_10",
    "sat": "def sat(s: str, a: str=\"bureremvaklumijosehejebarapaxo\", b: str=\"wutozicifygitextvakjahalizawufokixicexu\", length: int=3):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"bureremvaklumijosehejebarapaxo\", b=\"wutozicifygitextvakjahalizawufokixicexu\", length=3):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_11",
    "sat": "def sat(s: str, a: str=\"dyjajogarythichisiqchythuquywet\", b: str=\"thunykejaropuhatchisiqja\", length: int=6):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"dyjajogarythichisiqchythuquywet\", b=\"thunykejaropuhatchisiqja\", length=6):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_12",
    "sat": "def sat(s: str, a: str=\"chdedutextutextur\", b: str=\"texahovagoramudedutextutexturoquemoq\", length: int=14):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"chdedutextutextur\", b=\"texahovagoramudedutextutexturoquemoq\", length=14):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_13",
    "sat": "def sat(s: str, a: str=\"bazuhytyqchulerych\", b: str=\"suratyjecenaroxuvchuleryxygodubetexteche\", length: int=7):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"bazuhytyqchulerych\", b=\"suratyjecenaroxuvchuleryxygodubetexteche\", length=7):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_14",
    "sat": "def sat(s: str, a: str=\"kipothuchykarowochgycukawamelaputextup\", b: str=\"jychuchowitihuchykarowochzuniquisynufekez\", length: int=13):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"kipothuchykarowochgycukawamelaputextup\", b=\"jychuchowitihuchykarowochzuniquisynufekez\", length=13):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_15",
    "sat": "def sat(s: str, a: str=\"jytholiwudefijycxuhesuhxixuchavaguniji\", b: str=\"thimedxuhesuhralytyquerochaxet\", length: int=7):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"jytholiwudefijycxuhesuhxixuchavaguniji\", b=\"thimedxuhesuhralytyquerochaxet\", length=7):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_16",
    "sat": "def sat(s: str, a: str=\"koludiwyhycechytewottextofeme\", b: str=\"ciwotcyco\", length: int=3):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"koludiwyhycechytewottextofeme\", b=\"ciwotcyco\", length=3):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_17",
    "sat": "def sat(s: str, a: str=\"totexgovigyzizuchufukufubok\", b: str=\"pepytugahixuchatgovigyzizuchutuqui\", length: int=13):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"totexgovigyzizuchufukufubok\", b=\"pepytugahixuchatgovigyzizuchutuqui\", length=13):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_18",
    "sat": "def sat(s: str, a: str=\"lexyjunibipijohtex\", b: str=\"chyfpijohruvikogowyqu\", length: int=5):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"lexyjunibipijohtex\", b=\"chyfpijohruvikogowyqu\", length=5):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_19",
    "sat": "def sat(s: str, a: str=\"kigelitvagevohchoviwofu\", b: str=\"kazvagevohbikekakojokofete\", length: int=7):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"kigelitvagevohchoviwofu\", b=\"kazvagevohbikekakojokofete\", length=7):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_20",
    "sat": "def sat(s: str, a: str=\"dettymilykobetitevifobyquisojiriq\", b: str=\"textahykoceguwtymilykobetitegysyd\", length: int=14):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"dettymilykobetitevifobyquisojiriq\", b=\"textahykoceguwtymilykobetitegysyd\", length=14):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_21",
    "sat": "def sat(s: str, a: str=\"hymijohadegequxucusuvitextucvuquochoca\", b: str=\"pufalachevudicugxucusuvitextucvoquedin\", length: int=14):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"hymijohadegequxucusuvitextucvuquochoca\", b=\"pufalachevudicugxucusuvitextucvoquedin\", length=14):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_22",
    "sat": "def sat(s: str, a: str=\"maquahipothedozahetrofuquojolybedypofacwyresuhijucywiperyb\", b: str=\"xequekrofuquojolybedypofacmyzamusagikeje\", length: int=20):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"maquahipothedozahetrofuquojolybedypofacwyresuhijucywiperyb\", b=\"xequekrofuquojolybedypofacmyzamusagikeje\", length=20):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_23",
    "sat": "def sat(s: str, a: str=\"mrimecharuje\", b: str=\"textyvecacubonukarrimehotha\", length: int=4):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"mrimecharuje\", b=\"textyvecacubonukarrimehotha\", length=4):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_24",
    "sat": "def sat(s: str, a: str=\"thygivemadavicudomohogochup\", b: str=\"quenuhuluchdavicudomohogodozefebu\", length: int=14):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"thygivemadavicudomohogochup\", b=\"quenuhuluchdavicudomohogodozefebu\", length=14):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_25",
    "sat": "def sat(s: str, a: str=\"kixujonuzufinudajusupicartoribigi\", b: str=\"radoxytequybippicarbawukopuvadocibe\", length: int=5):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"kixujonuzufinudajusupicartoribigi\", b=\"radoxytequybippicarbawukopuvadocibe\", length=5):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_26",
    "sat": "def sat(s: str, a: str=\"jawchekequ\", b: str=\"hahatextuguxerchefegahynumeko\", length: int=3):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"jawchekequ\", b=\"hahatextuguxerchefegahynumeko\", length=3):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_27",
    "sat": "def sat(s: str, a: str=\"hibyhochgupepabgocecicezawemuk\", b: str=\"lisynucebafipgupepabpa\", length: int=7):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"hibyhochgupepabgocecicezawemuk\", b=\"lisynucebafipgupepabpa\", length=7):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_28",
    "sat": "def sat(s: str, a: str=\"fimachethotojecukechikuchyteclyfachanulevuw\", b: str=\"gydudamyhozypukolotojecukechikuchyteczatogurukivifa\", length: int=19):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"fimachethotojecukechikuchyteclyfachanulevuw\", b=\"gydudamyhozypukolotojecukechikuchyteczatogurukivifa\", length=19):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_29",
    "sat": "def sat(s: str, a: str=\"tixsc\", b: str=\"coquaquetukywinecscathozujyveq\", length: int=1):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"tixsc\", b=\"coquaquetukywinecscathozujyveq\", length=1):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_30",
    "sat": "def sat(s: str, a: str=\"rovojwibivehumequihyniraxecufamyc\", b: str=\"nukwibivehumequihynibafos\", length: int=17):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"rovojwibivehumequihyniraxecufamyc\", b=\"nukwibivehumequihynibafos\", length=17):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_31",
    "sat": "def sat(s: str, a: str=\"bypytotextelyhyvatextabquekuj\", b: str=\"pyzyciwigutusucivatextabryfany\", length: int=8):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"bypytotextelyhyvatextabquekuj\", b=\"pyzyciwigutusucivatextabryfany\", length=8):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_32",
    "sat": "def sat(s: str, a: str=\"gzubalifidevithatufej\", b: str=\"matextebiposethetezubatowymudepytuquivo\", length: int=4):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"gzubalifidevithatufej\", b=\"matextebiposethetezubatowymudepytuquivo\", length=4):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_33",
    "sat": "def sat(s: str, a: str=\"vechowichajovdytiwyvolasefuxna\", b: str=\"kymethizyzudaronedytiwyvolasefuxmequaxuzawub\", length: int=15):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"vechowichajovdytiwyvolasefuxna\", b=\"kymethizyzudaronedytiwyvolasefuxmequaxuzawub\", length=15):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_34",
    "sat": "def sat(s: str, a: str=\"cowasylykunrijoquenaf\", b: str=\"textymepakuwivaxrijoxyruthajubyfegitirot\", length: int=4):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"cowasylykunrijoquenaf\", b=\"textymepakuwivaxrijoxyruthajubyfegitirot\", length=4):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_35",
    "sat": "def sat(s: str, a: str=\"vifiquuwoquyrasuthuvivubebylutecizygyc\", b: str=\"quafujuxiduhalychsuthuvivubebylutekutypage\", length: int=17):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"vifiquuwoquyrasuthuvivubebylutecizygyc\", b=\"quafujuxiduhalychsuthuvivubebylutekutypage\", length=17):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_36",
    "sat": "def sat(s: str, a: str=\"thnymokuquomyquupovic\", b: str=\"byrusapenykihunachuxulilydoc\", length: int=2):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"thnymokuquomyquupovic\", b=\"byrusapenykihunachuxulilydoc\", length=2):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_37",
    "sat": "def sat(s: str, a: str=\"sathysoryjathicekarkuzelozoroxytextafwochofyk\", b: str=\"lequutextequyhylyjykuzelozoroxytextafwipubit\", length: int=18):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"sathysoryjathicekarkuzelozoroxytextafwochofyk\", b=\"lequutextequyhylyjykuzelozoroxytextafwipubit\", length=18):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_38",
    "sat": "def sat(s: str, a: str=\"jithupewyfytidizuxecezaxu\", b: str=\"lumunutabofumythupewyfytidizuxewefom\", length: int=17):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"jithupewyfytidizuxecezaxu\", b=\"lumunutabofumythupewyfytidizuxewefom\", length=17):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_39",
    "sat": "def sat(s: str, a: str=\"zuhythibivymenimutyjechacu\", b: str=\"begufethibivymenik\", length: int=11):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"zuhythibivymenimutyjechacu\", b=\"begufethibivymenik\", length=11):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_40",
    "sat": "def sat(s: str, a: str=\"jumegocyjajuwathytelhibit\", b: str=\"mibyjesobyjerecyjajuwathytelkuze\", length: int=14):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"jumegocyjajuwathytelhibit\", b=\"mibyjesobyjerecyjajuwathytelkuze\", length=14):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_41",
    "sat": "def sat(s: str, a: str=\"xochxynutibusdepotapykigothic\", b: str=\"fetextiqxynutibustaqu\", length: int=9):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"xochxynutibusdepotapykigothic\", b=\"fetextiqxynutibustaqu\", length=9):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_42",
    "sat": "def sat(s: str, a: str=\"kotextumechixolivonakachybgofa\", b: str=\"ramyjequisafojokachybquuvuxof\", length: int=6):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"kotextumechixolivonakachybgofa\", b=\"ramyjequisafojokachybquuvuxof\", length=6):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_43",
    "sat": "def sat(s: str, a: str=\"bimosequinimumakerygothubexekajkekaxohoch\", b: str=\"xunolusyzemgothubexekajnuhyrines\", length: int=12):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"bimosequinimumakerygothubexekajkekaxohoch\", b=\"xunolusyzemgothubexekajnuhyrines\", length=12):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_44",
    "sat": "def sat(s: str, a: str=\"hesulamynocyjybesaraletfamunothapijonijyqu\", b: str=\"syrumyquepucyjybesaraletpitopagixequaxokyha\", length: int=13):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"hesulamynocyjybesaraletfamunothapijonijyqu\", b=\"syrumyquepucyjybesaraletpitopagixequaxokyha\", length=13):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_45",
    "sat": "def sat(s: str, a: str=\"helochyvypuxigotimlogutikujojihurudu\", b: str=\"vocoxpuxigotimwevec\", length: int=9):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"helochyvypuxigotimlogutikujojihurudu\", b=\"vocoxpuxigotimwevec\", length=9):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_46",
    "sat": "def sat(s: str, a: str=\"xujajopuwudetextmilemycywywuhokuc\", b: str=\"xymilemyxykuky\", length: int=6):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"xujajopuwudetextmilemycywywuhokuc\", b=\"xymilemyxykuky\", length=6):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_47",
    "sat": "def sat(s: str, a: str=\"rydevafyfothygojuthybunaxytextoqwowomythowathathotex\", b: str=\"tbunaxytextoqthu\", length: int=12):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"rydevafyfothygojuthybunaxytextoqwowomythowathathotex\", b=\"tbunaxytextoqthu\", length=12):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_48",
    "sat": "def sat(s: str, a: str=\"xefzapabidesoputovajofumic\", b: str=\"dichupytextaxymasyzapabidesoputovagem\", length: int=16):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"xefzapabidesoputovajofumic\", b=\"dichupytextaxymasyzapabidesoputovagem\", length=16):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_49",
    "sat": "def sat(s: str, a: str=\"jozyxpygozlinerimomi\", b: str=\"hapygozquofemejejozythu\", length: int=5):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"jozyxpygozlinerimomi\", b=\"hapygozquofemejejozythu\", length=5):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_50",
    "sat": "def sat(s: str, a: str=\"ximetafechocogegothazisotechafodixytjohozichyxaquewef\", b: str=\"xutthazisotechafodixytduzydih\", length: int=19):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"ximetafechocogegothazisotechafodixytjohozichyxaquewef\", b=\"xutthazisotechafodixytduzydih\", length=19):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_51",
    "sat": "def sat(s: str, a: str=\"welumachavysochyborejitebicrovexivy\", b: str=\"wokugyjekerewizjitebicchoji\", length: int=7):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"welumachavysochyborejitebicrovexivy\", b=\"wokugyjekerewizjitebicchoji\", length=7):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_52",
    "sat": "def sat(s: str, a: str=\"quetenuvybaxokyfohyhethigatextodehegire\", b: str=\"quupuwatextythipubaxokyfohyhethigatextitextithothup\", length: int=17):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"quetenuvybaxokyfohyhethigatextodehegire\", b=\"quupuwatextythipubaxokyfohyhethigatextitextithothup\", length=17):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_53",
    "sat": "def sat(s: str, a: str=\"roxesuxacymyquirbethochebuwotudockotex\", b: str=\"medetbethochebuwotudockysupi\", length: int=17):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"roxesuxacymyquirbethochebuwotudockotex\", b=\"medetbethochebuwotudockysupi\", length=17):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_54",
    "sat": "def sat(s: str, a: str=\"pebogotextasikazehykatw\", b: str=\"govedibehzehykatchojitutext\", length: int=7):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"pebogotextasikazehykatw\", b=\"govedibehzehykatchojitutext\", length=7):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_55",
    "sat": "def sat(s: str, a: str=\"sutextuwywosabypymyhachiquytmetextithes\", b: str=\"syfibifirudawosabypymyhachiquytsagyjamuras\", length: int=19):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"sutextuwywosabypymyhachiquytmetextithes\", b=\"syfibifirudawosabypymyhachiquytsagyjamuras\", length=19):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_56",
    "sat": "def sat(s: str, a: str=\"velugatubmymuvirrytexticanijaw\", b: str=\"metextidmymuvirda\", length: int=7):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"velugatubmymuvirrytexticanijaw\", b=\"metextidmymuvirda\", length=7):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_57",
    "sat": "def sat(s: str, a: str=\"pekbahigunadofilygjurywetextate\", b: str=\"jytextiragochovubahigunadofilyghajubujuhoxoxywime\", length: int=15):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"pekbahigunadofilygjurywetextate\", b=\"jytextiragochovubahigunadofilyghajubujuhoxoxywime\", length=15):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_58",
    "sat": "def sat(s: str, a: str=\"textovethowiwatextywop\", b: str=\"puctextyjyr\", length: int=5):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"textovethowiwatextywop\", b=\"puctextyjyr\", length=5):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_59",
    "sat": "def sat(s: str, a: str=\"textachuwoquawurroquavovtextomyque\", b: str=\"zechytoquyhoquitextoroquavovlasad\", length: int=8):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"textachuwoquawurroquavovtextomyque\", b=\"zechytoquyhoquitextoroquavovlasad\", length=8):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_60",
    "sat": "def sat(s: str, a: str=\"xasuxykimohgokuvedyhajezukech\", b: str=\"gyjutgokuvequoroka\", length: int=6):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"xasuxykimohgokuvedyhajezukech\", b=\"gyjutgokuvequoroka\", length=6):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_61",
    "sat": "def sat(s: str, a: str=\"fatextowivudpuzunyquunorofx\", b: str=\"wuthetefygaxodyxabupuzunyquunorofwufumuz\", length: int=14):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"fatextowivudpuzunyquunorofx\", b=\"wuthetefygaxodyxabupuzunyquunorofwufumuz\", length=14):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_62",
    "sat": "def sat(s: str, a: str=\"ryxapytextenabamakubilezamyralopaqjit\", b: str=\"zuhythequubyfechejmakubilezamyralopaqdepotextup\", length: int=19):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"ryxapytextenabamakubilezamyralopaqjit\", b=\"zuhythequubyfechejmakubilezamyralopaqdepotextup\", length=19):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_63",
    "sat": "def sat(s: str, a: str=\"foninelebalyjbeposekequechijarl\", b: str=\"texbeposekequechijartextac\", length: int=17):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"foninelebalyjbeposekequechijarl\", b=\"texbeposekequechijartextac\", length=17):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_64",
    "sat": "def sat(s: str, a: str=\"wecezanysivenecechojibygytuvagite\", b: str=\"thakcechojibygytuvagihu\", length: int=17):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"wecezanysivenecechojibygytuvagite\", b=\"thakcechojibygytuvagihu\", length=17):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_65",
    "sat": "def sat(s: str, a: str=\"wyrokisowthaxyhaxomalipiquefenurasythatubechy\", b: str=\"lyhijupotexthaxyhaxomalipiquepiharaquumothyko\", length: int=18):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"wyrokisowthaxyhaxomalipiquefenurasythatubechy\", b=\"lyhijupotexthaxyhaxomalipiquepiharaquumothyko\", length=18):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_66",
    "sat": "def sat(s: str, a: str=\"kyditextomemevaxawilyquachidejvunutextequat\", b: str=\"dosasudolochuvaxawilyquachidejgiwythewopadisaxaz\", length: int=17):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"kyditextomemevaxawilyquachidejvunutextequat\", b=\"dosasudolochuvaxawilyquachidejgiwythewopadisaxaz\", length=17):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_67",
    "sat": "def sat(s: str, a: str=\"fonifademikobygowihabquisetup\", b: str=\"tetgowihabcykyt\", length: int=7):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"fonifademikobygowihabquisetup\", b=\"tetgowihabcykyt\", length=7):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_68",
    "sat": "def sat(s: str, a: str=\"chitextzitextoxede\", b: str=\"xysyquewzifepokuxytyxysivaqu\", length: int=2):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"chitextzitextoxede\", b=\"xysyquewzifepokuxytyxysivaqu\", length=2):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_69",
    "sat": "def sat(s: str, a: str=\"quothyquymidafathukisotextynecithaquyric\", b: str=\"zedthyquymidafathukisolajotextutextamaquo\", length: int=19):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"quothyquymidafathukisotextynecithaquyric\", b=\"zedthyquymidafathukisolajotextutextamaquo\", length=19):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_70",
    "sat": "def sat(s: str, a: str=\"dolagutefechthydejuvalobyzedamobipe\", b: str=\"sothupixthydejuvalobyzedezicha\", length: int=15):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"dolagutefechthydejuvalobyzedamobipe\", b=\"sothupixthydejuvalobyzedezicha\", length=15):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_71",
    "sat": "def sat(s: str, a: str=\"cyluquelifekiwabikuquuvotujitujuxawopizujyxyf\", b: str=\"doquuvotujituvaquawol\", length: int=11):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"cyluquelifekiwabikuquuvotujitujuxawopizujyxyf\", b=\"doquuvotujituvaquawol\", length=11):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_72",
    "sat": "def sat(s: str, a: str=\"wuvunysejudaquodiretchuvsiravybizugigut\", b: str=\"potextepojyfchuvzytum\", length: int=4):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"wuvunysejudaquodiretchuvsiravybizugigut\", b=\"potextepojyfchuvzytum\", length=4):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_73",
    "sat": "def sat(s: str, a: str=\"myfytpithirovyquuxuzwutolecohosapomol\", b: str=\"recebethamytextipithirovyquuxuznevocagocaxotuquury\", length: int=15):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"myfytpithirovyquuxuzwutolecohosapomol\", b=\"recebethamytextipithirovyquuxuznevocagocaxotuquury\", length=15):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_74",
    "sat": "def sat(s: str, a: str=\"bychafelitobuprebitextewufaz\", b: str=\"lyfelitobupc\", length: int=9):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"bychafelitobuprebitextewufaz\", b=\"lyfelitobupc\", length=9):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_75",
    "sat": "def sat(s: str, a: str=\"thachechyfedupifajbixytextorupery\", b: str=\"zucimothchyfedupifajmykic\", length: int=12):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"thachechyfedupifajbixytextorupery\", b=\"zucimothchyfedupifajmykic\", length=12):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_76",
    "sat": "def sat(s: str, a: str=\"lykutextgahygithyrekep\", b: str=\"zofesisobimedakazegahygithyrelul\", length: int=11):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"lykutextgahygithyrekep\", b=\"zofesisobimedakazegahygithyrelul\", length=11):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_77",
    "sat": "def sat(s: str, a: str=\"lidoqquupyhetytextedejacor\", b: str=\"peciwelanilethuchibquupyhetytextedejacotex\", length: int=20):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"lidoqquupyhetytextedejacor\", b=\"peciwelanilethuchibquupyhetytextedejacotex\", length=20):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_78",
    "sat": "def sat(s: str, a: str=\"ckugalyjuzottextoh\", b: str=\"chogedokokkugalyjuzotpoquykasaquiji\", length: int=11):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"ckugalyjuzottextoh\", b=\"chogedokokkugalyjuzotpoquykasaquiji\", length=11):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_79",
    "sat": "def sat(s: str, a: str=\"pafofuvakifobudypisugebyquackulochaquumi\", b: str=\"gisykyfybezofepisugebyquacxethete\", length: int=12):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"pafofuvakifobudypisugebyquackulochaquumi\", b=\"gisykyfybezofepisugebyquacxethete\", length=12):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_80",
    "sat": "def sat(s: str, a: str=\"sethofefasufihdew\", b: str=\"sulenethozemahpekymajirycofichoter\", length: int=1):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"sethofefasufihdew\", b=\"sulenethozemahpekymajirycofichoter\", length=1):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_81",
    "sat": "def sat(s: str, a: str=\"cupiquatextenozesyte\", b: str=\"lynexpiquatextenohajucogecho\", length: int=12):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"cupiquatextenozesyte\", b=\"lynexpiquatextenohajucogecho\", length=12):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_82",
    "sat": "def sat(s: str, a: str=\"chizevuwytilikogagygiwypygyldupady\", b: str=\"wothufifyhtilikogagygiwypygylkocy\", length: int=19):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"chizevuwytilikogagygiwypygyldupady\", b=\"wothufifyhtilikogagygiwypygylkocy\", length=19):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_83",
    "sat": "def sat(s: str, a: str=\"wafolujicejudvudethamu\", b: str=\"ryvutextevyvorjicejudt\", length: int=7):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"wafolujicejudvudethamu\", b=\"ryvutextevyvorjicejudt\", length=7):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_84",
    "sat": "def sat(s: str, a: str=\"npagicutextewijbatichoselofy\", b: str=\"vipysispagicutextewijchaboquitathivy\", length: int=14):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"npagicutextewijbatichoselofy\", b=\"vipysispagicutextewijchaboquitathivy\", length=14):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_85",
    "sat": "def sat(s: str, a: str=\"nterusathotokawvysezajifydijocos\", b: str=\"chokathexoterusathotokawmo\", length: int=14):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"nterusathotokawvysezajifydijocos\", b=\"chokathexoterusathotokawmo\", length=14):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_86",
    "sat": "def sat(s: str, a: str=\"wusevutuquurubazichynomecetextolete\", b: str=\"wycepiwerajaqubazichynomesichufonuh\", length: int=11):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"wusevutuquurubazichynomecetextolete\", b=\"wycepiwerajaqubazichynomesichufonuh\", length=11):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_87",
    "sat": "def sat(s: str, a: str=\"quyfypeforewarukyruvozehychchyjykochokihus\", b: str=\"tforewarukyruvozehychsojafe\", length: int=20):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"quyfypeforewarukyruvozehychchyjykochokihus\", b=\"tforewarukyruvozehychsojafe\", length=20):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_88",
    "sat": "def sat(s: str, a: str=\"xycylifanutextupybitextaqu\", b: str=\"chtextupybirex\", length: int=9):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"xycylifanutextupybitextaqu\", b=\"chtextupybirex\", length=9):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_89",
    "sat": "def sat(s: str, a: str=\"textafnylezazegequoropibumejo\", b: str=\"zihuquocenylezazegequocozahuponyfupo\", length: int=13):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"textafnylezazegequoropibumejo\", b=\"zihuquocenylezazegequocozahuponyfupo\", length=13):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_90",
    "sat": "def sat(s: str, a: str=\"thithowequewojakycowixugyxegjoputexte\", b: str=\"xquewojakycowixugyxeghixatecojoba\", length: int=20):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"thithowequewojakycowixugyxegjoputexte\", b=\"xquewojakycowixugyxeghixatecojoba\", length=20):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_91",
    "sat": "def sat(s: str, a: str=\"vuqwunydukazizuvitoququutexti\", b: str=\"sewewulizomakwunydukazizuvitoqusimarohyquulajiwevuv\", length: int=18):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"vuqwunydukazizuvitoququutexti\", b=\"sewewulizomakwunydukazizuvitoqusimarohyquulajiwevuv\", length=18):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_92",
    "sat": "def sat(s: str, a: str=\"tkowyjymbubalus\", b: str=\"gitextijufekkowyjymquiculylyvebinywage\", length: int=7):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"tkowyjymbubalus\", b=\"gitextijufekkowyjymquiculylyvebinywage\", length=7):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_93",
    "sat": "def sat(s: str, a: str=\"didotynuruquovuxyhtextojypysokygbichutedyf\", b: str=\"gtextojypysokygboquywiledyjugaxufab\", length: int=14):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"didotynuruquovuxyhtextojypysokygbichutedyf\", b=\"gtextojypysokygboquywiledyjugaxufab\", length=14):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_94",
    "sat": "def sat(s: str, a: str=\"nusatextybumathazuzucifem\", b: str=\"nesatextybupogynopapochomad\", length: int=9):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"nusatextybumathazuzucifem\", b=\"nesatextybupogynopapochomad\", length=9):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_95",
    "sat": "def sat(s: str, a: str=\"gemovynyjohoquiropokeradytuduquutudu\", b: str=\"vquiropokeradyxovuwefyjamic\", length: int=13):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"gemovynyjohoquiropokeradytuduquutudu\", b=\"vquiropokeradyxovuwefyjamic\", length=13):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_96",
    "sat": "def sat(s: str, a: str=\"nucixgur\", b: str=\"podibydozethihogegalxreryp\", length: int=1):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"nucixgur\", b=\"podibydozethihogegalxreryp\", length=1):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_97",
    "sat": "def sat(s: str, a: str=\"nojiquocpakykijbajixuzot\", b: str=\"xelpakykijwogetex\", length: int=7):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"nojiquocpakykijbajixuzot\", b=\"xelpakykijwogetex\", length=7):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_98",
    "sat": "def sat(s: str, a: str=\"zezthytewovokovaremozu\", b: str=\"dodafaquichosthytewovokovaremosycokahif\", length: int=17):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"zezthytewovokovaremozu\", b=\"dodafaquichosthytewovokovaremosycokahif\", length=17):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn_99",
    "sat": "def sat(s: str, a: str=\"textuxusetehevofagesojemeroxucu\", b: str=\"hylugesojemeroxuhih\", length: int=12):\n    assert type(s) is str, 's must be of type str'\n    return len(s) == length and s in a and s in b",
    "sols": [
      "def sol(a=\"textuxusetehevofagesojemeroxucu\", b=\"hylugesojemeroxuhih\", length=12):\n    for i in range(len(a)-length+1):\n        if a[i:i+length] in b:\n            return a[i:i+length]"
    ]
  },
  {
    "name": "StrIn2_0",
    "sat": "def sat(substrings: List[str], s: str=\"hello\", count: int=15):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"hello\", count=15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_1",
    "sat": "def sat(substrings: List[str], s: str=\"pathotextafaxevi\", count: int=131):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"pathotextafaxevi\", count=131):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_2",
    "sat": "def sat(substrings: List[str], s: str=\"quivavithafathuquixaleguvytext\", count: int=445):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"quivavithafathuquixaleguvytext\", count=445):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_3",
    "sat": "def sat(substrings: List[str], s: str=\"quegehamotextihaduxet\", count: int=222):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"quegehamotextihaduxet\", count=222):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_4",
    "sat": "def sat(substrings: List[str], s: str=\"textarotextesuch\", count: int=124):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"textarotextesuch\", count=124):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_5",
    "sat": "def sat(substrings: List[str], s: str=\"xefisichetuchocywebixysede\", count: int=339):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"xefisichetuchocywebixysede\", count=339):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_6",
    "sat": "def sat(substrings: List[str], s: str=\"cyfidanuwuraquos\", count: int=134):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"cyfidanuwuraquos\", count=134):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_7",
    "sat": "def sat(substrings: List[str], s: str=\"wycipolysyfitextohymotextotextesysudyzexoheziwuq\", count: int=1122):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"wycipolysyfitextohymotextotextesysudyzexoheziwuq\", count=1122):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_8",
    "sat": "def sat(substrings: List[str], s: str=\"jetotextijithachitytol\", count: int=241):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"jetotextijithachitytol\", count=241):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_9",
    "sat": "def sat(substrings: List[str], s: str=\"gicenygityquapychiquukitextekoledegetychizyle\", count: int=997):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"gicenygityquapychiquukitextekoledegetychizyle\", count=997):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_10",
    "sat": "def sat(substrings: List[str], s: str=\"juvulewochichachuduhyluque\", count: int=338):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"juvulewochichachuduhyluque\", count=338):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_11",
    "sat": "def sat(substrings: List[str], s: str=\"jytexty\", count: int=27):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"jytexty\", count=27):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_12",
    "sat": "def sat(substrings: List[str], s: str=\"rysudajixylithodexothuta\", count: int=290):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"rysudajixylithodexothuta\", count=290):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_13",
    "sat": "def sat(substrings: List[str], s: str=\"textezotextithoxyxavathavi\", count: int=327):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"textezotextithoxyxavathavi\", count=327):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_14",
    "sat": "def sat(substrings: List[str], s: str=\"canuzuxethichokepigesytopykehinanehogitex\", count: int=832):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"canuzuxethichokepigesytopykehinanehogitex\", count=832):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_15",
    "sat": "def sat(substrings: List[str], s: str=\"tothusigusibit\", count: int=97):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"tothusigusibit\", count=97):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_16",
    "sat": "def sat(substrings: List[str], s: str=\"zechagerutuzefykakotexithuwocoga\", count: int=512):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"zechagerutuzefykakotexithuwocoga\", count=512):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_17",
    "sat": "def sat(substrings: List[str], s: str=\"gazobumipamyzehajisachisewarybajonalef\", count: int=722):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"gazobumipamyzehajisachisewarybajonalef\", count=722):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_18",
    "sat": "def sat(substrings: List[str], s: str=\"xizaturadazenutimijichukuta\", count: int=366):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"xizaturadazenutimijichukuta\", count=366):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_19",
    "sat": "def sat(substrings: List[str], s: str=\"nosuthowunekotixilupuwatoxolycequefepyz\", count: int=761):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"nosuthowunekotixilupuwatoxolycequefepyz\", count=761):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_20",
    "sat": "def sat(substrings: List[str], s: str=\"homoruhicukovabekypechithetymyryhethekiwof\", count: int=871):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"homoruhicukovabekypechithetymyryhethekiwof\", count=871):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_21",
    "sat": "def sat(substrings: List[str], s: str=\"nycyhochijupuvokenochybitextyfu\", count: int=479):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"nycyhochijupuvokenochybitextyfu\", count=479):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_22",
    "sat": "def sat(substrings: List[str], s: str=\"paquykyvy\", count: int=44):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"paquykyvy\", count=44):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_23",
    "sat": "def sat(substrings: List[str], s: str=\"dunypaquebyvexekokytupuwanydychithuhuche\", count: int=796):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"dunypaquebyvexekokytupuwanydychithuhuche\", count=796):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_24",
    "sat": "def sat(substrings: List[str], s: str=\"boponotextequa\", count: int=101):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"boponotextequa\", count=101):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_25",
    "sat": "def sat(substrings: List[str], s: str=\"tigysyjidinyfy\", count: int=101):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"tigysyjidinyfy\", count=101):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_26",
    "sat": "def sat(substrings: List[str], s: str=\"sycexadabuquyluvemakazoquysikonutext\", count: int=646):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"sycexadabuquyluvemakazoquysikonutext\", count=646):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_27",
    "sat": "def sat(substrings: List[str], s: str=\"zerizefofiwechovuhenawawypep\", count: int=392):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"zerizefofiwechovuhenawawypep\", count=392):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_28",
    "sat": "def sat(substrings: List[str], s: str=\"sifiratexticufocuthikitohetocegozygi\", count: int=644):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"sifiratexticufocuthikitohetocegozygi\", count=644):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_29",
    "sat": "def sat(substrings: List[str], s: str=\"nytykofofuwevelychivyj\", count: int=246):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"nytykofofuwevelychivyj\", count=246):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_30",
    "sat": "def sat(substrings: List[str], s: str=\"denozivopewiha\", count: int=103):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"denozivopewiha\", count=103):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_31",
    "sat": "def sat(substrings: List[str], s: str=\"myjyjycikowochucafepakeb\", count: int=289):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"myjyjycikowochucafepakeb\", count=289):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_32",
    "sat": "def sat(substrings: List[str], s: str=\"choxequiguquikezowykulerazykuwidapyquife\", count: int=791):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"choxequiguquikezowykulerazykuwidapyquife\", count=791):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_33",
    "sat": "def sat(substrings: List[str], s: str=\"chidose\", count: int=29):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"chidose\", count=29):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_34",
    "sat": "def sat(substrings: List[str], s: str=\"mizuquethetextubiwyfilakenochitych\", count: int=579):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"mizuquethetextubiwyfilakenochitych\", count=579):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_35",
    "sat": "def sat(substrings: List[str], s: str=\"quehatiduhuwalewewotexti\", count: int=287):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"quehatiduhuwalewewotexti\", count=287):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_36",
    "sat": "def sat(substrings: List[str], s: str=\"thacaxefogetehuwavalexojewine\", count: int=423):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"thacaxefogetehuwavalexojewine\", count=423):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_37",
    "sat": "def sat(substrings: List[str], s: str=\"judagyfumujuwobexepijonebohubutextobojywopevuxuma\", count: int=1190):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"judagyfumujuwobexepijonebohubutextobojywopevuxuma\", count=1190):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_38",
    "sat": "def sat(substrings: List[str], s: str=\"bemeq\", count: int=15):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"bemeq\", count=15):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_39",
    "sat": "def sat(substrings: List[str], s: str=\"liquyxojugamupusenyj\", count: int=206):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"liquyxojugamupusenyj\", count=206):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_40",
    "sat": "def sat(substrings: List[str], s: str=\"zysoquulolavocydolidikekunetaziryxicebacifecu\", count: int=1010):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"zysoquulolavocydolidikekunetaziryxicebacifecu\", count=1010):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_41",
    "sat": "def sat(substrings: List[str], s: str=\"muchojite\", count: int=46):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"muchojite\", count=46):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_42",
    "sat": "def sat(substrings: List[str], s: str=\"xelebechigyxulequ\", count: int=147):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"xelebechigyxulequ\", count=147):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_43",
    "sat": "def sat(substrings: List[str], s: str=\"dasyloduthumaxyxekac\", count: int=205):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"dasyloduthumaxyxekac\", count=205):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_44",
    "sat": "def sat(substrings: List[str], s: str=\"quibadypymucugewetextesedabifumybalujubu\", count: int=798):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"quibadypymucugewetextesedabifumybalujubu\", count=798):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_45",
    "sat": "def sat(substrings: List[str], s: str=\"cyxylahaxyvuxovuwe\", count: int=163):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"cyxylahaxyvuxovuwe\", count=163):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_46",
    "sat": "def sat(substrings: List[str], s: str=\"dudyvurithiquafojysothymobachechacholipetatextab\", count: int=1144):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"dudyvurithiquafojysothymobachechacholipetatextab\", count=1144):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_47",
    "sat": "def sat(substrings: List[str], s: str=\"ricafuquutimudycycenyzahicaja\", count: int=419):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"ricafuquutimudycycenyzahicaja\", count=419):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_48",
    "sat": "def sat(substrings: List[str], s: str=\"jumytextehiwyfafimydogemul\", count: int=340):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"jumytextehiwyfafimydogemul\", count=340):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_49",
    "sat": "def sat(substrings: List[str], s: str=\"minihichixychechymakuzochilenag\", count: int=475):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"minihichixychechymakuzochilenag\", count=475):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_50",
    "sat": "def sat(substrings: List[str], s: str=\"golazecudaperisychasevirepomosaryrefath\", count: int=760):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"golazecudaperisychasevirepomosaryrefath\", count=760):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_51",
    "sat": "def sat(substrings: List[str], s: str=\"fufidotextidukasuvafinebimeluferonunugitesyb\", count: int=961):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"fufidotextidukasuvafinebimeluferonunugitesyb\", count=961):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_52",
    "sat": "def sat(substrings: List[str], s: str=\"rikimabichoxynixucesaxivewomiki\", count: int=480):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"rikimabichoxynixucesaxivewomiki\", count=480):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_53",
    "sat": "def sat(substrings: List[str], s: str=\"mujydyjoxuruxoquo\", count: int=146):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"mujydyjoxuruxoquo\", count=146):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_54",
    "sat": "def sat(substrings: List[str], s: str=\"wylibewukasukyzokahyquot\", count: int=290):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"wylibewukasukyzokahyquot\", count=290):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_55",
    "sat": "def sat(substrings: List[str], s: str=\"chetojokucebobudibemythadythy\", count: int=418):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"chetojokucebobudibemythadythy\", count=418):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_56",
    "sat": "def sat(substrings: List[str], s: str=\"chemywewavatextuzito\", count: int=205):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"chemywewavatextuzito\", count=205):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_57",
    "sat": "def sat(substrings: List[str], s: str=\"xalutextobichydychufobuxo\", count: int=313):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"xalutextobichydychufobuxo\", count=313):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_58",
    "sat": "def sat(substrings: List[str], s: str=\"vezegabufipyjedocoquevasowafufetextofixabile\", count: int=965):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"vezegabufipyjedocoquevasowafufetextofixabile\", count=965):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_59",
    "sat": "def sat(substrings: List[str], s: str=\"machutolet\", count: int=55):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"machutolet\", count=55):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_60",
    "sat": "def sat(substrings: List[str], s: str=\"manochychudutuquicutextyquygequugyquaq\", count: int=712):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"manochychudutuquicutextyquygequugyquaq\", count=712):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_61",
    "sat": "def sat(substrings: List[str], s: str=\"textawyjuchulopegasaditihobipuwib\", count: int=547):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"textawyjuchulopegasaditihobipuwib\", count=547):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_62",
    "sat": "def sat(substrings: List[str], s: str=\"bytythipufudepomechowyluthedatextivytextobahoquuji\", count: int=1236):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"bytythipufudepomechowyluthedatextivytextobahoquuji\", count=1236):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_63",
    "sat": "def sat(substrings: List[str], s: str=\"nesevodetarisijuchydojevite\", count: int=366):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"nesevodetarisijuchydojevite\", count=366):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_64",
    "sat": "def sat(substrings: List[str], s: str=\"cimokubudabutyfuxegagycodapitusybuvyv\", count: int=682):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"cimokubudabutyfuxegagycodapitusybuvyv\", count=682):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_65",
    "sat": "def sat(substrings: List[str], s: str=\"gukuxythezevozuvywezetolawiquyquyt\", count: int=571):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"gukuxythezevozuvywezetolawiquyquyt\", count=571):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_66",
    "sat": "def sat(substrings: List[str], s: str=\"vochifozypohorikumugiwasi\", count: int=318):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"vochifozypohorikumugiwasi\", count=318):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_67",
    "sat": "def sat(substrings: List[str], s: str=\"tenomaquapulukyfibohymawequochenijidekuthuluce\", count: int=1050):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"tenomaquapulukyfibohymawequochenijidekuthuluce\", count=1050):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_68",
    "sat": "def sat(substrings: List[str], s: str=\"mylyluthagymuhydebidanyjy\", count: int=314):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"mylyluthagymuhydebidanyjy\", count=314):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_69",
    "sat": "def sat(substrings: List[str], s: str=\"chozubabodujazutextijathykupoxylusethas\", count: int=757):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"chozubabodujazutextijathykupoxylusethas\", count=757):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_70",
    "sat": "def sat(substrings: List[str], s: str=\"gorex\", count: int=16):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"gorex\", count=16):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_71",
    "sat": "def sat(substrings: List[str], s: str=\"hyvug\", count: int=16):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"hyvug\", count=16):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_72",
    "sat": "def sat(substrings: List[str], s: str=\"lyb\", count: int=7):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"lyb\", count=7):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_73",
    "sat": "def sat(substrings: List[str], s: str=\"cyj\", count: int=7):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"cyj\", count=7):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_74",
    "sat": "def sat(substrings: List[str], s: str=\"vychote\", count: int=29):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"vychote\", count=29):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_75",
    "sat": "def sat(substrings: List[str], s: str=\"gubewafelynubemithopewiliq\", count: int=339):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"gubewafelynubemithopewiliq\", count=339):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_76",
    "sat": "def sat(substrings: List[str], s: str=\"pexitusetidobugigomithitextyzomichiwawute\", count: int=831):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"pexitusetidobugigomithitextyzomichiwawute\", count=831):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_77",
    "sat": "def sat(substrings: List[str], s: str=\"cemuquociridyquyz\", count: int=147):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"cemuquociridyquyz\", count=147):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_78",
    "sat": "def sat(substrings: List[str], s: str=\"modytydosytavubiginacythehethytevotitextydanyfony\", count: int=1185):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"modytydosytavubiginacythehethytevotitextydanyfony\", count=1185):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_79",
    "sat": "def sat(substrings: List[str], s: str=\"wusyxaxucagathipalyjeguquechalobiritycythiriluzuch\", count: int=1237):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"wusyxaxucagathipalyjeguquechalobiritycythiriluzuch\", count=1237):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_80",
    "sat": "def sat(substrings: List[str], s: str=\"bijuthucabuhuquurimybomysuhevi\", count: int=449):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"bijuthucabuhuquurimybomysuhevi\", count=449):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_81",
    "sat": "def sat(substrings: List[str], s: str=\"xitextigupimikylycefibudohevy\", count: int=425):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"xitextigupimikylycefibudohevy\", count=425):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_82",
    "sat": "def sat(substrings: List[str], s: str=\"xesygyjurutorelavehekejuqualanebosarafechynagev\", count: int=1100):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"xesygyjurutorelavehekejuqualanebosarafechynagev\", count=1100):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_83",
    "sat": "def sat(substrings: List[str], s: str=\"koquywuzinuzunynuw\", count: int=161):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"koquywuzinuzunynuw\", count=161):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_84",
    "sat": "def sat(substrings: List[str], s: str=\"kobivafujetekiquupugaby\", count: int=269):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"kobivafujetekiquupugaby\", count=269):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_85",
    "sat": "def sat(substrings: List[str], s: str=\"textoxythithazafechecathuch\", count: int=360):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"textoxythithazafechecathuch\", count=360):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_86",
    "sat": "def sat(substrings: List[str], s: str=\"quuchyzisethajachoragiconineku\", count: int=452):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"quuchyzisethajachoragiconineku\", count=452):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_87",
    "sat": "def sat(substrings: List[str], s: str=\"fazogythywyb\", count: int=77):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"fazogythywyb\", count=77):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_88",
    "sat": "def sat(substrings: List[str], s: str=\"hezichazyterasecumivethifivurazizi\", count: int=571):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"hezichazyterasecumivethifivurazizi\", count=571):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_89",
    "sat": "def sat(substrings: List[str], s: str=\"kutex\", count: int=16):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"kutex\", count=16):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_90",
    "sat": "def sat(substrings: List[str], s: str=\"xokatufimemythis\", count: int=134):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"xokatufimemythis\", count=134):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_91",
    "sat": "def sat(substrings: List[str], s: str=\"boquovynybedojechidixexogevabigusuvebotextosucyle\", count: int=1193):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"boquovynybedojechidixexogevabigusuvebotextosucyle\", count=1193):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_92",
    "sat": "def sat(substrings: List[str], s: str=\"fapidytextathihetazanagid\", count: int=312):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"fapidytextathihetazanagid\", count=312):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_93",
    "sat": "def sat(substrings: List[str], s: str=\"chimagaj\", count: int=36):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"chimagaj\", count=36):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_94",
    "sat": "def sat(substrings: List[str], s: str=\"pypycirotextitevynatharufuwawanynaza\", count: int=642):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"pypycirotextitevynatharufuwawanynaza\", count=642):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_95",
    "sat": "def sat(substrings: List[str], s: str=\"behurijotextasixocajosapunitextojuhosyfuze\", count: int=872):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"behurijotextasixocajosapunitextojuhosyfuze\", count=872):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_96",
    "sat": "def sat(substrings: List[str], s: str=\"levejakuthihejyjachipexarobochajew\", count: int=576):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"levejakuthihejyjachipexarobochajew\", count=576):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_97",
    "sat": "def sat(substrings: List[str], s: str=\"textaxusajix\", count: int=75):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"textaxusajix\", count=75):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_98",
    "sat": "def sat(substrings: List[str], s: str=\"curetomagodisaquywizequanutexto\", count: int=482):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"curetomagodisaquywizequanutexto\", count=482):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "StrIn2_99",
    "sat": "def sat(substrings: List[str], s: str=\"zoquebibijythych\", count: int=132):\n    assert type(substrings) is list and all(type(a) is str for a in substrings), 'substrings must be of type List[str]'\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "sols": [
      "def sol(s=\"zoquebibijythych\", count=132):\n    return [\"\"] + sorted({s[j:i] for i in range(len(s)+1) for j in range(i)})"
    ]
  },
  {
    "name": "IntNeg_0",
    "sat": "def sat(x: int, a: int=93252338):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=93252338):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_1",
    "sat": "def sat(x: int, a: int=4049686500912271):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=4049686500912271):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_2",
    "sat": "def sat(x: int, a: int=-5265448566146980):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-5265448566146980):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_3",
    "sat": "def sat(x: int, a: int=-4834665945138205):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-4834665945138205):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_4",
    "sat": "def sat(x: int, a: int=-5823517687190129):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-5823517687190129):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_5",
    "sat": "def sat(x: int, a: int=1515808234018224):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=1515808234018224):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_6",
    "sat": "def sat(x: int, a: int=1020926640036032):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=1020926640036032):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_7",
    "sat": "def sat(x: int, a: int=1711287852473850):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=1711287852473850):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_8",
    "sat": "def sat(x: int, a: int=3343289863649145):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=3343289863649145):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_9",
    "sat": "def sat(x: int, a: int=824607560812449):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=824607560812449):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_10",
    "sat": "def sat(x: int, a: int=8831791539406373):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=8831791539406373):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_11",
    "sat": "def sat(x: int, a: int=-3908418417481602):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-3908418417481602):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_12",
    "sat": "def sat(x: int, a: int=1480297907950597):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=1480297907950597):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_13",
    "sat": "def sat(x: int, a: int=6965279331550577):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=6965279331550577):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_14",
    "sat": "def sat(x: int, a: int=-328705248614626):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-328705248614626):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_15",
    "sat": "def sat(x: int, a: int=-8463430186393482):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-8463430186393482):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_16",
    "sat": "def sat(x: int, a: int=-6548541105601070):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-6548541105601070):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_17",
    "sat": "def sat(x: int, a: int=9544176287025401):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=9544176287025401):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_18",
    "sat": "def sat(x: int, a: int=-8253950196748519):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-8253950196748519):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_19",
    "sat": "def sat(x: int, a: int=-3995609174861928):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-3995609174861928):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_20",
    "sat": "def sat(x: int, a: int=6330204275677391):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=6330204275677391):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_21",
    "sat": "def sat(x: int, a: int=3016133444904903):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=3016133444904903):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_22",
    "sat": "def sat(x: int, a: int=-4428765980164034):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-4428765980164034):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_23",
    "sat": "def sat(x: int, a: int=8798162926986770):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=8798162926986770):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_24",
    "sat": "def sat(x: int, a: int=6565153951349085):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=6565153951349085):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_25",
    "sat": "def sat(x: int, a: int=970202122200432):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=970202122200432):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_26",
    "sat": "def sat(x: int, a: int=216597944649154):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=216597944649154):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_27",
    "sat": "def sat(x: int, a: int=-8889668527248553):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-8889668527248553):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_28",
    "sat": "def sat(x: int, a: int=6227774951416611):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=6227774951416611):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_29",
    "sat": "def sat(x: int, a: int=7771530129592160):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=7771530129592160):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_30",
    "sat": "def sat(x: int, a: int=-2312278123442477):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-2312278123442477):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_31",
    "sat": "def sat(x: int, a: int=1375607260027547):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=1375607260027547):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_32",
    "sat": "def sat(x: int, a: int=-7662892990871442):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-7662892990871442):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_33",
    "sat": "def sat(x: int, a: int=-6265625391434880):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-6265625391434880):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_34",
    "sat": "def sat(x: int, a: int=6972248941960678):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=6972248941960678):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_35",
    "sat": "def sat(x: int, a: int=-3412206620903917):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-3412206620903917):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_36",
    "sat": "def sat(x: int, a: int=1813813948845122):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=1813813948845122):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_37",
    "sat": "def sat(x: int, a: int=-9552041775731022):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-9552041775731022):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_38",
    "sat": "def sat(x: int, a: int=6529170848210281):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=6529170848210281):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_39",
    "sat": "def sat(x: int, a: int=-912655232142203):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-912655232142203):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_40",
    "sat": "def sat(x: int, a: int=7451465328837345):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=7451465328837345):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_41",
    "sat": "def sat(x: int, a: int=-3274179569091910):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-3274179569091910):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_42",
    "sat": "def sat(x: int, a: int=-8654649332251403):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-8654649332251403):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_43",
    "sat": "def sat(x: int, a: int=-2136316702874554):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-2136316702874554):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_44",
    "sat": "def sat(x: int, a: int=-4602673419583576):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-4602673419583576):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_45",
    "sat": "def sat(x: int, a: int=1439664187104192):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=1439664187104192):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_46",
    "sat": "def sat(x: int, a: int=-5775950316129941):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-5775950316129941):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_47",
    "sat": "def sat(x: int, a: int=-8316887540758520):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-8316887540758520):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_48",
    "sat": "def sat(x: int, a: int=4571832788343213):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=4571832788343213):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_49",
    "sat": "def sat(x: int, a: int=2093362586491848):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=2093362586491848):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_50",
    "sat": "def sat(x: int, a: int=-1071704637055363):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-1071704637055363):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_51",
    "sat": "def sat(x: int, a: int=7019617272239775):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=7019617272239775):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_52",
    "sat": "def sat(x: int, a: int=-3243349313993057):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-3243349313993057):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_53",
    "sat": "def sat(x: int, a: int=-8194228863523756):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-8194228863523756):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_54",
    "sat": "def sat(x: int, a: int=-9649129871954908):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-9649129871954908):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_55",
    "sat": "def sat(x: int, a: int=1840558656267496):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=1840558656267496):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_56",
    "sat": "def sat(x: int, a: int=4704584706415406):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=4704584706415406):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_57",
    "sat": "def sat(x: int, a: int=4874325989536359):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=4874325989536359):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_58",
    "sat": "def sat(x: int, a: int=-1528378506581212):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-1528378506581212):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_59",
    "sat": "def sat(x: int, a: int=-1538119987820200):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-1538119987820200):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_60",
    "sat": "def sat(x: int, a: int=5932519183785948):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=5932519183785948):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_61",
    "sat": "def sat(x: int, a: int=-572077293968815):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-572077293968815):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_62",
    "sat": "def sat(x: int, a: int=1874422945166484):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=1874422945166484):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_63",
    "sat": "def sat(x: int, a: int=4046633771006104):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=4046633771006104):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_64",
    "sat": "def sat(x: int, a: int=-383395876758169):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-383395876758169):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_65",
    "sat": "def sat(x: int, a: int=3438388971697598):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=3438388971697598):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_66",
    "sat": "def sat(x: int, a: int=-9856323935147437):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-9856323935147437):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_67",
    "sat": "def sat(x: int, a: int=5808665517974942):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=5808665517974942):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_68",
    "sat": "def sat(x: int, a: int=-6251027587067602):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-6251027587067602):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_69",
    "sat": "def sat(x: int, a: int=-5017390140109283):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-5017390140109283):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_70",
    "sat": "def sat(x: int, a: int=-1492226155408030):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-1492226155408030):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_71",
    "sat": "def sat(x: int, a: int=-1406000497598913):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-1406000497598913):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_72",
    "sat": "def sat(x: int, a: int=4226665495816998):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=4226665495816998):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_73",
    "sat": "def sat(x: int, a: int=-9091237011590716):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-9091237011590716):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_74",
    "sat": "def sat(x: int, a: int=3319290646672702):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=3319290646672702):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_75",
    "sat": "def sat(x: int, a: int=-6819351671233352):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-6819351671233352):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_76",
    "sat": "def sat(x: int, a: int=9262820077261190):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=9262820077261190):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_77",
    "sat": "def sat(x: int, a: int=8146877449871029):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=8146877449871029):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_78",
    "sat": "def sat(x: int, a: int=-958659790924453):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-958659790924453):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_79",
    "sat": "def sat(x: int, a: int=-6125489601545390):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-6125489601545390):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_80",
    "sat": "def sat(x: int, a: int=545547490122479):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=545547490122479):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_81",
    "sat": "def sat(x: int, a: int=6553729913061302):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=6553729913061302):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_82",
    "sat": "def sat(x: int, a: int=-1445893531364802):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-1445893531364802):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_83",
    "sat": "def sat(x: int, a: int=8103961172547933):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=8103961172547933):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_84",
    "sat": "def sat(x: int, a: int=9585120435701994):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=9585120435701994):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_85",
    "sat": "def sat(x: int, a: int=7123699936509180):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=7123699936509180):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_86",
    "sat": "def sat(x: int, a: int=-1075896241818245):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-1075896241818245):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_87",
    "sat": "def sat(x: int, a: int=-495664104291832):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-495664104291832):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_88",
    "sat": "def sat(x: int, a: int=-6875055257842503):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-6875055257842503):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_89",
    "sat": "def sat(x: int, a: int=-7778480381461728):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-7778480381461728):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_90",
    "sat": "def sat(x: int, a: int=7466297199897744):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=7466297199897744):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_91",
    "sat": "def sat(x: int, a: int=-8153304655179570):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-8153304655179570):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_92",
    "sat": "def sat(x: int, a: int=4299779097608628):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=4299779097608628):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_93",
    "sat": "def sat(x: int, a: int=-5518983575645908):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-5518983575645908):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_94",
    "sat": "def sat(x: int, a: int=4436937978294055):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=4436937978294055):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_95",
    "sat": "def sat(x: int, a: int=4545558288137635):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=4545558288137635):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_96",
    "sat": "def sat(x: int, a: int=-6285892181826825):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-6285892181826825):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_97",
    "sat": "def sat(x: int, a: int=7546205198448299):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=7546205198448299):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_98",
    "sat": "def sat(x: int, a: int=-4500172544060429):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=-4500172544060429):\n    return - a"
    ]
  },
  {
    "name": "IntNeg_99",
    "sat": "def sat(x: int, a: int=9265170914210531):\n    assert type(x) is int, 'x must be of type int'\n    return -x == a",
    "sols": [
      "def sol(a=9265170914210531):\n    return - a"
    ]
  },
  {
    "name": "IntSum_0",
    "sat": "def sat(x: int, a: int=1073258, b: int=72352549):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=1073258, b=72352549):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_1",
    "sat": "def sat(x: int, a: int=-4409639721754490, b: int=-6766299988946046):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-4409639721754490, b=-6766299988946046):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_2",
    "sat": "def sat(x: int, a: int=7510482572021838, b: int=9866493058900717):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=7510482572021838, b=9866493058900717):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_3",
    "sat": "def sat(x: int, a: int=8545201987196955, b: int=1459110478225232):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=8545201987196955, b=1459110478225232):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_4",
    "sat": "def sat(x: int, a: int=1988965450726496, b: int=-1290612934183996):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=1988965450726496, b=-1290612934183996):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_5",
    "sat": "def sat(x: int, a: int=-6962491706548488, b: int=-99525792397132):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-6962491706548488, b=-99525792397132):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_6",
    "sat": "def sat(x: int, a: int=-263718410072670, b: int=-4155957958452126):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-263718410072670, b=-4155957958452126):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_7",
    "sat": "def sat(x: int, a: int=-1271342619889177, b: int=282195446595479):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-1271342619889177, b=282195446595479):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_8",
    "sat": "def sat(x: int, a: int=9186767397136658, b: int=9447893866975791):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=9186767397136658, b=9447893866975791):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_9",
    "sat": "def sat(x: int, a: int=1183108251630020, b: int=-8971593062694477):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=1183108251630020, b=-8971593062694477):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_10",
    "sat": "def sat(x: int, a: int=5662241054365577, b: int=1034565341777049):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=5662241054365577, b=1034565341777049):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_11",
    "sat": "def sat(x: int, a: int=804948143804045, b: int=-3919939857943417):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=804948143804045, b=-3919939857943417):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_12",
    "sat": "def sat(x: int, a: int=2692639327095518, b: int=-6125085131248062):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=2692639327095518, b=-6125085131248062):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_13",
    "sat": "def sat(x: int, a: int=3435974522776075, b: int=5646197881315722):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=3435974522776075, b=5646197881315722):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_14",
    "sat": "def sat(x: int, a: int=5236875537822383, b: int=-1517707228858482):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=5236875537822383, b=-1517707228858482):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_15",
    "sat": "def sat(x: int, a: int=6796598399547814, b: int=831893911430845):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=6796598399547814, b=831893911430845):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_16",
    "sat": "def sat(x: int, a: int=-9260158776573489, b: int=-5193847620488180):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-9260158776573489, b=-5193847620488180):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_17",
    "sat": "def sat(x: int, a: int=1921838318067271, b: int=1313904720010914):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=1921838318067271, b=1313904720010914):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_18",
    "sat": "def sat(x: int, a: int=605616955178922, b: int=3343013903195846):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=605616955178922, b=3343013903195846):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_19",
    "sat": "def sat(x: int, a: int=-8983547072237227, b: int=-7237018695280940):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-8983547072237227, b=-7237018695280940):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_20",
    "sat": "def sat(x: int, a: int=-9440235014042015, b: int=-3797633556545718):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-9440235014042015, b=-3797633556545718):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_21",
    "sat": "def sat(x: int, a: int=-2746005543915653, b: int=-3961962157213078):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-2746005543915653, b=-3961962157213078):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_22",
    "sat": "def sat(x: int, a: int=3207976830003252, b: int=-5389035344252023):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=3207976830003252, b=-5389035344252023):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_23",
    "sat": "def sat(x: int, a: int=-4144993317324894, b: int=4417296780555714):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-4144993317324894, b=4417296780555714):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_24",
    "sat": "def sat(x: int, a: int=6653358585033780, b: int=-388926187118554):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=6653358585033780, b=-388926187118554):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_25",
    "sat": "def sat(x: int, a: int=1958977562678763, b: int=4179557174633391):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=1958977562678763, b=4179557174633391):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_26",
    "sat": "def sat(x: int, a: int=1358306139638445, b: int=-3650217039895239):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=1358306139638445, b=-3650217039895239):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_27",
    "sat": "def sat(x: int, a: int=-4455827532285505, b: int=3621156396586793):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-4455827532285505, b=3621156396586793):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_28",
    "sat": "def sat(x: int, a: int=7265146404326593, b: int=-7220938538858142):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=7265146404326593, b=-7220938538858142):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_29",
    "sat": "def sat(x: int, a: int=6886011806195574, b: int=-5163833572451508):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=6886011806195574, b=-5163833572451508):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_30",
    "sat": "def sat(x: int, a: int=5955598145005023, b: int=5886411936542839):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=5955598145005023, b=5886411936542839):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_31",
    "sat": "def sat(x: int, a: int=3268526774735790, b: int=1180210464470875):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=3268526774735790, b=1180210464470875):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_32",
    "sat": "def sat(x: int, a: int=9240992897376875, b: int=-6335963730986544):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=9240992897376875, b=-6335963730986544):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_33",
    "sat": "def sat(x: int, a: int=-6058884011288907, b: int=8164844820836564):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-6058884011288907, b=8164844820836564):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_34",
    "sat": "def sat(x: int, a: int=5850363706064612, b: int=5643318701250916):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=5850363706064612, b=5643318701250916):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_35",
    "sat": "def sat(x: int, a: int=9035842712128459, b: int=-6854723357693876):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=9035842712128459, b=-6854723357693876):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_36",
    "sat": "def sat(x: int, a: int=-9524969272432164, b: int=-5269286254514463):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-9524969272432164, b=-5269286254514463):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_37",
    "sat": "def sat(x: int, a: int=-2253795786473905, b: int=-9577038890341933):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-2253795786473905, b=-9577038890341933):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_38",
    "sat": "def sat(x: int, a: int=2413845007387272, b: int=-7410600467895359):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=2413845007387272, b=-7410600467895359):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_39",
    "sat": "def sat(x: int, a: int=1103630004864431, b: int=-2084981121254740):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=1103630004864431, b=-2084981121254740):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_40",
    "sat": "def sat(x: int, a: int=-7724280675268253, b: int=-4979431024605402):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-7724280675268253, b=-4979431024605402):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_41",
    "sat": "def sat(x: int, a: int=-8613586120794042, b: int=-2411907696849118):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-8613586120794042, b=-2411907696849118):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_42",
    "sat": "def sat(x: int, a: int=7087796808317722, b: int=-6990576499426818):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=7087796808317722, b=-6990576499426818):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_43",
    "sat": "def sat(x: int, a: int=1740284033565158, b: int=-4636677738383585):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=1740284033565158, b=-4636677738383585):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_44",
    "sat": "def sat(x: int, a: int=3331748990360790, b: int=-3372366664960775):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=3331748990360790, b=-3372366664960775):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_45",
    "sat": "def sat(x: int, a: int=-2260740247470366, b: int=-4395892886587979):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-2260740247470366, b=-4395892886587979):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_46",
    "sat": "def sat(x: int, a: int=-6217111405639552, b: int=624084565374082):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-6217111405639552, b=624084565374082):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_47",
    "sat": "def sat(x: int, a: int=1098150295803474, b: int=8002091328734926):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=1098150295803474, b=8002091328734926):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_48",
    "sat": "def sat(x: int, a: int=8541551063019131, b: int=-3443979310397243):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=8541551063019131, b=-3443979310397243):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_49",
    "sat": "def sat(x: int, a: int=-5565430116799945, b: int=-8938174329036373):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-5565430116799945, b=-8938174329036373):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_50",
    "sat": "def sat(x: int, a: int=-7865583595939134, b: int=-5577915358568601):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-7865583595939134, b=-5577915358568601):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_51",
    "sat": "def sat(x: int, a: int=-1664672270291639, b: int=9230373627299965):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-1664672270291639, b=9230373627299965):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_52",
    "sat": "def sat(x: int, a: int=8816453967140458, b: int=-9211642701041008):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=8816453967140458, b=-9211642701041008):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_53",
    "sat": "def sat(x: int, a: int=9743805238639690, b: int=-4692631546377630):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=9743805238639690, b=-4692631546377630):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_54",
    "sat": "def sat(x: int, a: int=6060262477249609, b: int=-4338833060874323):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=6060262477249609, b=-4338833060874323):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_55",
    "sat": "def sat(x: int, a: int=-3107451086873269, b: int=-2205658047715543):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-3107451086873269, b=-2205658047715543):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_56",
    "sat": "def sat(x: int, a: int=3790676807352179, b: int=3306137983699136):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=3790676807352179, b=3306137983699136):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_57",
    "sat": "def sat(x: int, a: int=7347581405931927, b: int=-5164068125709092):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=7347581405931927, b=-5164068125709092):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_58",
    "sat": "def sat(x: int, a: int=5060275913515280, b: int=9964102297995087):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=5060275913515280, b=9964102297995087):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_59",
    "sat": "def sat(x: int, a: int=-4374632673591964, b: int=-8715153262809339):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-4374632673591964, b=-8715153262809339):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_60",
    "sat": "def sat(x: int, a: int=-9674193314289050, b: int=817080542223189):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-9674193314289050, b=817080542223189):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_61",
    "sat": "def sat(x: int, a: int=5577126108309590, b: int=-7844912347113552):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=5577126108309590, b=-7844912347113552):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_62",
    "sat": "def sat(x: int, a: int=2944256667973472, b: int=-7677785740602711):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=2944256667973472, b=-7677785740602711):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_63",
    "sat": "def sat(x: int, a: int=-210602496353517, b: int=1084428877465377):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-210602496353517, b=1084428877465377):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_64",
    "sat": "def sat(x: int, a: int=829214521970352, b: int=369281003248895):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=829214521970352, b=369281003248895):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_65",
    "sat": "def sat(x: int, a: int=-5553353398245018, b: int=-1218234340040294):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-5553353398245018, b=-1218234340040294):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_66",
    "sat": "def sat(x: int, a: int=-3630645776077372, b: int=5162238773395246):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-3630645776077372, b=5162238773395246):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_67",
    "sat": "def sat(x: int, a: int=-3445742663857908, b: int=-6081169823537957):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-3445742663857908, b=-6081169823537957):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_68",
    "sat": "def sat(x: int, a: int=2010709249175104, b: int=4551187564945131):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=2010709249175104, b=4551187564945131):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_69",
    "sat": "def sat(x: int, a: int=7893075072870417, b: int=-7859356091601269):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=7893075072870417, b=-7859356091601269):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_70",
    "sat": "def sat(x: int, a: int=-9850453636285667, b: int=-8455780937339901):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-9850453636285667, b=-8455780937339901):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_71",
    "sat": "def sat(x: int, a: int=2095199830897295, b: int=-7080843551569540):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=2095199830897295, b=-7080843551569540):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_72",
    "sat": "def sat(x: int, a: int=-5397519555268496, b: int=-8358400431548854):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-5397519555268496, b=-8358400431548854):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_73",
    "sat": "def sat(x: int, a: int=-5949892335518304, b: int=-3326165246622962):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-5949892335518304, b=-3326165246622962):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_74",
    "sat": "def sat(x: int, a: int=-4051859837555853, b: int=-6531841836015451):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-4051859837555853, b=-6531841836015451):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_75",
    "sat": "def sat(x: int, a: int=-4573262222971859, b: int=9809454003191073):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-4573262222971859, b=9809454003191073):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_76",
    "sat": "def sat(x: int, a: int=1979668173504818, b: int=-8311069750964119):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=1979668173504818, b=-8311069750964119):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_77",
    "sat": "def sat(x: int, a: int=-3058673916442260, b: int=-3770451234001593):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-3058673916442260, b=-3770451234001593):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_78",
    "sat": "def sat(x: int, a: int=7394721162614377, b: int=-9149107704345005):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=7394721162614377, b=-9149107704345005):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_79",
    "sat": "def sat(x: int, a: int=8466595493122591, b: int=4646298107030432):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=8466595493122591, b=4646298107030432):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_80",
    "sat": "def sat(x: int, a: int=1668423822297355, b: int=-6905647280490101):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=1668423822297355, b=-6905647280490101):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_81",
    "sat": "def sat(x: int, a: int=-6773907447101170, b: int=-8995161019884767):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-6773907447101170, b=-8995161019884767):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_82",
    "sat": "def sat(x: int, a: int=4441787553210327, b: int=-841809964741810):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=4441787553210327, b=-841809964741810):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_83",
    "sat": "def sat(x: int, a: int=-9316533206986199, b: int=1935326448626997):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-9316533206986199, b=1935326448626997):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_84",
    "sat": "def sat(x: int, a: int=-4663480170029963, b: int=-5030341098513756):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-4663480170029963, b=-5030341098513756):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_85",
    "sat": "def sat(x: int, a: int=-2449239364162147, b: int=-4127616012712377):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-2449239364162147, b=-4127616012712377):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_86",
    "sat": "def sat(x: int, a: int=-7818173217872997, b: int=-9427683746571657):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-7818173217872997, b=-9427683746571657):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_87",
    "sat": "def sat(x: int, a: int=-4855950578370883, b: int=-9578428709259594):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-4855950578370883, b=-9578428709259594):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_88",
    "sat": "def sat(x: int, a: int=-276284542657236, b: int=-7418100930042564):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-276284542657236, b=-7418100930042564):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_89",
    "sat": "def sat(x: int, a: int=-6108099414428228, b: int=3722989934689499):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-6108099414428228, b=3722989934689499):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_90",
    "sat": "def sat(x: int, a: int=9033195116946429, b: int=670303510833888):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=9033195116946429, b=670303510833888):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_91",
    "sat": "def sat(x: int, a: int=7962063778295610, b: int=-1119025028315259):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=7962063778295610, b=-1119025028315259):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_92",
    "sat": "def sat(x: int, a: int=3672555538106030, b: int=-3514724784968627):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=3672555538106030, b=-3514724784968627):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_93",
    "sat": "def sat(x: int, a: int=4285139266811430, b: int=-4589901824960393):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=4285139266811430, b=-4589901824960393):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_94",
    "sat": "def sat(x: int, a: int=9713492376577143, b: int=723646320547486):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=9713492376577143, b=723646320547486):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_95",
    "sat": "def sat(x: int, a: int=4624363988916106, b: int=-6466843077891046):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=4624363988916106, b=-6466843077891046):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_96",
    "sat": "def sat(x: int, a: int=2968250879814551, b: int=9276601126285623):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=2968250879814551, b=9276601126285623):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_97",
    "sat": "def sat(x: int, a: int=3410630331406741, b: int=7031333988373707):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=3410630331406741, b=7031333988373707):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_98",
    "sat": "def sat(x: int, a: int=6851155009031152, b: int=4826656934467250):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=6851155009031152, b=4826656934467250):\n    return b - a"
    ]
  },
  {
    "name": "IntSum_99",
    "sat": "def sat(x: int, a: int=-1721445506858475, b: int=3845185441145164):\n    assert type(x) is int, 'x must be of type int'\n    return a + x == b",
    "sols": [
      "def sol(a=-1721445506858475, b=3845185441145164):\n    return b - a"
    ]
  },
  {
    "name": "IntSub_0",
    "sat": "def sat(x: int, a: int=-382, b: int=14546310):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-382, b=14546310):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_1",
    "sat": "def sat(x: int, a: int=-5696912309070896, b: int=-4935938808607900):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-5696912309070896, b=-4935938808607900):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_2",
    "sat": "def sat(x: int, a: int=-8504724235682997, b: int=-9850951821603470):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-8504724235682997, b=-9850951821603470):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_3",
    "sat": "def sat(x: int, a: int=-3040032028080806, b: int=5268210473342776):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-3040032028080806, b=5268210473342776):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_4",
    "sat": "def sat(x: int, a: int=-7605080516988163, b: int=3120045344753124):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-7605080516988163, b=3120045344753124):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_5",
    "sat": "def sat(x: int, a: int=-3663966793671135, b: int=9608517444279546):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-3663966793671135, b=9608517444279546):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_6",
    "sat": "def sat(x: int, a: int=2467817229510006, b: int=3499955809256602):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=2467817229510006, b=3499955809256602):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_7",
    "sat": "def sat(x: int, a: int=8264299051499720, b: int=1047316249324030):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=8264299051499720, b=1047316249324030):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_8",
    "sat": "def sat(x: int, a: int=-138875504353782, b: int=-7831948770430099):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-138875504353782, b=-7831948770430099):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_9",
    "sat": "def sat(x: int, a: int=1104335871996829, b: int=-3379839223384184):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=1104335871996829, b=-3379839223384184):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_10",
    "sat": "def sat(x: int, a: int=-9966527463282908, b: int=-2751074029993235):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-9966527463282908, b=-2751074029993235):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_11",
    "sat": "def sat(x: int, a: int=180101612514996, b: int=7239577044548616):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=180101612514996, b=7239577044548616):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_12",
    "sat": "def sat(x: int, a: int=-7409837144445015, b: int=-2557025190262955):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-7409837144445015, b=-2557025190262955):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_13",
    "sat": "def sat(x: int, a: int=-2123258122590710, b: int=2045146555467338):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-2123258122590710, b=2045146555467338):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_14",
    "sat": "def sat(x: int, a: int=-195886009089824, b: int=8726064336510640):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-195886009089824, b=8726064336510640):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_15",
    "sat": "def sat(x: int, a: int=6943760768003877, b: int=-7600559427730295):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=6943760768003877, b=-7600559427730295):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_16",
    "sat": "def sat(x: int, a: int=-975344380590084, b: int=-5435926004355733):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-975344380590084, b=-5435926004355733):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_17",
    "sat": "def sat(x: int, a: int=-6220141428157318, b: int=-4317800378648244):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-6220141428157318, b=-4317800378648244):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_18",
    "sat": "def sat(x: int, a: int=877876255118035, b: int=-113320845690693):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=877876255118035, b=-113320845690693):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_19",
    "sat": "def sat(x: int, a: int=2958624362448687, b: int=-8407693224510530):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=2958624362448687, b=-8407693224510530):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_20",
    "sat": "def sat(x: int, a: int=-5831985456776148, b: int=4304813030615949):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-5831985456776148, b=4304813030615949):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_21",
    "sat": "def sat(x: int, a: int=-6816805206027374, b: int=5764294017022823):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-6816805206027374, b=5764294017022823):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_22",
    "sat": "def sat(x: int, a: int=220054476687399, b: int=-7241101594355512):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=220054476687399, b=-7241101594355512):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_23",
    "sat": "def sat(x: int, a: int=-3083018060565785, b: int=-2659771332333949):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-3083018060565785, b=-2659771332333949):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_24",
    "sat": "def sat(x: int, a: int=-2689479092179516, b: int=-8567293422089402):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-2689479092179516, b=-8567293422089402):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_25",
    "sat": "def sat(x: int, a: int=3674121901511358, b: int=-9842935146015473):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=3674121901511358, b=-9842935146015473):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_26",
    "sat": "def sat(x: int, a: int=-8336519629047206, b: int=-2433989398627162):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-8336519629047206, b=-2433989398627162):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_27",
    "sat": "def sat(x: int, a: int=2207608640217257, b: int=3695294385159482):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=2207608640217257, b=3695294385159482):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_28",
    "sat": "def sat(x: int, a: int=5607664315705909, b: int=8943652868586756):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=5607664315705909, b=8943652868586756):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_29",
    "sat": "def sat(x: int, a: int=9027785445103371, b: int=-773906010020097):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=9027785445103371, b=-773906010020097):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_30",
    "sat": "def sat(x: int, a: int=9981396923443132, b: int=8351742341591982):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=9981396923443132, b=8351742341591982):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_31",
    "sat": "def sat(x: int, a: int=-2206026709817811, b: int=3613612476737720):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-2206026709817811, b=3613612476737720):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_32",
    "sat": "def sat(x: int, a: int=716976667956133, b: int=514215084355092):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=716976667956133, b=514215084355092):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_33",
    "sat": "def sat(x: int, a: int=-4678244751164823, b: int=-2298483648746202):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-4678244751164823, b=-2298483648746202):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_34",
    "sat": "def sat(x: int, a: int=-8868316858195031, b: int=829706674463951):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-8868316858195031, b=829706674463951):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_35",
    "sat": "def sat(x: int, a: int=635731278481077, b: int=-7946152930418294):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=635731278481077, b=-7946152930418294):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_36",
    "sat": "def sat(x: int, a: int=-3924590945912688, b: int=4655493847473233):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-3924590945912688, b=4655493847473233):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_37",
    "sat": "def sat(x: int, a: int=6404301983271044, b: int=-4002003474044032):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=6404301983271044, b=-4002003474044032):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_38",
    "sat": "def sat(x: int, a: int=478741958183992, b: int=9455759800384462):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=478741958183992, b=9455759800384462):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_39",
    "sat": "def sat(x: int, a: int=8800691551377885, b: int=9032497546648973):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=8800691551377885, b=9032497546648973):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_40",
    "sat": "def sat(x: int, a: int=-7724043078479542, b: int=-5400835596250584):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-7724043078479542, b=-5400835596250584):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_41",
    "sat": "def sat(x: int, a: int=8635203128212679, b: int=2263755638493281):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=8635203128212679, b=2263755638493281):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_42",
    "sat": "def sat(x: int, a: int=-5428321542114534, b: int=1399043071279937):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-5428321542114534, b=1399043071279937):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_43",
    "sat": "def sat(x: int, a: int=-8543145476565254, b: int=184976302576321):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-8543145476565254, b=184976302576321):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_44",
    "sat": "def sat(x: int, a: int=-4810934015508138, b: int=8512676742142832):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-4810934015508138, b=8512676742142832):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_45",
    "sat": "def sat(x: int, a: int=9857738081923170, b: int=-2036090669470855):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=9857738081923170, b=-2036090669470855):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_46",
    "sat": "def sat(x: int, a: int=1939340002629729, b: int=-1282639362350002):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=1939340002629729, b=-1282639362350002):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_47",
    "sat": "def sat(x: int, a: int=-9294769782636235, b: int=-3708997140927272):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-9294769782636235, b=-3708997140927272):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_48",
    "sat": "def sat(x: int, a: int=9579521601293561, b: int=880304516622826):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=9579521601293561, b=880304516622826):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_49",
    "sat": "def sat(x: int, a: int=-721644285639103, b: int=-6277121754902303):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-721644285639103, b=-6277121754902303):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_50",
    "sat": "def sat(x: int, a: int=-4291433545215455, b: int=4774582313269612):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-4291433545215455, b=4774582313269612):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_51",
    "sat": "def sat(x: int, a: int=-7224896102741064, b: int=-4359595123663567):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-7224896102741064, b=-4359595123663567):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_52",
    "sat": "def sat(x: int, a: int=5726667786671250, b: int=-734964400933578):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=5726667786671250, b=-734964400933578):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_53",
    "sat": "def sat(x: int, a: int=-1980694499131273, b: int=2592599891416239):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-1980694499131273, b=2592599891416239):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_54",
    "sat": "def sat(x: int, a: int=1466195515618232, b: int=-3049728101787801):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=1466195515618232, b=-3049728101787801):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_55",
    "sat": "def sat(x: int, a: int=8288123599972308, b: int=2963988136289028):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=8288123599972308, b=2963988136289028):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_56",
    "sat": "def sat(x: int, a: int=3331463274364260, b: int=3558695580410340):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=3331463274364260, b=3558695580410340):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_57",
    "sat": "def sat(x: int, a: int=-1645879012908208, b: int=2797338117929091):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-1645879012908208, b=2797338117929091):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_58",
    "sat": "def sat(x: int, a: int=9742885915973357, b: int=7419193020625859):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=9742885915973357, b=7419193020625859):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_59",
    "sat": "def sat(x: int, a: int=9315465840572992, b: int=4832096774032200):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=9315465840572992, b=4832096774032200):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_60",
    "sat": "def sat(x: int, a: int=-8806242132708300, b: int=-1720937872546685):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-8806242132708300, b=-1720937872546685):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_61",
    "sat": "def sat(x: int, a: int=1501274999899658, b: int=5196616035205457):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=1501274999899658, b=5196616035205457):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_62",
    "sat": "def sat(x: int, a: int=-2696184846449067, b: int=8819374046592816):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-2696184846449067, b=8819374046592816):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_63",
    "sat": "def sat(x: int, a: int=-4457933730878311, b: int=-5440851338997177):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-4457933730878311, b=-5440851338997177):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_64",
    "sat": "def sat(x: int, a: int=-1822023943250978, b: int=4133341037122263):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-1822023943250978, b=4133341037122263):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_65",
    "sat": "def sat(x: int, a: int=-6997509486054072, b: int=-6564305347249275):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-6997509486054072, b=-6564305347249275):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_66",
    "sat": "def sat(x: int, a: int=-5266362162571975, b: int=623807553144623):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-5266362162571975, b=623807553144623):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_67",
    "sat": "def sat(x: int, a: int=-4115966238825293, b: int=-7551885527839948):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-4115966238825293, b=-7551885527839948):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_68",
    "sat": "def sat(x: int, a: int=7723140807148960, b: int=3870848607588322):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=7723140807148960, b=3870848607588322):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_69",
    "sat": "def sat(x: int, a: int=-799954767018004, b: int=-7561056998117861):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-799954767018004, b=-7561056998117861):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_70",
    "sat": "def sat(x: int, a: int=5079474266468168, b: int=8770384019720247):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=5079474266468168, b=8770384019720247):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_71",
    "sat": "def sat(x: int, a: int=6557600505220313, b: int=1424173530774967):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=6557600505220313, b=1424173530774967):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_72",
    "sat": "def sat(x: int, a: int=-2373030871679322, b: int=-5429847680526690):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-2373030871679322, b=-5429847680526690):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_73",
    "sat": "def sat(x: int, a: int=2659906831212985, b: int=7748370330978391):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=2659906831212985, b=7748370330978391):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_74",
    "sat": "def sat(x: int, a: int=-8370762454415880, b: int=-3341136195994017):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-8370762454415880, b=-3341136195994017):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_75",
    "sat": "def sat(x: int, a: int=9566097235063202, b: int=2825903543970155):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=9566097235063202, b=2825903543970155):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_76",
    "sat": "def sat(x: int, a: int=5474544114663364, b: int=8016173561162446):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=5474544114663364, b=8016173561162446):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_77",
    "sat": "def sat(x: int, a: int=8358377365715596, b: int=-5257329787557152):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=8358377365715596, b=-5257329787557152):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_78",
    "sat": "def sat(x: int, a: int=1258804984732360, b: int=1014084983404818):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=1258804984732360, b=1014084983404818):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_79",
    "sat": "def sat(x: int, a: int=-552013313257155, b: int=-4389622527873400):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-552013313257155, b=-4389622527873400):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_80",
    "sat": "def sat(x: int, a: int=-8864713658674605, b: int=9198115969754901):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-8864713658674605, b=9198115969754901):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_81",
    "sat": "def sat(x: int, a: int=8906328734911694, b: int=-5328701153085048):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=8906328734911694, b=-5328701153085048):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_82",
    "sat": "def sat(x: int, a: int=-6931675803016586, b: int=9899374622162237):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-6931675803016586, b=9899374622162237):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_83",
    "sat": "def sat(x: int, a: int=-2804995806613191, b: int=8280244569923528):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-2804995806613191, b=8280244569923528):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_84",
    "sat": "def sat(x: int, a: int=-8798343493455724, b: int=-4678472450390124):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-8798343493455724, b=-4678472450390124):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_85",
    "sat": "def sat(x: int, a: int=-6077455378262643, b: int=-8736470798180631):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-6077455378262643, b=-8736470798180631):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_86",
    "sat": "def sat(x: int, a: int=9561089053631512, b: int=713684617506447):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=9561089053631512, b=713684617506447):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_87",
    "sat": "def sat(x: int, a: int=-7546775761483693, b: int=-7091936527384021):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-7546775761483693, b=-7091936527384021):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_88",
    "sat": "def sat(x: int, a: int=3727696952400578, b: int=8679303039287817):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=3727696952400578, b=8679303039287817):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_89",
    "sat": "def sat(x: int, a: int=-7525851831229219, b: int=-4661719253289497):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-7525851831229219, b=-4661719253289497):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_90",
    "sat": "def sat(x: int, a: int=-8922745460541859, b: int=2052131701462799):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-8922745460541859, b=2052131701462799):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_91",
    "sat": "def sat(x: int, a: int=-1585938780181871, b: int=-4196046617103224):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-1585938780181871, b=-4196046617103224):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_92",
    "sat": "def sat(x: int, a: int=9786220641275702, b: int=3062861930465564):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=9786220641275702, b=3062861930465564):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_93",
    "sat": "def sat(x: int, a: int=5818177038167819, b: int=-3067573198380915):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=5818177038167819, b=-3067573198380915):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_94",
    "sat": "def sat(x: int, a: int=7269861277833338, b: int=7051740497367707):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=7269861277833338, b=7051740497367707):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_95",
    "sat": "def sat(x: int, a: int=8805187791050125, b: int=2703431132228212):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=8805187791050125, b=2703431132228212):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_96",
    "sat": "def sat(x: int, a: int=4549725022210103, b: int=-4879818948696250):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=4549725022210103, b=-4879818948696250):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_97",
    "sat": "def sat(x: int, a: int=8585409071371998, b: int=8652854546238980):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=8585409071371998, b=8652854546238980):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_98",
    "sat": "def sat(x: int, a: int=7391562442044153, b: int=-460870360191451):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=7391562442044153, b=-460870360191451):\n    return a + b"
    ]
  },
  {
    "name": "IntSub_99",
    "sat": "def sat(x: int, a: int=-9530543503462580, b: int=-5017869456650453):\n    assert type(x) is int, 'x must be of type int'\n    return x - a == b",
    "sols": [
      "def sol(a=-9530543503462580, b=-5017869456650453):\n    return a + b"
    ]
  },
  {
    "name": "IntSub2_0",
    "sat": "def sat(x: int, a: int=8665464, b: int=-93206):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=8665464, b=-93206):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_1",
    "sat": "def sat(x: int, a: int=-7133109280527597, b: int=9626561269367859):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-7133109280527597, b=9626561269367859):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_2",
    "sat": "def sat(x: int, a: int=-4697972202857238, b: int=-6108910256823769):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-4697972202857238, b=-6108910256823769):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_3",
    "sat": "def sat(x: int, a: int=9384583139960334, b: int=-6840945281448047):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=9384583139960334, b=-6840945281448047):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_4",
    "sat": "def sat(x: int, a: int=-6737256782948453, b: int=9894824337858863):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-6737256782948453, b=9894824337858863):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_5",
    "sat": "def sat(x: int, a: int=-2629554919383172, b: int=2951110195405000):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-2629554919383172, b=2951110195405000):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_6",
    "sat": "def sat(x: int, a: int=-1965597811309620, b: int=9211411496364323):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-1965597811309620, b=9211411496364323):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_7",
    "sat": "def sat(x: int, a: int=-5888709151111803, b: int=-9757459191680661):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-5888709151111803, b=-9757459191680661):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_8",
    "sat": "def sat(x: int, a: int=1011838795087466, b: int=-9206869013311444):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=1011838795087466, b=-9206869013311444):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_9",
    "sat": "def sat(x: int, a: int=-5401407088664577, b: int=2259507187220884):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-5401407088664577, b=2259507187220884):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_10",
    "sat": "def sat(x: int, a: int=-547858307971045, b: int=360438473066498):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-547858307971045, b=360438473066498):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_11",
    "sat": "def sat(x: int, a: int=-7478625410006315, b: int=6801105907363874):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-7478625410006315, b=6801105907363874):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_12",
    "sat": "def sat(x: int, a: int=-3809137462834014, b: int=-214743936915408):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-3809137462834014, b=-214743936915408):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_13",
    "sat": "def sat(x: int, a: int=948481008223761, b: int=7533693554184449):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=948481008223761, b=7533693554184449):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_14",
    "sat": "def sat(x: int, a: int=1797308072380659, b: int=-3532087737490755):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=1797308072380659, b=-3532087737490755):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_15",
    "sat": "def sat(x: int, a: int=9420239611700572, b: int=-7070376725317492):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=9420239611700572, b=-7070376725317492):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_16",
    "sat": "def sat(x: int, a: int=-8659191224173711, b: int=840137214752257):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-8659191224173711, b=840137214752257):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_17",
    "sat": "def sat(x: int, a: int=8432383416604601, b: int=-654833088173877):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=8432383416604601, b=-654833088173877):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_18",
    "sat": "def sat(x: int, a: int=-287006718737046, b: int=6734829751989054):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-287006718737046, b=6734829751989054):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_19",
    "sat": "def sat(x: int, a: int=583011651331803, b: int=2444046723177739):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=583011651331803, b=2444046723177739):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_20",
    "sat": "def sat(x: int, a: int=3315998432069146, b: int=-7988020110797304):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=3315998432069146, b=-7988020110797304):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_21",
    "sat": "def sat(x: int, a: int=5677481500973939, b: int=5072791079668715):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=5677481500973939, b=5072791079668715):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_22",
    "sat": "def sat(x: int, a: int=-8892589116082853, b: int=7047697645676140):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-8892589116082853, b=7047697645676140):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_23",
    "sat": "def sat(x: int, a: int=-5047133616571301, b: int=-5591561547393630):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-5047133616571301, b=-5591561547393630):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_24",
    "sat": "def sat(x: int, a: int=9566780187586469, b: int=-9727745521346499):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=9566780187586469, b=-9727745521346499):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_25",
    "sat": "def sat(x: int, a: int=-7027238163552082, b: int=2060935134553895):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-7027238163552082, b=2060935134553895):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_26",
    "sat": "def sat(x: int, a: int=-2849455004155101, b: int=-285740842180332):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-2849455004155101, b=-285740842180332):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_27",
    "sat": "def sat(x: int, a: int=5574588729161477, b: int=334520649294175):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=5574588729161477, b=334520649294175):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_28",
    "sat": "def sat(x: int, a: int=8916101183964178, b: int=6157213412675927):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=8916101183964178, b=6157213412675927):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_29",
    "sat": "def sat(x: int, a: int=274818913329348, b: int=-4039187219684694):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=274818913329348, b=-4039187219684694):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_30",
    "sat": "def sat(x: int, a: int=6875333591992463, b: int=9533929270161539):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=6875333591992463, b=9533929270161539):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_31",
    "sat": "def sat(x: int, a: int=9476086610325750, b: int=-5035247496641215):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=9476086610325750, b=-5035247496641215):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_32",
    "sat": "def sat(x: int, a: int=-1058449245915290, b: int=-4523718716888834):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-1058449245915290, b=-4523718716888834):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_33",
    "sat": "def sat(x: int, a: int=-9246892555245562, b: int=8073073445631342):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-9246892555245562, b=8073073445631342):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_34",
    "sat": "def sat(x: int, a: int=8957242884370493, b: int=2663971280882995):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=8957242884370493, b=2663971280882995):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_35",
    "sat": "def sat(x: int, a: int=4652163493611515, b: int=-3054424089551131):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=4652163493611515, b=-3054424089551131):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_36",
    "sat": "def sat(x: int, a: int=8731519649794547, b: int=-3444169246220590):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=8731519649794547, b=-3444169246220590):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_37",
    "sat": "def sat(x: int, a: int=-3885581366176040, b: int=9704210633096336):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-3885581366176040, b=9704210633096336):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_38",
    "sat": "def sat(x: int, a: int=-6593808578449493, b: int=8890383646201058):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-6593808578449493, b=8890383646201058):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_39",
    "sat": "def sat(x: int, a: int=5836024528227012, b: int=-472496470032695):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=5836024528227012, b=-472496470032695):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_40",
    "sat": "def sat(x: int, a: int=-4180863364830460, b: int=9002303172303414):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-4180863364830460, b=9002303172303414):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_41",
    "sat": "def sat(x: int, a: int=-5778533207260493, b: int=1377652447014233):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-5778533207260493, b=1377652447014233):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_42",
    "sat": "def sat(x: int, a: int=3213593931482282, b: int=-1885630962283548):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=3213593931482282, b=-1885630962283548):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_43",
    "sat": "def sat(x: int, a: int=-3214866832917011, b: int=-5802210013052258):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-3214866832917011, b=-5802210013052258):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_44",
    "sat": "def sat(x: int, a: int=-7210408734614350, b: int=-3966955215086057):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-7210408734614350, b=-3966955215086057):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_45",
    "sat": "def sat(x: int, a: int=8342671992323841, b: int=-9834513502862474):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=8342671992323841, b=-9834513502862474):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_46",
    "sat": "def sat(x: int, a: int=978019199012692, b: int=-9211910131559522):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=978019199012692, b=-9211910131559522):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_47",
    "sat": "def sat(x: int, a: int=-4788628473286187, b: int=4789395636061990):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-4788628473286187, b=4789395636061990):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_48",
    "sat": "def sat(x: int, a: int=-6416369071663754, b: int=-9443234049780824):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-6416369071663754, b=-9443234049780824):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_49",
    "sat": "def sat(x: int, a: int=-6114618680075639, b: int=-1016495932118168):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-6114618680075639, b=-1016495932118168):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_50",
    "sat": "def sat(x: int, a: int=1325454210947356, b: int=8168354092489487):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=1325454210947356, b=8168354092489487):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_51",
    "sat": "def sat(x: int, a: int=800567021606407, b: int=2101196550857080):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=800567021606407, b=2101196550857080):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_52",
    "sat": "def sat(x: int, a: int=3306274312501445, b: int=-6771789729822821):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=3306274312501445, b=-6771789729822821):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_53",
    "sat": "def sat(x: int, a: int=-9829150971141240, b: int=-1588729792874043):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-9829150971141240, b=-1588729792874043):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_54",
    "sat": "def sat(x: int, a: int=3071148867836690, b: int=-6062117443782096):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=3071148867836690, b=-6062117443782096):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_55",
    "sat": "def sat(x: int, a: int=8640773736062972, b: int=8214418314712320):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=8640773736062972, b=8214418314712320):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_56",
    "sat": "def sat(x: int, a: int=5359001275967767, b: int=-8307475776509244):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=5359001275967767, b=-8307475776509244):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_57",
    "sat": "def sat(x: int, a: int=-2007077248015214, b: int=-3057786518131383):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-2007077248015214, b=-3057786518131383):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_58",
    "sat": "def sat(x: int, a: int=-2067800739239937, b: int=-5879636618433792):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-2067800739239937, b=-5879636618433792):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_59",
    "sat": "def sat(x: int, a: int=-972398237255109, b: int=4503273342913100):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-972398237255109, b=4503273342913100):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_60",
    "sat": "def sat(x: int, a: int=-1597798505572565, b: int=-2083050471259332):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-1597798505572565, b=-2083050471259332):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_61",
    "sat": "def sat(x: int, a: int=-3309613198977100, b: int=-2044775305911290):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-3309613198977100, b=-2044775305911290):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_62",
    "sat": "def sat(x: int, a: int=-7734074944540968, b: int=4534850318021341):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-7734074944540968, b=4534850318021341):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_63",
    "sat": "def sat(x: int, a: int=4015820116444633, b: int=-1878012061053167):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=4015820116444633, b=-1878012061053167):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_64",
    "sat": "def sat(x: int, a: int=224254332634102, b: int=9917545026205451):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=224254332634102, b=9917545026205451):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_65",
    "sat": "def sat(x: int, a: int=4676505254883281, b: int=2485771461598125):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=4676505254883281, b=2485771461598125):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_66",
    "sat": "def sat(x: int, a: int=2393734287838941, b: int=7134577234185909):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=2393734287838941, b=7134577234185909):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_67",
    "sat": "def sat(x: int, a: int=-5849713119543460, b: int=1160047268606911):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-5849713119543460, b=1160047268606911):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_68",
    "sat": "def sat(x: int, a: int=9930690116489372, b: int=-5846796302362748):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=9930690116489372, b=-5846796302362748):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_69",
    "sat": "def sat(x: int, a: int=-6093227190548661, b: int=-8101314996361494):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-6093227190548661, b=-8101314996361494):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_70",
    "sat": "def sat(x: int, a: int=-9318544954340318, b: int=2605735597522594):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-9318544954340318, b=2605735597522594):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_71",
    "sat": "def sat(x: int, a: int=-6406097708360532, b: int=-5648347231424486):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-6406097708360532, b=-5648347231424486):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_72",
    "sat": "def sat(x: int, a: int=-7311174970047309, b: int=-9485767112658030):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-7311174970047309, b=-9485767112658030):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_73",
    "sat": "def sat(x: int, a: int=-7058580833507256, b: int=-3145926084735644):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-7058580833507256, b=-3145926084735644):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_74",
    "sat": "def sat(x: int, a: int=-1917748148043685, b: int=-3931242184086583):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-1917748148043685, b=-3931242184086583):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_75",
    "sat": "def sat(x: int, a: int=6943013543508385, b: int=-6386215413932935):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=6943013543508385, b=-6386215413932935):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_76",
    "sat": "def sat(x: int, a: int=7182211892224510, b: int=6356021115726319):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=7182211892224510, b=6356021115726319):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_77",
    "sat": "def sat(x: int, a: int=2988148150022280, b: int=6322189204478624):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=2988148150022280, b=6322189204478624):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_78",
    "sat": "def sat(x: int, a: int=-9054855453363735, b: int=6969087934282384):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-9054855453363735, b=6969087934282384):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_79",
    "sat": "def sat(x: int, a: int=-1680666970775216, b: int=1090446402780659):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-1680666970775216, b=1090446402780659):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_80",
    "sat": "def sat(x: int, a: int=2259517098902762, b: int=-4187831219909089):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=2259517098902762, b=-4187831219909089):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_81",
    "sat": "def sat(x: int, a: int=-2408143475480305, b: int=-8949241844638605):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-2408143475480305, b=-8949241844638605):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_82",
    "sat": "def sat(x: int, a: int=1011058538874860, b: int=9328279186543690):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=1011058538874860, b=9328279186543690):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_83",
    "sat": "def sat(x: int, a: int=-161011445070401, b: int=9988328545179193):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-161011445070401, b=9988328545179193):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_84",
    "sat": "def sat(x: int, a: int=3680630805705074, b: int=-6358758012483016):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=3680630805705074, b=-6358758012483016):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_85",
    "sat": "def sat(x: int, a: int=-8354626939545223, b: int=-2617842820378384):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-8354626939545223, b=-2617842820378384):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_86",
    "sat": "def sat(x: int, a: int=-1252865002121894, b: int=-8960251648801269):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-1252865002121894, b=-8960251648801269):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_87",
    "sat": "def sat(x: int, a: int=2743428822663858, b: int=-8675577010228672):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=2743428822663858, b=-8675577010228672):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_88",
    "sat": "def sat(x: int, a: int=140008082725470, b: int=-487681600543203):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=140008082725470, b=-487681600543203):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_89",
    "sat": "def sat(x: int, a: int=7348788157364305, b: int=-6472637530800080):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=7348788157364305, b=-6472637530800080):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_90",
    "sat": "def sat(x: int, a: int=-9854347565984760, b: int=1777919565462855):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-9854347565984760, b=1777919565462855):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_91",
    "sat": "def sat(x: int, a: int=-4985828466094269, b: int=-8625352385522456):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-4985828466094269, b=-8625352385522456):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_92",
    "sat": "def sat(x: int, a: int=9838836813900473, b: int=803251681759867):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=9838836813900473, b=803251681759867):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_93",
    "sat": "def sat(x: int, a: int=5565393012333284, b: int=8049921588535258):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=5565393012333284, b=8049921588535258):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_94",
    "sat": "def sat(x: int, a: int=9094982590552084, b: int=-9234184608326544):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=9094982590552084, b=-9234184608326544):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_95",
    "sat": "def sat(x: int, a: int=-8412064365343127, b: int=3041009221628112):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-8412064365343127, b=3041009221628112):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_96",
    "sat": "def sat(x: int, a: int=-1607338173433503, b: int=1214038488230344):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-1607338173433503, b=1214038488230344):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_97",
    "sat": "def sat(x: int, a: int=-5173109900851249, b: int=8824291293539798):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-5173109900851249, b=8824291293539798):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_98",
    "sat": "def sat(x: int, a: int=-2467273690880952, b: int=945823593329360):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-2467273690880952, b=945823593329360):\n    return a - b"
    ]
  },
  {
    "name": "IntSub2_99",
    "sat": "def sat(x: int, a: int=-8624132002742990, b: int=-2628997224052297):\n    assert type(x) is int, 'x must be of type int'\n    return a - x == b",
    "sols": [
      "def sol(a=-8624132002742990, b=-2628997224052297):\n    return a - b"
    ]
  },
  {
    "name": "IntMul_0",
    "sat": "def sat(n: int, a: int=14302, b: int=5):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=14302, b=5):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_1",
    "sat": "def sat(n: int, a: int=-172453, b: int=-28):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-172453, b=-28):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_2",
    "sat": "def sat(n: int, a: int=-459895, b: int=16):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-459895, b=16):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_3",
    "sat": "def sat(n: int, a: int=957972, b: int=18):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=957972, b=18):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_4",
    "sat": "def sat(n: int, a: int=888455, b: int=26):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=888455, b=26):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_5",
    "sat": "def sat(n: int, a: int=-84603, b: int=-14):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-84603, b=-14):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_6",
    "sat": "def sat(n: int, a: int=752084, b: int=-67):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=752084, b=-67):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_7",
    "sat": "def sat(n: int, a: int=926791, b: int=-12):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=926791, b=-12):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_8",
    "sat": "def sat(n: int, a: int=616369, b: int=56):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=616369, b=56):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_9",
    "sat": "def sat(n: int, a: int=-234155, b: int=4):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-234155, b=4):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_10",
    "sat": "def sat(n: int, a: int=644721, b: int=60):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=644721, b=60):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_11",
    "sat": "def sat(n: int, a: int=-27875, b: int=-88):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-27875, b=-88):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_12",
    "sat": "def sat(n: int, a: int=-348658, b: int=74):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-348658, b=74):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_13",
    "sat": "def sat(n: int, a: int=610646, b: int=8):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=610646, b=8):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_14",
    "sat": "def sat(n: int, a: int=-684390, b: int=-85):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-684390, b=-85):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_15",
    "sat": "def sat(n: int, a: int=768107, b: int=-62):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=768107, b=-62):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_16",
    "sat": "def sat(n: int, a: int=-786532, b: int=18):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-786532, b=18):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_17",
    "sat": "def sat(n: int, a: int=518603, b: int=-57):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=518603, b=-57):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_18",
    "sat": "def sat(n: int, a: int=-720014, b: int=-84):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-720014, b=-84):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_19",
    "sat": "def sat(n: int, a: int=-639247, b: int=61):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-639247, b=61):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_20",
    "sat": "def sat(n: int, a: int=748016, b: int=92):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=748016, b=92):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_21",
    "sat": "def sat(n: int, a: int=678075, b: int=-19):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=678075, b=-19):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_22",
    "sat": "def sat(n: int, a: int=-873894, b: int=52):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-873894, b=52):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_23",
    "sat": "def sat(n: int, a: int=893067, b: int=18):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=893067, b=18):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_24",
    "sat": "def sat(n: int, a: int=382479, b: int=-31):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=382479, b=-31):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_25",
    "sat": "def sat(n: int, a: int=-199729, b: int=-90):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-199729, b=-90):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_26",
    "sat": "def sat(n: int, a: int=-792878, b: int=25):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-792878, b=25):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_27",
    "sat": "def sat(n: int, a: int=373540, b: int=-55):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=373540, b=-55):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_28",
    "sat": "def sat(n: int, a: int=715758, b: int=92):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=715758, b=92):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_29",
    "sat": "def sat(n: int, a: int=891006, b: int=-74):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=891006, b=-74):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_30",
    "sat": "def sat(n: int, a: int=-531649, b: int=-40):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-531649, b=-40):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_31",
    "sat": "def sat(n: int, a: int=252713, b: int=-18):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=252713, b=-18):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_32",
    "sat": "def sat(n: int, a: int=-629886, b: int=-69):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-629886, b=-69):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_33",
    "sat": "def sat(n: int, a: int=485761, b: int=-95):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=485761, b=-95):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_34",
    "sat": "def sat(n: int, a: int=-537921, b: int=-49):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-537921, b=-49):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_35",
    "sat": "def sat(n: int, a: int=-982227, b: int=-72):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-982227, b=-72):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_36",
    "sat": "def sat(n: int, a: int=618788, b: int=11):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=618788, b=11):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_37",
    "sat": "def sat(n: int, a: int=466280, b: int=11):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=466280, b=11):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_38",
    "sat": "def sat(n: int, a: int=332142, b: int=8):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=332142, b=8):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_39",
    "sat": "def sat(n: int, a: int=-508373, b: int=-100):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-508373, b=-100):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_40",
    "sat": "def sat(n: int, a: int=408974, b: int=83):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=408974, b=83):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_41",
    "sat": "def sat(n: int, a: int=927997, b: int=49):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=927997, b=49):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_42",
    "sat": "def sat(n: int, a: int=603316, b: int=-79):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=603316, b=-79):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_43",
    "sat": "def sat(n: int, a: int=237218, b: int=-95):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=237218, b=-95):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_44",
    "sat": "def sat(n: int, a: int=921327, b: int=74):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=921327, b=74):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_45",
    "sat": "def sat(n: int, a: int=118595, b: int=45):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=118595, b=45):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_46",
    "sat": "def sat(n: int, a: int=458447, b: int=15):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=458447, b=15):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_47",
    "sat": "def sat(n: int, a: int=775596, b: int=71):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=775596, b=71):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_48",
    "sat": "def sat(n: int, a: int=-663678, b: int=-38):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-663678, b=-38):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_49",
    "sat": "def sat(n: int, a: int=-295665, b: int=-87):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-295665, b=-87):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_50",
    "sat": "def sat(n: int, a: int=-249178, b: int=-37):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-249178, b=-37):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_51",
    "sat": "def sat(n: int, a: int=892226, b: int=-74):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=892226, b=-74):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_52",
    "sat": "def sat(n: int, a: int=-718067, b: int=20):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-718067, b=20):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_53",
    "sat": "def sat(n: int, a: int=-812778, b: int=50):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-812778, b=50):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_54",
    "sat": "def sat(n: int, a: int=639824, b: int=-33):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=639824, b=-33):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_55",
    "sat": "def sat(n: int, a: int=-861227, b: int=-49):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-861227, b=-49):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_56",
    "sat": "def sat(n: int, a: int=-43357, b: int=-87):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-43357, b=-87):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_57",
    "sat": "def sat(n: int, a: int=-248596, b: int=21):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-248596, b=21):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_58",
    "sat": "def sat(n: int, a: int=-927710, b: int=25):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-927710, b=25):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_59",
    "sat": "def sat(n: int, a: int=768332, b: int=77):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=768332, b=77):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_60",
    "sat": "def sat(n: int, a: int=-748487, b: int=60):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-748487, b=60):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_61",
    "sat": "def sat(n: int, a: int=-828627, b: int=100):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-828627, b=100):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_62",
    "sat": "def sat(n: int, a: int=728905, b: int=-44):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=728905, b=-44):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_63",
    "sat": "def sat(n: int, a: int=-164310, b: int=82):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-164310, b=82):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_64",
    "sat": "def sat(n: int, a: int=404122, b: int=-27):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=404122, b=-27):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_65",
    "sat": "def sat(n: int, a: int=520343, b: int=3):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=520343, b=3):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_66",
    "sat": "def sat(n: int, a: int=-470447, b: int=98):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-470447, b=98):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_67",
    "sat": "def sat(n: int, a: int=-760222, b: int=71):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-760222, b=71):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_68",
    "sat": "def sat(n: int, a: int=-269, b: int=1):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-269, b=1):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_69",
    "sat": "def sat(n: int, a: int=-661323, b: int=53):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-661323, b=53):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_70",
    "sat": "def sat(n: int, a: int=-799969, b: int=33):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-799969, b=33):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_71",
    "sat": "def sat(n: int, a: int=908853, b: int=99):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=908853, b=99):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_72",
    "sat": "def sat(n: int, a: int=-733037, b: int=-10):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-733037, b=-10):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_73",
    "sat": "def sat(n: int, a: int=16474, b: int=1):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=16474, b=1):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_74",
    "sat": "def sat(n: int, a: int=-769336, b: int=-1):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-769336, b=-1):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_75",
    "sat": "def sat(n: int, a: int=-746611, b: int=14):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-746611, b=14):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_76",
    "sat": "def sat(n: int, a: int=135210, b: int=-52):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=135210, b=-52):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_77",
    "sat": "def sat(n: int, a: int=-869851, b: int=-9):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-869851, b=-9):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_78",
    "sat": "def sat(n: int, a: int=800887, b: int=2):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=800887, b=2):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_79",
    "sat": "def sat(n: int, a: int=446477, b: int=94):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=446477, b=94):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_80",
    "sat": "def sat(n: int, a: int=72442, b: int=-64):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=72442, b=-64):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_81",
    "sat": "def sat(n: int, a: int=-821840, b: int=21):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-821840, b=21):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_82",
    "sat": "def sat(n: int, a: int=922878, b: int=34):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=922878, b=34):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_83",
    "sat": "def sat(n: int, a: int=312849, b: int=77):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=312849, b=77):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_84",
    "sat": "def sat(n: int, a: int=257939, b: int=45):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=257939, b=45):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_85",
    "sat": "def sat(n: int, a: int=433418, b: int=32):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=433418, b=32):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_86",
    "sat": "def sat(n: int, a: int=714784, b: int=15):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=714784, b=15):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_87",
    "sat": "def sat(n: int, a: int=486193, b: int=87):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=486193, b=87):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_88",
    "sat": "def sat(n: int, a: int=682327, b: int=21):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=682327, b=21):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_89",
    "sat": "def sat(n: int, a: int=-544570, b: int=39):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-544570, b=39):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_90",
    "sat": "def sat(n: int, a: int=-42402, b: int=-88):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-42402, b=-88):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_91",
    "sat": "def sat(n: int, a: int=-329682, b: int=-35):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-329682, b=-35):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_92",
    "sat": "def sat(n: int, a: int=-481292, b: int=62):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-481292, b=62):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_93",
    "sat": "def sat(n: int, a: int=-321516, b: int=-97):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-321516, b=-97):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_94",
    "sat": "def sat(n: int, a: int=672462, b: int=8):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=672462, b=8):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_95",
    "sat": "def sat(n: int, a: int=-462379, b: int=-13):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-462379, b=-13):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_96",
    "sat": "def sat(n: int, a: int=-681147, b: int=23):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-681147, b=23):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_97",
    "sat": "def sat(n: int, a: int=637459, b: int=98):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=637459, b=98):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_98",
    "sat": "def sat(n: int, a: int=-563350, b: int=1):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-563350, b=1):\n    return a // b"
    ]
  },
  {
    "name": "IntMul_99",
    "sat": "def sat(n: int, a: int=-934548, b: int=93):\n    assert type(n) is int, 'n must be of type int'\n    return b * n + (a % b) == a",
    "sols": [
      "def sol(a=-934548, b=93):\n    return a // b"
    ]
  },
  {
    "name": "IntDiv_0",
    "sat": "def sat(n: int, a: int=3, b: int=23463462):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=3, b=23463462):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_1",
    "sat": "def sat(n: int, a: int=-4, b: int=5119247419786893):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-4, b=5119247419786893):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_2",
    "sat": "def sat(n: int, a: int=1, b: int=-7700704530622710):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=1, b=-7700704530622710):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_3",
    "sat": "def sat(n: int, a: int=0, b: int=4639160842844549):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=0, b=4639160842844549):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_4",
    "sat": "def sat(n: int, a: int=-8, b: int=7670588577596794):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-8, b=7670588577596794):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_5",
    "sat": "def sat(n: int, a: int=0, b: int=2226551485116260):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=0, b=2226551485116260):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_6",
    "sat": "def sat(n: int, a: int=0, b: int=3462706835993406):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=0, b=3462706835993406):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_7",
    "sat": "def sat(n: int, a: int=5, b: int=-8636791365736394):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=5, b=-8636791365736394):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_8",
    "sat": "def sat(n: int, a: int=-6, b: int=-3480117744584705):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-6, b=-3480117744584705):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_9",
    "sat": "def sat(n: int, a: int=1, b: int=-5161509055049613):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=1, b=-5161509055049613):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_10",
    "sat": "def sat(n: int, a: int=-1, b: int=-3836431580487679):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-1, b=-3836431580487679):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_11",
    "sat": "def sat(n: int, a: int=2, b: int=-5641693445776607):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=2, b=-5641693445776607):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_12",
    "sat": "def sat(n: int, a: int=64, b: int=-9524673752835270):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=64, b=-9524673752835270):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_13",
    "sat": "def sat(n: int, a: int=-1, b: int=-6352351041172055):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-1, b=-6352351041172055):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_14",
    "sat": "def sat(n: int, a: int=0, b: int=3914460860723118):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=0, b=3914460860723118):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_15",
    "sat": "def sat(n: int, a: int=0, b: int=-4311627918504754):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=0, b=-4311627918504754):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_16",
    "sat": "def sat(n: int, a: int=10, b: int=5350376016145597):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=10, b=5350376016145597):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_17",
    "sat": "def sat(n: int, a: int=-2, b: int=-5422050574391965):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-2, b=-5422050574391965):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_18",
    "sat": "def sat(n: int, a: int=0, b: int=289164834161638):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=0, b=289164834161638):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_19",
    "sat": "def sat(n: int, a: int=-3, b: int=-8064002469393481):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-3, b=-8064002469393481):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_20",
    "sat": "def sat(n: int, a: int=1, b: int=2145283252463938):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=1, b=2145283252463938):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_21",
    "sat": "def sat(n: int, a: int=-1, b: int=-8256452754573284):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-1, b=-8256452754573284):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_22",
    "sat": "def sat(n: int, a: int=0, b: int=2803044390101747):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=0, b=2803044390101747):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_23",
    "sat": "def sat(n: int, a: int=1, b: int=465416930812994):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=1, b=465416930812994):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_24",
    "sat": "def sat(n: int, a: int=-1, b: int=-2138356493619174):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-1, b=-2138356493619174):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_25",
    "sat": "def sat(n: int, a: int=3, b: int=6532261480413936):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=3, b=6532261480413936):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_26",
    "sat": "def sat(n: int, a: int=-1, b: int=889091235193091):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-1, b=889091235193091):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_27",
    "sat": "def sat(n: int, a: int=0, b: int=-2917151279162921):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=0, b=-2917151279162921):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_28",
    "sat": "def sat(n: int, a: int=0, b: int=-3600470395450084):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=0, b=-3600470395450084):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_29",
    "sat": "def sat(n: int, a: int=11, b: int=1635321226849141):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=11, b=1635321226849141):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_30",
    "sat": "def sat(n: int, a: int=-3, b: int=6184379595082618):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-3, b=6184379595082618):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_31",
    "sat": "def sat(n: int, a: int=2, b: int=-2337551490083217):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=2, b=-2337551490083217):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_32",
    "sat": "def sat(n: int, a: int=0, b: int=-3982656090822911):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=0, b=-3982656090822911):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_33",
    "sat": "def sat(n: int, a: int=-1, b: int=1857024433585267):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-1, b=1857024433585267):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_34",
    "sat": "def sat(n: int, a: int=-1, b: int=-5003124639014248):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-1, b=-5003124639014248):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_35",
    "sat": "def sat(n: int, a: int=-1, b: int=591637458034994):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-1, b=591637458034994):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_36",
    "sat": "def sat(n: int, a: int=0, b: int=-4056836760889048):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=0, b=-4056836760889048):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_37",
    "sat": "def sat(n: int, a: int=0, b: int=5061065173952272):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=0, b=5061065173952272):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_38",
    "sat": "def sat(n: int, a: int=-2, b: int=-8043982666736365):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-2, b=-8043982666736365):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_39",
    "sat": "def sat(n: int, a: int=-2, b: int=-6669315468744908):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-2, b=-6669315468744908):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_40",
    "sat": "def sat(n: int, a: int=-2, b: int=8415356569816865):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-2, b=8415356569816865):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_41",
    "sat": "def sat(n: int, a: int=0, b: int=3931653560640389):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=0, b=3931653560640389):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_42",
    "sat": "def sat(n: int, a: int=-9, b: int=-7296871930890494):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-9, b=-7296871930890494):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_43",
    "sat": "def sat(n: int, a: int=-7, b: int=6488207389916977):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-7, b=6488207389916977):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_44",
    "sat": "def sat(n: int, a: int=0, b: int=-7060315012008253):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=0, b=-7060315012008253):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_45",
    "sat": "def sat(n: int, a: int=2, b: int=9827962398323945):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=2, b=9827962398323945):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_46",
    "sat": "def sat(n: int, a: int=1, b: int=6230846613050088):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=1, b=6230846613050088):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_47",
    "sat": "def sat(n: int, a: int=1, b: int=-9904898123664863):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=1, b=-9904898123664863):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_48",
    "sat": "def sat(n: int, a: int=-1, b: int=-5059258570898280):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-1, b=-5059258570898280):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_49",
    "sat": "def sat(n: int, a: int=1, b: int=-6821264633772428):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=1, b=-6821264633772428):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_50",
    "sat": "def sat(n: int, a: int=-1, b: int=-1540317631918209):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-1, b=-1540317631918209):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_51",
    "sat": "def sat(n: int, a: int=-2, b: int=9051254817152850):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-2, b=9051254817152850):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_52",
    "sat": "def sat(n: int, a: int=-2, b: int=-8992452609206070):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-2, b=-8992452609206070):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_53",
    "sat": "def sat(n: int, a: int=1, b: int=-9473481888950529):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=1, b=-9473481888950529):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_54",
    "sat": "def sat(n: int, a: int=2, b: int=-7183177213851139):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=2, b=-7183177213851139):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_55",
    "sat": "def sat(n: int, a: int=-8, b: int=6645593711427470):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-8, b=6645593711427470):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_56",
    "sat": "def sat(n: int, a: int=-1, b: int=-4188249153470886):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-1, b=-4188249153470886):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_57",
    "sat": "def sat(n: int, a: int=0, b: int=680114303922098):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=0, b=680114303922098):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_58",
    "sat": "def sat(n: int, a: int=0, b: int=-1231467625557421):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=0, b=-1231467625557421):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_59",
    "sat": "def sat(n: int, a: int=-3, b: int=6396181364334173):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-3, b=6396181364334173):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_60",
    "sat": "def sat(n: int, a: int=1, b: int=-8275611896794010):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=1, b=-8275611896794010):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_61",
    "sat": "def sat(n: int, a: int=-1, b: int=-7185872212581583):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-1, b=-7185872212581583):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_62",
    "sat": "def sat(n: int, a: int=1, b: int=5901192649899661):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=1, b=5901192649899661):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_63",
    "sat": "def sat(n: int, a: int=-2, b: int=4627709603579634):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-2, b=4627709603579634):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_64",
    "sat": "def sat(n: int, a: int=-24, b: int=-4800219038030897):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-24, b=-4800219038030897):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_65",
    "sat": "def sat(n: int, a: int=-1, b: int=3150030757252059):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-1, b=3150030757252059):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_66",
    "sat": "def sat(n: int, a: int=-2, b: int=715813148849385):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-2, b=715813148849385):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_67",
    "sat": "def sat(n: int, a: int=-1, b: int=2824868623447204):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-1, b=2824868623447204):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_68",
    "sat": "def sat(n: int, a: int=1, b: int=4001371867136527):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=1, b=4001371867136527):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_69",
    "sat": "def sat(n: int, a: int=-1, b: int=-8173246587306406):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-1, b=-8173246587306406):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_70",
    "sat": "def sat(n: int, a: int=-3, b: int=-7754655867378818):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-3, b=-7754655867378818):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_71",
    "sat": "def sat(n: int, a: int=-2, b: int=-3006270259482446):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-2, b=-3006270259482446):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_72",
    "sat": "def sat(n: int, a: int=1, b: int=-6272477351933707):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=1, b=-6272477351933707):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_73",
    "sat": "def sat(n: int, a: int=-1, b: int=-1908077353594676):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-1, b=-1908077353594676):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_74",
    "sat": "def sat(n: int, a: int=1, b: int=-4700451493279324):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=1, b=-4700451493279324):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_75",
    "sat": "def sat(n: int, a: int=-2, b: int=-8799855238669514):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-2, b=-8799855238669514):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_76",
    "sat": "def sat(n: int, a: int=-2, b: int=-9259744606608905):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-2, b=-9259744606608905):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_77",
    "sat": "def sat(n: int, a: int=-5, b: int=-9719130920205780):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-5, b=-9719130920205780):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_78",
    "sat": "def sat(n: int, a: int=-1, b: int=4244723604537008):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-1, b=4244723604537008):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_79",
    "sat": "def sat(n: int, a: int=-1, b: int=-1475222143307353):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-1, b=-1475222143307353):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_80",
    "sat": "def sat(n: int, a: int=-2, b: int=5547203587979829):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-2, b=5547203587979829):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_81",
    "sat": "def sat(n: int, a: int=0, b: int=28409067826264):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=0, b=28409067826264):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_82",
    "sat": "def sat(n: int, a: int=-9, b: int=-4790838553775085):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-9, b=-4790838553775085):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_83",
    "sat": "def sat(n: int, a: int=1, b: int=2028124123567866):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=1, b=2028124123567866):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_84",
    "sat": "def sat(n: int, a: int=0, b: int=-8389174948377615):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=0, b=-8389174948377615):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_85",
    "sat": "def sat(n: int, a: int=0, b: int=-3038065998957692):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=0, b=-3038065998957692):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_86",
    "sat": "def sat(n: int, a: int=0, b: int=2847628652710970):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=0, b=2847628652710970):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_87",
    "sat": "def sat(n: int, a: int=-1, b: int=2916765168942950):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-1, b=2916765168942950):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_88",
    "sat": "def sat(n: int, a: int=-1, b: int=1857441101499631):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-1, b=1857441101499631):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_89",
    "sat": "def sat(n: int, a: int=-1, b: int=-5037797380492972):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-1, b=-5037797380492972):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_90",
    "sat": "def sat(n: int, a: int=4, b: int=3243442199325972):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=4, b=3243442199325972):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_91",
    "sat": "def sat(n: int, a: int=1, b: int=-5149066657769289):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=1, b=-5149066657769289):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_92",
    "sat": "def sat(n: int, a: int=-1, b: int=7010263033300360):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-1, b=7010263033300360):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_93",
    "sat": "def sat(n: int, a: int=0, b: int=-1964632321122180):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=0, b=-1964632321122180):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_94",
    "sat": "def sat(n: int, a: int=-1, b: int=2808376267629588):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-1, b=2808376267629588):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_95",
    "sat": "def sat(n: int, a: int=0, b: int=-1909668914132046):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=0, b=-1909668914132046):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_96",
    "sat": "def sat(n: int, a: int=-1, b: int=-2098976664001634):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-1, b=-2098976664001634):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_97",
    "sat": "def sat(n: int, a: int=-1, b: int=-5329207698669947):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=-1, b=-5329207698669947):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_98",
    "sat": "def sat(n: int, a: int=3, b: int=8597956862660582):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=3, b=8597956862660582):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv_99",
    "sat": "def sat(n: int, a: int=0, b: int=-6794204335522933):\n    assert type(n) is int, 'n must be of type int'\n    return b // n == a",
    "sols": [
      "def sol(a=0, b=-6794204335522933):\n    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ]
  },
  {
    "name": "IntDiv2_0",
    "sat": "def sat(n: int, a: int=345346363, b: int=10):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=345346363, b=10):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_1",
    "sat": "def sat(n: int, a: int=3236350200572569, b: int=-7452172995690236):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=3236350200572569, b=-7452172995690236):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_2",
    "sat": "def sat(n: int, a: int=3767855497920841, b: int=-668549766238957):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=3767855497920841, b=-668549766238957):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_3",
    "sat": "def sat(n: int, a: int=-2546392076412183, b: int=8289765252651651):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-2546392076412183, b=8289765252651651):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_4",
    "sat": "def sat(n: int, a: int=6106964800719675, b: int=-4827030838900489):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=6106964800719675, b=-4827030838900489):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_5",
    "sat": "def sat(n: int, a: int=-2637590294153322, b: int=-8870429643863250):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-2637590294153322, b=-8870429643863250):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_6",
    "sat": "def sat(n: int, a: int=-1122716503489773, b: int=2058316649277962):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-1122716503489773, b=2058316649277962):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_7",
    "sat": "def sat(n: int, a: int=4867964224299231, b: int=-9708418025793821):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=4867964224299231, b=-9708418025793821):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_8",
    "sat": "def sat(n: int, a: int=-6446387894275597, b: int=2704150518491613):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-6446387894275597, b=2704150518491613):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_9",
    "sat": "def sat(n: int, a: int=9805622816026564, b: int=-1413687631647022):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=9805622816026564, b=-1413687631647022):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_10",
    "sat": "def sat(n: int, a: int=8073022204587684, b: int=3518236752263188):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=8073022204587684, b=3518236752263188):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_11",
    "sat": "def sat(n: int, a: int=1861394427906633, b: int=-6256021660494142):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=1861394427906633, b=-6256021660494142):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_12",
    "sat": "def sat(n: int, a: int=3292075144847493, b: int=9290822372853290):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=3292075144847493, b=9290822372853290):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_13",
    "sat": "def sat(n: int, a: int=5565174652916897, b: int=2523254319773244):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=5565174652916897, b=2523254319773244):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_14",
    "sat": "def sat(n: int, a: int=-2451463753398861, b: int=-6837375254936688):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-2451463753398861, b=-6837375254936688):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_15",
    "sat": "def sat(n: int, a: int=9246138313983522, b: int=7044753485195363):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=9246138313983522, b=7044753485195363):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_16",
    "sat": "def sat(n: int, a: int=5755430041825361, b: int=-7500825756662765):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=5755430041825361, b=-7500825756662765):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_17",
    "sat": "def sat(n: int, a: int=-4044432813297850, b: int=-2055235499917131):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-4044432813297850, b=-2055235499917131):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_18",
    "sat": "def sat(n: int, a: int=9192487350070448, b: int=-1577232790995856):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=9192487350070448, b=-1577232790995856):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_19",
    "sat": "def sat(n: int, a: int=-4330569438134406, b: int=-2887277385084962):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-4330569438134406, b=-2887277385084962):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_20",
    "sat": "def sat(n: int, a: int=2990193264094475, b: int=-8052275014850800):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=2990193264094475, b=-8052275014850800):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_21",
    "sat": "def sat(n: int, a: int=-334785237691190, b: int=-119184656498023):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-334785237691190, b=-119184656498023):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_22",
    "sat": "def sat(n: int, a: int=5207435086943087, b: int=9315950888552460):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=5207435086943087, b=9315950888552460):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_23",
    "sat": "def sat(n: int, a: int=-6717376076693910, b: int=5685574928780392):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-6717376076693910, b=5685574928780392):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_24",
    "sat": "def sat(n: int, a: int=-3791648304834738, b: int=5390878282715950):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-3791648304834738, b=5390878282715950):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_25",
    "sat": "def sat(n: int, a: int=8348371622079149, b: int=-3687608748040881):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=8348371622079149, b=-3687608748040881):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_26",
    "sat": "def sat(n: int, a: int=2216172307670076, b: int=1198511800769005):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=2216172307670076, b=1198511800769005):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_27",
    "sat": "def sat(n: int, a: int=-5774554740694194, b: int=815639772220506):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-5774554740694194, b=815639772220506):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_28",
    "sat": "def sat(n: int, a: int=7530932262711610, b: int=-6152846353712445):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=7530932262711610, b=-6152846353712445):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_29",
    "sat": "def sat(n: int, a: int=841555988540038, b: int=-9868038078729593):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=841555988540038, b=-9868038078729593):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_30",
    "sat": "def sat(n: int, a: int=142036706424193, b: int=3668687125385635):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=142036706424193, b=3668687125385635):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_31",
    "sat": "def sat(n: int, a: int=580244953649387, b: int=9379441130714325):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=580244953649387, b=9379441130714325):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_32",
    "sat": "def sat(n: int, a: int=8628720305781822, b: int=2043046124858807):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=8628720305781822, b=2043046124858807):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_33",
    "sat": "def sat(n: int, a: int=1477656207664436, b: int=7642796275944466):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=1477656207664436, b=7642796275944466):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_34",
    "sat": "def sat(n: int, a: int=7225231464001822, b: int=1942897414978963):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=7225231464001822, b=1942897414978963):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_35",
    "sat": "def sat(n: int, a: int=-3095522043031979, b: int=5445934315578037):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-3095522043031979, b=5445934315578037):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_36",
    "sat": "def sat(n: int, a: int=-3757933978775077, b: int=9930712962220777):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-3757933978775077, b=9930712962220777):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_37",
    "sat": "def sat(n: int, a: int=-4800762075763280, b: int=4059857282318362):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-4800762075763280, b=4059857282318362):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_38",
    "sat": "def sat(n: int, a: int=9100559122361383, b: int=588240832017835):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=9100559122361383, b=588240832017835):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_39",
    "sat": "def sat(n: int, a: int=1402912783059891, b: int=9651356345206125):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=1402912783059891, b=9651356345206125):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_40",
    "sat": "def sat(n: int, a: int=-3713127295395781, b: int=-2168557905778832):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-3713127295395781, b=-2168557905778832):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_41",
    "sat": "def sat(n: int, a: int=4814214816192529, b: int=5849031144322158):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=4814214816192529, b=5849031144322158):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_42",
    "sat": "def sat(n: int, a: int=4902126138153161, b: int=5505548627861820):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=4902126138153161, b=5505548627861820):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_43",
    "sat": "def sat(n: int, a: int=1243385131374084, b: int=5694479681506671):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=1243385131374084, b=5694479681506671):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_44",
    "sat": "def sat(n: int, a: int=3797560196002754, b: int=-3196984939466191):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=3797560196002754, b=-3196984939466191):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_45",
    "sat": "def sat(n: int, a: int=3883983736303334, b: int=-9132736352174947):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=3883983736303334, b=-9132736352174947):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_46",
    "sat": "def sat(n: int, a: int=2848698378574315, b: int=1549187355790162):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=2848698378574315, b=1549187355790162):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_47",
    "sat": "def sat(n: int, a: int=-7545326580872985, b: int=7458299211449414):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-7545326580872985, b=7458299211449414):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_48",
    "sat": "def sat(n: int, a: int=-6419306446571014, b: int=2048376604013989):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-6419306446571014, b=2048376604013989):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_49",
    "sat": "def sat(n: int, a: int=-3668617606115149, b: int=3890167009397824):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-3668617606115149, b=3890167009397824):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_50",
    "sat": "def sat(n: int, a: int=8452330868387200, b: int=-6007921094990842):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=8452330868387200, b=-6007921094990842):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_51",
    "sat": "def sat(n: int, a: int=-9979710238120628, b: int=2895331931044268):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-9979710238120628, b=2895331931044268):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_52",
    "sat": "def sat(n: int, a: int=1903635884395077, b: int=6514475670525397):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=1903635884395077, b=6514475670525397):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_53",
    "sat": "def sat(n: int, a: int=-5178642178611927, b: int=-787063382697965):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-5178642178611927, b=-787063382697965):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_54",
    "sat": "def sat(n: int, a: int=2748056159130093, b: int=4707245458379196):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=2748056159130093, b=4707245458379196):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_55",
    "sat": "def sat(n: int, a: int=8427031375881691, b: int=-566735720432424):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=8427031375881691, b=-566735720432424):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_56",
    "sat": "def sat(n: int, a: int=-8992105978547356, b: int=-9308945105239130):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-8992105978547356, b=-9308945105239130):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_57",
    "sat": "def sat(n: int, a: int=-7591555509475916, b: int=134585022075351):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-7591555509475916, b=134585022075351):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_58",
    "sat": "def sat(n: int, a: int=-3330617042110148, b: int=2250215504758854):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-3330617042110148, b=2250215504758854):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_59",
    "sat": "def sat(n: int, a: int=3490794382551925, b: int=-8956669621577830):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=3490794382551925, b=-8956669621577830):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_60",
    "sat": "def sat(n: int, a: int=-3239985326917699, b: int=2044933920756389):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-3239985326917699, b=2044933920756389):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_61",
    "sat": "def sat(n: int, a: int=1829495705242927, b: int=2061360027633012):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=1829495705242927, b=2061360027633012):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_62",
    "sat": "def sat(n: int, a: int=5366110167003452, b: int=-17185416832165):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=5366110167003452, b=-17185416832165):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_63",
    "sat": "def sat(n: int, a: int=-8429767433886047, b: int=-8405031666742560):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-8429767433886047, b=-8405031666742560):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_64",
    "sat": "def sat(n: int, a: int=4345624263184657, b: int=-2824836645897939):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=4345624263184657, b=-2824836645897939):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_65",
    "sat": "def sat(n: int, a: int=5678152112653358, b: int=8149518307878917):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=5678152112653358, b=8149518307878917):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_66",
    "sat": "def sat(n: int, a: int=3103212369819142, b: int=5938615041062267):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=3103212369819142, b=5938615041062267):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_67",
    "sat": "def sat(n: int, a: int=-2406668374889797, b: int=3737729485297575):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-2406668374889797, b=3737729485297575):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_68",
    "sat": "def sat(n: int, a: int=-3062523709554454, b: int=-6321610589847119):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-3062523709554454, b=-6321610589847119):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_69",
    "sat": "def sat(n: int, a: int=-550911003426560, b: int=-8131330815798727):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-550911003426560, b=-8131330815798727):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_70",
    "sat": "def sat(n: int, a: int=2153932061958754, b: int=8785378347646683):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=2153932061958754, b=8785378347646683):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_71",
    "sat": "def sat(n: int, a: int=-4820374796532790, b: int=2787331283196295):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-4820374796532790, b=2787331283196295):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_72",
    "sat": "def sat(n: int, a: int=-2846509217873073, b: int=-1361180740421130):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-2846509217873073, b=-1361180740421130):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_73",
    "sat": "def sat(n: int, a: int=-6544522970226163, b: int=-4084953916153586):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-6544522970226163, b=-4084953916153586):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_74",
    "sat": "def sat(n: int, a: int=-2863413696180812, b: int=-1345219173399128):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-2863413696180812, b=-1345219173399128):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_75",
    "sat": "def sat(n: int, a: int=-3111284489156730, b: int=853259190017613):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-3111284489156730, b=853259190017613):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_76",
    "sat": "def sat(n: int, a: int=-9491961264295490, b: int=-2891220813119409):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-9491961264295490, b=-2891220813119409):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_77",
    "sat": "def sat(n: int, a: int=-8950477557055233, b: int=1534494049753060):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-8950477557055233, b=1534494049753060):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_78",
    "sat": "def sat(n: int, a: int=-8992558996555181, b: int=3831891958053472):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-8992558996555181, b=3831891958053472):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_79",
    "sat": "def sat(n: int, a: int=8865183549712721, b: int=5217892953535290):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=8865183549712721, b=5217892953535290):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_80",
    "sat": "def sat(n: int, a: int=7297084197719415, b: int=2696880594946949):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=7297084197719415, b=2696880594946949):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_81",
    "sat": "def sat(n: int, a: int=-7931666229177002, b: int=8753765251756724):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-7931666229177002, b=8753765251756724):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_82",
    "sat": "def sat(n: int, a: int=-6589340746594625, b: int=-4663212859293030):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-6589340746594625, b=-4663212859293030):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_83",
    "sat": "def sat(n: int, a: int=-2089330606767224, b: int=-2904684632076272):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-2089330606767224, b=-2904684632076272):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_84",
    "sat": "def sat(n: int, a: int=-9400549139625793, b: int=-1594730038506569):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-9400549139625793, b=-1594730038506569):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_85",
    "sat": "def sat(n: int, a: int=-5611426041960530, b: int=1173035872467896):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-5611426041960530, b=1173035872467896):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_86",
    "sat": "def sat(n: int, a: int=-2455490399325693, b: int=-8157718567568840):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-2455490399325693, b=-8157718567568840):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_87",
    "sat": "def sat(n: int, a: int=-4781987294014483, b: int=-6826514187957426):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-4781987294014483, b=-6826514187957426):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_88",
    "sat": "def sat(n: int, a: int=8279320676274603, b: int=4981171289088227):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=8279320676274603, b=4981171289088227):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_89",
    "sat": "def sat(n: int, a: int=-8128139110958820, b: int=-1016838900777623):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-8128139110958820, b=-1016838900777623):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_90",
    "sat": "def sat(n: int, a: int=1919223221096928, b: int=-4246889478002800):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=1919223221096928, b=-4246889478002800):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_91",
    "sat": "def sat(n: int, a: int=7572496965680861, b: int=-8206520058210772):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=7572496965680861, b=-8206520058210772):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_92",
    "sat": "def sat(n: int, a: int=6332377260504321, b: int=359054482773235):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=6332377260504321, b=359054482773235):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_93",
    "sat": "def sat(n: int, a: int=-1213076085515402, b: int=714889228980641):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-1213076085515402, b=714889228980641):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_94",
    "sat": "def sat(n: int, a: int=-1083402403448858, b: int=9373000476314333):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-1083402403448858, b=9373000476314333):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_95",
    "sat": "def sat(n: int, a: int=-3488492360339188, b: int=-89035334558032):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-3488492360339188, b=-89035334558032):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_96",
    "sat": "def sat(n: int, a: int=-7142610811589607, b: int=3591504007774393):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-7142610811589607, b=3591504007774393):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_97",
    "sat": "def sat(n: int, a: int=1130785731239572, b: int=-3053616527581378):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=1130785731239572, b=-3053616527581378):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_98",
    "sat": "def sat(n: int, a: int=-3668312867595902, b: int=5643425537092293):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=-3668312867595902, b=5643425537092293):\n    return a * b"
    ]
  },
  {
    "name": "IntDiv2_99",
    "sat": "def sat(n: int, a: int=2010374907728587, b: int=-5406041584432463):\n    assert type(n) is int, 'n must be of type int'\n    return n // b == a",
    "sols": [
      "def sol(a=2010374907728587, b=-5406041584432463):\n    return a * b"
    ]
  },
  {
    "name": "SquareRoot_0",
    "sat": "def sat(x: int, a: int=10201202001):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=10201202001):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_1",
    "sat": "def sat(x: int, a: int=1443212389575062500):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=1443212389575062500):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_2",
    "sat": "def sat(x: int, a: int=3313406478203402256):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=3313406478203402256):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_3",
    "sat": "def sat(x: int, a: int=4112258334861715236):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=4112258334861715236):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_4",
    "sat": "def sat(x: int, a: int=3693175672515361344):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=3693175672515361344):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_5",
    "sat": "def sat(x: int, a: int=1603343234707465216):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=1603343234707465216):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_6",
    "sat": "def sat(x: int, a: int=3604153367370502521):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=3604153367370502521):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_7",
    "sat": "def sat(x: int, a: int=812418064351847424):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=812418064351847424):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_8",
    "sat": "def sat(x: int, a: int=896033457313031844):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=896033457313031844):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_9",
    "sat": "def sat(x: int, a: int=1580010825140584225):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=1580010825140584225):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_10",
    "sat": "def sat(x: int, a: int=84873214827556):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=84873214827556):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_11",
    "sat": "def sat(x: int, a: int=4600386622954713721):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=4600386622954713721):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_12",
    "sat": "def sat(x: int, a: int=384496990237273369):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=384496990237273369):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_13",
    "sat": "def sat(x: int, a: int=425327670629622016):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=425327670629622016):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_14",
    "sat": "def sat(x: int, a: int=3778691879032949824):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=3778691879032949824):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_15",
    "sat": "def sat(x: int, a: int=2126332917583717921):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=2126332917583717921):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_16",
    "sat": "def sat(x: int, a: int=1081303724211489):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=1081303724211489):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_17",
    "sat": "def sat(x: int, a: int=3461351006022950881):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=3461351006022950881):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_18",
    "sat": "def sat(x: int, a: int=2018871321035586889):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=2018871321035586889):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_19",
    "sat": "def sat(x: int, a: int=768830075536134481):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=768830075536134481):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_20",
    "sat": "def sat(x: int, a: int=27025244213409225):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=27025244213409225):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_21",
    "sat": "def sat(x: int, a: int=4184350283635402500):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=4184350283635402500):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_22",
    "sat": "def sat(x: int, a: int=2050013463562828864):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=2050013463562828864):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_23",
    "sat": "def sat(x: int, a: int=63151314055759504):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=63151314055759504):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_24",
    "sat": "def sat(x: int, a: int=2776510923364645489):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=2776510923364645489):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_25",
    "sat": "def sat(x: int, a: int=1756309294016723601):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=1756309294016723601):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_26",
    "sat": "def sat(x: int, a: int=28989765676771344):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=28989765676771344):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_27",
    "sat": "def sat(x: int, a: int=1490749975839425625):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=1490749975839425625):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_28",
    "sat": "def sat(x: int, a: int=2041482407809393444):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=2041482407809393444):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_29",
    "sat": "def sat(x: int, a: int=3571536299500651689):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=3571536299500651689):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_30",
    "sat": "def sat(x: int, a: int=4227285180564165841):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=4227285180564165841):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_31",
    "sat": "def sat(x: int, a: int=284634725500702864):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=284634725500702864):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_32",
    "sat": "def sat(x: int, a: int=3433935784324830625):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=3433935784324830625):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_33",
    "sat": "def sat(x: int, a: int=897969397089950784):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=897969397089950784):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_34",
    "sat": "def sat(x: int, a: int=782533723338047044):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=782533723338047044):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_35",
    "sat": "def sat(x: int, a: int=500766657136337124):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=500766657136337124):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_36",
    "sat": "def sat(x: int, a: int=3154333284520718400):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=3154333284520718400):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_37",
    "sat": "def sat(x: int, a: int=1977605955565678656):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=1977605955565678656):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_38",
    "sat": "def sat(x: int, a: int=1631416361478424609):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=1631416361478424609):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_39",
    "sat": "def sat(x: int, a: int=793272816569284164):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=793272816569284164):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_40",
    "sat": "def sat(x: int, a: int=2051235529633239049):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=2051235529633239049):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_41",
    "sat": "def sat(x: int, a: int=18087311294355625):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=18087311294355625):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_42",
    "sat": "def sat(x: int, a: int=2602118190729681121):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=2602118190729681121):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_43",
    "sat": "def sat(x: int, a: int=183888431184756736):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=183888431184756736):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_44",
    "sat": "def sat(x: int, a: int=982974936683355625):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=982974936683355625):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_45",
    "sat": "def sat(x: int, a: int=84214216393072164):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=84214216393072164):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_46",
    "sat": "def sat(x: int, a: int=365228062411230225):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=365228062411230225):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_47",
    "sat": "def sat(x: int, a: int=2120757685845801025):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=2120757685845801025):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_48",
    "sat": "def sat(x: int, a: int=2631718179613265625):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=2631718179613265625):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_49",
    "sat": "def sat(x: int, a: int=89039512168481449):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=89039512168481449):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_50",
    "sat": "def sat(x: int, a: int=4494564704308934025):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=4494564704308934025):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_51",
    "sat": "def sat(x: int, a: int=362903414149110409):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=362903414149110409):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_52",
    "sat": "def sat(x: int, a: int=225226861694041284):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=225226861694041284):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_53",
    "sat": "def sat(x: int, a: int=2082503209340304):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=2082503209340304):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_54",
    "sat": "def sat(x: int, a: int=2946580022255791441):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=2946580022255791441):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_55",
    "sat": "def sat(x: int, a: int=1835640164937692169):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=1835640164937692169):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_56",
    "sat": "def sat(x: int, a: int=959575693150629025):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=959575693150629025):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_57",
    "sat": "def sat(x: int, a: int=691758050276404225):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=691758050276404225):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_58",
    "sat": "def sat(x: int, a: int=3068079354847077376):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=3068079354847077376):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_59",
    "sat": "def sat(x: int, a: int=3867584993091228409):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=3867584993091228409):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_60",
    "sat": "def sat(x: int, a: int=971646903162452196):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=971646903162452196):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_61",
    "sat": "def sat(x: int, a: int=3506303766720985344):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=3506303766720985344):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_62",
    "sat": "def sat(x: int, a: int=2808756525383237529):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=2808756525383237529):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_63",
    "sat": "def sat(x: int, a: int=682607423178354025):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=682607423178354025):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_64",
    "sat": "def sat(x: int, a: int=3434717213053784064):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=3434717213053784064):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_65",
    "sat": "def sat(x: int, a: int=428626392819531201):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=428626392819531201):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_66",
    "sat": "def sat(x: int, a: int=4466928392051159056):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=4466928392051159056):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_67",
    "sat": "def sat(x: int, a: int=4442960234122960356):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=4442960234122960356):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_68",
    "sat": "def sat(x: int, a: int=1759432202114553604):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=1759432202114553604):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_69",
    "sat": "def sat(x: int, a: int=2538559350503632681):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=2538559350503632681):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_70",
    "sat": "def sat(x: int, a: int=11547504810106489):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=11547504810106489):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_71",
    "sat": "def sat(x: int, a: int=285174786429408100):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=285174786429408100):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_72",
    "sat": "def sat(x: int, a: int=3226946836746093444):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=3226946836746093444):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_73",
    "sat": "def sat(x: int, a: int=420232672866645136):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=420232672866645136):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_74",
    "sat": "def sat(x: int, a: int=1671232368276894784):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=1671232368276894784):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_75",
    "sat": "def sat(x: int, a: int=256705168283283204):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=256705168283283204):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_76",
    "sat": "def sat(x: int, a: int=1019737480593429361):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=1019737480593429361):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_77",
    "sat": "def sat(x: int, a: int=1541718917386826049):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=1541718917386826049):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_78",
    "sat": "def sat(x: int, a: int=993956660183010001):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=993956660183010001):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_79",
    "sat": "def sat(x: int, a: int=1407628676001548961):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=1407628676001548961):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_80",
    "sat": "def sat(x: int, a: int=2414654680213782724):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=2414654680213782724):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_81",
    "sat": "def sat(x: int, a: int=507882284429911609):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=507882284429911609):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_82",
    "sat": "def sat(x: int, a: int=1993502097849978244):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=1993502097849978244):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_83",
    "sat": "def sat(x: int, a: int=2643026294665870864):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=2643026294665870864):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_84",
    "sat": "def sat(x: int, a: int=1506330040589251641):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=1506330040589251641):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_85",
    "sat": "def sat(x: int, a: int=633258816696218449):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=633258816696218449):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_86",
    "sat": "def sat(x: int, a: int=2604665056583580676):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=2604665056583580676):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_87",
    "sat": "def sat(x: int, a: int=174460168618909849):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=174460168618909849):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_88",
    "sat": "def sat(x: int, a: int=3400273451807641600):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=3400273451807641600):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_89",
    "sat": "def sat(x: int, a: int=2424741893400975625):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=2424741893400975625):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_90",
    "sat": "def sat(x: int, a: int=2334372573566583225):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=2334372573566583225):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_91",
    "sat": "def sat(x: int, a: int=2479172401214664100):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=2479172401214664100):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_92",
    "sat": "def sat(x: int, a: int=764511124427639824):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=764511124427639824):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_93",
    "sat": "def sat(x: int, a: int=979693415515604689):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=979693415515604689):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_94",
    "sat": "def sat(x: int, a: int=3726413845060053904):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=3726413845060053904):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_95",
    "sat": "def sat(x: int, a: int=565207164402812100):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=565207164402812100):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_96",
    "sat": "def sat(x: int, a: int=1537820331092545600):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=1537820331092545600):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_97",
    "sat": "def sat(x: int, a: int=2658334534904160324):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=2658334534904160324):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_98",
    "sat": "def sat(x: int, a: int=2362611821499420100):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=2362611821499420100):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRoot_99",
    "sat": "def sat(x: int, a: int=3226307055192910129):\n    assert type(x) is int, 'x must be of type int'\n    return x ** 2 == a",
    "sols": [
      "def sol(a=3226307055192910129):\n    return int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_0",
    "sat": "def sat(n: int, a: int=10000200001):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=10000200001):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_1",
    "sat": "def sat(n: int, a: int=597006308174919889):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=597006308174919889):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_2",
    "sat": "def sat(n: int, a: int=2035087713490650025):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=2035087713490650025):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_3",
    "sat": "def sat(n: int, a: int=2761749464120678656):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=2761749464120678656):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_4",
    "sat": "def sat(n: int, a: int=3142556364895073344):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=3142556364895073344):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_5",
    "sat": "def sat(n: int, a: int=3814355874825910404):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=3814355874825910404):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_6",
    "sat": "def sat(n: int, a: int=4005572623532514241):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=4005572623532514241):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_7",
    "sat": "def sat(n: int, a: int=4124858719474032400):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=4124858719474032400):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_8",
    "sat": "def sat(n: int, a: int=224245118951010756):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=224245118951010756):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_9",
    "sat": "def sat(n: int, a: int=2570799336465880081):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=2570799336465880081):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_10",
    "sat": "def sat(n: int, a: int=1224848988689223681):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=1224848988689223681):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_11",
    "sat": "def sat(n: int, a: int=3132072476992620841):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=3132072476992620841):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_12",
    "sat": "def sat(n: int, a: int=1173591638636327716):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=1173591638636327716):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_13",
    "sat": "def sat(n: int, a: int=748280224348950241):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=748280224348950241):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_14",
    "sat": "def sat(n: int, a: int=129294719988062500):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=129294719988062500):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_15",
    "sat": "def sat(n: int, a: int=2527850204450730916):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=2527850204450730916):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_16",
    "sat": "def sat(n: int, a: int=3401322622621855009):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=3401322622621855009):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_17",
    "sat": "def sat(n: int, a: int=2304702319342655236):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=2304702319342655236):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_18",
    "sat": "def sat(n: int, a: int=1390995977114255625):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=1390995977114255625):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_19",
    "sat": "def sat(n: int, a: int=316038544892379136):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=316038544892379136):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_20",
    "sat": "def sat(n: int, a: int=1116585478005882889):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=1116585478005882889):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_21",
    "sat": "def sat(n: int, a: int=373218686507047824):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=373218686507047824):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_22",
    "sat": "def sat(n: int, a: int=2215849582283292004):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=2215849582283292004):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_23",
    "sat": "def sat(n: int, a: int=49017363107417104):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=49017363107417104):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_24",
    "sat": "def sat(n: int, a: int=2488313032085705049):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=2488313032085705049):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_25",
    "sat": "def sat(n: int, a: int=606497081291600625):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=606497081291600625):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_26",
    "sat": "def sat(n: int, a: int=73340023526641):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=73340023526641):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_27",
    "sat": "def sat(n: int, a: int=4524060481081435449):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=4524060481081435449):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_28",
    "sat": "def sat(n: int, a: int=44804340032507449):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=44804340032507449):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_29",
    "sat": "def sat(n: int, a: int=822967993793595556):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=822967993793595556):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_30",
    "sat": "def sat(n: int, a: int=871366987676160000):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=871366987676160000):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_31",
    "sat": "def sat(n: int, a: int=3698903971411152196):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=3698903971411152196):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_32",
    "sat": "def sat(n: int, a: int=144083805044043076):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=144083805044043076):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_33",
    "sat": "def sat(n: int, a: int=1646956524911041600):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=1646956524911041600):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_34",
    "sat": "def sat(n: int, a: int=3883044731853098529):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=3883044731853098529):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_35",
    "sat": "def sat(n: int, a: int=1428731535520492225):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=1428731535520492225):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_36",
    "sat": "def sat(n: int, a: int=2686525469140640625):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=2686525469140640625):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_37",
    "sat": "def sat(n: int, a: int=1374068763210931264):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=1374068763210931264):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_38",
    "sat": "def sat(n: int, a: int=918430367762761984):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=918430367762761984):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_39",
    "sat": "def sat(n: int, a: int=142967551722692004):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=142967551722692004):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_40",
    "sat": "def sat(n: int, a: int=6200300831676121):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=6200300831676121):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_41",
    "sat": "def sat(n: int, a: int=1597566845741476):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=1597566845741476):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_42",
    "sat": "def sat(n: int, a: int=3778552048847739601):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=3778552048847739601):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_43",
    "sat": "def sat(n: int, a: int=275344603748820544):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=275344603748820544):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_44",
    "sat": "def sat(n: int, a: int=2968472426721844849):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=2968472426721844849):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_45",
    "sat": "def sat(n: int, a: int=4109174262882628900):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=4109174262882628900):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_46",
    "sat": "def sat(n: int, a: int=926668014588384784):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=926668014588384784):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_47",
    "sat": "def sat(n: int, a: int=2642044943585301409):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=2642044943585301409):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_48",
    "sat": "def sat(n: int, a: int=4319264787843105409):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=4319264787843105409):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_49",
    "sat": "def sat(n: int, a: int=883097472270675600):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=883097472270675600):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_50",
    "sat": "def sat(n: int, a: int=1037283660596310169):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=1037283660596310169):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_51",
    "sat": "def sat(n: int, a: int=2092077961654189441):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=2092077961654189441):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_52",
    "sat": "def sat(n: int, a: int=1120498981978700025):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=1120498981978700025):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_53",
    "sat": "def sat(n: int, a: int=4566135384383248516):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=4566135384383248516):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_54",
    "sat": "def sat(n: int, a: int=253151180847363969):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=253151180847363969):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_55",
    "sat": "def sat(n: int, a: int=101466578055844):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=101466578055844):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_56",
    "sat": "def sat(n: int, a: int=404549508449464225):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=404549508449464225):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_57",
    "sat": "def sat(n: int, a: int=106696092377367684):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=106696092377367684):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_58",
    "sat": "def sat(n: int, a: int=1589892388917422500):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=1589892388917422500):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_59",
    "sat": "def sat(n: int, a: int=35892619947389529):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=35892619947389529):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_60",
    "sat": "def sat(n: int, a: int=4122900828107490025):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=4122900828107490025):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_61",
    "sat": "def sat(n: int, a: int=74982685434012225):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=74982685434012225):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_62",
    "sat": "def sat(n: int, a: int=3427544828173591225):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=3427544828173591225):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_63",
    "sat": "def sat(n: int, a: int=2415764216588952100):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=2415764216588952100):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_64",
    "sat": "def sat(n: int, a: int=4483228343582423296):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=4483228343582423296):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_65",
    "sat": "def sat(n: int, a: int=25331845119236100):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=25331845119236100):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_66",
    "sat": "def sat(n: int, a: int=2124586457784631129):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=2124586457784631129):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_67",
    "sat": "def sat(n: int, a: int=125493117763006084):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=125493117763006084):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_68",
    "sat": "def sat(n: int, a: int=3470851117799717521):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=3470851117799717521):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_69",
    "sat": "def sat(n: int, a: int=1546053835474673424):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=1546053835474673424):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_70",
    "sat": "def sat(n: int, a: int=3562263985448119396):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=3562263985448119396):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_71",
    "sat": "def sat(n: int, a: int=662427327143860996):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=662427327143860996):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_72",
    "sat": "def sat(n: int, a: int=226983945050879041):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=226983945050879041):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_73",
    "sat": "def sat(n: int, a: int=92848913577172809):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=92848913577172809):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_74",
    "sat": "def sat(n: int, a: int=2707504794211676176):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=2707504794211676176):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_75",
    "sat": "def sat(n: int, a: int=596509741357265761):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=596509741357265761):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_76",
    "sat": "def sat(n: int, a: int=144239276627902369):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=144239276627902369):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_77",
    "sat": "def sat(n: int, a: int=2720432902917286144):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=2720432902917286144):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_78",
    "sat": "def sat(n: int, a: int=94939736294309776):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=94939736294309776):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_79",
    "sat": "def sat(n: int, a: int=2793416140738231281):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=2793416140738231281):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_80",
    "sat": "def sat(n: int, a: int=2905106369867433081):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=2905106369867433081):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_81",
    "sat": "def sat(n: int, a: int=857910060005110336):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=857910060005110336):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_82",
    "sat": "def sat(n: int, a: int=3319912858076216809):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=3319912858076216809):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_83",
    "sat": "def sat(n: int, a: int=811707974415140625):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=811707974415140625):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_84",
    "sat": "def sat(n: int, a: int=2306927102860408900):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=2306927102860408900):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_85",
    "sat": "def sat(n: int, a: int=1401610352074195081):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=1401610352074195081):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_86",
    "sat": "def sat(n: int, a: int=2973267488733974784):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=2973267488733974784):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_87",
    "sat": "def sat(n: int, a: int=1600893275645676769):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=1600893275645676769):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_88",
    "sat": "def sat(n: int, a: int=2453306300127671769):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=2453306300127671769):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_89",
    "sat": "def sat(n: int, a: int=321161529801167104):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=321161529801167104):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_90",
    "sat": "def sat(n: int, a: int=4032176986935521956):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=4032176986935521956):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_91",
    "sat": "def sat(n: int, a: int=2821567567627990756):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=2821567567627990756):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_92",
    "sat": "def sat(n: int, a: int=2034832705866189376):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=2034832705866189376):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_93",
    "sat": "def sat(n: int, a: int=1285464785717641):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=1285464785717641):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_94",
    "sat": "def sat(n: int, a: int=396176467603356036):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=396176467603356036):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_95",
    "sat": "def sat(n: int, a: int=1038176025092648289):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=1038176025092648289):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_96",
    "sat": "def sat(n: int, a: int=3969519731712660321):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=3969519731712660321):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_97",
    "sat": "def sat(n: int, a: int=1820180469197890881):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=1820180469197890881):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_98",
    "sat": "def sat(n: int, a: int=283385886246800100):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=283385886246800100):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "NegSquareRoot_99",
    "sat": "def sat(n: int, a: int=1194017117535075409):\n    assert type(n) is int, 'n must be of type int'\n    return a == n * n and n < 0",
    "sols": [
      "def sol(a=1194017117535075409):\n    return -int(a ** 0.5)"
    ]
  },
  {
    "name": "SquareRootFloat_0",
    "sat": "def sat(x: float, a: int=1020):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=1020):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_1",
    "sat": "def sat(x: float, a: int=1730948262):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=1730948262):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_2",
    "sat": "def sat(x: float, a: int=7940707210):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=7940707210):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_3",
    "sat": "def sat(x: float, a: int=4875600737):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=4875600737):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_4",
    "sat": "def sat(x: float, a: int=6915240025):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=6915240025):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_5",
    "sat": "def sat(x: float, a: int=5833669445):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=5833669445):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_6",
    "sat": "def sat(x: float, a: int=5566066403):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=5566066403):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_7",
    "sat": "def sat(x: float, a: int=5821310529):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=5821310529):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_8",
    "sat": "def sat(x: float, a: int=1706937488):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=1706937488):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_9",
    "sat": "def sat(x: float, a: int=5503229601):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=5503229601):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_10",
    "sat": "def sat(x: float, a: int=1341097246):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=1341097246):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_11",
    "sat": "def sat(x: float, a: int=8742413890):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=8742413890):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_12",
    "sat": "def sat(x: float, a: int=1986206177):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=1986206177):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_13",
    "sat": "def sat(x: float, a: int=1012101277):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=1012101277):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_14",
    "sat": "def sat(x: float, a: int=5686649458):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=5686649458):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_15",
    "sat": "def sat(x: float, a: int=9440683979):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=9440683979):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_16",
    "sat": "def sat(x: float, a: int=8478199335):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=8478199335):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_17",
    "sat": "def sat(x: float, a: int=5534559445):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=5534559445):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_18",
    "sat": "def sat(x: float, a: int=4486074815):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=4486074815):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_19",
    "sat": "def sat(x: float, a: int=8850006958):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=8850006958):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_20",
    "sat": "def sat(x: float, a: int=2342274544):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=2342274544):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_21",
    "sat": "def sat(x: float, a: int=5902471757):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=5902471757):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_22",
    "sat": "def sat(x: float, a: int=9079781037):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=9079781037):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_23",
    "sat": "def sat(x: float, a: int=7006632508):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=7006632508):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_24",
    "sat": "def sat(x: float, a: int=741626659):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=741626659):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_25",
    "sat": "def sat(x: float, a: int=3334655635):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=3334655635):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_26",
    "sat": "def sat(x: float, a: int=3874711996):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=3874711996):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_27",
    "sat": "def sat(x: float, a: int=7892250910):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=7892250910):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_28",
    "sat": "def sat(x: float, a: int=9216163111):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=9216163111):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_29",
    "sat": "def sat(x: float, a: int=158651873):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=158651873):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_30",
    "sat": "def sat(x: float, a: int=2323701206):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=2323701206):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_31",
    "sat": "def sat(x: float, a: int=5270537234):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=5270537234):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_32",
    "sat": "def sat(x: float, a: int=4820573374):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=4820573374):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_33",
    "sat": "def sat(x: float, a: int=6144064474):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=6144064474):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_34",
    "sat": "def sat(x: float, a: int=3204842622):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=3204842622):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_35",
    "sat": "def sat(x: float, a: int=3190332235):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=3190332235):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_36",
    "sat": "def sat(x: float, a: int=9015292099):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=9015292099):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_37",
    "sat": "def sat(x: float, a: int=471014200):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=471014200):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_38",
    "sat": "def sat(x: float, a: int=6489136543):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=6489136543):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_39",
    "sat": "def sat(x: float, a: int=9273406513):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=9273406513):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_40",
    "sat": "def sat(x: float, a: int=8669569925):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=8669569925):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_41",
    "sat": "def sat(x: float, a: int=8687045771):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=8687045771):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_42",
    "sat": "def sat(x: float, a: int=155808306):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=155808306):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_43",
    "sat": "def sat(x: float, a: int=2038230013):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=2038230013):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_44",
    "sat": "def sat(x: float, a: int=2850181156):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=2850181156):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_45",
    "sat": "def sat(x: float, a: int=8478868127):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=8478868127):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_46",
    "sat": "def sat(x: float, a: int=2972630022):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=2972630022):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_47",
    "sat": "def sat(x: float, a: int=4979310465):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=4979310465):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_48",
    "sat": "def sat(x: float, a: int=8015455885):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=8015455885):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_49",
    "sat": "def sat(x: float, a: int=1219718527):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=1219718527):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_50",
    "sat": "def sat(x: float, a: int=5808173864):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=5808173864):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_51",
    "sat": "def sat(x: float, a: int=488925684):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=488925684):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_52",
    "sat": "def sat(x: float, a: int=6685040372):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=6685040372):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_53",
    "sat": "def sat(x: float, a: int=4432326826):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=4432326826):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_54",
    "sat": "def sat(x: float, a: int=6067214238):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=6067214238):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_55",
    "sat": "def sat(x: float, a: int=7978827500):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=7978827500):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_56",
    "sat": "def sat(x: float, a: int=8673226958):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=8673226958):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_57",
    "sat": "def sat(x: float, a: int=418188038):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=418188038):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_58",
    "sat": "def sat(x: float, a: int=1030602604):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=1030602604):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_59",
    "sat": "def sat(x: float, a: int=5589854591):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=5589854591):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_60",
    "sat": "def sat(x: float, a: int=6370982742):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=6370982742):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_61",
    "sat": "def sat(x: float, a: int=3587655055):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=3587655055):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_62",
    "sat": "def sat(x: float, a: int=9122610024):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=9122610024):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_63",
    "sat": "def sat(x: float, a: int=3802196481):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=3802196481):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_64",
    "sat": "def sat(x: float, a: int=9409376872):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=9409376872):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_65",
    "sat": "def sat(x: float, a: int=5002626607):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=5002626607):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_66",
    "sat": "def sat(x: float, a: int=7209588703):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=7209588703):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_67",
    "sat": "def sat(x: float, a: int=669435076):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=669435076):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_68",
    "sat": "def sat(x: float, a: int=6449756423):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=6449756423):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_69",
    "sat": "def sat(x: float, a: int=4995368757):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=4995368757):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_70",
    "sat": "def sat(x: float, a: int=5416559041):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=5416559041):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_71",
    "sat": "def sat(x: float, a: int=6289784919):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=6289784919):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_72",
    "sat": "def sat(x: float, a: int=7636093323):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=7636093323):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_73",
    "sat": "def sat(x: float, a: int=9809028593):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=9809028593):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_74",
    "sat": "def sat(x: float, a: int=9112303344):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=9112303344):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_75",
    "sat": "def sat(x: float, a: int=5550327382):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=5550327382):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_76",
    "sat": "def sat(x: float, a: int=5178047595):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=5178047595):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_77",
    "sat": "def sat(x: float, a: int=168157576):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=168157576):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_78",
    "sat": "def sat(x: float, a: int=6930711487):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=6930711487):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_79",
    "sat": "def sat(x: float, a: int=4486644864):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=4486644864):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_80",
    "sat": "def sat(x: float, a: int=9369296628):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=9369296628):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_81",
    "sat": "def sat(x: float, a: int=6171266979):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=6171266979):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_82",
    "sat": "def sat(x: float, a: int=9456451322):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=9456451322):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_83",
    "sat": "def sat(x: float, a: int=2016214379):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=2016214379):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_84",
    "sat": "def sat(x: float, a: int=592871237):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=592871237):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_85",
    "sat": "def sat(x: float, a: int=8722912565):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=8722912565):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_86",
    "sat": "def sat(x: float, a: int=2635310584):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=2635310584):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_87",
    "sat": "def sat(x: float, a: int=367774541):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=367774541):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_88",
    "sat": "def sat(x: float, a: int=5529716545):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=5529716545):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_89",
    "sat": "def sat(x: float, a: int=5957862554):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=5957862554):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_90",
    "sat": "def sat(x: float, a: int=8273804114):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=8273804114):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_91",
    "sat": "def sat(x: float, a: int=878901129):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=878901129):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_92",
    "sat": "def sat(x: float, a: int=1024568116):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=1024568116):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_93",
    "sat": "def sat(x: float, a: int=2773235894):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=2773235894):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_94",
    "sat": "def sat(x: float, a: int=7304343883):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=7304343883):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_95",
    "sat": "def sat(x: float, a: int=48413753):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=48413753):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_96",
    "sat": "def sat(x: float, a: int=7203150086):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=7203150086):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_97",
    "sat": "def sat(x: float, a: int=8076581643):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=8076581643):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_98",
    "sat": "def sat(x: float, a: int=1674477979):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=1674477979):\n    return a ** 0.5"
    ]
  },
  {
    "name": "SquareRootFloat_99",
    "sat": "def sat(x: float, a: int=3379385626):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3",
    "sols": [
      "def sol(a=3379385626):\n    return a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_0",
    "sat": "def sat(x: float, a: int=1020):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=1020):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_1",
    "sat": "def sat(x: float, a: int=7305156549):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=7305156549):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_2",
    "sat": "def sat(x: float, a: int=9782882197):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=9782882197):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_3",
    "sat": "def sat(x: float, a: int=6219481049):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=6219481049):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_4",
    "sat": "def sat(x: float, a: int=1962150574):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=1962150574):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_5",
    "sat": "def sat(x: float, a: int=4740327862):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=4740327862):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_6",
    "sat": "def sat(x: float, a: int=3612757456):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=3612757456):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_7",
    "sat": "def sat(x: float, a: int=4234926043):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=4234926043):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_8",
    "sat": "def sat(x: float, a: int=9442226638):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=9442226638):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_9",
    "sat": "def sat(x: float, a: int=8883034683):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=8883034683):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_10",
    "sat": "def sat(x: float, a: int=4929177021):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=4929177021):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_11",
    "sat": "def sat(x: float, a: int=3360662099):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=3360662099):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_12",
    "sat": "def sat(x: float, a: int=8977527980):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=8977527980):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_13",
    "sat": "def sat(x: float, a: int=9134757874):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=9134757874):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_14",
    "sat": "def sat(x: float, a: int=634729550):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=634729550):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_15",
    "sat": "def sat(x: float, a: int=4873553711):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=4873553711):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_16",
    "sat": "def sat(x: float, a: int=7606082769):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=7606082769):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_17",
    "sat": "def sat(x: float, a: int=2304264033):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=2304264033):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_18",
    "sat": "def sat(x: float, a: int=254279079):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=254279079):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_19",
    "sat": "def sat(x: float, a: int=593216673):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=593216673):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_20",
    "sat": "def sat(x: float, a: int=5070244504):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=5070244504):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_21",
    "sat": "def sat(x: float, a: int=8129640833):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=8129640833):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_22",
    "sat": "def sat(x: float, a: int=4930264444):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=4930264444):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_23",
    "sat": "def sat(x: float, a: int=9076586656):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=9076586656):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_24",
    "sat": "def sat(x: float, a: int=3305872242):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=3305872242):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_25",
    "sat": "def sat(x: float, a: int=4680220022):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=4680220022):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_26",
    "sat": "def sat(x: float, a: int=4139243820):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=4139243820):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_27",
    "sat": "def sat(x: float, a: int=42649146):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=42649146):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_28",
    "sat": "def sat(x: float, a: int=8552889144):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=8552889144):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_29",
    "sat": "def sat(x: float, a: int=8249389101):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=8249389101):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_30",
    "sat": "def sat(x: float, a: int=4454884232):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=4454884232):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_31",
    "sat": "def sat(x: float, a: int=4124980495):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=4124980495):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_32",
    "sat": "def sat(x: float, a: int=2685915335):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=2685915335):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_33",
    "sat": "def sat(x: float, a: int=572728904):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=572728904):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_34",
    "sat": "def sat(x: float, a: int=1274771894):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=1274771894):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_35",
    "sat": "def sat(x: float, a: int=9507987083):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=9507987083):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_36",
    "sat": "def sat(x: float, a: int=4886250620):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=4886250620):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_37",
    "sat": "def sat(x: float, a: int=2668565322):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=2668565322):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_38",
    "sat": "def sat(x: float, a: int=8346185215):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=8346185215):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_39",
    "sat": "def sat(x: float, a: int=1817999767):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=1817999767):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_40",
    "sat": "def sat(x: float, a: int=2594054769):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=2594054769):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_41",
    "sat": "def sat(x: float, a: int=3185170304):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=3185170304):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_42",
    "sat": "def sat(x: float, a: int=3558462836):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=3558462836):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_43",
    "sat": "def sat(x: float, a: int=4539405266):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=4539405266):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_44",
    "sat": "def sat(x: float, a: int=7290897567):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=7290897567):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_45",
    "sat": "def sat(x: float, a: int=3209098348):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=3209098348):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_46",
    "sat": "def sat(x: float, a: int=4701446184):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=4701446184):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_47",
    "sat": "def sat(x: float, a: int=9288401068):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=9288401068):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_48",
    "sat": "def sat(x: float, a: int=9779204784):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=9779204784):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_49",
    "sat": "def sat(x: float, a: int=1834824507):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=1834824507):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_50",
    "sat": "def sat(x: float, a: int=8883168089):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=8883168089):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_51",
    "sat": "def sat(x: float, a: int=5069634817):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=5069634817):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_52",
    "sat": "def sat(x: float, a: int=8145466162):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=8145466162):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_53",
    "sat": "def sat(x: float, a: int=932054368):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=932054368):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_54",
    "sat": "def sat(x: float, a: int=6925915808):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=6925915808):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_55",
    "sat": "def sat(x: float, a: int=7011471687):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=7011471687):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_56",
    "sat": "def sat(x: float, a: int=1202261943):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=1202261943):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_57",
    "sat": "def sat(x: float, a: int=607731444):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=607731444):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_58",
    "sat": "def sat(x: float, a: int=9408743104):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=9408743104):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_59",
    "sat": "def sat(x: float, a: int=2938590427):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=2938590427):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_60",
    "sat": "def sat(x: float, a: int=3728218004):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=3728218004):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_61",
    "sat": "def sat(x: float, a: int=5071018914):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=5071018914):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_62",
    "sat": "def sat(x: float, a: int=9254481714):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=9254481714):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_63",
    "sat": "def sat(x: float, a: int=7698026721):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=7698026721):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_64",
    "sat": "def sat(x: float, a: int=2945141518):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=2945141518):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_65",
    "sat": "def sat(x: float, a: int=1841083372):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=1841083372):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_66",
    "sat": "def sat(x: float, a: int=4265889710):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=4265889710):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_67",
    "sat": "def sat(x: float, a: int=1639605402):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=1639605402):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_68",
    "sat": "def sat(x: float, a: int=6658132232):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=6658132232):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_69",
    "sat": "def sat(x: float, a: int=7735646150):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=7735646150):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_70",
    "sat": "def sat(x: float, a: int=1733770769):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=1733770769):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_71",
    "sat": "def sat(x: float, a: int=5910453200):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=5910453200):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_72",
    "sat": "def sat(x: float, a: int=4773102438):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=4773102438):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_73",
    "sat": "def sat(x: float, a: int=5672191888):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=5672191888):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_74",
    "sat": "def sat(x: float, a: int=2665100749):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=2665100749):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_75",
    "sat": "def sat(x: float, a: int=9394518103):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=9394518103):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_76",
    "sat": "def sat(x: float, a: int=9418741908):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=9418741908):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_77",
    "sat": "def sat(x: float, a: int=8251023791):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=8251023791):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_78",
    "sat": "def sat(x: float, a: int=6176855855):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=6176855855):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_79",
    "sat": "def sat(x: float, a: int=8566704079):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=8566704079):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_80",
    "sat": "def sat(x: float, a: int=3421943550):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=3421943550):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_81",
    "sat": "def sat(x: float, a: int=5053493234):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=5053493234):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_82",
    "sat": "def sat(x: float, a: int=7922952526):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=7922952526):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_83",
    "sat": "def sat(x: float, a: int=9853332326):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=9853332326):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_84",
    "sat": "def sat(x: float, a: int=34176970):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=34176970):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_85",
    "sat": "def sat(x: float, a: int=292350126):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=292350126):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_86",
    "sat": "def sat(x: float, a: int=2909003896):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=2909003896):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_87",
    "sat": "def sat(x: float, a: int=4645635382):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=4645635382):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_88",
    "sat": "def sat(x: float, a: int=1152366431):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=1152366431):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_89",
    "sat": "def sat(x: float, a: int=384094904):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=384094904):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_90",
    "sat": "def sat(x: float, a: int=505820352):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=505820352):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_91",
    "sat": "def sat(x: float, a: int=5614272839):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=5614272839):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_92",
    "sat": "def sat(x: float, a: int=3523649033):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=3523649033):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_93",
    "sat": "def sat(x: float, a: int=8560317258):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=8560317258):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_94",
    "sat": "def sat(x: float, a: int=5205518293):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=5205518293):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_95",
    "sat": "def sat(x: float, a: int=5992044865):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=5992044865):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_96",
    "sat": "def sat(x: float, a: int=1959059067):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=1959059067):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_97",
    "sat": "def sat(x: float, a: int=4087493789):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=4087493789):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_98",
    "sat": "def sat(x: float, a: int=9426728766):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=9426728766):\n    return -a ** 0.5"
    ]
  },
  {
    "name": "NegSquareRootFloat_99",
    "sat": "def sat(x: float, a: int=6976553307):\n    assert type(x) is float, 'x must be of type float'\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "sols": [
      "def sol(a=6976553307):\n    return -a ** 0.5"
    ]
  }
]