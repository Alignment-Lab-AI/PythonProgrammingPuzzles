[
  {
    "name": "Oscillators_0",
    "sat": "def sat(init: List[List[int]], period: int=3):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": [
      "def sol(period=3):  # generate random patterns, slow solution\n    # def viz(live):\n    #     if not live:\n    #         return\n    #     a, b = min(z.real for z in live), min(z.imag for z in live)\n    #     live = {z - (a + b * 1j) for z in live}\n    #     m, n = int(max(z.real for z in live)) + 1, int(max(z.imag for z in live)) + 1\n    #     for x in range(m):\n    #         print(\"\".join(\"X\" if x + y * 1j in live else \",\" for y in range(n)))\n\n    import random\n    rand = random.Random(1)\n    # print(f\"Looking for {period}:\")\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    completes = [[x + y * 1j for x in range(n) for y in range(n)] for n in range(30)]\n\n    for _attempt in range(10 ** 5):\n        n = rand.randrange(3, 10)\n        m = rand.randrange(3, n * n)\n        live = set(rand.sample(completes[n], m))\n        if rand.randrange(2):\n            live.update([-z for z in live])\n        if rand.randrange(2):\n            live.update([z.conjugate() for z in live])\n        memory = {}\n        for step in range(period * 10):\n            key = sum((.123 - .99123j) ** z for z in live) * 10 ** 5\n            key = int(key.real), int(key.imag)\n            if key in memory:\n                if memory[key] == step - period:\n                    # print(period)\n                    # viz(live)\n                    return [[int(z.real), int(z.imag)] for z in live]\n                break\n            memory[key] = step\n            visible = {z + d for z in live for d in deltas}\n            live = {z for z in visible if sum(z + d in live for d in deltas) in range(3 - (z in live), 4)}\n\n    return None  # failed"
    ]
  },
  {
    "name": "Oscillators_1",
    "sat": "def sat(init: List[List[int]], period: int=1):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": [
      "def sol(period=1):  # generate random patterns, slow solution\n    # def viz(live):\n    #     if not live:\n    #         return\n    #     a, b = min(z.real for z in live), min(z.imag for z in live)\n    #     live = {z - (a + b * 1j) for z in live}\n    #     m, n = int(max(z.real for z in live)) + 1, int(max(z.imag for z in live)) + 1\n    #     for x in range(m):\n    #         print(\"\".join(\"X\" if x + y * 1j in live else \",\" for y in range(n)))\n\n    import random\n    rand = random.Random(1)\n    # print(f\"Looking for {period}:\")\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    completes = [[x + y * 1j for x in range(n) for y in range(n)] for n in range(30)]\n\n    for _attempt in range(10 ** 5):\n        n = rand.randrange(3, 10)\n        m = rand.randrange(3, n * n)\n        live = set(rand.sample(completes[n], m))\n        if rand.randrange(2):\n            live.update([-z for z in live])\n        if rand.randrange(2):\n            live.update([z.conjugate() for z in live])\n        memory = {}\n        for step in range(period * 10):\n            key = sum((.123 - .99123j) ** z for z in live) * 10 ** 5\n            key = int(key.real), int(key.imag)\n            if key in memory:\n                if memory[key] == step - period:\n                    # print(period)\n                    # viz(live)\n                    return [[int(z.real), int(z.imag)] for z in live]\n                break\n            memory[key] = step\n            visible = {z + d for z in live for d in deltas}\n            live = {z for z in visible if sum(z + d in live for d in deltas) in range(3 - (z in live), 4)}\n\n    return None  # failed"
    ]
  },
  {
    "name": "Oscillators_2",
    "sat": "def sat(init: List[List[int]], period: int=2):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": [
      "def sol(period=2):  # generate random patterns, slow solution\n    # def viz(live):\n    #     if not live:\n    #         return\n    #     a, b = min(z.real for z in live), min(z.imag for z in live)\n    #     live = {z - (a + b * 1j) for z in live}\n    #     m, n = int(max(z.real for z in live)) + 1, int(max(z.imag for z in live)) + 1\n    #     for x in range(m):\n    #         print(\"\".join(\"X\" if x + y * 1j in live else \",\" for y in range(n)))\n\n    import random\n    rand = random.Random(1)\n    # print(f\"Looking for {period}:\")\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    completes = [[x + y * 1j for x in range(n) for y in range(n)] for n in range(30)]\n\n    for _attempt in range(10 ** 5):\n        n = rand.randrange(3, 10)\n        m = rand.randrange(3, n * n)\n        live = set(rand.sample(completes[n], m))\n        if rand.randrange(2):\n            live.update([-z for z in live])\n        if rand.randrange(2):\n            live.update([z.conjugate() for z in live])\n        memory = {}\n        for step in range(period * 10):\n            key = sum((.123 - .99123j) ** z for z in live) * 10 ** 5\n            key = int(key.real), int(key.imag)\n            if key in memory:\n                if memory[key] == step - period:\n                    # print(period)\n                    # viz(live)\n                    return [[int(z.real), int(z.imag)] for z in live]\n                break\n            memory[key] = step\n            visible = {z + d for z in live for d in deltas}\n            live = {z for z in visible if sum(z + d in live for d in deltas) in range(3 - (z in live), 4)}\n\n    return None  # failed"
    ]
  },
  {
    "name": "Oscillators_3",
    "sat": "def sat(init: List[List[int]], period: int=4):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_4",
    "sat": "def sat(init: List[List[int]], period: int=5):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_5",
    "sat": "def sat(init: List[List[int]], period: int=6):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_6",
    "sat": "def sat(init: List[List[int]], period: int=7):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_7",
    "sat": "def sat(init: List[List[int]], period: int=8):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_8",
    "sat": "def sat(init: List[List[int]], period: int=9):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_9",
    "sat": "def sat(init: List[List[int]], period: int=10):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_10",
    "sat": "def sat(init: List[List[int]], period: int=11):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_11",
    "sat": "def sat(init: List[List[int]], period: int=12):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_12",
    "sat": "def sat(init: List[List[int]], period: int=13):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_13",
    "sat": "def sat(init: List[List[int]], period: int=14):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_14",
    "sat": "def sat(init: List[List[int]], period: int=15):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_15",
    "sat": "def sat(init: List[List[int]], period: int=16):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_16",
    "sat": "def sat(init: List[List[int]], period: int=17):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_17",
    "sat": "def sat(init: List[List[int]], period: int=18):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_18",
    "sat": "def sat(init: List[List[int]], period: int=19):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_19",
    "sat": "def sat(init: List[List[int]], period: int=20):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_20",
    "sat": "def sat(init: List[List[int]], period: int=21):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_21",
    "sat": "def sat(init: List[List[int]], period: int=22):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_22",
    "sat": "def sat(init: List[List[int]], period: int=23):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_23",
    "sat": "def sat(init: List[List[int]], period: int=24):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_24",
    "sat": "def sat(init: List[List[int]], period: int=25):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_25",
    "sat": "def sat(init: List[List[int]], period: int=26):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_26",
    "sat": "def sat(init: List[List[int]], period: int=27):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_27",
    "sat": "def sat(init: List[List[int]], period: int=28):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_28",
    "sat": "def sat(init: List[List[int]], period: int=29):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_29",
    "sat": "def sat(init: List[List[int]], period: int=30):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_30",
    "sat": "def sat(init: List[List[int]], period: int=31):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_31",
    "sat": "def sat(init: List[List[int]], period: int=32):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_32",
    "sat": "def sat(init: List[List[int]], period: int=33):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_33",
    "sat": "def sat(init: List[List[int]], period: int=34):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_34",
    "sat": "def sat(init: List[List[int]], period: int=35):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_35",
    "sat": "def sat(init: List[List[int]], period: int=36):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_36",
    "sat": "def sat(init: List[List[int]], period: int=37):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_37",
    "sat": "def sat(init: List[List[int]], period: int=38):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_38",
    "sat": "def sat(init: List[List[int]], period: int=39):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_39",
    "sat": "def sat(init: List[List[int]], period: int=40):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_40",
    "sat": "def sat(init: List[List[int]], period: int=41):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_41",
    "sat": "def sat(init: List[List[int]], period: int=42):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_42",
    "sat": "def sat(init: List[List[int]], period: int=43):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_43",
    "sat": "def sat(init: List[List[int]], period: int=44):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_44",
    "sat": "def sat(init: List[List[int]], period: int=45):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_45",
    "sat": "def sat(init: List[List[int]], period: int=46):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_46",
    "sat": "def sat(init: List[List[int]], period: int=47):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_47",
    "sat": "def sat(init: List[List[int]], period: int=48):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_48",
    "sat": "def sat(init: List[List[int]], period: int=49):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_49",
    "sat": "def sat(init: List[List[int]], period: int=50):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_50",
    "sat": "def sat(init: List[List[int]], period: int=51):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_51",
    "sat": "def sat(init: List[List[int]], period: int=52):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_52",
    "sat": "def sat(init: List[List[int]], period: int=53):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_53",
    "sat": "def sat(init: List[List[int]], period: int=54):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_54",
    "sat": "def sat(init: List[List[int]], period: int=55):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_55",
    "sat": "def sat(init: List[List[int]], period: int=56):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_56",
    "sat": "def sat(init: List[List[int]], period: int=57):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_57",
    "sat": "def sat(init: List[List[int]], period: int=58):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_58",
    "sat": "def sat(init: List[List[int]], period: int=59):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_59",
    "sat": "def sat(init: List[List[int]], period: int=60):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_60",
    "sat": "def sat(init: List[List[int]], period: int=61):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_61",
    "sat": "def sat(init: List[List[int]], period: int=62):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_62",
    "sat": "def sat(init: List[List[int]], period: int=63):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_63",
    "sat": "def sat(init: List[List[int]], period: int=64):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_64",
    "sat": "def sat(init: List[List[int]], period: int=65):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_65",
    "sat": "def sat(init: List[List[int]], period: int=66):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_66",
    "sat": "def sat(init: List[List[int]], period: int=67):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_67",
    "sat": "def sat(init: List[List[int]], period: int=68):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_68",
    "sat": "def sat(init: List[List[int]], period: int=69):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_69",
    "sat": "def sat(init: List[List[int]], period: int=70):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_70",
    "sat": "def sat(init: List[List[int]], period: int=71):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_71",
    "sat": "def sat(init: List[List[int]], period: int=72):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_72",
    "sat": "def sat(init: List[List[int]], period: int=73):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_73",
    "sat": "def sat(init: List[List[int]], period: int=74):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_74",
    "sat": "def sat(init: List[List[int]], period: int=75):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_75",
    "sat": "def sat(init: List[List[int]], period: int=76):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_76",
    "sat": "def sat(init: List[List[int]], period: int=77):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_77",
    "sat": "def sat(init: List[List[int]], period: int=78):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_78",
    "sat": "def sat(init: List[List[int]], period: int=79):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_79",
    "sat": "def sat(init: List[List[int]], period: int=80):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_80",
    "sat": "def sat(init: List[List[int]], period: int=81):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_81",
    "sat": "def sat(init: List[List[int]], period: int=82):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_82",
    "sat": "def sat(init: List[List[int]], period: int=83):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_83",
    "sat": "def sat(init: List[List[int]], period: int=84):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_84",
    "sat": "def sat(init: List[List[int]], period: int=85):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_85",
    "sat": "def sat(init: List[List[int]], period: int=86):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_86",
    "sat": "def sat(init: List[List[int]], period: int=87):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_87",
    "sat": "def sat(init: List[List[int]], period: int=88):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_88",
    "sat": "def sat(init: List[List[int]], period: int=89):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_89",
    "sat": "def sat(init: List[List[int]], period: int=90):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_90",
    "sat": "def sat(init: List[List[int]], period: int=91):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_91",
    "sat": "def sat(init: List[List[int]], period: int=92):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_92",
    "sat": "def sat(init: List[List[int]], period: int=93):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_93",
    "sat": "def sat(init: List[List[int]], period: int=94):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_94",
    "sat": "def sat(init: List[List[int]], period: int=95):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_95",
    "sat": "def sat(init: List[List[int]], period: int=96):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_96",
    "sat": "def sat(init: List[List[int]], period: int=97):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_97",
    "sat": "def sat(init: List[List[int]], period: int=98):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_98",
    "sat": "def sat(init: List[List[int]], period: int=99):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_99",
    "sat": "def sat(init: List[List[int]], period: int=100):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_100",
    "sat": "def sat(init: List[List[int]], period: int=101):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_101",
    "sat": "def sat(init: List[List[int]], period: int=102):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_102",
    "sat": "def sat(init: List[List[int]], period: int=103):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_103",
    "sat": "def sat(init: List[List[int]], period: int=104):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_104",
    "sat": "def sat(init: List[List[int]], period: int=105):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_105",
    "sat": "def sat(init: List[List[int]], period: int=106):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_106",
    "sat": "def sat(init: List[List[int]], period: int=107):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_107",
    "sat": "def sat(init: List[List[int]], period: int=108):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_108",
    "sat": "def sat(init: List[List[int]], period: int=109):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_109",
    "sat": "def sat(init: List[List[int]], period: int=110):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_110",
    "sat": "def sat(init: List[List[int]], period: int=111):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_111",
    "sat": "def sat(init: List[List[int]], period: int=112):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_112",
    "sat": "def sat(init: List[List[int]], period: int=113):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_113",
    "sat": "def sat(init: List[List[int]], period: int=114):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_114",
    "sat": "def sat(init: List[List[int]], period: int=115):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_115",
    "sat": "def sat(init: List[List[int]], period: int=116):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_116",
    "sat": "def sat(init: List[List[int]], period: int=117):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_117",
    "sat": "def sat(init: List[List[int]], period: int=118):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_118",
    "sat": "def sat(init: List[List[int]], period: int=119):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_119",
    "sat": "def sat(init: List[List[int]], period: int=120):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_120",
    "sat": "def sat(init: List[List[int]], period: int=121):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_121",
    "sat": "def sat(init: List[List[int]], period: int=122):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_122",
    "sat": "def sat(init: List[List[int]], period: int=123):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_123",
    "sat": "def sat(init: List[List[int]], period: int=124):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_124",
    "sat": "def sat(init: List[List[int]], period: int=125):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_125",
    "sat": "def sat(init: List[List[int]], period: int=126):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_126",
    "sat": "def sat(init: List[List[int]], period: int=127):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_127",
    "sat": "def sat(init: List[List[int]], period: int=128):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_128",
    "sat": "def sat(init: List[List[int]], period: int=129):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_129",
    "sat": "def sat(init: List[List[int]], period: int=130):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_130",
    "sat": "def sat(init: List[List[int]], period: int=131):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_131",
    "sat": "def sat(init: List[List[int]], period: int=132):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_132",
    "sat": "def sat(init: List[List[int]], period: int=133):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_133",
    "sat": "def sat(init: List[List[int]], period: int=134):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_134",
    "sat": "def sat(init: List[List[int]], period: int=135):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_135",
    "sat": "def sat(init: List[List[int]], period: int=136):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_136",
    "sat": "def sat(init: List[List[int]], period: int=137):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_137",
    "sat": "def sat(init: List[List[int]], period: int=138):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_138",
    "sat": "def sat(init: List[List[int]], period: int=139):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_139",
    "sat": "def sat(init: List[List[int]], period: int=140):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_140",
    "sat": "def sat(init: List[List[int]], period: int=141):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_141",
    "sat": "def sat(init: List[List[int]], period: int=142):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_142",
    "sat": "def sat(init: List[List[int]], period: int=143):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_143",
    "sat": "def sat(init: List[List[int]], period: int=144):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_144",
    "sat": "def sat(init: List[List[int]], period: int=145):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_145",
    "sat": "def sat(init: List[List[int]], period: int=146):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_146",
    "sat": "def sat(init: List[List[int]], period: int=147):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_147",
    "sat": "def sat(init: List[List[int]], period: int=148):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_148",
    "sat": "def sat(init: List[List[int]], period: int=149):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_149",
    "sat": "def sat(init: List[List[int]], period: int=150):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_150",
    "sat": "def sat(init: List[List[int]], period: int=151):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_151",
    "sat": "def sat(init: List[List[int]], period: int=152):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_152",
    "sat": "def sat(init: List[List[int]], period: int=153):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_153",
    "sat": "def sat(init: List[List[int]], period: int=154):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_154",
    "sat": "def sat(init: List[List[int]], period: int=155):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_155",
    "sat": "def sat(init: List[List[int]], period: int=156):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_156",
    "sat": "def sat(init: List[List[int]], period: int=157):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_157",
    "sat": "def sat(init: List[List[int]], period: int=158):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_158",
    "sat": "def sat(init: List[List[int]], period: int=159):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_159",
    "sat": "def sat(init: List[List[int]], period: int=160):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_160",
    "sat": "def sat(init: List[List[int]], period: int=161):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_161",
    "sat": "def sat(init: List[List[int]], period: int=162):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_162",
    "sat": "def sat(init: List[List[int]], period: int=163):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_163",
    "sat": "def sat(init: List[List[int]], period: int=164):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_164",
    "sat": "def sat(init: List[List[int]], period: int=165):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_165",
    "sat": "def sat(init: List[List[int]], period: int=166):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_166",
    "sat": "def sat(init: List[List[int]], period: int=167):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_167",
    "sat": "def sat(init: List[List[int]], period: int=168):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_168",
    "sat": "def sat(init: List[List[int]], period: int=169):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_169",
    "sat": "def sat(init: List[List[int]], period: int=170):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_170",
    "sat": "def sat(init: List[List[int]], period: int=171):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_171",
    "sat": "def sat(init: List[List[int]], period: int=172):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_172",
    "sat": "def sat(init: List[List[int]], period: int=173):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_173",
    "sat": "def sat(init: List[List[int]], period: int=174):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_174",
    "sat": "def sat(init: List[List[int]], period: int=175):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_175",
    "sat": "def sat(init: List[List[int]], period: int=176):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_176",
    "sat": "def sat(init: List[List[int]], period: int=177):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_177",
    "sat": "def sat(init: List[List[int]], period: int=178):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_178",
    "sat": "def sat(init: List[List[int]], period: int=179):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_179",
    "sat": "def sat(init: List[List[int]], period: int=180):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_180",
    "sat": "def sat(init: List[List[int]], period: int=181):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_181",
    "sat": "def sat(init: List[List[int]], period: int=182):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_182",
    "sat": "def sat(init: List[List[int]], period: int=183):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_183",
    "sat": "def sat(init: List[List[int]], period: int=184):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_184",
    "sat": "def sat(init: List[List[int]], period: int=185):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_185",
    "sat": "def sat(init: List[List[int]], period: int=186):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_186",
    "sat": "def sat(init: List[List[int]], period: int=187):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_187",
    "sat": "def sat(init: List[List[int]], period: int=188):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_188",
    "sat": "def sat(init: List[List[int]], period: int=189):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_189",
    "sat": "def sat(init: List[List[int]], period: int=190):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_190",
    "sat": "def sat(init: List[List[int]], period: int=191):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_191",
    "sat": "def sat(init: List[List[int]], period: int=192):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_192",
    "sat": "def sat(init: List[List[int]], period: int=193):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_193",
    "sat": "def sat(init: List[List[int]], period: int=194):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_194",
    "sat": "def sat(init: List[List[int]], period: int=195):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_195",
    "sat": "def sat(init: List[List[int]], period: int=196):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_196",
    "sat": "def sat(init: List[List[int]], period: int=197):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_197",
    "sat": "def sat(init: List[List[int]], period: int=198):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_198",
    "sat": "def sat(init: List[List[int]], period: int=199):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_199",
    "sat": "def sat(init: List[List[int]], period: int=200):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_200",
    "sat": "def sat(init: List[List[int]], period: int=201):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_201",
    "sat": "def sat(init: List[List[int]], period: int=202):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_202",
    "sat": "def sat(init: List[List[int]], period: int=203):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_203",
    "sat": "def sat(init: List[List[int]], period: int=204):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_204",
    "sat": "def sat(init: List[List[int]], period: int=205):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_205",
    "sat": "def sat(init: List[List[int]], period: int=206):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_206",
    "sat": "def sat(init: List[List[int]], period: int=207):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_207",
    "sat": "def sat(init: List[List[int]], period: int=208):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_208",
    "sat": "def sat(init: List[List[int]], period: int=209):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_209",
    "sat": "def sat(init: List[List[int]], period: int=210):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_210",
    "sat": "def sat(init: List[List[int]], period: int=211):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_211",
    "sat": "def sat(init: List[List[int]], period: int=212):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_212",
    "sat": "def sat(init: List[List[int]], period: int=213):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_213",
    "sat": "def sat(init: List[List[int]], period: int=214):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_214",
    "sat": "def sat(init: List[List[int]], period: int=215):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_215",
    "sat": "def sat(init: List[List[int]], period: int=216):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_216",
    "sat": "def sat(init: List[List[int]], period: int=217):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_217",
    "sat": "def sat(init: List[List[int]], period: int=218):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_218",
    "sat": "def sat(init: List[List[int]], period: int=219):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_219",
    "sat": "def sat(init: List[List[int]], period: int=220):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_220",
    "sat": "def sat(init: List[List[int]], period: int=221):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_221",
    "sat": "def sat(init: List[List[int]], period: int=222):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_222",
    "sat": "def sat(init: List[List[int]], period: int=223):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_223",
    "sat": "def sat(init: List[List[int]], period: int=224):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_224",
    "sat": "def sat(init: List[List[int]], period: int=225):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_225",
    "sat": "def sat(init: List[List[int]], period: int=226):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_226",
    "sat": "def sat(init: List[List[int]], period: int=227):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_227",
    "sat": "def sat(init: List[List[int]], period: int=228):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_228",
    "sat": "def sat(init: List[List[int]], period: int=229):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_229",
    "sat": "def sat(init: List[List[int]], period: int=230):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_230",
    "sat": "def sat(init: List[List[int]], period: int=231):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_231",
    "sat": "def sat(init: List[List[int]], period: int=232):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_232",
    "sat": "def sat(init: List[List[int]], period: int=233):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_233",
    "sat": "def sat(init: List[List[int]], period: int=234):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_234",
    "sat": "def sat(init: List[List[int]], period: int=235):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_235",
    "sat": "def sat(init: List[List[int]], period: int=236):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_236",
    "sat": "def sat(init: List[List[int]], period: int=237):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_237",
    "sat": "def sat(init: List[List[int]], period: int=238):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_238",
    "sat": "def sat(init: List[List[int]], period: int=239):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_239",
    "sat": "def sat(init: List[List[int]], period: int=240):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_240",
    "sat": "def sat(init: List[List[int]], period: int=241):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_241",
    "sat": "def sat(init: List[List[int]], period: int=242):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_242",
    "sat": "def sat(init: List[List[int]], period: int=243):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_243",
    "sat": "def sat(init: List[List[int]], period: int=244):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_244",
    "sat": "def sat(init: List[List[int]], period: int=245):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_245",
    "sat": "def sat(init: List[List[int]], period: int=246):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_246",
    "sat": "def sat(init: List[List[int]], period: int=247):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_247",
    "sat": "def sat(init: List[List[int]], period: int=248):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_248",
    "sat": "def sat(init: List[List[int]], period: int=249):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_249",
    "sat": "def sat(init: List[List[int]], period: int=250):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_250",
    "sat": "def sat(init: List[List[int]], period: int=251):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_251",
    "sat": "def sat(init: List[List[int]], period: int=252):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_252",
    "sat": "def sat(init: List[List[int]], period: int=253):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_253",
    "sat": "def sat(init: List[List[int]], period: int=254):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_254",
    "sat": "def sat(init: List[List[int]], period: int=255):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_255",
    "sat": "def sat(init: List[List[int]], period: int=256):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_256",
    "sat": "def sat(init: List[List[int]], period: int=257):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_257",
    "sat": "def sat(init: List[List[int]], period: int=258):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_258",
    "sat": "def sat(init: List[List[int]], period: int=259):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_259",
    "sat": "def sat(init: List[List[int]], period: int=260):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_260",
    "sat": "def sat(init: List[List[int]], period: int=261):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_261",
    "sat": "def sat(init: List[List[int]], period: int=262):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_262",
    "sat": "def sat(init: List[List[int]], period: int=263):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_263",
    "sat": "def sat(init: List[List[int]], period: int=264):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_264",
    "sat": "def sat(init: List[List[int]], period: int=265):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_265",
    "sat": "def sat(init: List[List[int]], period: int=266):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_266",
    "sat": "def sat(init: List[List[int]], period: int=267):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_267",
    "sat": "def sat(init: List[List[int]], period: int=268):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_268",
    "sat": "def sat(init: List[List[int]], period: int=269):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_269",
    "sat": "def sat(init: List[List[int]], period: int=270):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_270",
    "sat": "def sat(init: List[List[int]], period: int=271):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_271",
    "sat": "def sat(init: List[List[int]], period: int=272):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_272",
    "sat": "def sat(init: List[List[int]], period: int=273):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_273",
    "sat": "def sat(init: List[List[int]], period: int=274):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_274",
    "sat": "def sat(init: List[List[int]], period: int=275):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_275",
    "sat": "def sat(init: List[List[int]], period: int=276):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_276",
    "sat": "def sat(init: List[List[int]], period: int=277):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_277",
    "sat": "def sat(init: List[List[int]], period: int=278):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_278",
    "sat": "def sat(init: List[List[int]], period: int=279):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_279",
    "sat": "def sat(init: List[List[int]], period: int=280):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_280",
    "sat": "def sat(init: List[List[int]], period: int=281):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_281",
    "sat": "def sat(init: List[List[int]], period: int=282):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_282",
    "sat": "def sat(init: List[List[int]], period: int=283):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_283",
    "sat": "def sat(init: List[List[int]], period: int=284):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_284",
    "sat": "def sat(init: List[List[int]], period: int=285):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_285",
    "sat": "def sat(init: List[List[int]], period: int=286):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_286",
    "sat": "def sat(init: List[List[int]], period: int=287):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_287",
    "sat": "def sat(init: List[List[int]], period: int=288):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_288",
    "sat": "def sat(init: List[List[int]], period: int=289):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_289",
    "sat": "def sat(init: List[List[int]], period: int=290):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_290",
    "sat": "def sat(init: List[List[int]], period: int=291):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_291",
    "sat": "def sat(init: List[List[int]], period: int=292):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_292",
    "sat": "def sat(init: List[List[int]], period: int=293):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_293",
    "sat": "def sat(init: List[List[int]], period: int=294):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_294",
    "sat": "def sat(init: List[List[int]], period: int=295):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_295",
    "sat": "def sat(init: List[List[int]], period: int=296):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_296",
    "sat": "def sat(init: List[List[int]], period: int=297):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_297",
    "sat": "def sat(init: List[List[int]], period: int=298):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_298",
    "sat": "def sat(init: List[List[int]], period: int=299):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_299",
    "sat": "def sat(init: List[List[int]], period: int=300):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_300",
    "sat": "def sat(init: List[List[int]], period: int=301):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_301",
    "sat": "def sat(init: List[List[int]], period: int=302):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_302",
    "sat": "def sat(init: List[List[int]], period: int=303):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_303",
    "sat": "def sat(init: List[List[int]], period: int=304):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_304",
    "sat": "def sat(init: List[List[int]], period: int=305):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_305",
    "sat": "def sat(init: List[List[int]], period: int=306):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_306",
    "sat": "def sat(init: List[List[int]], period: int=307):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_307",
    "sat": "def sat(init: List[List[int]], period: int=308):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_308",
    "sat": "def sat(init: List[List[int]], period: int=309):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_309",
    "sat": "def sat(init: List[List[int]], period: int=310):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_310",
    "sat": "def sat(init: List[List[int]], period: int=311):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_311",
    "sat": "def sat(init: List[List[int]], period: int=312):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_312",
    "sat": "def sat(init: List[List[int]], period: int=313):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_313",
    "sat": "def sat(init: List[List[int]], period: int=314):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_314",
    "sat": "def sat(init: List[List[int]], period: int=315):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_315",
    "sat": "def sat(init: List[List[int]], period: int=316):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_316",
    "sat": "def sat(init: List[List[int]], period: int=317):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_317",
    "sat": "def sat(init: List[List[int]], period: int=318):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_318",
    "sat": "def sat(init: List[List[int]], period: int=319):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_319",
    "sat": "def sat(init: List[List[int]], period: int=320):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_320",
    "sat": "def sat(init: List[List[int]], period: int=321):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_321",
    "sat": "def sat(init: List[List[int]], period: int=322):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_322",
    "sat": "def sat(init: List[List[int]], period: int=323):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_323",
    "sat": "def sat(init: List[List[int]], period: int=324):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_324",
    "sat": "def sat(init: List[List[int]], period: int=325):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_325",
    "sat": "def sat(init: List[List[int]], period: int=326):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_326",
    "sat": "def sat(init: List[List[int]], period: int=327):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_327",
    "sat": "def sat(init: List[List[int]], period: int=328):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_328",
    "sat": "def sat(init: List[List[int]], period: int=329):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_329",
    "sat": "def sat(init: List[List[int]], period: int=330):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_330",
    "sat": "def sat(init: List[List[int]], period: int=331):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_331",
    "sat": "def sat(init: List[List[int]], period: int=332):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_332",
    "sat": "def sat(init: List[List[int]], period: int=333):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_333",
    "sat": "def sat(init: List[List[int]], period: int=334):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_334",
    "sat": "def sat(init: List[List[int]], period: int=335):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_335",
    "sat": "def sat(init: List[List[int]], period: int=336):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_336",
    "sat": "def sat(init: List[List[int]], period: int=337):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_337",
    "sat": "def sat(init: List[List[int]], period: int=338):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_338",
    "sat": "def sat(init: List[List[int]], period: int=339):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_339",
    "sat": "def sat(init: List[List[int]], period: int=340):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_340",
    "sat": "def sat(init: List[List[int]], period: int=341):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_341",
    "sat": "def sat(init: List[List[int]], period: int=342):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_342",
    "sat": "def sat(init: List[List[int]], period: int=343):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_343",
    "sat": "def sat(init: List[List[int]], period: int=344):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_344",
    "sat": "def sat(init: List[List[int]], period: int=345):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_345",
    "sat": "def sat(init: List[List[int]], period: int=346):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_346",
    "sat": "def sat(init: List[List[int]], period: int=347):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_347",
    "sat": "def sat(init: List[List[int]], period: int=348):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_348",
    "sat": "def sat(init: List[List[int]], period: int=349):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_349",
    "sat": "def sat(init: List[List[int]], period: int=350):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_350",
    "sat": "def sat(init: List[List[int]], period: int=351):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_351",
    "sat": "def sat(init: List[List[int]], period: int=352):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_352",
    "sat": "def sat(init: List[List[int]], period: int=353):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_353",
    "sat": "def sat(init: List[List[int]], period: int=354):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_354",
    "sat": "def sat(init: List[List[int]], period: int=355):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_355",
    "sat": "def sat(init: List[List[int]], period: int=356):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_356",
    "sat": "def sat(init: List[List[int]], period: int=357):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_357",
    "sat": "def sat(init: List[List[int]], period: int=358):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_358",
    "sat": "def sat(init: List[List[int]], period: int=359):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_359",
    "sat": "def sat(init: List[List[int]], period: int=360):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_360",
    "sat": "def sat(init: List[List[int]], period: int=361):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_361",
    "sat": "def sat(init: List[List[int]], period: int=362):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_362",
    "sat": "def sat(init: List[List[int]], period: int=363):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_363",
    "sat": "def sat(init: List[List[int]], period: int=364):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_364",
    "sat": "def sat(init: List[List[int]], period: int=365):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_365",
    "sat": "def sat(init: List[List[int]], period: int=366):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_366",
    "sat": "def sat(init: List[List[int]], period: int=367):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_367",
    "sat": "def sat(init: List[List[int]], period: int=368):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_368",
    "sat": "def sat(init: List[List[int]], period: int=369):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_369",
    "sat": "def sat(init: List[List[int]], period: int=370):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_370",
    "sat": "def sat(init: List[List[int]], period: int=371):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_371",
    "sat": "def sat(init: List[List[int]], period: int=372):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_372",
    "sat": "def sat(init: List[List[int]], period: int=373):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_373",
    "sat": "def sat(init: List[List[int]], period: int=374):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_374",
    "sat": "def sat(init: List[List[int]], period: int=375):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_375",
    "sat": "def sat(init: List[List[int]], period: int=376):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_376",
    "sat": "def sat(init: List[List[int]], period: int=377):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_377",
    "sat": "def sat(init: List[List[int]], period: int=378):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_378",
    "sat": "def sat(init: List[List[int]], period: int=379):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_379",
    "sat": "def sat(init: List[List[int]], period: int=380):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_380",
    "sat": "def sat(init: List[List[int]], period: int=381):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_381",
    "sat": "def sat(init: List[List[int]], period: int=382):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_382",
    "sat": "def sat(init: List[List[int]], period: int=383):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_383",
    "sat": "def sat(init: List[List[int]], period: int=384):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_384",
    "sat": "def sat(init: List[List[int]], period: int=385):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_385",
    "sat": "def sat(init: List[List[int]], period: int=386):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_386",
    "sat": "def sat(init: List[List[int]], period: int=387):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_387",
    "sat": "def sat(init: List[List[int]], period: int=388):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_388",
    "sat": "def sat(init: List[List[int]], period: int=389):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_389",
    "sat": "def sat(init: List[List[int]], period: int=390):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_390",
    "sat": "def sat(init: List[List[int]], period: int=391):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_391",
    "sat": "def sat(init: List[List[int]], period: int=392):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_392",
    "sat": "def sat(init: List[List[int]], period: int=393):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_393",
    "sat": "def sat(init: List[List[int]], period: int=394):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_394",
    "sat": "def sat(init: List[List[int]], period: int=395):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_395",
    "sat": "def sat(init: List[List[int]], period: int=396):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_396",
    "sat": "def sat(init: List[List[int]], period: int=397):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_397",
    "sat": "def sat(init: List[List[int]], period: int=398):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_398",
    "sat": "def sat(init: List[List[int]], period: int=399):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_399",
    "sat": "def sat(init: List[List[int]], period: int=400):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_400",
    "sat": "def sat(init: List[List[int]], period: int=401):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_401",
    "sat": "def sat(init: List[List[int]], period: int=402):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_402",
    "sat": "def sat(init: List[List[int]], period: int=403):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_403",
    "sat": "def sat(init: List[List[int]], period: int=404):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_404",
    "sat": "def sat(init: List[List[int]], period: int=405):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_405",
    "sat": "def sat(init: List[List[int]], period: int=406):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_406",
    "sat": "def sat(init: List[List[int]], period: int=407):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_407",
    "sat": "def sat(init: List[List[int]], period: int=408):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_408",
    "sat": "def sat(init: List[List[int]], period: int=409):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_409",
    "sat": "def sat(init: List[List[int]], period: int=410):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_410",
    "sat": "def sat(init: List[List[int]], period: int=411):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_411",
    "sat": "def sat(init: List[List[int]], period: int=412):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_412",
    "sat": "def sat(init: List[List[int]], period: int=413):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_413",
    "sat": "def sat(init: List[List[int]], period: int=414):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_414",
    "sat": "def sat(init: List[List[int]], period: int=415):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_415",
    "sat": "def sat(init: List[List[int]], period: int=416):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_416",
    "sat": "def sat(init: List[List[int]], period: int=417):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_417",
    "sat": "def sat(init: List[List[int]], period: int=418):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_418",
    "sat": "def sat(init: List[List[int]], period: int=419):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_419",
    "sat": "def sat(init: List[List[int]], period: int=420):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_420",
    "sat": "def sat(init: List[List[int]], period: int=421):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_421",
    "sat": "def sat(init: List[List[int]], period: int=422):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_422",
    "sat": "def sat(init: List[List[int]], period: int=423):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_423",
    "sat": "def sat(init: List[List[int]], period: int=424):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_424",
    "sat": "def sat(init: List[List[int]], period: int=425):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_425",
    "sat": "def sat(init: List[List[int]], period: int=426):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_426",
    "sat": "def sat(init: List[List[int]], period: int=427):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_427",
    "sat": "def sat(init: List[List[int]], period: int=428):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_428",
    "sat": "def sat(init: List[List[int]], period: int=429):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_429",
    "sat": "def sat(init: List[List[int]], period: int=430):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_430",
    "sat": "def sat(init: List[List[int]], period: int=431):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_431",
    "sat": "def sat(init: List[List[int]], period: int=432):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_432",
    "sat": "def sat(init: List[List[int]], period: int=433):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_433",
    "sat": "def sat(init: List[List[int]], period: int=434):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_434",
    "sat": "def sat(init: List[List[int]], period: int=435):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_435",
    "sat": "def sat(init: List[List[int]], period: int=436):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_436",
    "sat": "def sat(init: List[List[int]], period: int=437):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_437",
    "sat": "def sat(init: List[List[int]], period: int=438):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_438",
    "sat": "def sat(init: List[List[int]], period: int=439):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_439",
    "sat": "def sat(init: List[List[int]], period: int=440):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_440",
    "sat": "def sat(init: List[List[int]], period: int=441):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_441",
    "sat": "def sat(init: List[List[int]], period: int=442):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_442",
    "sat": "def sat(init: List[List[int]], period: int=443):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_443",
    "sat": "def sat(init: List[List[int]], period: int=444):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_444",
    "sat": "def sat(init: List[List[int]], period: int=445):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_445",
    "sat": "def sat(init: List[List[int]], period: int=446):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_446",
    "sat": "def sat(init: List[List[int]], period: int=447):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_447",
    "sat": "def sat(init: List[List[int]], period: int=448):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_448",
    "sat": "def sat(init: List[List[int]], period: int=449):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_449",
    "sat": "def sat(init: List[List[int]], period: int=450):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_450",
    "sat": "def sat(init: List[List[int]], period: int=451):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_451",
    "sat": "def sat(init: List[List[int]], period: int=452):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_452",
    "sat": "def sat(init: List[List[int]], period: int=453):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_453",
    "sat": "def sat(init: List[List[int]], period: int=454):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_454",
    "sat": "def sat(init: List[List[int]], period: int=455):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_455",
    "sat": "def sat(init: List[List[int]], period: int=456):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_456",
    "sat": "def sat(init: List[List[int]], period: int=457):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_457",
    "sat": "def sat(init: List[List[int]], period: int=458):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_458",
    "sat": "def sat(init: List[List[int]], period: int=459):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_459",
    "sat": "def sat(init: List[List[int]], period: int=460):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_460",
    "sat": "def sat(init: List[List[int]], period: int=461):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_461",
    "sat": "def sat(init: List[List[int]], period: int=462):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_462",
    "sat": "def sat(init: List[List[int]], period: int=463):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_463",
    "sat": "def sat(init: List[List[int]], period: int=464):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_464",
    "sat": "def sat(init: List[List[int]], period: int=465):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_465",
    "sat": "def sat(init: List[List[int]], period: int=466):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_466",
    "sat": "def sat(init: List[List[int]], period: int=467):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_467",
    "sat": "def sat(init: List[List[int]], period: int=468):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_468",
    "sat": "def sat(init: List[List[int]], period: int=469):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_469",
    "sat": "def sat(init: List[List[int]], period: int=470):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_470",
    "sat": "def sat(init: List[List[int]], period: int=471):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_471",
    "sat": "def sat(init: List[List[int]], period: int=472):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_472",
    "sat": "def sat(init: List[List[int]], period: int=473):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_473",
    "sat": "def sat(init: List[List[int]], period: int=474):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_474",
    "sat": "def sat(init: List[List[int]], period: int=475):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_475",
    "sat": "def sat(init: List[List[int]], period: int=476):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_476",
    "sat": "def sat(init: List[List[int]], period: int=477):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_477",
    "sat": "def sat(init: List[List[int]], period: int=478):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_478",
    "sat": "def sat(init: List[List[int]], period: int=479):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_479",
    "sat": "def sat(init: List[List[int]], period: int=480):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_480",
    "sat": "def sat(init: List[List[int]], period: int=481):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_481",
    "sat": "def sat(init: List[List[int]], period: int=482):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_482",
    "sat": "def sat(init: List[List[int]], period: int=483):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_483",
    "sat": "def sat(init: List[List[int]], period: int=484):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_484",
    "sat": "def sat(init: List[List[int]], period: int=485):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_485",
    "sat": "def sat(init: List[List[int]], period: int=486):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_486",
    "sat": "def sat(init: List[List[int]], period: int=487):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_487",
    "sat": "def sat(init: List[List[int]], period: int=488):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_488",
    "sat": "def sat(init: List[List[int]], period: int=489):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_489",
    "sat": "def sat(init: List[List[int]], period: int=490):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_490",
    "sat": "def sat(init: List[List[int]], period: int=491):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_491",
    "sat": "def sat(init: List[List[int]], period: int=492):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_492",
    "sat": "def sat(init: List[List[int]], period: int=493):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_493",
    "sat": "def sat(init: List[List[int]], period: int=494):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_494",
    "sat": "def sat(init: List[List[int]], period: int=495):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_495",
    "sat": "def sat(init: List[List[int]], period: int=496):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_496",
    "sat": "def sat(init: List[List[int]], period: int=497):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_497",
    "sat": "def sat(init: List[List[int]], period: int=498):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_498",
    "sat": "def sat(init: List[List[int]], period: int=499):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_499",
    "sat": "def sat(init: List[List[int]], period: int=500):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_500",
    "sat": "def sat(init: List[List[int]], period: int=501):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_501",
    "sat": "def sat(init: List[List[int]], period: int=502):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_502",
    "sat": "def sat(init: List[List[int]], period: int=503):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_503",
    "sat": "def sat(init: List[List[int]], period: int=504):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_504",
    "sat": "def sat(init: List[List[int]], period: int=505):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_505",
    "sat": "def sat(init: List[List[int]], period: int=506):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_506",
    "sat": "def sat(init: List[List[int]], period: int=507):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_507",
    "sat": "def sat(init: List[List[int]], period: int=508):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_508",
    "sat": "def sat(init: List[List[int]], period: int=509):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_509",
    "sat": "def sat(init: List[List[int]], period: int=510):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_510",
    "sat": "def sat(init: List[List[int]], period: int=511):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_511",
    "sat": "def sat(init: List[List[int]], period: int=512):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_512",
    "sat": "def sat(init: List[List[int]], period: int=513):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_513",
    "sat": "def sat(init: List[List[int]], period: int=514):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_514",
    "sat": "def sat(init: List[List[int]], period: int=515):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_515",
    "sat": "def sat(init: List[List[int]], period: int=516):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_516",
    "sat": "def sat(init: List[List[int]], period: int=517):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_517",
    "sat": "def sat(init: List[List[int]], period: int=518):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_518",
    "sat": "def sat(init: List[List[int]], period: int=519):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_519",
    "sat": "def sat(init: List[List[int]], period: int=520):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_520",
    "sat": "def sat(init: List[List[int]], period: int=521):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_521",
    "sat": "def sat(init: List[List[int]], period: int=522):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_522",
    "sat": "def sat(init: List[List[int]], period: int=523):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_523",
    "sat": "def sat(init: List[List[int]], period: int=524):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_524",
    "sat": "def sat(init: List[List[int]], period: int=525):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_525",
    "sat": "def sat(init: List[List[int]], period: int=526):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_526",
    "sat": "def sat(init: List[List[int]], period: int=527):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_527",
    "sat": "def sat(init: List[List[int]], period: int=528):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_528",
    "sat": "def sat(init: List[List[int]], period: int=529):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_529",
    "sat": "def sat(init: List[List[int]], period: int=530):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_530",
    "sat": "def sat(init: List[List[int]], period: int=531):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_531",
    "sat": "def sat(init: List[List[int]], period: int=532):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_532",
    "sat": "def sat(init: List[List[int]], period: int=533):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_533",
    "sat": "def sat(init: List[List[int]], period: int=534):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_534",
    "sat": "def sat(init: List[List[int]], period: int=535):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_535",
    "sat": "def sat(init: List[List[int]], period: int=536):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_536",
    "sat": "def sat(init: List[List[int]], period: int=537):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_537",
    "sat": "def sat(init: List[List[int]], period: int=538):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_538",
    "sat": "def sat(init: List[List[int]], period: int=539):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_539",
    "sat": "def sat(init: List[List[int]], period: int=540):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_540",
    "sat": "def sat(init: List[List[int]], period: int=541):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_541",
    "sat": "def sat(init: List[List[int]], period: int=542):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_542",
    "sat": "def sat(init: List[List[int]], period: int=543):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_543",
    "sat": "def sat(init: List[List[int]], period: int=544):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_544",
    "sat": "def sat(init: List[List[int]], period: int=545):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_545",
    "sat": "def sat(init: List[List[int]], period: int=546):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_546",
    "sat": "def sat(init: List[List[int]], period: int=547):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_547",
    "sat": "def sat(init: List[List[int]], period: int=548):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_548",
    "sat": "def sat(init: List[List[int]], period: int=549):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_549",
    "sat": "def sat(init: List[List[int]], period: int=550):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_550",
    "sat": "def sat(init: List[List[int]], period: int=551):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_551",
    "sat": "def sat(init: List[List[int]], period: int=552):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_552",
    "sat": "def sat(init: List[List[int]], period: int=553):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_553",
    "sat": "def sat(init: List[List[int]], period: int=554):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_554",
    "sat": "def sat(init: List[List[int]], period: int=555):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_555",
    "sat": "def sat(init: List[List[int]], period: int=556):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_556",
    "sat": "def sat(init: List[List[int]], period: int=557):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_557",
    "sat": "def sat(init: List[List[int]], period: int=558):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_558",
    "sat": "def sat(init: List[List[int]], period: int=559):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_559",
    "sat": "def sat(init: List[List[int]], period: int=560):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_560",
    "sat": "def sat(init: List[List[int]], period: int=561):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_561",
    "sat": "def sat(init: List[List[int]], period: int=562):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_562",
    "sat": "def sat(init: List[List[int]], period: int=563):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_563",
    "sat": "def sat(init: List[List[int]], period: int=564):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_564",
    "sat": "def sat(init: List[List[int]], period: int=565):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_565",
    "sat": "def sat(init: List[List[int]], period: int=566):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_566",
    "sat": "def sat(init: List[List[int]], period: int=567):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_567",
    "sat": "def sat(init: List[List[int]], period: int=568):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_568",
    "sat": "def sat(init: List[List[int]], period: int=569):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_569",
    "sat": "def sat(init: List[List[int]], period: int=570):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_570",
    "sat": "def sat(init: List[List[int]], period: int=571):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_571",
    "sat": "def sat(init: List[List[int]], period: int=572):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_572",
    "sat": "def sat(init: List[List[int]], period: int=573):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_573",
    "sat": "def sat(init: List[List[int]], period: int=574):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_574",
    "sat": "def sat(init: List[List[int]], period: int=575):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_575",
    "sat": "def sat(init: List[List[int]], period: int=576):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_576",
    "sat": "def sat(init: List[List[int]], period: int=577):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_577",
    "sat": "def sat(init: List[List[int]], period: int=578):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_578",
    "sat": "def sat(init: List[List[int]], period: int=579):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_579",
    "sat": "def sat(init: List[List[int]], period: int=580):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_580",
    "sat": "def sat(init: List[List[int]], period: int=581):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_581",
    "sat": "def sat(init: List[List[int]], period: int=582):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_582",
    "sat": "def sat(init: List[List[int]], period: int=583):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_583",
    "sat": "def sat(init: List[List[int]], period: int=584):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_584",
    "sat": "def sat(init: List[List[int]], period: int=585):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_585",
    "sat": "def sat(init: List[List[int]], period: int=586):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_586",
    "sat": "def sat(init: List[List[int]], period: int=587):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_587",
    "sat": "def sat(init: List[List[int]], period: int=588):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_588",
    "sat": "def sat(init: List[List[int]], period: int=589):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_589",
    "sat": "def sat(init: List[List[int]], period: int=590):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_590",
    "sat": "def sat(init: List[List[int]], period: int=591):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_591",
    "sat": "def sat(init: List[List[int]], period: int=592):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_592",
    "sat": "def sat(init: List[List[int]], period: int=593):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_593",
    "sat": "def sat(init: List[List[int]], period: int=594):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_594",
    "sat": "def sat(init: List[List[int]], period: int=595):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_595",
    "sat": "def sat(init: List[List[int]], period: int=596):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_596",
    "sat": "def sat(init: List[List[int]], period: int=597):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_597",
    "sat": "def sat(init: List[List[int]], period: int=598):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_598",
    "sat": "def sat(init: List[List[int]], period: int=599):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_599",
    "sat": "def sat(init: List[List[int]], period: int=600):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_600",
    "sat": "def sat(init: List[List[int]], period: int=601):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_601",
    "sat": "def sat(init: List[List[int]], period: int=602):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_602",
    "sat": "def sat(init: List[List[int]], period: int=603):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_603",
    "sat": "def sat(init: List[List[int]], period: int=604):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_604",
    "sat": "def sat(init: List[List[int]], period: int=605):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_605",
    "sat": "def sat(init: List[List[int]], period: int=606):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_606",
    "sat": "def sat(init: List[List[int]], period: int=607):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_607",
    "sat": "def sat(init: List[List[int]], period: int=608):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_608",
    "sat": "def sat(init: List[List[int]], period: int=609):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_609",
    "sat": "def sat(init: List[List[int]], period: int=610):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_610",
    "sat": "def sat(init: List[List[int]], period: int=611):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_611",
    "sat": "def sat(init: List[List[int]], period: int=612):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_612",
    "sat": "def sat(init: List[List[int]], period: int=613):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_613",
    "sat": "def sat(init: List[List[int]], period: int=614):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_614",
    "sat": "def sat(init: List[List[int]], period: int=615):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_615",
    "sat": "def sat(init: List[List[int]], period: int=616):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_616",
    "sat": "def sat(init: List[List[int]], period: int=617):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_617",
    "sat": "def sat(init: List[List[int]], period: int=618):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_618",
    "sat": "def sat(init: List[List[int]], period: int=619):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_619",
    "sat": "def sat(init: List[List[int]], period: int=620):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_620",
    "sat": "def sat(init: List[List[int]], period: int=621):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_621",
    "sat": "def sat(init: List[List[int]], period: int=622):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_622",
    "sat": "def sat(init: List[List[int]], period: int=623):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_623",
    "sat": "def sat(init: List[List[int]], period: int=624):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_624",
    "sat": "def sat(init: List[List[int]], period: int=625):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_625",
    "sat": "def sat(init: List[List[int]], period: int=626):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_626",
    "sat": "def sat(init: List[List[int]], period: int=627):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_627",
    "sat": "def sat(init: List[List[int]], period: int=628):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_628",
    "sat": "def sat(init: List[List[int]], period: int=629):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_629",
    "sat": "def sat(init: List[List[int]], period: int=630):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_630",
    "sat": "def sat(init: List[List[int]], period: int=631):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_631",
    "sat": "def sat(init: List[List[int]], period: int=632):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_632",
    "sat": "def sat(init: List[List[int]], period: int=633):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_633",
    "sat": "def sat(init: List[List[int]], period: int=634):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_634",
    "sat": "def sat(init: List[List[int]], period: int=635):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_635",
    "sat": "def sat(init: List[List[int]], period: int=636):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_636",
    "sat": "def sat(init: List[List[int]], period: int=637):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_637",
    "sat": "def sat(init: List[List[int]], period: int=638):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_638",
    "sat": "def sat(init: List[List[int]], period: int=639):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_639",
    "sat": "def sat(init: List[List[int]], period: int=640):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_640",
    "sat": "def sat(init: List[List[int]], period: int=641):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_641",
    "sat": "def sat(init: List[List[int]], period: int=642):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_642",
    "sat": "def sat(init: List[List[int]], period: int=643):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_643",
    "sat": "def sat(init: List[List[int]], period: int=644):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_644",
    "sat": "def sat(init: List[List[int]], period: int=645):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_645",
    "sat": "def sat(init: List[List[int]], period: int=646):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_646",
    "sat": "def sat(init: List[List[int]], period: int=647):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_647",
    "sat": "def sat(init: List[List[int]], period: int=648):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_648",
    "sat": "def sat(init: List[List[int]], period: int=649):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_649",
    "sat": "def sat(init: List[List[int]], period: int=650):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_650",
    "sat": "def sat(init: List[List[int]], period: int=651):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_651",
    "sat": "def sat(init: List[List[int]], period: int=652):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_652",
    "sat": "def sat(init: List[List[int]], period: int=653):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_653",
    "sat": "def sat(init: List[List[int]], period: int=654):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_654",
    "sat": "def sat(init: List[List[int]], period: int=655):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_655",
    "sat": "def sat(init: List[List[int]], period: int=656):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_656",
    "sat": "def sat(init: List[List[int]], period: int=657):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_657",
    "sat": "def sat(init: List[List[int]], period: int=658):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_658",
    "sat": "def sat(init: List[List[int]], period: int=659):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_659",
    "sat": "def sat(init: List[List[int]], period: int=660):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_660",
    "sat": "def sat(init: List[List[int]], period: int=661):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_661",
    "sat": "def sat(init: List[List[int]], period: int=662):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_662",
    "sat": "def sat(init: List[List[int]], period: int=663):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_663",
    "sat": "def sat(init: List[List[int]], period: int=664):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_664",
    "sat": "def sat(init: List[List[int]], period: int=665):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_665",
    "sat": "def sat(init: List[List[int]], period: int=666):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_666",
    "sat": "def sat(init: List[List[int]], period: int=667):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_667",
    "sat": "def sat(init: List[List[int]], period: int=668):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_668",
    "sat": "def sat(init: List[List[int]], period: int=669):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_669",
    "sat": "def sat(init: List[List[int]], period: int=670):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_670",
    "sat": "def sat(init: List[List[int]], period: int=671):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_671",
    "sat": "def sat(init: List[List[int]], period: int=672):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_672",
    "sat": "def sat(init: List[List[int]], period: int=673):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_673",
    "sat": "def sat(init: List[List[int]], period: int=674):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_674",
    "sat": "def sat(init: List[List[int]], period: int=675):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_675",
    "sat": "def sat(init: List[List[int]], period: int=676):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_676",
    "sat": "def sat(init: List[List[int]], period: int=677):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_677",
    "sat": "def sat(init: List[List[int]], period: int=678):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_678",
    "sat": "def sat(init: List[List[int]], period: int=679):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_679",
    "sat": "def sat(init: List[List[int]], period: int=680):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_680",
    "sat": "def sat(init: List[List[int]], period: int=681):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_681",
    "sat": "def sat(init: List[List[int]], period: int=682):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_682",
    "sat": "def sat(init: List[List[int]], period: int=683):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_683",
    "sat": "def sat(init: List[List[int]], period: int=684):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_684",
    "sat": "def sat(init: List[List[int]], period: int=685):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_685",
    "sat": "def sat(init: List[List[int]], period: int=686):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_686",
    "sat": "def sat(init: List[List[int]], period: int=687):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_687",
    "sat": "def sat(init: List[List[int]], period: int=688):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_688",
    "sat": "def sat(init: List[List[int]], period: int=689):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_689",
    "sat": "def sat(init: List[List[int]], period: int=690):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_690",
    "sat": "def sat(init: List[List[int]], period: int=691):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_691",
    "sat": "def sat(init: List[List[int]], period: int=692):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_692",
    "sat": "def sat(init: List[List[int]], period: int=693):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_693",
    "sat": "def sat(init: List[List[int]], period: int=694):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_694",
    "sat": "def sat(init: List[List[int]], period: int=695):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_695",
    "sat": "def sat(init: List[List[int]], period: int=696):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_696",
    "sat": "def sat(init: List[List[int]], period: int=697):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_697",
    "sat": "def sat(init: List[List[int]], period: int=698):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_698",
    "sat": "def sat(init: List[List[int]], period: int=699):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_699",
    "sat": "def sat(init: List[List[int]], period: int=700):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_700",
    "sat": "def sat(init: List[List[int]], period: int=701):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_701",
    "sat": "def sat(init: List[List[int]], period: int=702):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_702",
    "sat": "def sat(init: List[List[int]], period: int=703):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_703",
    "sat": "def sat(init: List[List[int]], period: int=704):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_704",
    "sat": "def sat(init: List[List[int]], period: int=705):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_705",
    "sat": "def sat(init: List[List[int]], period: int=706):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_706",
    "sat": "def sat(init: List[List[int]], period: int=707):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_707",
    "sat": "def sat(init: List[List[int]], period: int=708):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_708",
    "sat": "def sat(init: List[List[int]], period: int=709):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_709",
    "sat": "def sat(init: List[List[int]], period: int=710):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_710",
    "sat": "def sat(init: List[List[int]], period: int=711):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_711",
    "sat": "def sat(init: List[List[int]], period: int=712):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_712",
    "sat": "def sat(init: List[List[int]], period: int=713):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_713",
    "sat": "def sat(init: List[List[int]], period: int=714):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_714",
    "sat": "def sat(init: List[List[int]], period: int=715):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_715",
    "sat": "def sat(init: List[List[int]], period: int=716):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_716",
    "sat": "def sat(init: List[List[int]], period: int=717):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_717",
    "sat": "def sat(init: List[List[int]], period: int=718):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_718",
    "sat": "def sat(init: List[List[int]], period: int=719):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_719",
    "sat": "def sat(init: List[List[int]], period: int=720):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_720",
    "sat": "def sat(init: List[List[int]], period: int=721):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_721",
    "sat": "def sat(init: List[List[int]], period: int=722):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_722",
    "sat": "def sat(init: List[List[int]], period: int=723):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_723",
    "sat": "def sat(init: List[List[int]], period: int=724):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_724",
    "sat": "def sat(init: List[List[int]], period: int=725):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_725",
    "sat": "def sat(init: List[List[int]], period: int=726):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_726",
    "sat": "def sat(init: List[List[int]], period: int=727):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_727",
    "sat": "def sat(init: List[List[int]], period: int=728):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_728",
    "sat": "def sat(init: List[List[int]], period: int=729):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_729",
    "sat": "def sat(init: List[List[int]], period: int=730):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_730",
    "sat": "def sat(init: List[List[int]], period: int=731):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_731",
    "sat": "def sat(init: List[List[int]], period: int=732):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_732",
    "sat": "def sat(init: List[List[int]], period: int=733):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_733",
    "sat": "def sat(init: List[List[int]], period: int=734):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_734",
    "sat": "def sat(init: List[List[int]], period: int=735):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_735",
    "sat": "def sat(init: List[List[int]], period: int=736):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_736",
    "sat": "def sat(init: List[List[int]], period: int=737):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_737",
    "sat": "def sat(init: List[List[int]], period: int=738):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_738",
    "sat": "def sat(init: List[List[int]], period: int=739):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_739",
    "sat": "def sat(init: List[List[int]], period: int=740):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_740",
    "sat": "def sat(init: List[List[int]], period: int=741):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_741",
    "sat": "def sat(init: List[List[int]], period: int=742):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_742",
    "sat": "def sat(init: List[List[int]], period: int=743):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_743",
    "sat": "def sat(init: List[List[int]], period: int=744):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_744",
    "sat": "def sat(init: List[List[int]], period: int=745):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_745",
    "sat": "def sat(init: List[List[int]], period: int=746):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_746",
    "sat": "def sat(init: List[List[int]], period: int=747):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_747",
    "sat": "def sat(init: List[List[int]], period: int=748):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_748",
    "sat": "def sat(init: List[List[int]], period: int=749):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_749",
    "sat": "def sat(init: List[List[int]], period: int=750):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_750",
    "sat": "def sat(init: List[List[int]], period: int=751):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_751",
    "sat": "def sat(init: List[List[int]], period: int=752):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_752",
    "sat": "def sat(init: List[List[int]], period: int=753):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_753",
    "sat": "def sat(init: List[List[int]], period: int=754):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_754",
    "sat": "def sat(init: List[List[int]], period: int=755):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_755",
    "sat": "def sat(init: List[List[int]], period: int=756):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_756",
    "sat": "def sat(init: List[List[int]], period: int=757):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_757",
    "sat": "def sat(init: List[List[int]], period: int=758):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_758",
    "sat": "def sat(init: List[List[int]], period: int=759):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_759",
    "sat": "def sat(init: List[List[int]], period: int=760):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_760",
    "sat": "def sat(init: List[List[int]], period: int=761):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_761",
    "sat": "def sat(init: List[List[int]], period: int=762):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_762",
    "sat": "def sat(init: List[List[int]], period: int=763):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_763",
    "sat": "def sat(init: List[List[int]], period: int=764):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_764",
    "sat": "def sat(init: List[List[int]], period: int=765):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_765",
    "sat": "def sat(init: List[List[int]], period: int=766):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_766",
    "sat": "def sat(init: List[List[int]], period: int=767):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_767",
    "sat": "def sat(init: List[List[int]], period: int=768):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_768",
    "sat": "def sat(init: List[List[int]], period: int=769):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_769",
    "sat": "def sat(init: List[List[int]], period: int=770):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_770",
    "sat": "def sat(init: List[List[int]], period: int=771):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_771",
    "sat": "def sat(init: List[List[int]], period: int=772):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_772",
    "sat": "def sat(init: List[List[int]], period: int=773):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_773",
    "sat": "def sat(init: List[List[int]], period: int=774):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_774",
    "sat": "def sat(init: List[List[int]], period: int=775):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_775",
    "sat": "def sat(init: List[List[int]], period: int=776):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_776",
    "sat": "def sat(init: List[List[int]], period: int=777):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_777",
    "sat": "def sat(init: List[List[int]], period: int=778):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_778",
    "sat": "def sat(init: List[List[int]], period: int=779):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_779",
    "sat": "def sat(init: List[List[int]], period: int=780):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_780",
    "sat": "def sat(init: List[List[int]], period: int=781):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_781",
    "sat": "def sat(init: List[List[int]], period: int=782):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_782",
    "sat": "def sat(init: List[List[int]], period: int=783):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_783",
    "sat": "def sat(init: List[List[int]], period: int=784):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_784",
    "sat": "def sat(init: List[List[int]], period: int=785):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_785",
    "sat": "def sat(init: List[List[int]], period: int=786):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_786",
    "sat": "def sat(init: List[List[int]], period: int=787):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_787",
    "sat": "def sat(init: List[List[int]], period: int=788):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_788",
    "sat": "def sat(init: List[List[int]], period: int=789):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_789",
    "sat": "def sat(init: List[List[int]], period: int=790):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_790",
    "sat": "def sat(init: List[List[int]], period: int=791):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_791",
    "sat": "def sat(init: List[List[int]], period: int=792):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_792",
    "sat": "def sat(init: List[List[int]], period: int=793):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_793",
    "sat": "def sat(init: List[List[int]], period: int=794):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_794",
    "sat": "def sat(init: List[List[int]], period: int=795):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_795",
    "sat": "def sat(init: List[List[int]], period: int=796):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_796",
    "sat": "def sat(init: List[List[int]], period: int=797):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_797",
    "sat": "def sat(init: List[List[int]], period: int=798):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_798",
    "sat": "def sat(init: List[List[int]], period: int=799):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_799",
    "sat": "def sat(init: List[List[int]], period: int=800):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_800",
    "sat": "def sat(init: List[List[int]], period: int=801):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_801",
    "sat": "def sat(init: List[List[int]], period: int=802):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_802",
    "sat": "def sat(init: List[List[int]], period: int=803):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_803",
    "sat": "def sat(init: List[List[int]], period: int=804):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_804",
    "sat": "def sat(init: List[List[int]], period: int=805):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_805",
    "sat": "def sat(init: List[List[int]], period: int=806):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_806",
    "sat": "def sat(init: List[List[int]], period: int=807):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_807",
    "sat": "def sat(init: List[List[int]], period: int=808):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_808",
    "sat": "def sat(init: List[List[int]], period: int=809):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_809",
    "sat": "def sat(init: List[List[int]], period: int=810):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_810",
    "sat": "def sat(init: List[List[int]], period: int=811):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_811",
    "sat": "def sat(init: List[List[int]], period: int=812):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_812",
    "sat": "def sat(init: List[List[int]], period: int=813):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_813",
    "sat": "def sat(init: List[List[int]], period: int=814):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_814",
    "sat": "def sat(init: List[List[int]], period: int=815):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_815",
    "sat": "def sat(init: List[List[int]], period: int=816):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_816",
    "sat": "def sat(init: List[List[int]], period: int=817):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_817",
    "sat": "def sat(init: List[List[int]], period: int=818):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_818",
    "sat": "def sat(init: List[List[int]], period: int=819):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_819",
    "sat": "def sat(init: List[List[int]], period: int=820):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_820",
    "sat": "def sat(init: List[List[int]], period: int=821):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_821",
    "sat": "def sat(init: List[List[int]], period: int=822):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_822",
    "sat": "def sat(init: List[List[int]], period: int=823):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_823",
    "sat": "def sat(init: List[List[int]], period: int=824):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_824",
    "sat": "def sat(init: List[List[int]], period: int=825):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_825",
    "sat": "def sat(init: List[List[int]], period: int=826):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_826",
    "sat": "def sat(init: List[List[int]], period: int=827):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_827",
    "sat": "def sat(init: List[List[int]], period: int=828):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_828",
    "sat": "def sat(init: List[List[int]], period: int=829):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_829",
    "sat": "def sat(init: List[List[int]], period: int=830):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_830",
    "sat": "def sat(init: List[List[int]], period: int=831):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_831",
    "sat": "def sat(init: List[List[int]], period: int=832):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_832",
    "sat": "def sat(init: List[List[int]], period: int=833):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_833",
    "sat": "def sat(init: List[List[int]], period: int=834):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_834",
    "sat": "def sat(init: List[List[int]], period: int=835):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_835",
    "sat": "def sat(init: List[List[int]], period: int=836):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_836",
    "sat": "def sat(init: List[List[int]], period: int=837):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_837",
    "sat": "def sat(init: List[List[int]], period: int=838):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_838",
    "sat": "def sat(init: List[List[int]], period: int=839):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_839",
    "sat": "def sat(init: List[List[int]], period: int=840):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_840",
    "sat": "def sat(init: List[List[int]], period: int=841):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_841",
    "sat": "def sat(init: List[List[int]], period: int=842):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_842",
    "sat": "def sat(init: List[List[int]], period: int=843):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_843",
    "sat": "def sat(init: List[List[int]], period: int=844):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_844",
    "sat": "def sat(init: List[List[int]], period: int=845):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_845",
    "sat": "def sat(init: List[List[int]], period: int=846):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_846",
    "sat": "def sat(init: List[List[int]], period: int=847):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_847",
    "sat": "def sat(init: List[List[int]], period: int=848):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_848",
    "sat": "def sat(init: List[List[int]], period: int=849):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_849",
    "sat": "def sat(init: List[List[int]], period: int=850):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_850",
    "sat": "def sat(init: List[List[int]], period: int=851):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_851",
    "sat": "def sat(init: List[List[int]], period: int=852):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_852",
    "sat": "def sat(init: List[List[int]], period: int=853):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_853",
    "sat": "def sat(init: List[List[int]], period: int=854):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_854",
    "sat": "def sat(init: List[List[int]], period: int=855):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_855",
    "sat": "def sat(init: List[List[int]], period: int=856):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_856",
    "sat": "def sat(init: List[List[int]], period: int=857):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_857",
    "sat": "def sat(init: List[List[int]], period: int=858):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_858",
    "sat": "def sat(init: List[List[int]], period: int=859):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_859",
    "sat": "def sat(init: List[List[int]], period: int=860):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_860",
    "sat": "def sat(init: List[List[int]], period: int=861):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_861",
    "sat": "def sat(init: List[List[int]], period: int=862):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_862",
    "sat": "def sat(init: List[List[int]], period: int=863):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_863",
    "sat": "def sat(init: List[List[int]], period: int=864):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_864",
    "sat": "def sat(init: List[List[int]], period: int=865):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_865",
    "sat": "def sat(init: List[List[int]], period: int=866):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_866",
    "sat": "def sat(init: List[List[int]], period: int=867):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_867",
    "sat": "def sat(init: List[List[int]], period: int=868):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_868",
    "sat": "def sat(init: List[List[int]], period: int=869):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_869",
    "sat": "def sat(init: List[List[int]], period: int=870):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_870",
    "sat": "def sat(init: List[List[int]], period: int=871):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_871",
    "sat": "def sat(init: List[List[int]], period: int=872):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_872",
    "sat": "def sat(init: List[List[int]], period: int=873):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_873",
    "sat": "def sat(init: List[List[int]], period: int=874):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_874",
    "sat": "def sat(init: List[List[int]], period: int=875):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_875",
    "sat": "def sat(init: List[List[int]], period: int=876):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_876",
    "sat": "def sat(init: List[List[int]], period: int=877):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_877",
    "sat": "def sat(init: List[List[int]], period: int=878):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_878",
    "sat": "def sat(init: List[List[int]], period: int=879):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_879",
    "sat": "def sat(init: List[List[int]], period: int=880):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_880",
    "sat": "def sat(init: List[List[int]], period: int=881):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_881",
    "sat": "def sat(init: List[List[int]], period: int=882):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_882",
    "sat": "def sat(init: List[List[int]], period: int=883):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_883",
    "sat": "def sat(init: List[List[int]], period: int=884):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_884",
    "sat": "def sat(init: List[List[int]], period: int=885):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_885",
    "sat": "def sat(init: List[List[int]], period: int=886):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_886",
    "sat": "def sat(init: List[List[int]], period: int=887):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_887",
    "sat": "def sat(init: List[List[int]], period: int=888):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_888",
    "sat": "def sat(init: List[List[int]], period: int=889):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_889",
    "sat": "def sat(init: List[List[int]], period: int=890):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_890",
    "sat": "def sat(init: List[List[int]], period: int=891):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_891",
    "sat": "def sat(init: List[List[int]], period: int=892):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_892",
    "sat": "def sat(init: List[List[int]], period: int=893):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_893",
    "sat": "def sat(init: List[List[int]], period: int=894):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_894",
    "sat": "def sat(init: List[List[int]], period: int=895):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_895",
    "sat": "def sat(init: List[List[int]], period: int=896):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_896",
    "sat": "def sat(init: List[List[int]], period: int=897):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_897",
    "sat": "def sat(init: List[List[int]], period: int=898):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_898",
    "sat": "def sat(init: List[List[int]], period: int=899):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_899",
    "sat": "def sat(init: List[List[int]], period: int=900):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_900",
    "sat": "def sat(init: List[List[int]], period: int=901):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_901",
    "sat": "def sat(init: List[List[int]], period: int=902):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_902",
    "sat": "def sat(init: List[List[int]], period: int=903):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_903",
    "sat": "def sat(init: List[List[int]], period: int=904):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_904",
    "sat": "def sat(init: List[List[int]], period: int=905):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_905",
    "sat": "def sat(init: List[List[int]], period: int=906):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_906",
    "sat": "def sat(init: List[List[int]], period: int=907):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_907",
    "sat": "def sat(init: List[List[int]], period: int=908):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_908",
    "sat": "def sat(init: List[List[int]], period: int=909):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_909",
    "sat": "def sat(init: List[List[int]], period: int=910):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_910",
    "sat": "def sat(init: List[List[int]], period: int=911):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_911",
    "sat": "def sat(init: List[List[int]], period: int=912):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_912",
    "sat": "def sat(init: List[List[int]], period: int=913):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_913",
    "sat": "def sat(init: List[List[int]], period: int=914):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_914",
    "sat": "def sat(init: List[List[int]], period: int=915):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_915",
    "sat": "def sat(init: List[List[int]], period: int=916):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_916",
    "sat": "def sat(init: List[List[int]], period: int=917):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_917",
    "sat": "def sat(init: List[List[int]], period: int=918):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_918",
    "sat": "def sat(init: List[List[int]], period: int=919):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_919",
    "sat": "def sat(init: List[List[int]], period: int=920):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_920",
    "sat": "def sat(init: List[List[int]], period: int=921):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_921",
    "sat": "def sat(init: List[List[int]], period: int=922):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_922",
    "sat": "def sat(init: List[List[int]], period: int=923):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_923",
    "sat": "def sat(init: List[List[int]], period: int=924):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_924",
    "sat": "def sat(init: List[List[int]], period: int=925):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_925",
    "sat": "def sat(init: List[List[int]], period: int=926):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_926",
    "sat": "def sat(init: List[List[int]], period: int=927):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_927",
    "sat": "def sat(init: List[List[int]], period: int=928):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_928",
    "sat": "def sat(init: List[List[int]], period: int=929):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_929",
    "sat": "def sat(init: List[List[int]], period: int=930):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_930",
    "sat": "def sat(init: List[List[int]], period: int=931):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_931",
    "sat": "def sat(init: List[List[int]], period: int=932):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_932",
    "sat": "def sat(init: List[List[int]], period: int=933):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_933",
    "sat": "def sat(init: List[List[int]], period: int=934):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_934",
    "sat": "def sat(init: List[List[int]], period: int=935):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_935",
    "sat": "def sat(init: List[List[int]], period: int=936):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_936",
    "sat": "def sat(init: List[List[int]], period: int=937):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_937",
    "sat": "def sat(init: List[List[int]], period: int=938):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_938",
    "sat": "def sat(init: List[List[int]], period: int=939):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_939",
    "sat": "def sat(init: List[List[int]], period: int=940):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_940",
    "sat": "def sat(init: List[List[int]], period: int=941):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_941",
    "sat": "def sat(init: List[List[int]], period: int=942):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_942",
    "sat": "def sat(init: List[List[int]], period: int=943):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_943",
    "sat": "def sat(init: List[List[int]], period: int=944):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_944",
    "sat": "def sat(init: List[List[int]], period: int=945):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_945",
    "sat": "def sat(init: List[List[int]], period: int=946):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_946",
    "sat": "def sat(init: List[List[int]], period: int=947):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_947",
    "sat": "def sat(init: List[List[int]], period: int=948):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_948",
    "sat": "def sat(init: List[List[int]], period: int=949):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_949",
    "sat": "def sat(init: List[List[int]], period: int=950):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_950",
    "sat": "def sat(init: List[List[int]], period: int=951):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_951",
    "sat": "def sat(init: List[List[int]], period: int=952):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_952",
    "sat": "def sat(init: List[List[int]], period: int=953):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_953",
    "sat": "def sat(init: List[List[int]], period: int=954):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_954",
    "sat": "def sat(init: List[List[int]], period: int=955):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_955",
    "sat": "def sat(init: List[List[int]], period: int=956):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_956",
    "sat": "def sat(init: List[List[int]], period: int=957):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_957",
    "sat": "def sat(init: List[List[int]], period: int=958):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_958",
    "sat": "def sat(init: List[List[int]], period: int=959):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_959",
    "sat": "def sat(init: List[List[int]], period: int=960):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_960",
    "sat": "def sat(init: List[List[int]], period: int=961):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_961",
    "sat": "def sat(init: List[List[int]], period: int=962):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_962",
    "sat": "def sat(init: List[List[int]], period: int=963):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_963",
    "sat": "def sat(init: List[List[int]], period: int=964):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_964",
    "sat": "def sat(init: List[List[int]], period: int=965):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_965",
    "sat": "def sat(init: List[List[int]], period: int=966):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_966",
    "sat": "def sat(init: List[List[int]], period: int=967):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_967",
    "sat": "def sat(init: List[List[int]], period: int=968):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_968",
    "sat": "def sat(init: List[List[int]], period: int=969):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_969",
    "sat": "def sat(init: List[List[int]], period: int=970):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_970",
    "sat": "def sat(init: List[List[int]], period: int=971):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_971",
    "sat": "def sat(init: List[List[int]], period: int=972):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_972",
    "sat": "def sat(init: List[List[int]], period: int=973):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_973",
    "sat": "def sat(init: List[List[int]], period: int=974):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_974",
    "sat": "def sat(init: List[List[int]], period: int=975):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_975",
    "sat": "def sat(init: List[List[int]], period: int=976):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_976",
    "sat": "def sat(init: List[List[int]], period: int=977):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_977",
    "sat": "def sat(init: List[List[int]], period: int=978):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_978",
    "sat": "def sat(init: List[List[int]], period: int=979):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_979",
    "sat": "def sat(init: List[List[int]], period: int=980):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_980",
    "sat": "def sat(init: List[List[int]], period: int=981):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_981",
    "sat": "def sat(init: List[List[int]], period: int=982):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_982",
    "sat": "def sat(init: List[List[int]], period: int=983):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_983",
    "sat": "def sat(init: List[List[int]], period: int=984):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_984",
    "sat": "def sat(init: List[List[int]], period: int=985):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_985",
    "sat": "def sat(init: List[List[int]], period: int=986):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_986",
    "sat": "def sat(init: List[List[int]], period: int=987):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_987",
    "sat": "def sat(init: List[List[int]], period: int=988):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_988",
    "sat": "def sat(init: List[List[int]], period: int=989):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_989",
    "sat": "def sat(init: List[List[int]], period: int=990):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_990",
    "sat": "def sat(init: List[List[int]], period: int=991):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_991",
    "sat": "def sat(init: List[List[int]], period: int=992):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_992",
    "sat": "def sat(init: List[List[int]], period: int=993):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_993",
    "sat": "def sat(init: List[List[int]], period: int=994):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_994",
    "sat": "def sat(init: List[List[int]], period: int=995):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_995",
    "sat": "def sat(init: List[List[int]], period: int=996):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_996",
    "sat": "def sat(init: List[List[int]], period: int=997):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_997",
    "sat": "def sat(init: List[List[int]], period: int=998):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_998",
    "sat": "def sat(init: List[List[int]], period: int=999):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Oscillators_999",
    "sat": "def sat(init: List[List[int]], period: int=1000):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "sols": []
  },
  {
    "name": "Spaceship_0",
    "sat": "def sat(init: List[List[int]], period: int=4):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_1",
    "sat": "def sat(init: List[List[int]], period: int=2):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_2",
    "sat": "def sat(init: List[List[int]], period: int=3):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_3",
    "sat": "def sat(init: List[List[int]], period: int=5):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_4",
    "sat": "def sat(init: List[List[int]], period: int=6):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_5",
    "sat": "def sat(init: List[List[int]], period: int=7):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_6",
    "sat": "def sat(init: List[List[int]], period: int=8):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_7",
    "sat": "def sat(init: List[List[int]], period: int=9):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_8",
    "sat": "def sat(init: List[List[int]], period: int=10):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_9",
    "sat": "def sat(init: List[List[int]], period: int=11):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_10",
    "sat": "def sat(init: List[List[int]], period: int=12):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_11",
    "sat": "def sat(init: List[List[int]], period: int=13):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_12",
    "sat": "def sat(init: List[List[int]], period: int=14):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_13",
    "sat": "def sat(init: List[List[int]], period: int=15):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_14",
    "sat": "def sat(init: List[List[int]], period: int=16):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_15",
    "sat": "def sat(init: List[List[int]], period: int=17):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_16",
    "sat": "def sat(init: List[List[int]], period: int=18):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_17",
    "sat": "def sat(init: List[List[int]], period: int=19):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_18",
    "sat": "def sat(init: List[List[int]], period: int=20):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_19",
    "sat": "def sat(init: List[List[int]], period: int=21):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_20",
    "sat": "def sat(init: List[List[int]], period: int=22):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_21",
    "sat": "def sat(init: List[List[int]], period: int=23):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_22",
    "sat": "def sat(init: List[List[int]], period: int=24):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_23",
    "sat": "def sat(init: List[List[int]], period: int=25):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_24",
    "sat": "def sat(init: List[List[int]], period: int=26):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_25",
    "sat": "def sat(init: List[List[int]], period: int=27):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_26",
    "sat": "def sat(init: List[List[int]], period: int=28):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_27",
    "sat": "def sat(init: List[List[int]], period: int=29):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_28",
    "sat": "def sat(init: List[List[int]], period: int=30):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_29",
    "sat": "def sat(init: List[List[int]], period: int=31):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_30",
    "sat": "def sat(init: List[List[int]], period: int=32):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_31",
    "sat": "def sat(init: List[List[int]], period: int=33):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_32",
    "sat": "def sat(init: List[List[int]], period: int=34):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_33",
    "sat": "def sat(init: List[List[int]], period: int=35):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_34",
    "sat": "def sat(init: List[List[int]], period: int=36):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_35",
    "sat": "def sat(init: List[List[int]], period: int=37):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_36",
    "sat": "def sat(init: List[List[int]], period: int=38):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_37",
    "sat": "def sat(init: List[List[int]], period: int=39):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_38",
    "sat": "def sat(init: List[List[int]], period: int=40):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_39",
    "sat": "def sat(init: List[List[int]], period: int=41):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_40",
    "sat": "def sat(init: List[List[int]], period: int=42):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_41",
    "sat": "def sat(init: List[List[int]], period: int=43):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_42",
    "sat": "def sat(init: List[List[int]], period: int=44):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_43",
    "sat": "def sat(init: List[List[int]], period: int=45):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_44",
    "sat": "def sat(init: List[List[int]], period: int=46):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_45",
    "sat": "def sat(init: List[List[int]], period: int=47):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_46",
    "sat": "def sat(init: List[List[int]], period: int=48):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_47",
    "sat": "def sat(init: List[List[int]], period: int=49):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_48",
    "sat": "def sat(init: List[List[int]], period: int=50):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_49",
    "sat": "def sat(init: List[List[int]], period: int=51):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_50",
    "sat": "def sat(init: List[List[int]], period: int=52):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_51",
    "sat": "def sat(init: List[List[int]], period: int=53):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_52",
    "sat": "def sat(init: List[List[int]], period: int=54):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_53",
    "sat": "def sat(init: List[List[int]], period: int=55):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_54",
    "sat": "def sat(init: List[List[int]], period: int=56):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_55",
    "sat": "def sat(init: List[List[int]], period: int=57):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_56",
    "sat": "def sat(init: List[List[int]], period: int=58):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_57",
    "sat": "def sat(init: List[List[int]], period: int=59):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_58",
    "sat": "def sat(init: List[List[int]], period: int=60):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_59",
    "sat": "def sat(init: List[List[int]], period: int=61):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_60",
    "sat": "def sat(init: List[List[int]], period: int=62):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_61",
    "sat": "def sat(init: List[List[int]], period: int=63):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_62",
    "sat": "def sat(init: List[List[int]], period: int=64):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_63",
    "sat": "def sat(init: List[List[int]], period: int=65):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_64",
    "sat": "def sat(init: List[List[int]], period: int=66):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_65",
    "sat": "def sat(init: List[List[int]], period: int=67):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_66",
    "sat": "def sat(init: List[List[int]], period: int=68):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_67",
    "sat": "def sat(init: List[List[int]], period: int=69):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_68",
    "sat": "def sat(init: List[List[int]], period: int=70):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_69",
    "sat": "def sat(init: List[List[int]], period: int=71):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_70",
    "sat": "def sat(init: List[List[int]], period: int=72):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_71",
    "sat": "def sat(init: List[List[int]], period: int=73):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_72",
    "sat": "def sat(init: List[List[int]], period: int=74):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_73",
    "sat": "def sat(init: List[List[int]], period: int=75):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_74",
    "sat": "def sat(init: List[List[int]], period: int=76):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_75",
    "sat": "def sat(init: List[List[int]], period: int=77):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_76",
    "sat": "def sat(init: List[List[int]], period: int=78):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_77",
    "sat": "def sat(init: List[List[int]], period: int=79):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_78",
    "sat": "def sat(init: List[List[int]], period: int=80):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_79",
    "sat": "def sat(init: List[List[int]], period: int=81):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_80",
    "sat": "def sat(init: List[List[int]], period: int=82):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_81",
    "sat": "def sat(init: List[List[int]], period: int=83):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_82",
    "sat": "def sat(init: List[List[int]], period: int=84):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_83",
    "sat": "def sat(init: List[List[int]], period: int=85):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_84",
    "sat": "def sat(init: List[List[int]], period: int=86):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_85",
    "sat": "def sat(init: List[List[int]], period: int=87):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_86",
    "sat": "def sat(init: List[List[int]], period: int=88):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_87",
    "sat": "def sat(init: List[List[int]], period: int=89):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_88",
    "sat": "def sat(init: List[List[int]], period: int=90):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_89",
    "sat": "def sat(init: List[List[int]], period: int=91):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_90",
    "sat": "def sat(init: List[List[int]], period: int=92):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_91",
    "sat": "def sat(init: List[List[int]], period: int=93):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_92",
    "sat": "def sat(init: List[List[int]], period: int=94):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_93",
    "sat": "def sat(init: List[List[int]], period: int=95):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_94",
    "sat": "def sat(init: List[List[int]], period: int=96):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_95",
    "sat": "def sat(init: List[List[int]], period: int=97):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_96",
    "sat": "def sat(init: List[List[int]], period: int=98):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_97",
    "sat": "def sat(init: List[List[int]], period: int=99):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_98",
    "sat": "def sat(init: List[List[int]], period: int=100):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_99",
    "sat": "def sat(init: List[List[int]], period: int=101):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_100",
    "sat": "def sat(init: List[List[int]], period: int=102):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_101",
    "sat": "def sat(init: List[List[int]], period: int=103):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_102",
    "sat": "def sat(init: List[List[int]], period: int=104):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_103",
    "sat": "def sat(init: List[List[int]], period: int=105):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_104",
    "sat": "def sat(init: List[List[int]], period: int=106):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_105",
    "sat": "def sat(init: List[List[int]], period: int=107):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_106",
    "sat": "def sat(init: List[List[int]], period: int=108):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_107",
    "sat": "def sat(init: List[List[int]], period: int=109):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_108",
    "sat": "def sat(init: List[List[int]], period: int=110):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_109",
    "sat": "def sat(init: List[List[int]], period: int=111):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_110",
    "sat": "def sat(init: List[List[int]], period: int=112):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_111",
    "sat": "def sat(init: List[List[int]], period: int=113):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_112",
    "sat": "def sat(init: List[List[int]], period: int=114):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_113",
    "sat": "def sat(init: List[List[int]], period: int=115):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_114",
    "sat": "def sat(init: List[List[int]], period: int=116):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_115",
    "sat": "def sat(init: List[List[int]], period: int=117):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_116",
    "sat": "def sat(init: List[List[int]], period: int=118):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_117",
    "sat": "def sat(init: List[List[int]], period: int=119):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_118",
    "sat": "def sat(init: List[List[int]], period: int=120):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_119",
    "sat": "def sat(init: List[List[int]], period: int=121):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_120",
    "sat": "def sat(init: List[List[int]], period: int=122):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_121",
    "sat": "def sat(init: List[List[int]], period: int=123):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_122",
    "sat": "def sat(init: List[List[int]], period: int=124):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_123",
    "sat": "def sat(init: List[List[int]], period: int=125):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_124",
    "sat": "def sat(init: List[List[int]], period: int=126):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_125",
    "sat": "def sat(init: List[List[int]], period: int=127):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_126",
    "sat": "def sat(init: List[List[int]], period: int=128):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_127",
    "sat": "def sat(init: List[List[int]], period: int=129):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_128",
    "sat": "def sat(init: List[List[int]], period: int=130):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_129",
    "sat": "def sat(init: List[List[int]], period: int=131):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_130",
    "sat": "def sat(init: List[List[int]], period: int=132):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_131",
    "sat": "def sat(init: List[List[int]], period: int=133):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_132",
    "sat": "def sat(init: List[List[int]], period: int=134):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_133",
    "sat": "def sat(init: List[List[int]], period: int=135):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_134",
    "sat": "def sat(init: List[List[int]], period: int=136):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_135",
    "sat": "def sat(init: List[List[int]], period: int=137):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_136",
    "sat": "def sat(init: List[List[int]], period: int=138):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_137",
    "sat": "def sat(init: List[List[int]], period: int=139):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_138",
    "sat": "def sat(init: List[List[int]], period: int=140):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_139",
    "sat": "def sat(init: List[List[int]], period: int=141):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_140",
    "sat": "def sat(init: List[List[int]], period: int=142):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_141",
    "sat": "def sat(init: List[List[int]], period: int=143):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_142",
    "sat": "def sat(init: List[List[int]], period: int=144):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_143",
    "sat": "def sat(init: List[List[int]], period: int=145):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_144",
    "sat": "def sat(init: List[List[int]], period: int=146):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_145",
    "sat": "def sat(init: List[List[int]], period: int=147):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_146",
    "sat": "def sat(init: List[List[int]], period: int=148):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_147",
    "sat": "def sat(init: List[List[int]], period: int=149):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_148",
    "sat": "def sat(init: List[List[int]], period: int=150):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_149",
    "sat": "def sat(init: List[List[int]], period: int=151):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_150",
    "sat": "def sat(init: List[List[int]], period: int=152):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_151",
    "sat": "def sat(init: List[List[int]], period: int=153):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_152",
    "sat": "def sat(init: List[List[int]], period: int=154):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_153",
    "sat": "def sat(init: List[List[int]], period: int=155):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_154",
    "sat": "def sat(init: List[List[int]], period: int=156):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_155",
    "sat": "def sat(init: List[List[int]], period: int=157):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_156",
    "sat": "def sat(init: List[List[int]], period: int=158):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_157",
    "sat": "def sat(init: List[List[int]], period: int=159):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_158",
    "sat": "def sat(init: List[List[int]], period: int=160):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_159",
    "sat": "def sat(init: List[List[int]], period: int=161):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_160",
    "sat": "def sat(init: List[List[int]], period: int=162):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_161",
    "sat": "def sat(init: List[List[int]], period: int=163):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_162",
    "sat": "def sat(init: List[List[int]], period: int=164):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_163",
    "sat": "def sat(init: List[List[int]], period: int=165):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_164",
    "sat": "def sat(init: List[List[int]], period: int=166):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_165",
    "sat": "def sat(init: List[List[int]], period: int=167):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_166",
    "sat": "def sat(init: List[List[int]], period: int=168):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_167",
    "sat": "def sat(init: List[List[int]], period: int=169):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_168",
    "sat": "def sat(init: List[List[int]], period: int=170):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_169",
    "sat": "def sat(init: List[List[int]], period: int=171):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_170",
    "sat": "def sat(init: List[List[int]], period: int=172):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_171",
    "sat": "def sat(init: List[List[int]], period: int=173):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_172",
    "sat": "def sat(init: List[List[int]], period: int=174):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_173",
    "sat": "def sat(init: List[List[int]], period: int=175):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_174",
    "sat": "def sat(init: List[List[int]], period: int=176):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_175",
    "sat": "def sat(init: List[List[int]], period: int=177):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_176",
    "sat": "def sat(init: List[List[int]], period: int=178):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_177",
    "sat": "def sat(init: List[List[int]], period: int=179):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_178",
    "sat": "def sat(init: List[List[int]], period: int=180):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_179",
    "sat": "def sat(init: List[List[int]], period: int=181):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_180",
    "sat": "def sat(init: List[List[int]], period: int=182):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_181",
    "sat": "def sat(init: List[List[int]], period: int=183):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_182",
    "sat": "def sat(init: List[List[int]], period: int=184):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_183",
    "sat": "def sat(init: List[List[int]], period: int=185):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_184",
    "sat": "def sat(init: List[List[int]], period: int=186):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_185",
    "sat": "def sat(init: List[List[int]], period: int=187):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_186",
    "sat": "def sat(init: List[List[int]], period: int=188):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_187",
    "sat": "def sat(init: List[List[int]], period: int=189):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_188",
    "sat": "def sat(init: List[List[int]], period: int=190):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_189",
    "sat": "def sat(init: List[List[int]], period: int=191):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_190",
    "sat": "def sat(init: List[List[int]], period: int=192):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_191",
    "sat": "def sat(init: List[List[int]], period: int=193):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_192",
    "sat": "def sat(init: List[List[int]], period: int=194):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_193",
    "sat": "def sat(init: List[List[int]], period: int=195):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_194",
    "sat": "def sat(init: List[List[int]], period: int=196):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_195",
    "sat": "def sat(init: List[List[int]], period: int=197):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_196",
    "sat": "def sat(init: List[List[int]], period: int=198):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_197",
    "sat": "def sat(init: List[List[int]], period: int=199):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_198",
    "sat": "def sat(init: List[List[int]], period: int=200):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_199",
    "sat": "def sat(init: List[List[int]], period: int=201):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_200",
    "sat": "def sat(init: List[List[int]], period: int=202):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_201",
    "sat": "def sat(init: List[List[int]], period: int=203):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_202",
    "sat": "def sat(init: List[List[int]], period: int=204):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_203",
    "sat": "def sat(init: List[List[int]], period: int=205):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_204",
    "sat": "def sat(init: List[List[int]], period: int=206):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_205",
    "sat": "def sat(init: List[List[int]], period: int=207):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_206",
    "sat": "def sat(init: List[List[int]], period: int=208):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_207",
    "sat": "def sat(init: List[List[int]], period: int=209):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_208",
    "sat": "def sat(init: List[List[int]], period: int=210):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_209",
    "sat": "def sat(init: List[List[int]], period: int=211):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_210",
    "sat": "def sat(init: List[List[int]], period: int=212):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_211",
    "sat": "def sat(init: List[List[int]], period: int=213):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_212",
    "sat": "def sat(init: List[List[int]], period: int=214):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_213",
    "sat": "def sat(init: List[List[int]], period: int=215):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_214",
    "sat": "def sat(init: List[List[int]], period: int=216):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_215",
    "sat": "def sat(init: List[List[int]], period: int=217):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_216",
    "sat": "def sat(init: List[List[int]], period: int=218):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_217",
    "sat": "def sat(init: List[List[int]], period: int=219):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_218",
    "sat": "def sat(init: List[List[int]], period: int=220):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_219",
    "sat": "def sat(init: List[List[int]], period: int=221):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_220",
    "sat": "def sat(init: List[List[int]], period: int=222):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_221",
    "sat": "def sat(init: List[List[int]], period: int=223):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_222",
    "sat": "def sat(init: List[List[int]], period: int=224):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_223",
    "sat": "def sat(init: List[List[int]], period: int=225):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_224",
    "sat": "def sat(init: List[List[int]], period: int=226):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_225",
    "sat": "def sat(init: List[List[int]], period: int=227):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_226",
    "sat": "def sat(init: List[List[int]], period: int=228):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_227",
    "sat": "def sat(init: List[List[int]], period: int=229):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_228",
    "sat": "def sat(init: List[List[int]], period: int=230):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_229",
    "sat": "def sat(init: List[List[int]], period: int=231):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_230",
    "sat": "def sat(init: List[List[int]], period: int=232):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_231",
    "sat": "def sat(init: List[List[int]], period: int=233):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_232",
    "sat": "def sat(init: List[List[int]], period: int=234):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_233",
    "sat": "def sat(init: List[List[int]], period: int=235):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_234",
    "sat": "def sat(init: List[List[int]], period: int=236):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_235",
    "sat": "def sat(init: List[List[int]], period: int=237):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_236",
    "sat": "def sat(init: List[List[int]], period: int=238):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_237",
    "sat": "def sat(init: List[List[int]], period: int=239):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_238",
    "sat": "def sat(init: List[List[int]], period: int=240):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_239",
    "sat": "def sat(init: List[List[int]], period: int=241):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_240",
    "sat": "def sat(init: List[List[int]], period: int=242):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_241",
    "sat": "def sat(init: List[List[int]], period: int=243):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_242",
    "sat": "def sat(init: List[List[int]], period: int=244):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_243",
    "sat": "def sat(init: List[List[int]], period: int=245):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_244",
    "sat": "def sat(init: List[List[int]], period: int=246):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_245",
    "sat": "def sat(init: List[List[int]], period: int=247):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_246",
    "sat": "def sat(init: List[List[int]], period: int=248):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_247",
    "sat": "def sat(init: List[List[int]], period: int=249):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_248",
    "sat": "def sat(init: List[List[int]], period: int=250):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_249",
    "sat": "def sat(init: List[List[int]], period: int=251):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_250",
    "sat": "def sat(init: List[List[int]], period: int=252):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_251",
    "sat": "def sat(init: List[List[int]], period: int=253):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_252",
    "sat": "def sat(init: List[List[int]], period: int=254):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_253",
    "sat": "def sat(init: List[List[int]], period: int=255):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_254",
    "sat": "def sat(init: List[List[int]], period: int=256):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_255",
    "sat": "def sat(init: List[List[int]], period: int=257):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_256",
    "sat": "def sat(init: List[List[int]], period: int=258):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_257",
    "sat": "def sat(init: List[List[int]], period: int=259):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_258",
    "sat": "def sat(init: List[List[int]], period: int=260):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_259",
    "sat": "def sat(init: List[List[int]], period: int=261):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_260",
    "sat": "def sat(init: List[List[int]], period: int=262):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_261",
    "sat": "def sat(init: List[List[int]], period: int=263):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_262",
    "sat": "def sat(init: List[List[int]], period: int=264):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_263",
    "sat": "def sat(init: List[List[int]], period: int=265):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_264",
    "sat": "def sat(init: List[List[int]], period: int=266):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_265",
    "sat": "def sat(init: List[List[int]], period: int=267):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_266",
    "sat": "def sat(init: List[List[int]], period: int=268):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_267",
    "sat": "def sat(init: List[List[int]], period: int=269):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_268",
    "sat": "def sat(init: List[List[int]], period: int=270):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_269",
    "sat": "def sat(init: List[List[int]], period: int=271):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_270",
    "sat": "def sat(init: List[List[int]], period: int=272):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_271",
    "sat": "def sat(init: List[List[int]], period: int=273):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_272",
    "sat": "def sat(init: List[List[int]], period: int=274):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_273",
    "sat": "def sat(init: List[List[int]], period: int=275):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_274",
    "sat": "def sat(init: List[List[int]], period: int=276):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_275",
    "sat": "def sat(init: List[List[int]], period: int=277):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_276",
    "sat": "def sat(init: List[List[int]], period: int=278):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_277",
    "sat": "def sat(init: List[List[int]], period: int=279):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_278",
    "sat": "def sat(init: List[List[int]], period: int=280):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_279",
    "sat": "def sat(init: List[List[int]], period: int=281):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_280",
    "sat": "def sat(init: List[List[int]], period: int=282):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_281",
    "sat": "def sat(init: List[List[int]], period: int=283):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_282",
    "sat": "def sat(init: List[List[int]], period: int=284):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_283",
    "sat": "def sat(init: List[List[int]], period: int=285):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_284",
    "sat": "def sat(init: List[List[int]], period: int=286):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_285",
    "sat": "def sat(init: List[List[int]], period: int=287):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_286",
    "sat": "def sat(init: List[List[int]], period: int=288):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_287",
    "sat": "def sat(init: List[List[int]], period: int=289):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_288",
    "sat": "def sat(init: List[List[int]], period: int=290):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_289",
    "sat": "def sat(init: List[List[int]], period: int=291):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_290",
    "sat": "def sat(init: List[List[int]], period: int=292):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_291",
    "sat": "def sat(init: List[List[int]], period: int=293):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_292",
    "sat": "def sat(init: List[List[int]], period: int=294):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_293",
    "sat": "def sat(init: List[List[int]], period: int=295):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_294",
    "sat": "def sat(init: List[List[int]], period: int=296):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_295",
    "sat": "def sat(init: List[List[int]], period: int=297):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_296",
    "sat": "def sat(init: List[List[int]], period: int=298):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_297",
    "sat": "def sat(init: List[List[int]], period: int=299):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_298",
    "sat": "def sat(init: List[List[int]], period: int=300):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_299",
    "sat": "def sat(init: List[List[int]], period: int=301):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_300",
    "sat": "def sat(init: List[List[int]], period: int=302):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_301",
    "sat": "def sat(init: List[List[int]], period: int=303):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_302",
    "sat": "def sat(init: List[List[int]], period: int=304):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_303",
    "sat": "def sat(init: List[List[int]], period: int=305):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_304",
    "sat": "def sat(init: List[List[int]], period: int=306):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_305",
    "sat": "def sat(init: List[List[int]], period: int=307):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_306",
    "sat": "def sat(init: List[List[int]], period: int=308):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_307",
    "sat": "def sat(init: List[List[int]], period: int=309):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_308",
    "sat": "def sat(init: List[List[int]], period: int=310):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_309",
    "sat": "def sat(init: List[List[int]], period: int=311):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_310",
    "sat": "def sat(init: List[List[int]], period: int=312):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_311",
    "sat": "def sat(init: List[List[int]], period: int=313):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_312",
    "sat": "def sat(init: List[List[int]], period: int=314):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_313",
    "sat": "def sat(init: List[List[int]], period: int=315):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_314",
    "sat": "def sat(init: List[List[int]], period: int=316):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_315",
    "sat": "def sat(init: List[List[int]], period: int=317):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_316",
    "sat": "def sat(init: List[List[int]], period: int=318):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_317",
    "sat": "def sat(init: List[List[int]], period: int=319):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_318",
    "sat": "def sat(init: List[List[int]], period: int=320):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_319",
    "sat": "def sat(init: List[List[int]], period: int=321):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_320",
    "sat": "def sat(init: List[List[int]], period: int=322):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_321",
    "sat": "def sat(init: List[List[int]], period: int=323):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_322",
    "sat": "def sat(init: List[List[int]], period: int=324):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_323",
    "sat": "def sat(init: List[List[int]], period: int=325):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_324",
    "sat": "def sat(init: List[List[int]], period: int=326):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_325",
    "sat": "def sat(init: List[List[int]], period: int=327):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_326",
    "sat": "def sat(init: List[List[int]], period: int=328):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_327",
    "sat": "def sat(init: List[List[int]], period: int=329):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_328",
    "sat": "def sat(init: List[List[int]], period: int=330):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_329",
    "sat": "def sat(init: List[List[int]], period: int=331):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_330",
    "sat": "def sat(init: List[List[int]], period: int=332):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_331",
    "sat": "def sat(init: List[List[int]], period: int=333):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_332",
    "sat": "def sat(init: List[List[int]], period: int=334):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_333",
    "sat": "def sat(init: List[List[int]], period: int=335):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_334",
    "sat": "def sat(init: List[List[int]], period: int=336):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_335",
    "sat": "def sat(init: List[List[int]], period: int=337):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_336",
    "sat": "def sat(init: List[List[int]], period: int=338):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_337",
    "sat": "def sat(init: List[List[int]], period: int=339):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_338",
    "sat": "def sat(init: List[List[int]], period: int=340):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_339",
    "sat": "def sat(init: List[List[int]], period: int=341):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_340",
    "sat": "def sat(init: List[List[int]], period: int=342):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_341",
    "sat": "def sat(init: List[List[int]], period: int=343):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_342",
    "sat": "def sat(init: List[List[int]], period: int=344):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_343",
    "sat": "def sat(init: List[List[int]], period: int=345):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_344",
    "sat": "def sat(init: List[List[int]], period: int=346):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_345",
    "sat": "def sat(init: List[List[int]], period: int=347):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_346",
    "sat": "def sat(init: List[List[int]], period: int=348):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_347",
    "sat": "def sat(init: List[List[int]], period: int=349):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_348",
    "sat": "def sat(init: List[List[int]], period: int=350):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_349",
    "sat": "def sat(init: List[List[int]], period: int=351):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_350",
    "sat": "def sat(init: List[List[int]], period: int=352):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_351",
    "sat": "def sat(init: List[List[int]], period: int=353):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_352",
    "sat": "def sat(init: List[List[int]], period: int=354):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_353",
    "sat": "def sat(init: List[List[int]], period: int=355):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_354",
    "sat": "def sat(init: List[List[int]], period: int=356):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_355",
    "sat": "def sat(init: List[List[int]], period: int=357):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_356",
    "sat": "def sat(init: List[List[int]], period: int=358):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_357",
    "sat": "def sat(init: List[List[int]], period: int=359):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_358",
    "sat": "def sat(init: List[List[int]], period: int=360):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_359",
    "sat": "def sat(init: List[List[int]], period: int=361):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_360",
    "sat": "def sat(init: List[List[int]], period: int=362):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_361",
    "sat": "def sat(init: List[List[int]], period: int=363):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_362",
    "sat": "def sat(init: List[List[int]], period: int=364):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_363",
    "sat": "def sat(init: List[List[int]], period: int=365):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_364",
    "sat": "def sat(init: List[List[int]], period: int=366):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_365",
    "sat": "def sat(init: List[List[int]], period: int=367):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_366",
    "sat": "def sat(init: List[List[int]], period: int=368):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_367",
    "sat": "def sat(init: List[List[int]], period: int=369):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_368",
    "sat": "def sat(init: List[List[int]], period: int=370):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_369",
    "sat": "def sat(init: List[List[int]], period: int=371):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_370",
    "sat": "def sat(init: List[List[int]], period: int=372):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_371",
    "sat": "def sat(init: List[List[int]], period: int=373):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_372",
    "sat": "def sat(init: List[List[int]], period: int=374):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_373",
    "sat": "def sat(init: List[List[int]], period: int=375):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_374",
    "sat": "def sat(init: List[List[int]], period: int=376):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_375",
    "sat": "def sat(init: List[List[int]], period: int=377):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_376",
    "sat": "def sat(init: List[List[int]], period: int=378):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_377",
    "sat": "def sat(init: List[List[int]], period: int=379):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_378",
    "sat": "def sat(init: List[List[int]], period: int=380):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_379",
    "sat": "def sat(init: List[List[int]], period: int=381):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_380",
    "sat": "def sat(init: List[List[int]], period: int=382):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_381",
    "sat": "def sat(init: List[List[int]], period: int=383):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_382",
    "sat": "def sat(init: List[List[int]], period: int=384):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_383",
    "sat": "def sat(init: List[List[int]], period: int=385):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_384",
    "sat": "def sat(init: List[List[int]], period: int=386):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_385",
    "sat": "def sat(init: List[List[int]], period: int=387):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_386",
    "sat": "def sat(init: List[List[int]], period: int=388):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_387",
    "sat": "def sat(init: List[List[int]], period: int=389):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_388",
    "sat": "def sat(init: List[List[int]], period: int=390):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_389",
    "sat": "def sat(init: List[List[int]], period: int=391):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_390",
    "sat": "def sat(init: List[List[int]], period: int=392):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_391",
    "sat": "def sat(init: List[List[int]], period: int=393):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_392",
    "sat": "def sat(init: List[List[int]], period: int=394):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_393",
    "sat": "def sat(init: List[List[int]], period: int=395):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_394",
    "sat": "def sat(init: List[List[int]], period: int=396):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_395",
    "sat": "def sat(init: List[List[int]], period: int=397):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_396",
    "sat": "def sat(init: List[List[int]], period: int=398):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_397",
    "sat": "def sat(init: List[List[int]], period: int=399):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_398",
    "sat": "def sat(init: List[List[int]], period: int=400):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_399",
    "sat": "def sat(init: List[List[int]], period: int=401):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_400",
    "sat": "def sat(init: List[List[int]], period: int=402):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_401",
    "sat": "def sat(init: List[List[int]], period: int=403):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_402",
    "sat": "def sat(init: List[List[int]], period: int=404):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_403",
    "sat": "def sat(init: List[List[int]], period: int=405):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_404",
    "sat": "def sat(init: List[List[int]], period: int=406):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_405",
    "sat": "def sat(init: List[List[int]], period: int=407):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_406",
    "sat": "def sat(init: List[List[int]], period: int=408):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_407",
    "sat": "def sat(init: List[List[int]], period: int=409):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_408",
    "sat": "def sat(init: List[List[int]], period: int=410):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_409",
    "sat": "def sat(init: List[List[int]], period: int=411):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_410",
    "sat": "def sat(init: List[List[int]], period: int=412):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_411",
    "sat": "def sat(init: List[List[int]], period: int=413):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_412",
    "sat": "def sat(init: List[List[int]], period: int=414):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_413",
    "sat": "def sat(init: List[List[int]], period: int=415):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_414",
    "sat": "def sat(init: List[List[int]], period: int=416):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_415",
    "sat": "def sat(init: List[List[int]], period: int=417):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_416",
    "sat": "def sat(init: List[List[int]], period: int=418):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_417",
    "sat": "def sat(init: List[List[int]], period: int=419):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_418",
    "sat": "def sat(init: List[List[int]], period: int=420):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_419",
    "sat": "def sat(init: List[List[int]], period: int=421):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_420",
    "sat": "def sat(init: List[List[int]], period: int=422):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_421",
    "sat": "def sat(init: List[List[int]], period: int=423):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_422",
    "sat": "def sat(init: List[List[int]], period: int=424):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_423",
    "sat": "def sat(init: List[List[int]], period: int=425):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_424",
    "sat": "def sat(init: List[List[int]], period: int=426):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_425",
    "sat": "def sat(init: List[List[int]], period: int=427):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_426",
    "sat": "def sat(init: List[List[int]], period: int=428):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_427",
    "sat": "def sat(init: List[List[int]], period: int=429):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_428",
    "sat": "def sat(init: List[List[int]], period: int=430):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_429",
    "sat": "def sat(init: List[List[int]], period: int=431):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_430",
    "sat": "def sat(init: List[List[int]], period: int=432):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_431",
    "sat": "def sat(init: List[List[int]], period: int=433):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_432",
    "sat": "def sat(init: List[List[int]], period: int=434):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_433",
    "sat": "def sat(init: List[List[int]], period: int=435):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_434",
    "sat": "def sat(init: List[List[int]], period: int=436):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_435",
    "sat": "def sat(init: List[List[int]], period: int=437):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_436",
    "sat": "def sat(init: List[List[int]], period: int=438):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_437",
    "sat": "def sat(init: List[List[int]], period: int=439):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_438",
    "sat": "def sat(init: List[List[int]], period: int=440):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_439",
    "sat": "def sat(init: List[List[int]], period: int=441):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_440",
    "sat": "def sat(init: List[List[int]], period: int=442):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_441",
    "sat": "def sat(init: List[List[int]], period: int=443):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_442",
    "sat": "def sat(init: List[List[int]], period: int=444):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_443",
    "sat": "def sat(init: List[List[int]], period: int=445):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_444",
    "sat": "def sat(init: List[List[int]], period: int=446):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_445",
    "sat": "def sat(init: List[List[int]], period: int=447):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_446",
    "sat": "def sat(init: List[List[int]], period: int=448):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_447",
    "sat": "def sat(init: List[List[int]], period: int=449):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_448",
    "sat": "def sat(init: List[List[int]], period: int=450):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_449",
    "sat": "def sat(init: List[List[int]], period: int=451):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_450",
    "sat": "def sat(init: List[List[int]], period: int=452):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_451",
    "sat": "def sat(init: List[List[int]], period: int=453):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_452",
    "sat": "def sat(init: List[List[int]], period: int=454):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_453",
    "sat": "def sat(init: List[List[int]], period: int=455):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_454",
    "sat": "def sat(init: List[List[int]], period: int=456):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_455",
    "sat": "def sat(init: List[List[int]], period: int=457):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_456",
    "sat": "def sat(init: List[List[int]], period: int=458):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_457",
    "sat": "def sat(init: List[List[int]], period: int=459):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_458",
    "sat": "def sat(init: List[List[int]], period: int=460):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_459",
    "sat": "def sat(init: List[List[int]], period: int=461):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_460",
    "sat": "def sat(init: List[List[int]], period: int=462):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_461",
    "sat": "def sat(init: List[List[int]], period: int=463):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_462",
    "sat": "def sat(init: List[List[int]], period: int=464):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_463",
    "sat": "def sat(init: List[List[int]], period: int=465):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_464",
    "sat": "def sat(init: List[List[int]], period: int=466):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_465",
    "sat": "def sat(init: List[List[int]], period: int=467):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_466",
    "sat": "def sat(init: List[List[int]], period: int=468):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_467",
    "sat": "def sat(init: List[List[int]], period: int=469):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_468",
    "sat": "def sat(init: List[List[int]], period: int=470):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_469",
    "sat": "def sat(init: List[List[int]], period: int=471):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_470",
    "sat": "def sat(init: List[List[int]], period: int=472):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_471",
    "sat": "def sat(init: List[List[int]], period: int=473):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_472",
    "sat": "def sat(init: List[List[int]], period: int=474):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_473",
    "sat": "def sat(init: List[List[int]], period: int=475):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_474",
    "sat": "def sat(init: List[List[int]], period: int=476):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_475",
    "sat": "def sat(init: List[List[int]], period: int=477):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_476",
    "sat": "def sat(init: List[List[int]], period: int=478):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_477",
    "sat": "def sat(init: List[List[int]], period: int=479):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_478",
    "sat": "def sat(init: List[List[int]], period: int=480):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_479",
    "sat": "def sat(init: List[List[int]], period: int=481):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_480",
    "sat": "def sat(init: List[List[int]], period: int=482):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_481",
    "sat": "def sat(init: List[List[int]], period: int=483):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_482",
    "sat": "def sat(init: List[List[int]], period: int=484):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_483",
    "sat": "def sat(init: List[List[int]], period: int=485):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_484",
    "sat": "def sat(init: List[List[int]], period: int=486):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_485",
    "sat": "def sat(init: List[List[int]], period: int=487):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_486",
    "sat": "def sat(init: List[List[int]], period: int=488):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_487",
    "sat": "def sat(init: List[List[int]], period: int=489):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_488",
    "sat": "def sat(init: List[List[int]], period: int=490):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_489",
    "sat": "def sat(init: List[List[int]], period: int=491):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_490",
    "sat": "def sat(init: List[List[int]], period: int=492):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_491",
    "sat": "def sat(init: List[List[int]], period: int=493):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_492",
    "sat": "def sat(init: List[List[int]], period: int=494):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_493",
    "sat": "def sat(init: List[List[int]], period: int=495):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_494",
    "sat": "def sat(init: List[List[int]], period: int=496):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_495",
    "sat": "def sat(init: List[List[int]], period: int=497):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_496",
    "sat": "def sat(init: List[List[int]], period: int=498):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_497",
    "sat": "def sat(init: List[List[int]], period: int=499):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_498",
    "sat": "def sat(init: List[List[int]], period: int=500):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_499",
    "sat": "def sat(init: List[List[int]], period: int=501):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_500",
    "sat": "def sat(init: List[List[int]], period: int=502):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_501",
    "sat": "def sat(init: List[List[int]], period: int=503):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_502",
    "sat": "def sat(init: List[List[int]], period: int=504):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_503",
    "sat": "def sat(init: List[List[int]], period: int=505):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_504",
    "sat": "def sat(init: List[List[int]], period: int=506):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_505",
    "sat": "def sat(init: List[List[int]], period: int=507):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_506",
    "sat": "def sat(init: List[List[int]], period: int=508):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_507",
    "sat": "def sat(init: List[List[int]], period: int=509):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_508",
    "sat": "def sat(init: List[List[int]], period: int=510):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_509",
    "sat": "def sat(init: List[List[int]], period: int=511):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_510",
    "sat": "def sat(init: List[List[int]], period: int=512):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_511",
    "sat": "def sat(init: List[List[int]], period: int=513):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_512",
    "sat": "def sat(init: List[List[int]], period: int=514):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_513",
    "sat": "def sat(init: List[List[int]], period: int=515):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_514",
    "sat": "def sat(init: List[List[int]], period: int=516):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_515",
    "sat": "def sat(init: List[List[int]], period: int=517):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_516",
    "sat": "def sat(init: List[List[int]], period: int=518):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_517",
    "sat": "def sat(init: List[List[int]], period: int=519):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_518",
    "sat": "def sat(init: List[List[int]], period: int=520):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_519",
    "sat": "def sat(init: List[List[int]], period: int=521):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_520",
    "sat": "def sat(init: List[List[int]], period: int=522):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_521",
    "sat": "def sat(init: List[List[int]], period: int=523):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_522",
    "sat": "def sat(init: List[List[int]], period: int=524):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_523",
    "sat": "def sat(init: List[List[int]], period: int=525):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_524",
    "sat": "def sat(init: List[List[int]], period: int=526):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_525",
    "sat": "def sat(init: List[List[int]], period: int=527):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_526",
    "sat": "def sat(init: List[List[int]], period: int=528):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_527",
    "sat": "def sat(init: List[List[int]], period: int=529):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_528",
    "sat": "def sat(init: List[List[int]], period: int=530):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_529",
    "sat": "def sat(init: List[List[int]], period: int=531):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_530",
    "sat": "def sat(init: List[List[int]], period: int=532):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_531",
    "sat": "def sat(init: List[List[int]], period: int=533):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_532",
    "sat": "def sat(init: List[List[int]], period: int=534):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_533",
    "sat": "def sat(init: List[List[int]], period: int=535):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_534",
    "sat": "def sat(init: List[List[int]], period: int=536):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_535",
    "sat": "def sat(init: List[List[int]], period: int=537):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_536",
    "sat": "def sat(init: List[List[int]], period: int=538):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_537",
    "sat": "def sat(init: List[List[int]], period: int=539):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_538",
    "sat": "def sat(init: List[List[int]], period: int=540):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_539",
    "sat": "def sat(init: List[List[int]], period: int=541):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_540",
    "sat": "def sat(init: List[List[int]], period: int=542):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_541",
    "sat": "def sat(init: List[List[int]], period: int=543):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_542",
    "sat": "def sat(init: List[List[int]], period: int=544):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_543",
    "sat": "def sat(init: List[List[int]], period: int=545):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_544",
    "sat": "def sat(init: List[List[int]], period: int=546):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_545",
    "sat": "def sat(init: List[List[int]], period: int=547):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_546",
    "sat": "def sat(init: List[List[int]], period: int=548):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_547",
    "sat": "def sat(init: List[List[int]], period: int=549):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_548",
    "sat": "def sat(init: List[List[int]], period: int=550):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_549",
    "sat": "def sat(init: List[List[int]], period: int=551):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_550",
    "sat": "def sat(init: List[List[int]], period: int=552):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_551",
    "sat": "def sat(init: List[List[int]], period: int=553):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_552",
    "sat": "def sat(init: List[List[int]], period: int=554):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_553",
    "sat": "def sat(init: List[List[int]], period: int=555):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_554",
    "sat": "def sat(init: List[List[int]], period: int=556):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_555",
    "sat": "def sat(init: List[List[int]], period: int=557):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_556",
    "sat": "def sat(init: List[List[int]], period: int=558):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_557",
    "sat": "def sat(init: List[List[int]], period: int=559):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_558",
    "sat": "def sat(init: List[List[int]], period: int=560):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_559",
    "sat": "def sat(init: List[List[int]], period: int=561):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_560",
    "sat": "def sat(init: List[List[int]], period: int=562):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_561",
    "sat": "def sat(init: List[List[int]], period: int=563):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_562",
    "sat": "def sat(init: List[List[int]], period: int=564):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_563",
    "sat": "def sat(init: List[List[int]], period: int=565):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_564",
    "sat": "def sat(init: List[List[int]], period: int=566):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_565",
    "sat": "def sat(init: List[List[int]], period: int=567):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_566",
    "sat": "def sat(init: List[List[int]], period: int=568):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_567",
    "sat": "def sat(init: List[List[int]], period: int=569):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_568",
    "sat": "def sat(init: List[List[int]], period: int=570):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_569",
    "sat": "def sat(init: List[List[int]], period: int=571):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_570",
    "sat": "def sat(init: List[List[int]], period: int=572):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_571",
    "sat": "def sat(init: List[List[int]], period: int=573):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_572",
    "sat": "def sat(init: List[List[int]], period: int=574):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_573",
    "sat": "def sat(init: List[List[int]], period: int=575):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_574",
    "sat": "def sat(init: List[List[int]], period: int=576):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_575",
    "sat": "def sat(init: List[List[int]], period: int=577):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_576",
    "sat": "def sat(init: List[List[int]], period: int=578):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_577",
    "sat": "def sat(init: List[List[int]], period: int=579):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_578",
    "sat": "def sat(init: List[List[int]], period: int=580):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_579",
    "sat": "def sat(init: List[List[int]], period: int=581):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_580",
    "sat": "def sat(init: List[List[int]], period: int=582):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_581",
    "sat": "def sat(init: List[List[int]], period: int=583):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_582",
    "sat": "def sat(init: List[List[int]], period: int=584):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_583",
    "sat": "def sat(init: List[List[int]], period: int=585):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_584",
    "sat": "def sat(init: List[List[int]], period: int=586):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_585",
    "sat": "def sat(init: List[List[int]], period: int=587):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_586",
    "sat": "def sat(init: List[List[int]], period: int=588):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_587",
    "sat": "def sat(init: List[List[int]], period: int=589):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_588",
    "sat": "def sat(init: List[List[int]], period: int=590):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_589",
    "sat": "def sat(init: List[List[int]], period: int=591):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_590",
    "sat": "def sat(init: List[List[int]], period: int=592):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_591",
    "sat": "def sat(init: List[List[int]], period: int=593):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_592",
    "sat": "def sat(init: List[List[int]], period: int=594):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_593",
    "sat": "def sat(init: List[List[int]], period: int=595):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_594",
    "sat": "def sat(init: List[List[int]], period: int=596):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_595",
    "sat": "def sat(init: List[List[int]], period: int=597):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_596",
    "sat": "def sat(init: List[List[int]], period: int=598):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_597",
    "sat": "def sat(init: List[List[int]], period: int=599):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_598",
    "sat": "def sat(init: List[List[int]], period: int=600):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_599",
    "sat": "def sat(init: List[List[int]], period: int=601):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_600",
    "sat": "def sat(init: List[List[int]], period: int=602):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_601",
    "sat": "def sat(init: List[List[int]], period: int=603):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_602",
    "sat": "def sat(init: List[List[int]], period: int=604):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_603",
    "sat": "def sat(init: List[List[int]], period: int=605):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_604",
    "sat": "def sat(init: List[List[int]], period: int=606):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_605",
    "sat": "def sat(init: List[List[int]], period: int=607):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_606",
    "sat": "def sat(init: List[List[int]], period: int=608):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_607",
    "sat": "def sat(init: List[List[int]], period: int=609):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_608",
    "sat": "def sat(init: List[List[int]], period: int=610):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_609",
    "sat": "def sat(init: List[List[int]], period: int=611):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_610",
    "sat": "def sat(init: List[List[int]], period: int=612):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_611",
    "sat": "def sat(init: List[List[int]], period: int=613):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_612",
    "sat": "def sat(init: List[List[int]], period: int=614):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_613",
    "sat": "def sat(init: List[List[int]], period: int=615):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_614",
    "sat": "def sat(init: List[List[int]], period: int=616):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_615",
    "sat": "def sat(init: List[List[int]], period: int=617):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_616",
    "sat": "def sat(init: List[List[int]], period: int=618):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_617",
    "sat": "def sat(init: List[List[int]], period: int=619):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_618",
    "sat": "def sat(init: List[List[int]], period: int=620):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_619",
    "sat": "def sat(init: List[List[int]], period: int=621):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_620",
    "sat": "def sat(init: List[List[int]], period: int=622):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_621",
    "sat": "def sat(init: List[List[int]], period: int=623):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_622",
    "sat": "def sat(init: List[List[int]], period: int=624):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_623",
    "sat": "def sat(init: List[List[int]], period: int=625):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_624",
    "sat": "def sat(init: List[List[int]], period: int=626):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_625",
    "sat": "def sat(init: List[List[int]], period: int=627):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_626",
    "sat": "def sat(init: List[List[int]], period: int=628):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_627",
    "sat": "def sat(init: List[List[int]], period: int=629):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_628",
    "sat": "def sat(init: List[List[int]], period: int=630):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_629",
    "sat": "def sat(init: List[List[int]], period: int=631):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_630",
    "sat": "def sat(init: List[List[int]], period: int=632):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_631",
    "sat": "def sat(init: List[List[int]], period: int=633):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_632",
    "sat": "def sat(init: List[List[int]], period: int=634):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_633",
    "sat": "def sat(init: List[List[int]], period: int=635):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_634",
    "sat": "def sat(init: List[List[int]], period: int=636):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_635",
    "sat": "def sat(init: List[List[int]], period: int=637):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_636",
    "sat": "def sat(init: List[List[int]], period: int=638):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_637",
    "sat": "def sat(init: List[List[int]], period: int=639):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_638",
    "sat": "def sat(init: List[List[int]], period: int=640):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_639",
    "sat": "def sat(init: List[List[int]], period: int=641):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_640",
    "sat": "def sat(init: List[List[int]], period: int=642):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_641",
    "sat": "def sat(init: List[List[int]], period: int=643):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_642",
    "sat": "def sat(init: List[List[int]], period: int=644):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_643",
    "sat": "def sat(init: List[List[int]], period: int=645):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_644",
    "sat": "def sat(init: List[List[int]], period: int=646):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_645",
    "sat": "def sat(init: List[List[int]], period: int=647):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_646",
    "sat": "def sat(init: List[List[int]], period: int=648):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_647",
    "sat": "def sat(init: List[List[int]], period: int=649):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_648",
    "sat": "def sat(init: List[List[int]], period: int=650):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_649",
    "sat": "def sat(init: List[List[int]], period: int=651):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_650",
    "sat": "def sat(init: List[List[int]], period: int=652):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_651",
    "sat": "def sat(init: List[List[int]], period: int=653):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_652",
    "sat": "def sat(init: List[List[int]], period: int=654):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_653",
    "sat": "def sat(init: List[List[int]], period: int=655):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_654",
    "sat": "def sat(init: List[List[int]], period: int=656):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_655",
    "sat": "def sat(init: List[List[int]], period: int=657):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_656",
    "sat": "def sat(init: List[List[int]], period: int=658):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_657",
    "sat": "def sat(init: List[List[int]], period: int=659):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_658",
    "sat": "def sat(init: List[List[int]], period: int=660):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_659",
    "sat": "def sat(init: List[List[int]], period: int=661):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_660",
    "sat": "def sat(init: List[List[int]], period: int=662):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_661",
    "sat": "def sat(init: List[List[int]], period: int=663):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_662",
    "sat": "def sat(init: List[List[int]], period: int=664):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_663",
    "sat": "def sat(init: List[List[int]], period: int=665):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_664",
    "sat": "def sat(init: List[List[int]], period: int=666):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_665",
    "sat": "def sat(init: List[List[int]], period: int=667):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_666",
    "sat": "def sat(init: List[List[int]], period: int=668):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_667",
    "sat": "def sat(init: List[List[int]], period: int=669):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_668",
    "sat": "def sat(init: List[List[int]], period: int=670):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_669",
    "sat": "def sat(init: List[List[int]], period: int=671):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_670",
    "sat": "def sat(init: List[List[int]], period: int=672):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_671",
    "sat": "def sat(init: List[List[int]], period: int=673):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_672",
    "sat": "def sat(init: List[List[int]], period: int=674):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_673",
    "sat": "def sat(init: List[List[int]], period: int=675):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_674",
    "sat": "def sat(init: List[List[int]], period: int=676):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_675",
    "sat": "def sat(init: List[List[int]], period: int=677):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_676",
    "sat": "def sat(init: List[List[int]], period: int=678):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_677",
    "sat": "def sat(init: List[List[int]], period: int=679):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_678",
    "sat": "def sat(init: List[List[int]], period: int=680):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_679",
    "sat": "def sat(init: List[List[int]], period: int=681):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_680",
    "sat": "def sat(init: List[List[int]], period: int=682):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_681",
    "sat": "def sat(init: List[List[int]], period: int=683):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_682",
    "sat": "def sat(init: List[List[int]], period: int=684):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_683",
    "sat": "def sat(init: List[List[int]], period: int=685):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_684",
    "sat": "def sat(init: List[List[int]], period: int=686):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_685",
    "sat": "def sat(init: List[List[int]], period: int=687):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_686",
    "sat": "def sat(init: List[List[int]], period: int=688):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_687",
    "sat": "def sat(init: List[List[int]], period: int=689):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_688",
    "sat": "def sat(init: List[List[int]], period: int=690):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_689",
    "sat": "def sat(init: List[List[int]], period: int=691):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_690",
    "sat": "def sat(init: List[List[int]], period: int=692):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_691",
    "sat": "def sat(init: List[List[int]], period: int=693):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_692",
    "sat": "def sat(init: List[List[int]], period: int=694):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_693",
    "sat": "def sat(init: List[List[int]], period: int=695):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_694",
    "sat": "def sat(init: List[List[int]], period: int=696):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_695",
    "sat": "def sat(init: List[List[int]], period: int=697):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_696",
    "sat": "def sat(init: List[List[int]], period: int=698):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_697",
    "sat": "def sat(init: List[List[int]], period: int=699):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_698",
    "sat": "def sat(init: List[List[int]], period: int=700):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_699",
    "sat": "def sat(init: List[List[int]], period: int=701):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_700",
    "sat": "def sat(init: List[List[int]], period: int=702):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_701",
    "sat": "def sat(init: List[List[int]], period: int=703):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_702",
    "sat": "def sat(init: List[List[int]], period: int=704):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_703",
    "sat": "def sat(init: List[List[int]], period: int=705):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_704",
    "sat": "def sat(init: List[List[int]], period: int=706):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_705",
    "sat": "def sat(init: List[List[int]], period: int=707):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_706",
    "sat": "def sat(init: List[List[int]], period: int=708):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_707",
    "sat": "def sat(init: List[List[int]], period: int=709):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_708",
    "sat": "def sat(init: List[List[int]], period: int=710):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_709",
    "sat": "def sat(init: List[List[int]], period: int=711):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_710",
    "sat": "def sat(init: List[List[int]], period: int=712):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_711",
    "sat": "def sat(init: List[List[int]], period: int=713):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_712",
    "sat": "def sat(init: List[List[int]], period: int=714):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_713",
    "sat": "def sat(init: List[List[int]], period: int=715):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_714",
    "sat": "def sat(init: List[List[int]], period: int=716):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_715",
    "sat": "def sat(init: List[List[int]], period: int=717):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_716",
    "sat": "def sat(init: List[List[int]], period: int=718):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_717",
    "sat": "def sat(init: List[List[int]], period: int=719):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_718",
    "sat": "def sat(init: List[List[int]], period: int=720):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_719",
    "sat": "def sat(init: List[List[int]], period: int=721):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_720",
    "sat": "def sat(init: List[List[int]], period: int=722):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_721",
    "sat": "def sat(init: List[List[int]], period: int=723):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_722",
    "sat": "def sat(init: List[List[int]], period: int=724):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_723",
    "sat": "def sat(init: List[List[int]], period: int=725):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_724",
    "sat": "def sat(init: List[List[int]], period: int=726):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_725",
    "sat": "def sat(init: List[List[int]], period: int=727):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_726",
    "sat": "def sat(init: List[List[int]], period: int=728):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_727",
    "sat": "def sat(init: List[List[int]], period: int=729):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_728",
    "sat": "def sat(init: List[List[int]], period: int=730):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_729",
    "sat": "def sat(init: List[List[int]], period: int=731):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_730",
    "sat": "def sat(init: List[List[int]], period: int=732):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_731",
    "sat": "def sat(init: List[List[int]], period: int=733):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_732",
    "sat": "def sat(init: List[List[int]], period: int=734):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_733",
    "sat": "def sat(init: List[List[int]], period: int=735):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_734",
    "sat": "def sat(init: List[List[int]], period: int=736):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_735",
    "sat": "def sat(init: List[List[int]], period: int=737):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_736",
    "sat": "def sat(init: List[List[int]], period: int=738):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_737",
    "sat": "def sat(init: List[List[int]], period: int=739):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_738",
    "sat": "def sat(init: List[List[int]], period: int=740):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_739",
    "sat": "def sat(init: List[List[int]], period: int=741):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_740",
    "sat": "def sat(init: List[List[int]], period: int=742):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_741",
    "sat": "def sat(init: List[List[int]], period: int=743):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_742",
    "sat": "def sat(init: List[List[int]], period: int=744):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_743",
    "sat": "def sat(init: List[List[int]], period: int=745):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_744",
    "sat": "def sat(init: List[List[int]], period: int=746):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_745",
    "sat": "def sat(init: List[List[int]], period: int=747):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_746",
    "sat": "def sat(init: List[List[int]], period: int=748):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_747",
    "sat": "def sat(init: List[List[int]], period: int=749):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_748",
    "sat": "def sat(init: List[List[int]], period: int=750):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_749",
    "sat": "def sat(init: List[List[int]], period: int=751):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_750",
    "sat": "def sat(init: List[List[int]], period: int=752):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_751",
    "sat": "def sat(init: List[List[int]], period: int=753):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_752",
    "sat": "def sat(init: List[List[int]], period: int=754):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_753",
    "sat": "def sat(init: List[List[int]], period: int=755):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_754",
    "sat": "def sat(init: List[List[int]], period: int=756):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_755",
    "sat": "def sat(init: List[List[int]], period: int=757):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_756",
    "sat": "def sat(init: List[List[int]], period: int=758):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_757",
    "sat": "def sat(init: List[List[int]], period: int=759):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_758",
    "sat": "def sat(init: List[List[int]], period: int=760):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_759",
    "sat": "def sat(init: List[List[int]], period: int=761):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_760",
    "sat": "def sat(init: List[List[int]], period: int=762):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_761",
    "sat": "def sat(init: List[List[int]], period: int=763):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_762",
    "sat": "def sat(init: List[List[int]], period: int=764):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_763",
    "sat": "def sat(init: List[List[int]], period: int=765):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_764",
    "sat": "def sat(init: List[List[int]], period: int=766):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_765",
    "sat": "def sat(init: List[List[int]], period: int=767):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_766",
    "sat": "def sat(init: List[List[int]], period: int=768):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_767",
    "sat": "def sat(init: List[List[int]], period: int=769):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_768",
    "sat": "def sat(init: List[List[int]], period: int=770):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_769",
    "sat": "def sat(init: List[List[int]], period: int=771):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_770",
    "sat": "def sat(init: List[List[int]], period: int=772):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_771",
    "sat": "def sat(init: List[List[int]], period: int=773):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_772",
    "sat": "def sat(init: List[List[int]], period: int=774):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_773",
    "sat": "def sat(init: List[List[int]], period: int=775):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_774",
    "sat": "def sat(init: List[List[int]], period: int=776):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_775",
    "sat": "def sat(init: List[List[int]], period: int=777):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_776",
    "sat": "def sat(init: List[List[int]], period: int=778):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_777",
    "sat": "def sat(init: List[List[int]], period: int=779):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_778",
    "sat": "def sat(init: List[List[int]], period: int=780):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_779",
    "sat": "def sat(init: List[List[int]], period: int=781):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_780",
    "sat": "def sat(init: List[List[int]], period: int=782):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_781",
    "sat": "def sat(init: List[List[int]], period: int=783):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_782",
    "sat": "def sat(init: List[List[int]], period: int=784):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_783",
    "sat": "def sat(init: List[List[int]], period: int=785):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_784",
    "sat": "def sat(init: List[List[int]], period: int=786):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_785",
    "sat": "def sat(init: List[List[int]], period: int=787):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_786",
    "sat": "def sat(init: List[List[int]], period: int=788):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_787",
    "sat": "def sat(init: List[List[int]], period: int=789):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_788",
    "sat": "def sat(init: List[List[int]], period: int=790):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_789",
    "sat": "def sat(init: List[List[int]], period: int=791):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_790",
    "sat": "def sat(init: List[List[int]], period: int=792):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_791",
    "sat": "def sat(init: List[List[int]], period: int=793):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_792",
    "sat": "def sat(init: List[List[int]], period: int=794):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_793",
    "sat": "def sat(init: List[List[int]], period: int=795):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_794",
    "sat": "def sat(init: List[List[int]], period: int=796):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_795",
    "sat": "def sat(init: List[List[int]], period: int=797):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_796",
    "sat": "def sat(init: List[List[int]], period: int=798):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_797",
    "sat": "def sat(init: List[List[int]], period: int=799):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_798",
    "sat": "def sat(init: List[List[int]], period: int=800):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_799",
    "sat": "def sat(init: List[List[int]], period: int=801):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_800",
    "sat": "def sat(init: List[List[int]], period: int=802):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_801",
    "sat": "def sat(init: List[List[int]], period: int=803):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_802",
    "sat": "def sat(init: List[List[int]], period: int=804):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_803",
    "sat": "def sat(init: List[List[int]], period: int=805):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_804",
    "sat": "def sat(init: List[List[int]], period: int=806):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_805",
    "sat": "def sat(init: List[List[int]], period: int=807):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_806",
    "sat": "def sat(init: List[List[int]], period: int=808):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_807",
    "sat": "def sat(init: List[List[int]], period: int=809):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_808",
    "sat": "def sat(init: List[List[int]], period: int=810):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_809",
    "sat": "def sat(init: List[List[int]], period: int=811):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_810",
    "sat": "def sat(init: List[List[int]], period: int=812):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_811",
    "sat": "def sat(init: List[List[int]], period: int=813):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_812",
    "sat": "def sat(init: List[List[int]], period: int=814):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_813",
    "sat": "def sat(init: List[List[int]], period: int=815):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_814",
    "sat": "def sat(init: List[List[int]], period: int=816):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_815",
    "sat": "def sat(init: List[List[int]], period: int=817):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_816",
    "sat": "def sat(init: List[List[int]], period: int=818):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_817",
    "sat": "def sat(init: List[List[int]], period: int=819):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_818",
    "sat": "def sat(init: List[List[int]], period: int=820):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_819",
    "sat": "def sat(init: List[List[int]], period: int=821):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_820",
    "sat": "def sat(init: List[List[int]], period: int=822):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_821",
    "sat": "def sat(init: List[List[int]], period: int=823):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_822",
    "sat": "def sat(init: List[List[int]], period: int=824):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_823",
    "sat": "def sat(init: List[List[int]], period: int=825):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_824",
    "sat": "def sat(init: List[List[int]], period: int=826):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_825",
    "sat": "def sat(init: List[List[int]], period: int=827):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_826",
    "sat": "def sat(init: List[List[int]], period: int=828):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_827",
    "sat": "def sat(init: List[List[int]], period: int=829):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_828",
    "sat": "def sat(init: List[List[int]], period: int=830):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_829",
    "sat": "def sat(init: List[List[int]], period: int=831):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_830",
    "sat": "def sat(init: List[List[int]], period: int=832):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_831",
    "sat": "def sat(init: List[List[int]], period: int=833):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_832",
    "sat": "def sat(init: List[List[int]], period: int=834):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_833",
    "sat": "def sat(init: List[List[int]], period: int=835):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_834",
    "sat": "def sat(init: List[List[int]], period: int=836):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_835",
    "sat": "def sat(init: List[List[int]], period: int=837):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_836",
    "sat": "def sat(init: List[List[int]], period: int=838):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_837",
    "sat": "def sat(init: List[List[int]], period: int=839):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_838",
    "sat": "def sat(init: List[List[int]], period: int=840):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_839",
    "sat": "def sat(init: List[List[int]], period: int=841):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_840",
    "sat": "def sat(init: List[List[int]], period: int=842):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_841",
    "sat": "def sat(init: List[List[int]], period: int=843):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_842",
    "sat": "def sat(init: List[List[int]], period: int=844):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_843",
    "sat": "def sat(init: List[List[int]], period: int=845):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_844",
    "sat": "def sat(init: List[List[int]], period: int=846):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_845",
    "sat": "def sat(init: List[List[int]], period: int=847):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_846",
    "sat": "def sat(init: List[List[int]], period: int=848):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_847",
    "sat": "def sat(init: List[List[int]], period: int=849):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_848",
    "sat": "def sat(init: List[List[int]], period: int=850):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_849",
    "sat": "def sat(init: List[List[int]], period: int=851):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_850",
    "sat": "def sat(init: List[List[int]], period: int=852):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_851",
    "sat": "def sat(init: List[List[int]], period: int=853):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_852",
    "sat": "def sat(init: List[List[int]], period: int=854):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_853",
    "sat": "def sat(init: List[List[int]], period: int=855):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_854",
    "sat": "def sat(init: List[List[int]], period: int=856):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_855",
    "sat": "def sat(init: List[List[int]], period: int=857):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_856",
    "sat": "def sat(init: List[List[int]], period: int=858):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_857",
    "sat": "def sat(init: List[List[int]], period: int=859):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_858",
    "sat": "def sat(init: List[List[int]], period: int=860):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_859",
    "sat": "def sat(init: List[List[int]], period: int=861):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_860",
    "sat": "def sat(init: List[List[int]], period: int=862):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_861",
    "sat": "def sat(init: List[List[int]], period: int=863):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_862",
    "sat": "def sat(init: List[List[int]], period: int=864):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_863",
    "sat": "def sat(init: List[List[int]], period: int=865):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_864",
    "sat": "def sat(init: List[List[int]], period: int=866):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_865",
    "sat": "def sat(init: List[List[int]], period: int=867):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_866",
    "sat": "def sat(init: List[List[int]], period: int=868):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_867",
    "sat": "def sat(init: List[List[int]], period: int=869):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_868",
    "sat": "def sat(init: List[List[int]], period: int=870):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_869",
    "sat": "def sat(init: List[List[int]], period: int=871):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_870",
    "sat": "def sat(init: List[List[int]], period: int=872):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_871",
    "sat": "def sat(init: List[List[int]], period: int=873):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_872",
    "sat": "def sat(init: List[List[int]], period: int=874):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_873",
    "sat": "def sat(init: List[List[int]], period: int=875):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_874",
    "sat": "def sat(init: List[List[int]], period: int=876):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_875",
    "sat": "def sat(init: List[List[int]], period: int=877):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_876",
    "sat": "def sat(init: List[List[int]], period: int=878):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_877",
    "sat": "def sat(init: List[List[int]], period: int=879):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_878",
    "sat": "def sat(init: List[List[int]], period: int=880):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_879",
    "sat": "def sat(init: List[List[int]], period: int=881):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_880",
    "sat": "def sat(init: List[List[int]], period: int=882):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_881",
    "sat": "def sat(init: List[List[int]], period: int=883):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_882",
    "sat": "def sat(init: List[List[int]], period: int=884):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_883",
    "sat": "def sat(init: List[List[int]], period: int=885):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_884",
    "sat": "def sat(init: List[List[int]], period: int=886):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_885",
    "sat": "def sat(init: List[List[int]], period: int=887):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_886",
    "sat": "def sat(init: List[List[int]], period: int=888):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_887",
    "sat": "def sat(init: List[List[int]], period: int=889):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_888",
    "sat": "def sat(init: List[List[int]], period: int=890):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_889",
    "sat": "def sat(init: List[List[int]], period: int=891):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_890",
    "sat": "def sat(init: List[List[int]], period: int=892):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_891",
    "sat": "def sat(init: List[List[int]], period: int=893):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_892",
    "sat": "def sat(init: List[List[int]], period: int=894):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_893",
    "sat": "def sat(init: List[List[int]], period: int=895):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_894",
    "sat": "def sat(init: List[List[int]], period: int=896):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_895",
    "sat": "def sat(init: List[List[int]], period: int=897):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_896",
    "sat": "def sat(init: List[List[int]], period: int=898):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_897",
    "sat": "def sat(init: List[List[int]], period: int=899):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_898",
    "sat": "def sat(init: List[List[int]], period: int=900):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_899",
    "sat": "def sat(init: List[List[int]], period: int=901):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_900",
    "sat": "def sat(init: List[List[int]], period: int=902):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_901",
    "sat": "def sat(init: List[List[int]], period: int=903):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_902",
    "sat": "def sat(init: List[List[int]], period: int=904):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_903",
    "sat": "def sat(init: List[List[int]], period: int=905):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_904",
    "sat": "def sat(init: List[List[int]], period: int=906):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_905",
    "sat": "def sat(init: List[List[int]], period: int=907):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_906",
    "sat": "def sat(init: List[List[int]], period: int=908):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_907",
    "sat": "def sat(init: List[List[int]], period: int=909):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_908",
    "sat": "def sat(init: List[List[int]], period: int=910):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_909",
    "sat": "def sat(init: List[List[int]], period: int=911):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_910",
    "sat": "def sat(init: List[List[int]], period: int=912):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_911",
    "sat": "def sat(init: List[List[int]], period: int=913):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_912",
    "sat": "def sat(init: List[List[int]], period: int=914):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_913",
    "sat": "def sat(init: List[List[int]], period: int=915):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_914",
    "sat": "def sat(init: List[List[int]], period: int=916):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_915",
    "sat": "def sat(init: List[List[int]], period: int=917):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_916",
    "sat": "def sat(init: List[List[int]], period: int=918):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_917",
    "sat": "def sat(init: List[List[int]], period: int=919):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_918",
    "sat": "def sat(init: List[List[int]], period: int=920):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_919",
    "sat": "def sat(init: List[List[int]], period: int=921):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_920",
    "sat": "def sat(init: List[List[int]], period: int=922):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_921",
    "sat": "def sat(init: List[List[int]], period: int=923):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_922",
    "sat": "def sat(init: List[List[int]], period: int=924):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_923",
    "sat": "def sat(init: List[List[int]], period: int=925):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_924",
    "sat": "def sat(init: List[List[int]], period: int=926):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_925",
    "sat": "def sat(init: List[List[int]], period: int=927):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_926",
    "sat": "def sat(init: List[List[int]], period: int=928):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_927",
    "sat": "def sat(init: List[List[int]], period: int=929):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_928",
    "sat": "def sat(init: List[List[int]], period: int=930):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_929",
    "sat": "def sat(init: List[List[int]], period: int=931):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_930",
    "sat": "def sat(init: List[List[int]], period: int=932):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_931",
    "sat": "def sat(init: List[List[int]], period: int=933):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_932",
    "sat": "def sat(init: List[List[int]], period: int=934):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_933",
    "sat": "def sat(init: List[List[int]], period: int=935):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_934",
    "sat": "def sat(init: List[List[int]], period: int=936):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_935",
    "sat": "def sat(init: List[List[int]], period: int=937):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_936",
    "sat": "def sat(init: List[List[int]], period: int=938):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_937",
    "sat": "def sat(init: List[List[int]], period: int=939):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_938",
    "sat": "def sat(init: List[List[int]], period: int=940):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_939",
    "sat": "def sat(init: List[List[int]], period: int=941):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_940",
    "sat": "def sat(init: List[List[int]], period: int=942):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_941",
    "sat": "def sat(init: List[List[int]], period: int=943):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_942",
    "sat": "def sat(init: List[List[int]], period: int=944):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_943",
    "sat": "def sat(init: List[List[int]], period: int=945):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_944",
    "sat": "def sat(init: List[List[int]], period: int=946):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_945",
    "sat": "def sat(init: List[List[int]], period: int=947):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_946",
    "sat": "def sat(init: List[List[int]], period: int=948):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_947",
    "sat": "def sat(init: List[List[int]], period: int=949):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_948",
    "sat": "def sat(init: List[List[int]], period: int=950):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_949",
    "sat": "def sat(init: List[List[int]], period: int=951):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_950",
    "sat": "def sat(init: List[List[int]], period: int=952):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_951",
    "sat": "def sat(init: List[List[int]], period: int=953):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_952",
    "sat": "def sat(init: List[List[int]], period: int=954):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_953",
    "sat": "def sat(init: List[List[int]], period: int=955):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_954",
    "sat": "def sat(init: List[List[int]], period: int=956):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_955",
    "sat": "def sat(init: List[List[int]], period: int=957):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_956",
    "sat": "def sat(init: List[List[int]], period: int=958):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_957",
    "sat": "def sat(init: List[List[int]], period: int=959):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_958",
    "sat": "def sat(init: List[List[int]], period: int=960):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_959",
    "sat": "def sat(init: List[List[int]], period: int=961):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_960",
    "sat": "def sat(init: List[List[int]], period: int=962):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_961",
    "sat": "def sat(init: List[List[int]], period: int=963):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_962",
    "sat": "def sat(init: List[List[int]], period: int=964):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_963",
    "sat": "def sat(init: List[List[int]], period: int=965):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_964",
    "sat": "def sat(init: List[List[int]], period: int=966):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_965",
    "sat": "def sat(init: List[List[int]], period: int=967):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_966",
    "sat": "def sat(init: List[List[int]], period: int=968):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_967",
    "sat": "def sat(init: List[List[int]], period: int=969):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_968",
    "sat": "def sat(init: List[List[int]], period: int=970):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_969",
    "sat": "def sat(init: List[List[int]], period: int=971):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_970",
    "sat": "def sat(init: List[List[int]], period: int=972):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_971",
    "sat": "def sat(init: List[List[int]], period: int=973):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_972",
    "sat": "def sat(init: List[List[int]], period: int=974):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_973",
    "sat": "def sat(init: List[List[int]], period: int=975):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_974",
    "sat": "def sat(init: List[List[int]], period: int=976):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_975",
    "sat": "def sat(init: List[List[int]], period: int=977):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_976",
    "sat": "def sat(init: List[List[int]], period: int=978):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_977",
    "sat": "def sat(init: List[List[int]], period: int=979):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_978",
    "sat": "def sat(init: List[List[int]], period: int=980):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_979",
    "sat": "def sat(init: List[List[int]], period: int=981):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_980",
    "sat": "def sat(init: List[List[int]], period: int=982):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_981",
    "sat": "def sat(init: List[List[int]], period: int=983):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_982",
    "sat": "def sat(init: List[List[int]], period: int=984):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_983",
    "sat": "def sat(init: List[List[int]], period: int=985):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_984",
    "sat": "def sat(init: List[List[int]], period: int=986):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_985",
    "sat": "def sat(init: List[List[int]], period: int=987):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_986",
    "sat": "def sat(init: List[List[int]], period: int=988):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_987",
    "sat": "def sat(init: List[List[int]], period: int=989):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_988",
    "sat": "def sat(init: List[List[int]], period: int=990):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_989",
    "sat": "def sat(init: List[List[int]], period: int=991):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_990",
    "sat": "def sat(init: List[List[int]], period: int=992):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_991",
    "sat": "def sat(init: List[List[int]], period: int=993):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_992",
    "sat": "def sat(init: List[List[int]], period: int=994):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_993",
    "sat": "def sat(init: List[List[int]], period: int=995):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_994",
    "sat": "def sat(init: List[List[int]], period: int=996):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_995",
    "sat": "def sat(init: List[List[int]], period: int=997):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_996",
    "sat": "def sat(init: List[List[int]], period: int=998):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_997",
    "sat": "def sat(init: List[List[int]], period: int=999):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_998",
    "sat": "def sat(init: List[List[int]], period: int=1000):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  },
  {
    "name": "Spaceship_999",
    "sat": "def sat(init: List[List[int]], period: int=1001):\n    assert type(init) is list and all(type(a) is list and all(type(b) is int for b in a) for a in init), 'init must be of type List[List[int]]'\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "sols": []
  }
]