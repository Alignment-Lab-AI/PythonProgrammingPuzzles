[
  {
    "name": "Tutorial1_0",
    "sat": "def sat(s: str):\n    assert type(s) is str, 's must be of type str'\n    return \"Hello \" + s == \"Hello world\"",
    "sols": [
      "def sol():\n    return \"world\""
    ]
  },
  {
    "name": "Tutorial2_0",
    "sat": "def sat(s: str):\n    assert type(s) is str, 's must be of type str'\n    return \"Hello \" + s[::-1] == \"Hello world\"",
    "sols": [
      "def sol():\n    return \"world\"[::-1]"
    ]
  },
  {
    "name": "Tutorial3_0",
    "sat": "def sat(x: List[int]):\n    assert type(x) is list and all(type(a) is int for a in x), 'x must be of type List[int]'\n    return len(x) == 2 and sum(x) == 3",
    "sols": [
      "def sol():\n    return [1, 2]"
    ]
  },
  {
    "name": "Tutorial4_0",
    "sat": "def sat(s: List[str]):\n    assert type(s) is list and all(type(a) is str for a in s), 's must be of type List[str]'\n    return len(set(s)) == 1000 and all((x.count(\"a\") > x.count(\"b\")) and ('b' in x) for x in s)",
    "sols": [
      "def sol():\n    return [\"a\"*(i+2)+\"b\" for i in range(1000)]"
    ]
  },
  {
    "name": "Tutorial5_0",
    "sat": "def sat(n: int):\n    assert type(n) is int, 'n must be of type int'\n    return str(n * n).startswith(\"123456789\")",
    "sols": [
      "def sol():\n    return int(int(\"123456789\" + \"0\"*9) ** 0.5) + 1"
    ]
  }
]