[
  {
    "name": "BiPermutations_0",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[7, 7, 9, 5, 3, 7, 1, 2], prices1: List[int]=[5, 5, 5, 4, 2, 5, 1, 1], heights0: List[int]=[2, 4, 9, 3, 8, 5, 5, 4], heights1: List[int]=[1, 3, 8, 1, 5, 4, 4, 2]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[7, 7, 9, 5, 3, 7, 1, 2], prices1=[5, 5, 5, 4, 2, 5, 1, 1], heights0=[2, 4, 9, 3, 8, 5, 5, 4], heights1=[1, 3, 8, 1, 5, 4, 4, 2]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_1",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[1, 0, 1, 1, 1, 0, 1, 0, 0, 1], prices1: List[int]=[1, 1, 1, 1, 0, 0, 0, 1, 1, 1], heights0: List[int]=[10, 7, 15, 10, 13, 4, 6, 7, 14, 12], heights1: List[int]=[10, 9, 9, 7, 9, 4, 1, 5, 10, 5]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[1, 0, 1, 1, 1, 0, 1, 0, 0, 1], prices1=[1, 1, 1, 1, 0, 0, 0, 1, 1, 1], heights0=[10, 7, 15, 10, 13, 4, 6, 7, 14, 12], heights1=[10, 9, 9, 7, 9, 4, 1, 5, 10, 5]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_2",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0], prices1: List[int]=[0, 0, 0], heights0: List[int]=[14, 4, 7], heights1: List[int]=[3, 10, 1]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0], prices1=[0, 0, 0], heights0=[14, 4, 7], heights1=[3, 10, 1]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_3",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], prices1: List[int]=[1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0], heights0: List[int]=[7, 5, 9, 5, 6, 11, 13, 2, 8, 7, 13, 13, 4, 10, 3, 7, 3, 5], heights1: List[int]=[2, 1, 10, 3, 1, 6, 6, 4, 2, 3, 7, 1, 2, 9, 9, 9, 4, 6]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], prices1=[1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0], heights0=[7, 5, 9, 5, 6, 11, 13, 2, 8, 7, 13, 13, 4, 10, 3, 7, 3, 5], heights1=[2, 1, 10, 3, 1, 6, 6, 4, 2, 3, 7, 1, 2, 9, 9, 9, 4, 6]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_4",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0], prices1: List[int]=[0, 0, 0, 0], heights0: List[int]=[7, 12, 12, 9], heights1: List[int]=[9, 5, 3, 8]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0], prices1=[0, 0, 0, 0], heights0=[7, 12, 12, 9], heights1=[9, 5, 3, 8]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_5",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0], prices1: List[int]=[0, 0, 0], heights0: List[int]=[10, 3, 8], heights1: List[int]=[5, 2, 6]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0], prices1=[0, 0, 0], heights0=[10, 3, 8], heights1=[5, 2, 6]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_6",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0], prices1: List[int]=[1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], heights0: List[int]=[5, 5, 9, 9, 8, 3, 13, 8, 6, 9, 8, 8, 9, 3, 6, 14, 9], heights1: List[int]=[4, 6, 5, 1, 5, 5, 4, 2, 4, 1, 3, 1, 5, 4, 10, 3, 8]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0], prices1=[1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], heights0=[5, 5, 9, 9, 8, 3, 13, 8, 6, 9, 8, 8, 9, 3, 6, 14, 9], heights1=[4, 6, 5, 1, 5, 5, 4, 2, 4, 1, 3, 1, 5, 4, 10, 3, 8]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_7",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0], prices1: List[int]=[1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1], heights0: List[int]=[4, 11, 4, 7, 9, 13, 5, 6, 5, 7, 9, 9, 9, 11, 11, 14, 5], heights1: List[int]=[2, 5, 9, 7, 8, 3, 4, 9, 9, 4, 10, 1, 4, 8, 4, 4, 2]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0], prices1=[1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1], heights0=[4, 11, 4, 7, 9, 13, 5, 6, 5, 7, 9, 9, 9, 11, 11, 14, 5], heights1=[2, 5, 9, 7, 8, 3, 4, 9, 9, 4, 10, 1, 4, 8, 4, 4, 2]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_8",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0, 0], prices1: List[int]=[0, 0, 0, 0, 0], heights0: List[int]=[14, 12, 6, 8, 9], heights1: List[int]=[9, 6, 9, 3, 6]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0], heights0=[14, 12, 6, 8, 9], heights1=[9, 6, 9, 3, 6]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_9",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0, 0, 0, 0, 0], prices1: List[int]=[0, 0, 0, 0, 0, 0, 0, 0], heights0: List[int]=[11, 10, 11, 8, 5, 7, 5, 11], heights1: List[int]=[8, 8, 1, 2, 6, 2, 4, 7]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0, 0, 0, 0], heights0=[11, 10, 11, 8, 5, 7, 5, 11], heights1=[8, 8, 1, 2, 6, 2, 4, 7]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_10",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0, 0, 0, 0, 0, 0], prices1: List[int]=[0, 0, 0, 0, 0, 0, 0, 0, 0], heights0: List[int]=[7, 13, 14, 12, 9, 11, 8, 13, 7], heights1: List[int]=[7, 6, 5, 10, 6, 8, 10, 7, 7]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0, 0, 0, 0, 0], heights0=[7, 13, 14, 12, 9, 11, 8, 13, 7], heights1=[7, 6, 5, 10, 6, 8, 10, 7, 7]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_11",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 4, 5, 2, 2, 5, 0, 4, 0, 2, 1, 1, 1, 5, 1, 2, 5, 6, 1, 2, 6, 5, 3, 4, 6, 6, 1, 0, 1, 3, 5, 1, 3, 1, 5, 4, 0, 2, 6, 2, 5, 6, 4, 6, 3, 4, 6, 4, 6, 4, 1, 6, 4, 3, 5, 0, 0, 6, 4, 6, 3, 4, 6, 5, 1, 6, 3], prices1: List[int]=[1, 0, 2, 0, 5, 4, 0, 0, 1, 2, 1, 1, 6, 0, 2, 2, 6, 1, 2, 0, 5, 5, 0, 2, 0, 1, 4, 1, 0, 3, 5, 1, 6, 1, 5, 6, 1, 4, 0, 1, 3, 1, 4, 1, 4, 3, 4, 0, 4, 2, 4, 0, 1, 2, 1, 1, 3, 5, 5, 5, 1, 3, 3, 5, 1, 2, 6, 2], heights0: List[int]=[7, 11, 6, 4, 9, 7, 11, 4, 9, 6, 10, 3, 3, 4, 6, 7, 12, 11, 8, 7, 15, 13, 6, 10, 6, 7, 13, 10, 7, 10, 10, 5, 7, 14, 6, 15, 9, 14, 10, 12, 6, 6, 10, 2, 6, 6, 6, 8, 9, 7, 14, 7, 5, 7, 8, 9, 13, 9, 14, 12, 6, 9, 6, 10, 4, 6, 11, 3], heights1: List[int]=[7, 5, 6, 1, 9, 4, 5, 6, 3, 9, 9, 10, 8, 5, 6, 1, 2, 4, 3, 1, 6, 9, 7, 6, 2, 1, 10, 2, 3, 2, 6, 5, 3, 8, 8, 5, 2, 9, 9, 2, 5, 6, 1, 9, 8, 8, 2, 9, 4, 7, 1, 8, 2, 10, 1, 1, 3, 8, 5, 6, 2, 2, 7, 2, 8, 2, 2, 9]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 4, 5, 2, 2, 5, 0, 4, 0, 2, 1, 1, 1, 5, 1, 2, 5, 6, 1, 2, 6, 5, 3, 4, 6, 6, 1, 0, 1, 3, 5, 1, 3, 1, 5, 4, 0, 2, 6, 2, 5, 6, 4, 6, 3, 4, 6, 4, 6, 4, 1, 6, 4, 3, 5, 0, 0, 6, 4, 6, 3, 4, 6, 5, 1, 6, 3], prices1=[1, 0, 2, 0, 5, 4, 0, 0, 1, 2, 1, 1, 6, 0, 2, 2, 6, 1, 2, 0, 5, 5, 0, 2, 0, 1, 4, 1, 0, 3, 5, 1, 6, 1, 5, 6, 1, 4, 0, 1, 3, 1, 4, 1, 4, 3, 4, 0, 4, 2, 4, 0, 1, 2, 1, 1, 3, 5, 5, 5, 1, 3, 3, 5, 1, 2, 6, 2], heights0=[7, 11, 6, 4, 9, 7, 11, 4, 9, 6, 10, 3, 3, 4, 6, 7, 12, 11, 8, 7, 15, 13, 6, 10, 6, 7, 13, 10, 7, 10, 10, 5, 7, 14, 6, 15, 9, 14, 10, 12, 6, 6, 10, 2, 6, 6, 6, 8, 9, 7, 14, 7, 5, 7, 8, 9, 13, 9, 14, 12, 6, 9, 6, 10, 4, 6, 11, 3], heights1=[7, 5, 6, 1, 9, 4, 5, 6, 3, 9, 9, 10, 8, 5, 6, 1, 2, 4, 3, 1, 6, 9, 7, 6, 2, 1, 10, 2, 3, 2, 6, 5, 3, 8, 8, 5, 2, 9, 9, 2, 5, 6, 1, 9, 8, 8, 2, 9, 4, 7, 1, 8, 2, 10, 1, 1, 3, 8, 5, 6, 2, 2, 7, 2, 8, 2, 2, 9]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_12",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0], prices1: List[int]=[0, 0, 0], heights0: List[int]=[10, 6, 10], heights1: List[int]=[6, 3, 7]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0], prices1=[0, 0, 0], heights0=[10, 6, 10], heights1=[6, 3, 7]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_13",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0, 0, 0], prices1: List[int]=[0, 0, 0, 0, 0, 0], heights0: List[int]=[6, 5, 12, 5, 9, 15], heights1: List[int]=[3, 10, 8, 5, 1, 4]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0, 0], heights0=[6, 5, 12, 5, 9, 15], heights1=[3, 10, 8, 5, 1, 4]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_14",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], prices1: List[int]=[0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1], heights0: List[int]=[11, 7, 7, 8, 14, 7, 11, 4, 11, 12, 12, 8, 4, 5, 11, 11, 12, 4], heights1: List[int]=[3, 7, 10, 5, 6, 6, 10, 8, 5, 5, 4, 2, 5, 8, 7, 9, 8, 2]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], prices1=[0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1], heights0=[11, 7, 7, 8, 14, 7, 11, 4, 11, 12, 12, 8, 4, 5, 11, 11, 12, 4], heights1=[3, 7, 10, 5, 6, 6, 10, 8, 5, 5, 4, 2, 5, 8, 7, 9, 8, 2]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_15",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0], prices1: List[int]=[0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0], heights0: List[int]=[7, 2, 12, 13, 10, 9, 9, 5, 6, 9, 11, 6, 10], heights1: List[int]=[9, 6, 7, 1, 5, 1, 8, 9, 5, 9, 1, 4, 4]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0], prices1=[0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0], heights0=[7, 2, 12, 13, 10, 9, 9, 5, 6, 9, 11, 6, 10], heights1=[9, 6, 7, 1, 5, 1, 8, 9, 5, 9, 1, 4, 4]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_16",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[3, 2, 3, 0, 1, 1, 0, 2, 0, 2, 3, 1, 1, 1, 0, 0, 1, 2, 2, 3, 3, 1, 1, 0, 1, 0, 3, 3, 0, 2, 0, 2, 1], prices1: List[int]=[1, 3, 2, 3, 3, 3, 0, 1, 1, 1, 0, 1, 3, 3, 2, 2, 0, 3, 3, 2, 2, 2, 2, 1, 0, 3, 0, 3, 0, 3, 2, 3, 3], heights0: List[int]=[12, 12, 3, 9, 11, 10, 9, 7, 8, 13, 8, 11, 6, 3, 6, 13, 8, 10, 11, 6, 6, 4, 9, 7, 9, 5, 14, 13, 6, 11, 7, 3, 8], heights1: List[int]=[1, 8, 4, 2, 10, 8, 3, 6, 8, 2, 2, 8, 1, 10, 3, 8, 3, 1, 2, 7, 5, 7, 1, 7, 6, 6, 8, 3, 4, 7, 4, 3, 8]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[3, 2, 3, 0, 1, 1, 0, 2, 0, 2, 3, 1, 1, 1, 0, 0, 1, 2, 2, 3, 3, 1, 1, 0, 1, 0, 3, 3, 0, 2, 0, 2, 1], prices1=[1, 3, 2, 3, 3, 3, 0, 1, 1, 1, 0, 1, 3, 3, 2, 2, 0, 3, 3, 2, 2, 2, 2, 1, 0, 3, 0, 3, 0, 3, 2, 3, 3], heights0=[12, 12, 3, 9, 11, 10, 9, 7, 8, 13, 8, 11, 6, 3, 6, 13, 8, 10, 11, 6, 6, 4, 9, 7, 9, 5, 14, 13, 6, 11, 7, 3, 8], heights1=[1, 8, 4, 2, 10, 8, 3, 6, 8, 2, 2, 8, 1, 10, 3, 8, 3, 1, 2, 7, 5, 7, 1, 7, 6, 6, 8, 3, 4, 7, 4, 3, 8]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_17",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[1, 1, 2, 2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 2, 0], prices1: List[int]=[2, 1, 1, 2, 1, 2, 1, 0, 1, 2, 0, 1, 2, 1, 2, 1, 2, 0, 0, 1], heights0: List[int]=[10, 2, 6, 2, 14, 5, 14, 10, 12, 11, 12, 6, 4, 6, 6, 11, 15, 11, 9, 12], heights1: List[int]=[1, 9, 4, 5, 4, 9, 1, 10, 7, 5, 7, 8, 7, 5, 4, 4, 8, 8, 3, 9]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[1, 1, 2, 2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 2, 0], prices1=[2, 1, 1, 2, 1, 2, 1, 0, 1, 2, 0, 1, 2, 1, 2, 1, 2, 0, 0, 1], heights0=[10, 2, 6, 2, 14, 5, 14, 10, 12, 11, 12, 6, 4, 6, 6, 11, 15, 11, 9, 12], heights1=[1, 9, 4, 5, 4, 9, 1, 10, 7, 5, 7, 8, 7, 5, 4, 4, 8, 8, 3, 9]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_18",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[1, 2, 5, 1, 5, 6, 7, 0, 4, 2, 5, 2, 4, 1, 7, 5, 2, 2, 5, 5, 4, 7, 6, 4, 1, 1, 7, 1, 2, 5, 2, 3, 5, 2, 4, 2, 5, 2, 3, 0, 3, 5, 2, 3, 2, 6, 2, 7, 7, 4, 6, 5, 5, 4, 5, 7, 7, 3, 3, 5, 7, 2, 0, 4, 7, 3, 0, 5, 3, 1, 6, 5, 0, 5], prices1: List[int]=[6, 7, 7, 2, 3, 0, 1, 6, 7, 2, 5, 3, 5, 6, 4, 7, 7, 3, 3, 2, 3, 6, 4, 3, 7, 0, 0, 3, 6, 7, 0, 7, 3, 7, 3, 3, 7, 0, 0, 0, 3, 2, 6, 3, 6, 3, 6, 6, 2, 7, 5, 3, 6, 3, 4, 3, 2, 6, 6, 7, 2, 6, 4, 3, 2, 6, 1, 6, 6, 4, 2, 7, 6, 4], heights0: List[int]=[5, 8, 12, 4, 9, 6, 8, 5, 10, 8, 9, 12, 6, 2, 9, 11, 5, 9, 3, 7, 8, 10, 7, 12, 8, 4, 8, 9, 8, 12, 13, 7, 10, 6, 12, 7, 10, 6, 9, 8, 9, 10, 8, 10, 12, 14, 15, 15, 8, 12, 10, 11, 11, 6, 3, 15, 11, 9, 7, 6, 9, 5, 4, 5, 11, 6, 6, 9, 10, 12, 8, 5, 11, 10], heights1: List[int]=[9, 8, 5, 3, 6, 6, 8, 9, 6, 1, 6, 7, 8, 10, 7, 4, 6, 7, 2, 3, 2, 5, 3, 9, 6, 1, 7, 8, 5, 7, 1, 10, 4, 5, 5, 3, 6, 5, 1, 1, 6, 10, 10, 2, 1, 8, 1, 4, 1, 10, 1, 10, 7, 10, 1, 5, 5, 7, 6, 6, 3, 5, 9, 4, 4, 5, 8, 1, 8, 6, 7, 6, 10, 9]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[1, 2, 5, 1, 5, 6, 7, 0, 4, 2, 5, 2, 4, 1, 7, 5, 2, 2, 5, 5, 4, 7, 6, 4, 1, 1, 7, 1, 2, 5, 2, 3, 5, 2, 4, 2, 5, 2, 3, 0, 3, 5, 2, 3, 2, 6, 2, 7, 7, 4, 6, 5, 5, 4, 5, 7, 7, 3, 3, 5, 7, 2, 0, 4, 7, 3, 0, 5, 3, 1, 6, 5, 0, 5], prices1=[6, 7, 7, 2, 3, 0, 1, 6, 7, 2, 5, 3, 5, 6, 4, 7, 7, 3, 3, 2, 3, 6, 4, 3, 7, 0, 0, 3, 6, 7, 0, 7, 3, 7, 3, 3, 7, 0, 0, 0, 3, 2, 6, 3, 6, 3, 6, 6, 2, 7, 5, 3, 6, 3, 4, 3, 2, 6, 6, 7, 2, 6, 4, 3, 2, 6, 1, 6, 6, 4, 2, 7, 6, 4], heights0=[5, 8, 12, 4, 9, 6, 8, 5, 10, 8, 9, 12, 6, 2, 9, 11, 5, 9, 3, 7, 8, 10, 7, 12, 8, 4, 8, 9, 8, 12, 13, 7, 10, 6, 12, 7, 10, 6, 9, 8, 9, 10, 8, 10, 12, 14, 15, 15, 8, 12, 10, 11, 11, 6, 3, 15, 11, 9, 7, 6, 9, 5, 4, 5, 11, 6, 6, 9, 10, 12, 8, 5, 11, 10], heights1=[9, 8, 5, 3, 6, 6, 8, 9, 6, 1, 6, 7, 8, 10, 7, 4, 6, 7, 2, 3, 2, 5, 3, 9, 6, 1, 7, 8, 5, 7, 1, 10, 4, 5, 5, 3, 6, 5, 1, 1, 6, 10, 10, 2, 1, 8, 1, 4, 1, 10, 1, 10, 7, 10, 1, 5, 5, 7, 6, 6, 3, 5, 9, 4, 4, 5, 8, 1, 8, 6, 7, 6, 10, 9]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_19",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[1, 3, 3, 4, 0, 2, 4, 0, 1, 3, 0, 3, 2, 1, 3, 3, 4, 1, 4, 1, 2, 1, 0, 1, 2, 3, 4, 2, 4, 1, 4, 0, 4, 2, 3, 3, 2, 2, 3, 3, 0, 0, 2, 0, 0, 4, 0, 0], prices1: List[int]=[3, 1, 2, 0, 3, 0, 1, 3, 1, 3, 2, 3, 3, 2, 2, 0, 4, 3, 4, 4, 3, 0, 2, 3, 4, 2, 0, 3, 2, 2, 0, 0, 2, 4, 4, 3, 3, 2, 3, 0, 2, 1, 0, 4, 2, 3, 0, 3], heights0: List[int]=[11, 5, 4, 7, 9, 11, 9, 11, 10, 12, 11, 10, 9, 7, 11, 7, 7, 10, 10, 8, 4, 9, 3, 9, 8, 13, 14, 4, 6, 10, 8, 2, 6, 8, 8, 9, 14, 3, 5, 6, 13, 12, 9, 9, 7, 6, 10, 9], heights1: List[int]=[2, 8, 4, 10, 9, 2, 4, 6, 6, 2, 1, 8, 4, 2, 8, 5, 2, 3, 2, 5, 2, 8, 4, 5, 3, 7, 6, 5, 5, 3, 1, 6, 8, 6, 2, 1, 7, 9, 6, 6, 8, 7, 4, 10, 5, 10, 9, 6]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[1, 3, 3, 4, 0, 2, 4, 0, 1, 3, 0, 3, 2, 1, 3, 3, 4, 1, 4, 1, 2, 1, 0, 1, 2, 3, 4, 2, 4, 1, 4, 0, 4, 2, 3, 3, 2, 2, 3, 3, 0, 0, 2, 0, 0, 4, 0, 0], prices1=[3, 1, 2, 0, 3, 0, 1, 3, 1, 3, 2, 3, 3, 2, 2, 0, 4, 3, 4, 4, 3, 0, 2, 3, 4, 2, 0, 3, 2, 2, 0, 0, 2, 4, 4, 3, 3, 2, 3, 0, 2, 1, 0, 4, 2, 3, 0, 3], heights0=[11, 5, 4, 7, 9, 11, 9, 11, 10, 12, 11, 10, 9, 7, 11, 7, 7, 10, 10, 8, 4, 9, 3, 9, 8, 13, 14, 4, 6, 10, 8, 2, 6, 8, 8, 9, 14, 3, 5, 6, 13, 12, 9, 9, 7, 6, 10, 9], heights1=[2, 8, 4, 10, 9, 2, 4, 6, 6, 2, 1, 8, 4, 2, 8, 5, 2, 3, 2, 5, 2, 8, 4, 5, 3, 7, 6, 5, 5, 3, 1, 6, 8, 6, 2, 1, 7, 9, 6, 6, 8, 7, 4, 10, 5, 10, 9, 6]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_20",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], prices1: List[int]=[0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1], heights0: List[int]=[10, 8, 7, 13, 12, 15, 9, 6, 9, 5, 4, 8, 10, 9, 10], heights1: List[int]=[2, 4, 5, 4, 7, 9, 3, 4, 7, 10, 5, 9, 5, 3, 5]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], prices1=[0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1], heights0=[10, 8, 7, 13, 12, 15, 9, 6, 9, 5, 4, 8, 10, 9, 10], heights1=[2, 4, 5, 4, 7, 9, 3, 4, 7, 10, 5, 9, 5, 3, 5]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_21",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], prices1: List[int]=[0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], heights0: List[int]=[9, 5, 14, 11, 5, 11, 2, 12, 7, 8, 14], heights1: List[int]=[10, 8, 1, 5, 10, 5, 8, 4, 6, 2, 8]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], prices1=[0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], heights0=[9, 5, 14, 11, 5, 11, 2, 12, 7, 8, 14], heights1=[10, 8, 1, 5, 10, 5, 8, 4, 6, 2, 8]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_22",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[7, 2, 3, 1, 4, 6, 6, 8, 3, 4, 5, 1, 8, 4, 8, 0, 6, 7, 5, 0, 3, 3, 6, 7, 5, 3, 2, 5, 3, 1, 1, 0, 3, 7, 4, 1, 1, 2, 5, 6, 5, 1, 8, 7, 4, 5, 7, 1, 8, 0, 7, 1, 4, 6, 6, 5, 3, 1, 2, 2, 5, 5, 7, 3, 0, 5, 6, 6, 6, 0, 8, 6, 8, 7, 0, 6, 8, 3, 4, 1, 8, 8, 7, 1, 3, 1, 4, 5, 0], prices1: List[int]=[6, 8, 3, 7, 2, 1, 4, 6, 4, 8, 2, 1, 8, 2, 0, 6, 2, 0, 2, 0, 6, 2, 6, 4, 0, 7, 3, 3, 0, 5, 5, 1, 5, 6, 3, 8, 8, 5, 6, 8, 2, 6, 6, 2, 3, 0, 7, 2, 5, 8, 0, 1, 6, 0, 1, 1, 5, 4, 5, 2, 8, 4, 0, 1, 2, 1, 8, 6, 8, 5, 3, 5, 2, 8, 3, 2, 3, 0, 7, 3, 8, 7, 5, 5, 5, 2, 2, 8, 6], heights0: List[int]=[7, 7, 5, 6, 8, 4, 13, 13, 7, 6, 6, 9, 12, 11, 7, 5, 7, 10, 4, 8, 15, 14, 12, 4, 8, 8, 4, 12, 8, 14, 9, 14, 8, 5, 10, 11, 4, 8, 12, 9, 5, 9, 10, 8, 7, 15, 4, 14, 7, 8, 8, 12, 11, 14, 8, 12, 5, 13, 10, 10, 11, 7, 8, 15, 10, 13, 11, 5, 8, 12, 3, 7, 12, 2, 10, 13, 12, 6, 6, 7, 5, 5, 14, 12, 10, 5, 12, 12, 14], heights1: List[int]=[9, 10, 10, 4, 2, 5, 2, 5, 7, 1, 6, 10, 9, 10, 9, 10, 2, 7, 8, 1, 10, 4, 2, 8, 1, 1, 3, 8, 4, 8, 10, 5, 10, 4, 3, 3, 1, 8, 5, 6, 10, 6, 4, 3, 4, 5, 9, 1, 2, 2, 8, 8, 4, 9, 3, 9, 8, 5, 3, 8, 7, 8, 10, 3, 5, 7, 5, 1, 5, 10, 4, 3, 8, 9, 9, 5, 8, 9, 3, 2, 2, 4, 10, 9, 5, 2, 5, 10, 1]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[7, 2, 3, 1, 4, 6, 6, 8, 3, 4, 5, 1, 8, 4, 8, 0, 6, 7, 5, 0, 3, 3, 6, 7, 5, 3, 2, 5, 3, 1, 1, 0, 3, 7, 4, 1, 1, 2, 5, 6, 5, 1, 8, 7, 4, 5, 7, 1, 8, 0, 7, 1, 4, 6, 6, 5, 3, 1, 2, 2, 5, 5, 7, 3, 0, 5, 6, 6, 6, 0, 8, 6, 8, 7, 0, 6, 8, 3, 4, 1, 8, 8, 7, 1, 3, 1, 4, 5, 0], prices1=[6, 8, 3, 7, 2, 1, 4, 6, 4, 8, 2, 1, 8, 2, 0, 6, 2, 0, 2, 0, 6, 2, 6, 4, 0, 7, 3, 3, 0, 5, 5, 1, 5, 6, 3, 8, 8, 5, 6, 8, 2, 6, 6, 2, 3, 0, 7, 2, 5, 8, 0, 1, 6, 0, 1, 1, 5, 4, 5, 2, 8, 4, 0, 1, 2, 1, 8, 6, 8, 5, 3, 5, 2, 8, 3, 2, 3, 0, 7, 3, 8, 7, 5, 5, 5, 2, 2, 8, 6], heights0=[7, 7, 5, 6, 8, 4, 13, 13, 7, 6, 6, 9, 12, 11, 7, 5, 7, 10, 4, 8, 15, 14, 12, 4, 8, 8, 4, 12, 8, 14, 9, 14, 8, 5, 10, 11, 4, 8, 12, 9, 5, 9, 10, 8, 7, 15, 4, 14, 7, 8, 8, 12, 11, 14, 8, 12, 5, 13, 10, 10, 11, 7, 8, 15, 10, 13, 11, 5, 8, 12, 3, 7, 12, 2, 10, 13, 12, 6, 6, 7, 5, 5, 14, 12, 10, 5, 12, 12, 14], heights1=[9, 10, 10, 4, 2, 5, 2, 5, 7, 1, 6, 10, 9, 10, 9, 10, 2, 7, 8, 1, 10, 4, 2, 8, 1, 1, 3, 8, 4, 8, 10, 5, 10, 4, 3, 3, 1, 8, 5, 6, 10, 6, 4, 3, 4, 5, 9, 1, 2, 2, 8, 8, 4, 9, 3, 9, 8, 5, 3, 8, 7, 8, 10, 3, 5, 7, 5, 1, 5, 10, 4, 3, 8, 9, 9, 5, 8, 9, 3, 2, 2, 4, 10, 9, 5, 2, 5, 10, 1]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_23",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 3, 5, 3, 3, 0, 3, 3, 1, 0, 2, 1, 3, 2, 0, 0, 3, 5, 5, 2, 2, 5, 0, 3, 2, 4, 0, 0, 1, 1, 2, 2, 4, 3, 1, 1, 2, 5, 2, 4, 0, 3, 0, 4, 4, 0, 4, 5, 4, 3, 4], prices1: List[int]=[1, 3, 4, 0, 2, 1, 4, 2, 2, 1, 0, 5, 5, 5, 3, 0, 3, 4, 4, 1, 2, 4, 0, 4, 2, 1, 3, 3, 1, 0, 2, 5, 1, 3, 2, 3, 1, 2, 1, 2, 3, 0, 2, 3, 4, 5, 2, 4, 4, 4, 5], heights0: List[int]=[5, 10, 9, 12, 9, 12, 6, 8, 9, 7, 6, 11, 15, 5, 4, 8, 6, 12, 14, 9, 8, 8, 15, 13, 12, 14, 4, 15, 8, 6, 5, 7, 10, 11, 13, 9, 7, 5, 10, 12, 12, 4, 15, 12, 7, 12, 9, 9, 10, 10, 14], heights1: List[int]=[8, 8, 7, 1, 7, 10, 4, 9, 1, 5, 10, 4, 1, 9, 9, 1, 2, 10, 8, 9, 3, 8, 2, 10, 9, 2, 10, 6, 2, 8, 3, 4, 6, 2, 6, 3, 8, 4, 10, 3, 7, 10, 7, 8, 10, 9, 3, 4, 8, 9, 6]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 3, 5, 3, 3, 0, 3, 3, 1, 0, 2, 1, 3, 2, 0, 0, 3, 5, 5, 2, 2, 5, 0, 3, 2, 4, 0, 0, 1, 1, 2, 2, 4, 3, 1, 1, 2, 5, 2, 4, 0, 3, 0, 4, 4, 0, 4, 5, 4, 3, 4], prices1=[1, 3, 4, 0, 2, 1, 4, 2, 2, 1, 0, 5, 5, 5, 3, 0, 3, 4, 4, 1, 2, 4, 0, 4, 2, 1, 3, 3, 1, 0, 2, 5, 1, 3, 2, 3, 1, 2, 1, 2, 3, 0, 2, 3, 4, 5, 2, 4, 4, 4, 5], heights0=[5, 10, 9, 12, 9, 12, 6, 8, 9, 7, 6, 11, 15, 5, 4, 8, 6, 12, 14, 9, 8, 8, 15, 13, 12, 14, 4, 15, 8, 6, 5, 7, 10, 11, 13, 9, 7, 5, 10, 12, 12, 4, 15, 12, 7, 12, 9, 9, 10, 10, 14], heights1=[8, 8, 7, 1, 7, 10, 4, 9, 1, 5, 10, 4, 1, 9, 9, 1, 2, 10, 8, 9, 3, 8, 2, 10, 9, 2, 10, 6, 2, 8, 3, 4, 6, 2, 6, 3, 8, 4, 10, 3, 7, 10, 7, 8, 10, 9, 3, 4, 8, 9, 6]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_24",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 3, 2, 5, 4, 4, 5, 6, 1, 0, 6, 4, 4, 1, 5, 5, 6, 4, 1, 6, 2, 6, 6, 4, 3, 1, 1, 3, 5, 6, 0, 2, 1, 0, 1, 4, 3, 1, 3, 1, 5, 5, 6, 0, 1, 5, 5, 4, 5, 6, 1, 6, 5, 3, 5, 4, 2, 0, 0, 5, 1], prices1: List[int]=[0, 5, 2, 0, 6, 6, 4, 5, 1, 0, 3, 5, 6, 5, 1, 3, 1, 3, 4, 0, 5, 2, 3, 5, 3, 2, 3, 3, 5, 4, 1, 3, 2, 3, 3, 0, 5, 0, 1, 2, 0, 5, 5, 5, 4, 4, 6, 2, 0, 2, 2, 6, 5, 2, 0, 3, 2, 5, 1, 4, 2], heights0: List[int]=[10, 13, 5, 5, 11, 8, 5, 6, 11, 7, 12, 10, 6, 8, 8, 5, 10, 9, 8, 6, 8, 8, 8, 4, 6, 7, 4, 10, 7, 3, 12, 12, 14, 8, 5, 8, 6, 6, 4, 12, 4, 7, 11, 9, 5, 9, 8, 7, 9, 6, 10, 4, 11, 10, 8, 12, 8, 12, 6, 9, 5], heights1: List[int]=[3, 3, 9, 7, 1, 3, 4, 10, 2, 2, 8, 5, 4, 2, 2, 6, 9, 9, 4, 8, 6, 4, 1, 2, 1, 3, 4, 4, 5, 1, 5, 4, 8, 8, 3, 2, 5, 5, 7, 3, 6, 9, 3, 5, 4, 7, 7, 6, 3, 7, 4, 8, 7, 9, 5, 9, 1, 10, 5, 4, 8]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 3, 2, 5, 4, 4, 5, 6, 1, 0, 6, 4, 4, 1, 5, 5, 6, 4, 1, 6, 2, 6, 6, 4, 3, 1, 1, 3, 5, 6, 0, 2, 1, 0, 1, 4, 3, 1, 3, 1, 5, 5, 6, 0, 1, 5, 5, 4, 5, 6, 1, 6, 5, 3, 5, 4, 2, 0, 0, 5, 1], prices1=[0, 5, 2, 0, 6, 6, 4, 5, 1, 0, 3, 5, 6, 5, 1, 3, 1, 3, 4, 0, 5, 2, 3, 5, 3, 2, 3, 3, 5, 4, 1, 3, 2, 3, 3, 0, 5, 0, 1, 2, 0, 5, 5, 5, 4, 4, 6, 2, 0, 2, 2, 6, 5, 2, 0, 3, 2, 5, 1, 4, 2], heights0=[10, 13, 5, 5, 11, 8, 5, 6, 11, 7, 12, 10, 6, 8, 8, 5, 10, 9, 8, 6, 8, 8, 8, 4, 6, 7, 4, 10, 7, 3, 12, 12, 14, 8, 5, 8, 6, 6, 4, 12, 4, 7, 11, 9, 5, 9, 8, 7, 9, 6, 10, 4, 11, 10, 8, 12, 8, 12, 6, 9, 5], heights1=[3, 3, 9, 7, 1, 3, 4, 10, 2, 2, 8, 5, 4, 2, 2, 6, 9, 9, 4, 8, 6, 4, 1, 2, 1, 3, 4, 4, 5, 1, 5, 4, 8, 8, 3, 2, 5, 5, 7, 3, 6, 9, 3, 5, 4, 7, 7, 6, 3, 7, 4, 8, 7, 9, 5, 9, 1, 10, 5, 4, 8]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_25",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0], prices1: List[int]=[0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1], heights0: List[int]=[12, 10, 6, 3, 9, 15, 6, 11, 13, 9, 6, 9, 6, 12, 5, 8, 2, 5, 11], heights1: List[int]=[4, 2, 10, 6, 1, 8, 6, 1, 10, 3, 6, 8, 4, 1, 7, 2, 8, 1, 7]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0], prices1=[0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1], heights0=[12, 10, 6, 3, 9, 15, 6, 11, 13, 9, 6, 9, 6, 12, 5, 8, 2, 5, 11], heights1=[4, 2, 10, 6, 1, 8, 6, 1, 10, 3, 6, 8, 4, 1, 7, 2, 8, 1, 7]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_26",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0, 0, 0], prices1: List[int]=[0, 0, 0, 0, 0, 0], heights0: List[int]=[5, 7, 10, 13, 13, 4], heights1: List[int]=[9, 1, 10, 1, 8, 5]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0, 0], heights0=[5, 7, 10, 13, 13, 4], heights1=[9, 1, 10, 1, 8, 5]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_27",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0], prices1: List[int]=[0, 0], heights0: List[int]=[8, 11], heights1: List[int]=[7, 8]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0], prices1=[0, 0], heights0=[8, 11], heights1=[7, 8]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_28",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0, 0, 0, 0, 0, 0], prices1: List[int]=[0, 0, 0, 0, 0, 0, 0, 0, 0], heights0: List[int]=[10, 11, 7, 9, 9, 12, 8, 5, 9], heights1: List[int]=[8, 6, 7, 7, 4, 6, 6, 4, 5]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0, 0, 0, 0, 0], heights0=[10, 11, 7, 9, 9, 12, 8, 5, 9], heights1=[8, 6, 7, 7, 4, 6, 6, 4, 5]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_29",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0], prices1: List[int]=[0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1], heights0: List[int]=[5, 14, 5, 14, 4, 5, 5, 8, 10, 4, 11, 10], heights1: List[int]=[7, 10, 1, 6, 9, 10, 3, 7, 1, 2, 3, 4]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0], prices1=[0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1], heights0=[5, 14, 5, 14, 4, 5, 5, 8, 10, 4, 11, 10], heights1=[7, 10, 1, 6, 9, 10, 3, 7, 1, 2, 3, 4]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_30",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[3, 5, 6, 0, 2, 4, 0, 2, 6, 1, 2, 0, 1, 6, 0, 3, 3, 3, 4, 4, 0, 4, 1, 5, 0, 3, 2, 5, 6, 4, 0, 2, 0, 4, 5, 2, 1, 1, 0, 2, 1, 4, 2, 5, 4, 3, 3, 6, 1, 5, 4, 5, 1, 4, 0, 3, 3, 4, 1, 5, 1, 3, 3, 5, 3, 5, 6, 2], prices1: List[int]=[0, 5, 6, 2, 5, 2, 4, 3, 3, 4, 6, 1, 3, 3, 0, 3, 3, 1, 5, 1, 2, 4, 1, 2, 1, 5, 4, 4, 2, 0, 6, 5, 0, 1, 0, 6, 2, 6, 1, 2, 5, 4, 0, 2, 0, 6, 1, 4, 2, 3, 5, 6, 0, 0, 6, 3, 3, 4, 0, 0, 4, 0, 2, 2, 5, 0, 1, 5], heights0: List[int]=[12, 4, 4, 10, 10, 3, 11, 8, 7, 4, 14, 10, 10, 5, 14, 7, 11, 13, 10, 14, 3, 11, 6, 10, 8, 9, 9, 7, 3, 13, 9, 7, 10, 7, 9, 15, 6, 11, 3, 9, 7, 12, 9, 9, 10, 14, 8, 13, 2, 11, 6, 7, 5, 12, 10, 13, 6, 2, 13, 10, 5, 6, 8, 4, 8, 4, 14, 5], heights1: List[int]=[2, 5, 3, 10, 2, 7, 1, 9, 9, 9, 9, 10, 1, 5, 9, 6, 5, 2, 4, 1, 9, 1, 7, 3, 6, 5, 6, 10, 9, 2, 4, 7, 6, 1, 4, 3, 9, 1, 8, 10, 3, 3, 5, 3, 5, 9, 3, 7, 4, 7, 8, 8, 7, 1, 3, 4, 5, 9, 5, 2, 4, 7, 10, 4, 2, 5, 1, 7]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[3, 5, 6, 0, 2, 4, 0, 2, 6, 1, 2, 0, 1, 6, 0, 3, 3, 3, 4, 4, 0, 4, 1, 5, 0, 3, 2, 5, 6, 4, 0, 2, 0, 4, 5, 2, 1, 1, 0, 2, 1, 4, 2, 5, 4, 3, 3, 6, 1, 5, 4, 5, 1, 4, 0, 3, 3, 4, 1, 5, 1, 3, 3, 5, 3, 5, 6, 2], prices1=[0, 5, 6, 2, 5, 2, 4, 3, 3, 4, 6, 1, 3, 3, 0, 3, 3, 1, 5, 1, 2, 4, 1, 2, 1, 5, 4, 4, 2, 0, 6, 5, 0, 1, 0, 6, 2, 6, 1, 2, 5, 4, 0, 2, 0, 6, 1, 4, 2, 3, 5, 6, 0, 0, 6, 3, 3, 4, 0, 0, 4, 0, 2, 2, 5, 0, 1, 5], heights0=[12, 4, 4, 10, 10, 3, 11, 8, 7, 4, 14, 10, 10, 5, 14, 7, 11, 13, 10, 14, 3, 11, 6, 10, 8, 9, 9, 7, 3, 13, 9, 7, 10, 7, 9, 15, 6, 11, 3, 9, 7, 12, 9, 9, 10, 14, 8, 13, 2, 11, 6, 7, 5, 12, 10, 13, 6, 2, 13, 10, 5, 6, 8, 4, 8, 4, 14, 5], heights1=[2, 5, 3, 10, 2, 7, 1, 9, 9, 9, 9, 10, 1, 5, 9, 6, 5, 2, 4, 1, 9, 1, 7, 3, 6, 5, 6, 10, 9, 2, 4, 7, 6, 1, 4, 3, 9, 1, 8, 10, 3, 3, 5, 3, 5, 9, 3, 7, 4, 7, 8, 8, 7, 1, 3, 4, 5, 9, 5, 2, 4, 7, 10, 4, 2, 5, 1, 7]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_31",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0, 0, 0, 0], prices1: List[int]=[0, 0, 0, 0, 0, 0, 0], heights0: List[int]=[12, 10, 13, 6, 11, 12, 11], heights1: List[int]=[9, 9, 9, 5, 9, 10, 9]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0, 0, 0], heights0=[12, 10, 13, 6, 11, 12, 11], heights1=[9, 9, 9, 5, 9, 10, 9]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_32",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0], prices1: List[int]=[0, 0, 0, 0], heights0: List[int]=[8, 9, 6, 8], heights1: List[int]=[4, 2, 7, 3]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0], prices1=[0, 0, 0, 0], heights0=[8, 9, 6, 8], heights1=[4, 2, 7, 3]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_33",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0, 0], prices1: List[int]=[0, 0, 0, 0, 0], heights0: List[int]=[9, 10, 7, 14, 11], heights1: List[int]=[5, 10, 9, 8, 3]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0], heights0=[9, 10, 7, 14, 11], heights1=[5, 10, 9, 8, 3]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_34",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0], prices1: List[int]=[1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1], heights0: List[int]=[8, 7, 10, 9, 5, 7, 13, 6, 8, 12, 12, 13, 11, 14, 13, 11, 4, 13], heights1: List[int]=[6, 3, 9, 3, 7, 8, 10, 9, 5, 5, 9, 10, 4, 9, 10, 5, 6, 4]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0], prices1=[1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1], heights0=[8, 7, 10, 9, 5, 7, 13, 6, 8, 12, 12, 13, 11, 14, 13, 11, 4, 13], heights1=[6, 3, 9, 3, 7, 8, 10, 9, 5, 5, 9, 10, 4, 9, 10, 5, 6, 4]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_35",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[1, 0, 0, 0, 0, 1, 1, 1, 0, 1], prices1: List[int]=[1, 1, 0, 0, 0, 1, 1, 1, 1, 1], heights0: List[int]=[15, 7, 8, 13, 9, 11, 12, 7, 8, 7], heights1: List[int]=[5, 10, 4, 8, 7, 8, 7, 5, 6, 4]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[1, 0, 0, 0, 0, 1, 1, 1, 0, 1], prices1=[1, 1, 0, 0, 0, 1, 1, 1, 1, 1], heights0=[15, 7, 8, 13, 9, 11, 12, 7, 8, 7], heights1=[5, 10, 4, 8, 7, 8, 7, 5, 6, 4]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_36",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0], prices1: List[int]=[1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0], heights0: List[int]=[9, 7, 8, 8, 2, 8, 8, 7, 7, 10, 5, 7], heights1: List[int]=[6, 6, 6, 6, 1, 1, 7, 8, 6, 5, 4, 3]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0], prices1=[1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0], heights0=[9, 7, 8, 8, 2, 8, 8, 7, 7, 10, 5, 7], heights1=[6, 6, 6, 6, 1, 1, 7, 8, 6, 5, 4, 3]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_37",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[1, 1, 1, 1, 0, 0, 2, 3, 4, 1, 1, 0, 2, 5, 3, 0, 3, 1, 0, 4, 5, 0, 2, 0, 4, 3, 2, 4, 3, 4, 3, 1, 2, 4, 1, 3, 0, 2, 2, 1, 5, 4, 2, 3, 1, 5, 5, 4, 0, 1, 2], prices1: List[int]=[2, 5, 3, 4, 5, 4, 0, 2, 0, 2, 2, 3, 1, 1, 1, 1, 5, 2, 2, 2, 0, 1, 2, 0, 2, 3, 3, 1, 3, 3, 4, 5, 0, 1, 5, 5, 5, 4, 1, 5, 1, 5, 5, 4, 4, 3, 1, 1, 3, 0, 5], heights0: List[int]=[13, 15, 3, 10, 8, 3, 15, 5, 13, 14, 12, 6, 6, 11, 8, 8, 6, 12, 9, 8, 7, 14, 6, 6, 12, 15, 8, 6, 7, 5, 5, 8, 9, 10, 11, 6, 14, 7, 7, 12, 12, 5, 8, 5, 15, 12, 12, 12, 5, 7, 14], heights1: List[int]=[9, 9, 5, 1, 6, 1, 9, 9, 8, 3, 4, 10, 10, 1, 3, 9, 7, 4, 3, 4, 2, 1, 3, 7, 3, 6, 10, 10, 9, 6, 4, 10, 5, 9, 7, 5, 9, 4, 9, 5, 7, 8, 7, 3, 6, 3, 8, 10, 2, 1, 3]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[1, 1, 1, 1, 0, 0, 2, 3, 4, 1, 1, 0, 2, 5, 3, 0, 3, 1, 0, 4, 5, 0, 2, 0, 4, 3, 2, 4, 3, 4, 3, 1, 2, 4, 1, 3, 0, 2, 2, 1, 5, 4, 2, 3, 1, 5, 5, 4, 0, 1, 2], prices1=[2, 5, 3, 4, 5, 4, 0, 2, 0, 2, 2, 3, 1, 1, 1, 1, 5, 2, 2, 2, 0, 1, 2, 0, 2, 3, 3, 1, 3, 3, 4, 5, 0, 1, 5, 5, 5, 4, 1, 5, 1, 5, 5, 4, 4, 3, 1, 1, 3, 0, 5], heights0=[13, 15, 3, 10, 8, 3, 15, 5, 13, 14, 12, 6, 6, 11, 8, 8, 6, 12, 9, 8, 7, 14, 6, 6, 12, 15, 8, 6, 7, 5, 5, 8, 9, 10, 11, 6, 14, 7, 7, 12, 12, 5, 8, 5, 15, 12, 12, 12, 5, 7, 14], heights1=[9, 9, 5, 1, 6, 1, 9, 9, 8, 3, 4, 10, 10, 1, 3, 9, 7, 4, 3, 4, 2, 1, 3, 7, 3, 6, 10, 10, 9, 6, 4, 10, 5, 9, 7, 5, 9, 4, 9, 5, 7, 8, 7, 3, 6, 3, 8, 10, 2, 1, 3]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_38",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0, 0], prices1: List[int]=[0, 0, 0, 0, 0], heights0: List[int]=[11, 11, 8, 6, 10], heights1: List[int]=[8, 5, 8, 4, 7]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0], heights0=[11, 11, 8, 6, 10], heights1=[8, 5, 8, 4, 7]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_39",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0, 0, 0, 0], prices1: List[int]=[0, 0, 0, 0, 0, 0, 0], heights0: List[int]=[14, 8, 5, 12, 13, 4, 6], heights1: List[int]=[1, 5, 7, 10, 1, 4, 10]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0, 0, 0], heights0=[14, 8, 5, 12, 13, 4, 6], heights1=[1, 5, 7, 10, 1, 4, 10]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_40",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[1, 0, 1, 2, 1, 0, 0, 0, 0, 0, 2, 0, 2, 1, 0, 2, 1, 2, 1, 0], prices1: List[int]=[1, 1, 1, 1, 0, 1, 0, 1, 1, 2, 2, 0, 1, 1, 1, 0, 1, 1, 0, 2], heights0: List[int]=[3, 7, 11, 2, 13, 11, 9, 5, 7, 10, 13, 2, 5, 8, 11, 6, 10, 9, 15, 9], heights1: List[int]=[1, 8, 2, 8, 9, 10, 6, 3, 10, 5, 1, 4, 5, 1, 4, 9, 4, 4, 7, 9]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[1, 0, 1, 2, 1, 0, 0, 0, 0, 0, 2, 0, 2, 1, 0, 2, 1, 2, 1, 0], prices1=[1, 1, 1, 1, 0, 1, 0, 1, 1, 2, 2, 0, 1, 1, 1, 0, 1, 1, 0, 2], heights0=[3, 7, 11, 2, 13, 11, 9, 5, 7, 10, 13, 2, 5, 8, 11, 6, 10, 9, 15, 9], heights1=[1, 8, 2, 8, 9, 10, 6, 3, 10, 5, 1, 4, 5, 1, 4, 9, 4, 4, 7, 9]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_41",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[1, 0, 4, 3, 5, 6, 0, 9, 5, 5, 3, 8, 6, 7, 5, 2, 9, 1, 7, 1, 9, 9, 7, 7, 7, 8, 0, 7, 0, 4, 1, 0, 0, 0, 3, 2, 2, 1, 9, 7, 3, 4, 7, 8, 8, 4, 6, 0, 4, 4, 3, 8, 8, 6, 1, 4, 7, 6, 6, 9, 6, 9, 9, 7, 4, 6, 7, 1, 2, 5, 8, 7, 4, 4, 6, 0, 7, 9, 2, 3, 2, 7, 6, 0, 8, 6, 8, 6, 6, 6, 1, 4, 6, 6, 6, 3, 3], prices1: List[int]=[8, 5, 5, 6, 8, 0, 4, 0, 8, 0, 9, 2, 4, 4, 9, 1, 3, 7, 2, 9, 4, 3, 0, 8, 2, 2, 0, 9, 0, 4, 6, 1, 7, 3, 5, 1, 9, 4, 7, 4, 5, 9, 1, 7, 2, 2, 9, 2, 6, 4, 5, 9, 5, 0, 2, 9, 7, 5, 5, 7, 0, 6, 7, 2, 6, 0, 1, 1, 1, 6, 3, 6, 4, 4, 0, 3, 2, 3, 1, 0, 4, 6, 2, 2, 7, 3, 5, 3, 8, 6, 3, 1, 1, 5, 0, 5, 3], heights0: List[int]=[13, 9, 6, 14, 7, 14, 11, 9, 7, 12, 5, 6, 5, 7, 10, 10, 13, 7, 5, 6, 6, 3, 8, 12, 10, 7, 5, 7, 8, 5, 13, 7, 5, 13, 10, 6, 13, 10, 3, 9, 2, 7, 11, 11, 3, 11, 10, 11, 8, 2, 14, 6, 13, 12, 6, 6, 10, 2, 9, 6, 8, 12, 12, 11, 9, 10, 13, 6, 6, 4, 10, 9, 9, 5, 10, 5, 10, 5, 7, 9, 6, 6, 14, 10, 7, 14, 13, 6, 9, 3, 9, 8, 7, 11, 15, 5, 9], heights1: List[int]=[3, 7, 8, 1, 5, 6, 4, 9, 8, 4, 1, 10, 7, 7, 8, 4, 3, 5, 3, 3, 6, 2, 2, 5, 9, 9, 4, 7, 3, 8, 9, 2, 4, 8, 9, 9, 4, 9, 2, 5, 9, 10, 4, 8, 5, 1, 9, 1, 3, 9, 1, 1, 1, 10, 3, 3, 5, 6, 1, 7, 7, 6, 2, 6, 7, 6, 1, 7, 6, 5, 1, 8, 9, 4, 10, 8, 3, 2, 5, 10, 8, 6, 2, 5, 6, 3, 4, 7, 9, 1, 6, 5, 10, 10, 8, 8, 3]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[1, 0, 4, 3, 5, 6, 0, 9, 5, 5, 3, 8, 6, 7, 5, 2, 9, 1, 7, 1, 9, 9, 7, 7, 7, 8, 0, 7, 0, 4, 1, 0, 0, 0, 3, 2, 2, 1, 9, 7, 3, 4, 7, 8, 8, 4, 6, 0, 4, 4, 3, 8, 8, 6, 1, 4, 7, 6, 6, 9, 6, 9, 9, 7, 4, 6, 7, 1, 2, 5, 8, 7, 4, 4, 6, 0, 7, 9, 2, 3, 2, 7, 6, 0, 8, 6, 8, 6, 6, 6, 1, 4, 6, 6, 6, 3, 3], prices1=[8, 5, 5, 6, 8, 0, 4, 0, 8, 0, 9, 2, 4, 4, 9, 1, 3, 7, 2, 9, 4, 3, 0, 8, 2, 2, 0, 9, 0, 4, 6, 1, 7, 3, 5, 1, 9, 4, 7, 4, 5, 9, 1, 7, 2, 2, 9, 2, 6, 4, 5, 9, 5, 0, 2, 9, 7, 5, 5, 7, 0, 6, 7, 2, 6, 0, 1, 1, 1, 6, 3, 6, 4, 4, 0, 3, 2, 3, 1, 0, 4, 6, 2, 2, 7, 3, 5, 3, 8, 6, 3, 1, 1, 5, 0, 5, 3], heights0=[13, 9, 6, 14, 7, 14, 11, 9, 7, 12, 5, 6, 5, 7, 10, 10, 13, 7, 5, 6, 6, 3, 8, 12, 10, 7, 5, 7, 8, 5, 13, 7, 5, 13, 10, 6, 13, 10, 3, 9, 2, 7, 11, 11, 3, 11, 10, 11, 8, 2, 14, 6, 13, 12, 6, 6, 10, 2, 9, 6, 8, 12, 12, 11, 9, 10, 13, 6, 6, 4, 10, 9, 9, 5, 10, 5, 10, 5, 7, 9, 6, 6, 14, 10, 7, 14, 13, 6, 9, 3, 9, 8, 7, 11, 15, 5, 9], heights1=[3, 7, 8, 1, 5, 6, 4, 9, 8, 4, 1, 10, 7, 7, 8, 4, 3, 5, 3, 3, 6, 2, 2, 5, 9, 9, 4, 7, 3, 8, 9, 2, 4, 8, 9, 9, 4, 9, 2, 5, 9, 10, 4, 8, 5, 1, 9, 1, 3, 9, 1, 1, 1, 10, 3, 3, 5, 6, 1, 7, 7, 6, 2, 6, 7, 6, 1, 7, 6, 5, 1, 8, 9, 4, 10, 8, 3, 2, 5, 10, 8, 6, 2, 5, 6, 3, 4, 7, 9, 1, 6, 5, 10, 10, 8, 8, 3]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_42",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0], prices1: List[int]=[0, 0], heights0: List[int]=[14, 8], heights1: List[int]=[3, 9]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0], prices1=[0, 0], heights0=[14, 8], heights1=[3, 9]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_43",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0, 0, 0, 0, 0], prices1: List[int]=[0, 0, 0, 0, 0, 0, 0, 0], heights0: List[int]=[9, 3, 6, 8, 7, 10, 12, 13], heights1: List[int]=[4, 5, 3, 10, 2, 8, 5, 10]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0, 0, 0, 0], heights0=[9, 3, 6, 8, 7, 10, 12, 13], heights1=[4, 5, 3, 10, 2, 8, 5, 10]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_44",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 6, 1, 4, 4, 0, 1, 0, 2, 2, 1, 1, 2, 2, 0, 5, 6, 6, 6, 3, 3, 0, 1, 0, 5, 6, 6, 3, 5, 0, 0, 0, 4, 5, 0, 3, 6, 2, 1, 5, 6, 1, 1, 3, 2, 5, 4, 5, 3, 6, 0, 1, 1, 3, 1, 0, 4, 4, 4, 0, 4, 0], prices1: List[int]=[6, 2, 1, 6, 5, 6, 1, 1, 6, 3, 4, 5, 6, 3, 5, 6, 4, 6, 3, 2, 1, 2, 0, 2, 4, 0, 5, 4, 6, 3, 4, 1, 4, 0, 0, 4, 2, 0, 6, 5, 2, 1, 6, 0, 6, 4, 1, 6, 1, 1, 4, 0, 5, 2, 0, 5, 5, 5, 6, 3, 0, 4], heights0: List[int]=[9, 7, 10, 8, 7, 9, 11, 10, 5, 3, 8, 10, 8, 6, 5, 12, 6, 9, 8, 11, 3, 15, 7, 15, 8, 8, 5, 4, 9, 14, 9, 7, 4, 9, 4, 7, 6, 14, 8, 5, 7, 14, 4, 6, 10, 7, 8, 6, 14, 10, 5, 11, 8, 11, 11, 7, 11, 14, 5, 9, 9, 9], heights1: List[int]=[4, 8, 5, 3, 6, 4, 10, 8, 5, 10, 1, 3, 5, 3, 2, 8, 1, 2, 7, 6, 6, 7, 3, 6, 6, 5, 7, 1, 5, 6, 3, 4, 10, 3, 10, 9, 10, 8, 6, 5, 7, 6, 3, 6, 3, 8, 5, 3, 7, 2, 4, 6, 5, 6, 10, 10, 3, 3, 5, 2, 1, 3]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 6, 1, 4, 4, 0, 1, 0, 2, 2, 1, 1, 2, 2, 0, 5, 6, 6, 6, 3, 3, 0, 1, 0, 5, 6, 6, 3, 5, 0, 0, 0, 4, 5, 0, 3, 6, 2, 1, 5, 6, 1, 1, 3, 2, 5, 4, 5, 3, 6, 0, 1, 1, 3, 1, 0, 4, 4, 4, 0, 4, 0], prices1=[6, 2, 1, 6, 5, 6, 1, 1, 6, 3, 4, 5, 6, 3, 5, 6, 4, 6, 3, 2, 1, 2, 0, 2, 4, 0, 5, 4, 6, 3, 4, 1, 4, 0, 0, 4, 2, 0, 6, 5, 2, 1, 6, 0, 6, 4, 1, 6, 1, 1, 4, 0, 5, 2, 0, 5, 5, 5, 6, 3, 0, 4], heights0=[9, 7, 10, 8, 7, 9, 11, 10, 5, 3, 8, 10, 8, 6, 5, 12, 6, 9, 8, 11, 3, 15, 7, 15, 8, 8, 5, 4, 9, 14, 9, 7, 4, 9, 4, 7, 6, 14, 8, 5, 7, 14, 4, 6, 10, 7, 8, 6, 14, 10, 5, 11, 8, 11, 11, 7, 11, 14, 5, 9, 9, 9], heights1=[4, 8, 5, 3, 6, 4, 10, 8, 5, 10, 1, 3, 5, 3, 2, 8, 1, 2, 7, 6, 6, 7, 3, 6, 6, 5, 7, 1, 5, 6, 3, 4, 10, 3, 10, 9, 10, 8, 6, 5, 7, 6, 3, 6, 3, 8, 5, 3, 7, 2, 4, 6, 5, 6, 10, 10, 3, 3, 5, 2, 1, 3]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_45",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0, 0, 0, 0, 0], prices1: List[int]=[0, 0, 0, 0, 0, 0, 0, 0], heights0: List[int]=[9, 8, 5, 3, 15, 6, 12, 9], heights1: List[int]=[10, 7, 8, 7, 1, 6, 4, 2]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0, 0, 0, 0], heights0=[9, 8, 5, 3, 15, 6, 12, 9], heights1=[10, 7, 8, 7, 1, 6, 4, 2]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_46",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0, 0, 0, 0, 0], prices1: List[int]=[0, 0, 0, 0, 0, 0, 0, 0], heights0: List[int]=[7, 14, 4, 8, 11, 4, 15, 4], heights1: List[int]=[6, 10, 10, 7, 2, 9, 2, 1]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0, 0, 0, 0], heights0=[7, 14, 4, 8, 11, 4, 15, 4], heights1=[6, 10, 10, 7, 2, 9, 2, 1]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_47",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0], prices1: List[int]=[1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], heights0: List[int]=[6, 7, 4, 2, 10, 2, 9, 13, 14, 9, 10, 6, 9, 6, 10, 12, 11, 7], heights1: List[int]=[2, 7, 5, 1, 4, 2, 8, 7, 6, 7, 3, 5, 3, 9, 9, 1, 9, 6]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0], prices1=[1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], heights0=[6, 7, 4, 2, 10, 2, 9, 13, 14, 9, 10, 6, 9, 6, 10, 12, 11, 7], heights1=[2, 7, 5, 1, 4, 2, 8, 7, 6, 7, 3, 5, 3, 9, 9, 1, 9, 6]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_48",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0, 0, 0, 0, 0], prices1: List[int]=[0, 0, 0, 0, 0, 0, 0, 0], heights0: List[int]=[5, 6, 13, 2, 8, 6, 5, 5], heights1: List[int]=[4, 4, 3, 10, 1, 3, 1, 2]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0, 0, 0, 0], heights0=[5, 6, 13, 2, 8, 6, 5, 5], heights1=[4, 4, 3, 10, 1, 3, 1, 2]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_49",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[5, 1, 8, 3, 4, 0, 8, 1, 4, 7, 7, 3, 0, 7, 3, 8, 0, 7, 2, 7, 6, 6, 3, 5, 5, 1, 7, 0, 4, 7, 2, 0, 4, 2, 4, 6, 3, 1, 6, 3, 8, 6, 2, 3, 8, 4, 1, 2, 0, 3, 0, 6, 2, 2, 2, 5, 6, 3, 3, 6, 5, 6, 1, 3, 1, 2, 4, 4, 3, 1, 0, 2, 4, 4, 8, 6, 7, 1, 0, 1, 5, 3, 1, 1, 3, 7, 8, 0, 6], prices1: List[int]=[6, 5, 1, 1, 6, 3, 6, 7, 3, 3, 7, 3, 0, 4, 5, 2, 1, 2, 6, 3, 5, 8, 6, 1, 6, 3, 3, 1, 8, 0, 8, 4, 3, 2, 8, 4, 2, 0, 1, 0, 4, 2, 5, 4, 2, 8, 2, 3, 3, 0, 1, 2, 2, 0, 3, 2, 0, 4, 0, 1, 6, 3, 0, 7, 2, 4, 8, 3, 7, 1, 4, 3, 5, 8, 0, 0, 4, 0, 5, 2, 8, 0, 7, 3, 0, 2, 6, 2, 1], heights0: List[int]=[8, 4, 15, 12, 8, 11, 6, 3, 6, 7, 11, 8, 8, 10, 6, 11, 9, 12, 9, 11, 11, 10, 10, 12, 10, 10, 3, 13, 12, 9, 7, 12, 9, 6, 9, 9, 7, 14, 6, 8, 15, 9, 7, 7, 4, 4, 4, 5, 12, 6, 8, 5, 6, 7, 10, 6, 6, 8, 10, 11, 4, 11, 12, 11, 10, 7, 7, 6, 9, 4, 2, 2, 4, 11, 5, 5, 3, 7, 8, 9, 8, 11, 4, 7, 12, 3, 3, 7, 8], heights1: List[int]=[9, 4, 6, 3, 1, 6, 1, 1, 3, 2, 6, 5, 9, 4, 8, 5, 7, 2, 7, 8, 3, 10, 7, 2, 6, 8, 6, 4, 10, 8, 1, 7, 4, 2, 1, 8, 5, 7, 3, 1, 8, 6, 1, 6, 7, 3, 7, 3, 6, 5, 3, 1, 6, 2, 7, 2, 9, 10, 1, 5, 10, 8, 6, 1, 8, 3, 8, 9, 6, 1, 6, 3, 7, 6, 8, 6, 2, 8, 6, 4, 4, 9, 2, 9, 3, 10, 5, 5, 2]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[5, 1, 8, 3, 4, 0, 8, 1, 4, 7, 7, 3, 0, 7, 3, 8, 0, 7, 2, 7, 6, 6, 3, 5, 5, 1, 7, 0, 4, 7, 2, 0, 4, 2, 4, 6, 3, 1, 6, 3, 8, 6, 2, 3, 8, 4, 1, 2, 0, 3, 0, 6, 2, 2, 2, 5, 6, 3, 3, 6, 5, 6, 1, 3, 1, 2, 4, 4, 3, 1, 0, 2, 4, 4, 8, 6, 7, 1, 0, 1, 5, 3, 1, 1, 3, 7, 8, 0, 6], prices1=[6, 5, 1, 1, 6, 3, 6, 7, 3, 3, 7, 3, 0, 4, 5, 2, 1, 2, 6, 3, 5, 8, 6, 1, 6, 3, 3, 1, 8, 0, 8, 4, 3, 2, 8, 4, 2, 0, 1, 0, 4, 2, 5, 4, 2, 8, 2, 3, 3, 0, 1, 2, 2, 0, 3, 2, 0, 4, 0, 1, 6, 3, 0, 7, 2, 4, 8, 3, 7, 1, 4, 3, 5, 8, 0, 0, 4, 0, 5, 2, 8, 0, 7, 3, 0, 2, 6, 2, 1], heights0=[8, 4, 15, 12, 8, 11, 6, 3, 6, 7, 11, 8, 8, 10, 6, 11, 9, 12, 9, 11, 11, 10, 10, 12, 10, 10, 3, 13, 12, 9, 7, 12, 9, 6, 9, 9, 7, 14, 6, 8, 15, 9, 7, 7, 4, 4, 4, 5, 12, 6, 8, 5, 6, 7, 10, 6, 6, 8, 10, 11, 4, 11, 12, 11, 10, 7, 7, 6, 9, 4, 2, 2, 4, 11, 5, 5, 3, 7, 8, 9, 8, 11, 4, 7, 12, 3, 3, 7, 8], heights1=[9, 4, 6, 3, 1, 6, 1, 1, 3, 2, 6, 5, 9, 4, 8, 5, 7, 2, 7, 8, 3, 10, 7, 2, 6, 8, 6, 4, 10, 8, 1, 7, 4, 2, 1, 8, 5, 7, 3, 1, 8, 6, 1, 6, 7, 3, 7, 3, 6, 5, 3, 1, 6, 2, 7, 2, 9, 10, 1, 5, 10, 8, 6, 1, 8, 3, 8, 9, 6, 1, 6, 3, 7, 6, 8, 6, 2, 8, 6, 4, 4, 9, 2, 9, 3, 10, 5, 5, 2]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_50",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], prices1: List[int]=[1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1], heights0: List[int]=[6, 7, 10, 13, 5, 3, 15, 9, 9, 13, 12, 5, 6, 4, 11], heights1: List[int]=[8, 6, 2, 10, 4, 2, 3, 9, 2, 8, 1, 9, 1, 9, 6]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], prices1=[1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1], heights0=[6, 7, 10, 13, 5, 3, 15, 9, 9, 13, 12, 5, 6, 4, 11], heights1=[8, 6, 2, 10, 4, 2, 3, 9, 2, 8, 1, 9, 1, 9, 6]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_51",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0, 0, 0, 0, 0, 0], prices1: List[int]=[0, 0, 0, 0, 0, 0, 0, 0, 0], heights0: List[int]=[4, 8, 7, 10, 2, 13, 4, 12, 5], heights1: List[int]=[7, 2, 1, 10, 9, 3, 1, 1, 8]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0, 0, 0, 0, 0], heights0=[4, 8, 7, 10, 2, 13, 4, 12, 5], heights1=[7, 2, 1, 10, 9, 3, 1, 1, 8]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_52",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0], prices1: List[int]=[0, 0, 0], heights0: List[int]=[11, 9, 9], heights1: List[int]=[6, 8, 8]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0], prices1=[0, 0, 0], heights0=[11, 9, 9], heights1=[6, 8, 8]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_53",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0], prices1: List[int]=[0, 0], heights0: List[int]=[7, 5], heights1: List[int]=[3, 4]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0], prices1=[0, 0], heights0=[7, 5], heights1=[3, 4]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_54",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0, 0, 0, 0, 0, 0], prices1: List[int]=[0, 0, 0, 0, 0, 0, 0, 0, 0], heights0: List[int]=[8, 9, 11, 10, 6, 7, 9, 7, 2], heights1: List[int]=[2, 6, 6, 6, 6, 7, 1, 4, 5]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0, 0, 0, 0, 0], heights0=[8, 9, 11, 10, 6, 7, 9, 7, 2], heights1=[2, 6, 6, 6, 6, 7, 1, 4, 5]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_55",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 1, 1, 0, 0, 0, 1, 0], prices1: List[int]=[0, 0, 1, 0, 0, 0, 1, 0, 0, 0], heights0: List[int]=[4, 12, 6, 9, 11, 7, 15, 5, 11, 9], heights1: List[int]=[1, 2, 8, 2, 10, 7, 10, 10, 1, 6]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 1, 1, 0, 0, 0, 1, 0], prices1=[0, 0, 1, 0, 0, 0, 1, 0, 0, 0], heights0=[4, 12, 6, 9, 11, 7, 15, 5, 11, 9], heights1=[1, 2, 8, 2, 10, 7, 10, 10, 1, 6]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_56",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0, 0, 0, 0], prices1: List[int]=[0, 0, 0, 0, 0, 0, 0], heights0: List[int]=[3, 8, 6, 8, 6, 15, 12], heights1: List[int]=[10, 7, 10, 2, 3, 3, 4]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0, 0, 0], heights0=[3, 8, 6, 8, 6, 15, 12], heights1=[10, 7, 10, 2, 3, 3, 4]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_57",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[1, 3, 2, 1, 1, 3, 0, 3, 0, 3, 0, 1, 2, 2, 3, 2, 2, 2, 3, 1, 1, 3, 0, 1, 0, 2, 0, 2, 1, 1, 3], prices1: List[int]=[0, 0, 3, 0, 3, 1, 0, 2, 0, 2, 0, 3, 3, 2, 3, 3, 3, 1, 2, 0, 0, 2, 1, 2, 1, 0, 2, 3, 2, 2, 0], heights0: List[int]=[12, 11, 2, 9, 5, 2, 8, 12, 12, 7, 15, 9, 7, 11, 4, 10, 7, 12, 8, 9, 6, 6, 7, 9, 5, 13, 15, 10, 8, 9, 10], heights1: List[int]=[3, 1, 7, 8, 1, 8, 5, 10, 10, 6, 4, 7, 3, 5, 2, 6, 1, 2, 2, 8, 4, 7, 7, 6, 6, 10, 9, 8, 1, 10, 4]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[1, 3, 2, 1, 1, 3, 0, 3, 0, 3, 0, 1, 2, 2, 3, 2, 2, 2, 3, 1, 1, 3, 0, 1, 0, 2, 0, 2, 1, 1, 3], prices1=[0, 0, 3, 0, 3, 1, 0, 2, 0, 2, 0, 3, 3, 2, 3, 3, 3, 1, 2, 0, 0, 2, 1, 2, 1, 0, 2, 3, 2, 2, 0], heights0=[12, 11, 2, 9, 5, 2, 8, 12, 12, 7, 15, 9, 7, 11, 4, 10, 7, 12, 8, 9, 6, 6, 7, 9, 5, 13, 15, 10, 8, 9, 10], heights1=[3, 1, 7, 8, 1, 8, 5, 10, 10, 6, 4, 7, 3, 5, 2, 6, 1, 2, 2, 8, 4, 7, 7, 6, 6, 10, 9, 8, 1, 10, 4]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_58",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0, 0, 0, 0, 0], prices1: List[int]=[0, 0, 0, 0, 0, 0, 0, 0], heights0: List[int]=[4, 11, 9, 8, 9, 6, 6, 8], heights1: List[int]=[9, 4, 5, 5, 3, 5, 1, 3]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0, 0, 0, 0], heights0=[4, 11, 9, 8, 9, 6, 6, 8], heights1=[9, 4, 5, 5, 3, 5, 1, 3]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_59",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 6, 3, 3, 5, 5, 1, 4, 3, 7, 3, 5, 6, 6, 6, 2, 4, 1, 7, 0, 5, 4, 5, 1, 0, 6, 4, 4, 2, 0, 6, 2, 1, 3, 3, 3, 6, 3, 1, 7, 2, 4, 7, 7, 7, 2, 0, 7, 7, 2, 1, 6, 1, 1, 1, 6, 5, 4, 2, 4, 3, 5, 3, 4, 4, 7, 4, 0, 7, 3, 0, 5, 3, 1, 5, 6, 7, 6], prices1: List[int]=[2, 7, 1, 0, 1, 7, 3, 6, 5, 5, 0, 6, 0, 4, 7, 2, 1, 1, 3, 3, 3, 5, 5, 5, 3, 6, 0, 7, 7, 7, 0, 3, 7, 6, 7, 2, 4, 5, 0, 2, 2, 0, 3, 2, 1, 5, 2, 1, 2, 3, 3, 4, 1, 5, 5, 0, 2, 1, 2, 3, 2, 5, 7, 7, 3, 3, 7, 4, 6, 7, 0, 4, 4, 5, 0, 7, 3, 6], heights0: List[int]=[8, 12, 9, 15, 11, 12, 5, 6, 6, 14, 5, 12, 10, 11, 6, 9, 8, 13, 8, 3, 5, 2, 9, 9, 2, 5, 13, 4, 2, 12, 5, 4, 11, 12, 8, 9, 10, 10, 9, 14, 12, 10, 6, 10, 3, 7, 10, 3, 10, 2, 7, 13, 10, 4, 9, 9, 9, 11, 5, 7, 10, 5, 5, 7, 9, 8, 12, 15, 13, 10, 9, 14, 10, 4, 11, 12, 2, 7], heights1: List[int]=[1, 6, 2, 8, 2, 9, 6, 2, 7, 1, 9, 3, 4, 4, 1, 9, 5, 8, 8, 2, 9, 9, 1, 8, 8, 10, 9, 3, 1, 10, 8, 1, 4, 6, 9, 5, 5, 9, 1, 10, 9, 7, 8, 2, 4, 8, 6, 3, 5, 9, 4, 9, 7, 10, 6, 2, 5, 9, 1, 2, 4, 8, 1, 8, 2, 4, 9, 4, 5, 7, 10, 2, 5, 6, 3, 6, 7, 5]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 6, 3, 3, 5, 5, 1, 4, 3, 7, 3, 5, 6, 6, 6, 2, 4, 1, 7, 0, 5, 4, 5, 1, 0, 6, 4, 4, 2, 0, 6, 2, 1, 3, 3, 3, 6, 3, 1, 7, 2, 4, 7, 7, 7, 2, 0, 7, 7, 2, 1, 6, 1, 1, 1, 6, 5, 4, 2, 4, 3, 5, 3, 4, 4, 7, 4, 0, 7, 3, 0, 5, 3, 1, 5, 6, 7, 6], prices1=[2, 7, 1, 0, 1, 7, 3, 6, 5, 5, 0, 6, 0, 4, 7, 2, 1, 1, 3, 3, 3, 5, 5, 5, 3, 6, 0, 7, 7, 7, 0, 3, 7, 6, 7, 2, 4, 5, 0, 2, 2, 0, 3, 2, 1, 5, 2, 1, 2, 3, 3, 4, 1, 5, 5, 0, 2, 1, 2, 3, 2, 5, 7, 7, 3, 3, 7, 4, 6, 7, 0, 4, 4, 5, 0, 7, 3, 6], heights0=[8, 12, 9, 15, 11, 12, 5, 6, 6, 14, 5, 12, 10, 11, 6, 9, 8, 13, 8, 3, 5, 2, 9, 9, 2, 5, 13, 4, 2, 12, 5, 4, 11, 12, 8, 9, 10, 10, 9, 14, 12, 10, 6, 10, 3, 7, 10, 3, 10, 2, 7, 13, 10, 4, 9, 9, 9, 11, 5, 7, 10, 5, 5, 7, 9, 8, 12, 15, 13, 10, 9, 14, 10, 4, 11, 12, 2, 7], heights1=[1, 6, 2, 8, 2, 9, 6, 2, 7, 1, 9, 3, 4, 4, 1, 9, 5, 8, 8, 2, 9, 9, 1, 8, 8, 10, 9, 3, 1, 10, 8, 1, 4, 6, 9, 5, 5, 9, 1, 10, 9, 7, 8, 2, 4, 8, 6, 3, 5, 9, 4, 9, 7, 10, 6, 2, 5, 9, 1, 2, 4, 8, 1, 8, 2, 4, 9, 4, 5, 7, 10, 2, 5, 6, 3, 6, 7, 5]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_60",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0], prices1: List[int]=[0, 0, 0], heights0: List[int]=[8, 11, 2], heights1: List[int]=[1, 5, 6]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0], prices1=[0, 0, 0], heights0=[8, 11, 2], heights1=[1, 5, 6]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_61",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[7, 0, 9, 5, 2, 6, 4, 6, 9, 4, 2, 9, 5, 4, 0, 4, 1, 1, 0, 7, 6, 6, 1, 8, 7, 7, 3, 1, 0, 8, 5, 9, 0, 9, 7, 3, 1, 3, 3, 7, 7, 2, 9, 9, 3, 3, 1, 2, 8, 0, 3, 0, 5, 0, 3, 9, 1, 2, 1, 6, 7, 9, 9, 5, 9, 6, 6, 9, 8, 6, 6, 5, 2, 3, 7, 0, 7, 5, 8, 4, 4, 3, 3, 0, 8, 2, 4, 9, 8, 1, 7, 1, 6, 4, 4, 6, 1, 5], prices1: List[int]=[4, 3, 2, 2, 6, 3, 7, 3, 4, 4, 9, 6, 5, 1, 2, 7, 1, 7, 3, 2, 3, 4, 9, 9, 5, 3, 1, 1, 9, 8, 8, 1, 9, 5, 2, 3, 0, 1, 8, 8, 5, 6, 6, 8, 8, 4, 3, 7, 9, 9, 0, 6, 1, 1, 7, 2, 5, 7, 2, 4, 4, 7, 9, 4, 9, 1, 0, 2, 9, 7, 3, 4, 0, 0, 6, 5, 9, 3, 5, 4, 0, 4, 9, 7, 6, 3, 2, 4, 3, 8, 9, 5, 4, 7, 0, 6, 7, 6], heights0: List[int]=[8, 14, 12, 7, 7, 10, 8, 6, 9, 4, 8, 11, 12, 6, 13, 11, 11, 9, 14, 12, 2, 5, 11, 9, 9, 4, 5, 4, 10, 12, 9, 4, 12, 3, 7, 8, 3, 5, 13, 4, 12, 15, 13, 6, 11, 10, 9, 6, 5, 8, 7, 8, 7, 2, 12, 11, 11, 9, 3, 14, 5, 12, 10, 5, 12, 6, 8, 7, 10, 6, 10, 9, 4, 10, 12, 5, 6, 3, 6, 6, 8, 14, 10, 2, 3, 12, 11, 8, 10, 11, 8, 7, 11, 8, 12, 11, 9, 11], heights1: List[int]=[6, 10, 2, 8, 3, 10, 7, 4, 7, 5, 3, 9, 3, 9, 4, 10, 9, 2, 9, 8, 8, 8, 3, 10, 2, 2, 10, 6, 10, 2, 6, 1, 8, 7, 5, 3, 2, 2, 2, 9, 10, 10, 10, 4, 7, 2, 10, 2, 8, 9, 1, 4, 6, 1, 6, 8, 2, 2, 2, 10, 1, 10, 7, 9, 2, 6, 7, 6, 5, 2, 9, 2, 3, 8, 3, 9, 9, 8, 6, 5, 10, 4, 5, 3, 1, 3, 10, 4, 1, 5, 5, 2, 5, 7, 10, 9, 1, 4]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[7, 0, 9, 5, 2, 6, 4, 6, 9, 4, 2, 9, 5, 4, 0, 4, 1, 1, 0, 7, 6, 6, 1, 8, 7, 7, 3, 1, 0, 8, 5, 9, 0, 9, 7, 3, 1, 3, 3, 7, 7, 2, 9, 9, 3, 3, 1, 2, 8, 0, 3, 0, 5, 0, 3, 9, 1, 2, 1, 6, 7, 9, 9, 5, 9, 6, 6, 9, 8, 6, 6, 5, 2, 3, 7, 0, 7, 5, 8, 4, 4, 3, 3, 0, 8, 2, 4, 9, 8, 1, 7, 1, 6, 4, 4, 6, 1, 5], prices1=[4, 3, 2, 2, 6, 3, 7, 3, 4, 4, 9, 6, 5, 1, 2, 7, 1, 7, 3, 2, 3, 4, 9, 9, 5, 3, 1, 1, 9, 8, 8, 1, 9, 5, 2, 3, 0, 1, 8, 8, 5, 6, 6, 8, 8, 4, 3, 7, 9, 9, 0, 6, 1, 1, 7, 2, 5, 7, 2, 4, 4, 7, 9, 4, 9, 1, 0, 2, 9, 7, 3, 4, 0, 0, 6, 5, 9, 3, 5, 4, 0, 4, 9, 7, 6, 3, 2, 4, 3, 8, 9, 5, 4, 7, 0, 6, 7, 6], heights0=[8, 14, 12, 7, 7, 10, 8, 6, 9, 4, 8, 11, 12, 6, 13, 11, 11, 9, 14, 12, 2, 5, 11, 9, 9, 4, 5, 4, 10, 12, 9, 4, 12, 3, 7, 8, 3, 5, 13, 4, 12, 15, 13, 6, 11, 10, 9, 6, 5, 8, 7, 8, 7, 2, 12, 11, 11, 9, 3, 14, 5, 12, 10, 5, 12, 6, 8, 7, 10, 6, 10, 9, 4, 10, 12, 5, 6, 3, 6, 6, 8, 14, 10, 2, 3, 12, 11, 8, 10, 11, 8, 7, 11, 8, 12, 11, 9, 11], heights1=[6, 10, 2, 8, 3, 10, 7, 4, 7, 5, 3, 9, 3, 9, 4, 10, 9, 2, 9, 8, 8, 8, 3, 10, 2, 2, 10, 6, 10, 2, 6, 1, 8, 7, 5, 3, 2, 2, 2, 9, 10, 10, 10, 4, 7, 2, 10, 2, 8, 9, 1, 4, 6, 1, 6, 8, 2, 2, 2, 10, 1, 10, 7, 9, 2, 6, 7, 6, 5, 2, 9, 2, 3, 8, 3, 9, 9, 8, 6, 5, 10, 4, 5, 3, 1, 3, 10, 4, 1, 5, 5, 2, 5, 7, 10, 9, 1, 4]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_62",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 2, 1, 2, 0, 1, 2, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0], prices1: List[int]=[2, 0, 2, 0, 1, 0, 1, 1, 1, 0, 2, 1, 2, 1, 1, 1, 0, 1, 1, 2], heights0: List[int]=[2, 12, 5, 7, 7, 13, 5, 6, 2, 4, 12, 8, 3, 7, 9, 11, 13, 6, 6, 11], heights1: List[int]=[2, 1, 2, 8, 1, 10, 5, 9, 8, 10, 5, 2, 2, 3, 1, 4, 9, 9, 2, 3]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 2, 1, 2, 0, 1, 2, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 1, 0], prices1=[2, 0, 2, 0, 1, 0, 1, 1, 1, 0, 2, 1, 2, 1, 1, 1, 0, 1, 1, 2], heights0=[2, 12, 5, 7, 7, 13, 5, 6, 2, 4, 12, 8, 3, 7, 9, 11, 13, 6, 6, 11], heights1=[2, 1, 2, 8, 1, 10, 5, 9, 8, 10, 5, 2, 2, 3, 1, 4, 9, 9, 2, 3]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_63",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0], prices1: List[int]=[0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0], heights0: List[int]=[14, 6, 11, 8, 6, 7, 9, 3, 8, 12, 10, 8, 13], heights1: List[int]=[7, 7, 9, 10, 7, 5, 3, 7, 1, 9, 5, 1, 5]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0], prices1=[0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0], heights0=[14, 6, 11, 8, 6, 7, 9, 3, 8, 12, 10, 8, 13], heights1=[7, 7, 9, 10, 7, 5, 3, 7, 1, 9, 5, 1, 5]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_64",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0], prices1: List[int]=[0, 0, 0, 0], heights0: List[int]=[8, 11, 8, 4], heights1: List[int]=[6, 7, 10, 2]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0], prices1=[0, 0, 0, 0], heights0=[8, 11, 8, 4], heights1=[6, 7, 10, 2]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_65",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0, 0, 0], prices1: List[int]=[0, 0, 0, 0, 0, 0], heights0: List[int]=[3, 4, 8, 8, 9, 9], heights1: List[int]=[2, 4, 7, 4, 3, 1]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0, 0], heights0=[3, 4, 8, 8, 9, 9], heights1=[2, 4, 7, 4, 3, 1]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_66",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0, 0, 0, 0, 0, 0], prices1: List[int]=[0, 0, 0, 0, 0, 0, 0, 0, 0], heights0: List[int]=[10, 11, 8, 12, 8, 9, 15, 6, 9], heights1: List[int]=[4, 8, 7, 6, 5, 1, 7, 10, 7]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0, 0, 0, 0, 0], heights0=[10, 11, 8, 12, 8, 9, 15, 6, 9], heights1=[4, 8, 7, 6, 5, 1, 7, 10, 7]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_67",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 1, 0, 0, 1, 0, 0, 0, 0], prices1: List[int]=[1, 0, 0, 1, 1, 0, 0, 0, 0, 1], heights0: List[int]=[4, 6, 10, 11, 11, 12, 10, 11, 10, 5], heights1: List[int]=[8, 2, 8, 5, 7, 1, 7, 5, 5, 7]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 1, 0, 0, 1, 0, 0, 0, 0], prices1=[1, 0, 0, 1, 1, 0, 0, 0, 0, 1], heights0=[4, 6, 10, 11, 11, 12, 10, 11, 10, 5], heights1=[8, 2, 8, 5, 7, 1, 7, 5, 5, 7]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_68",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0, 0, 0, 0], prices1: List[int]=[0, 0, 0, 0, 0, 0, 0], heights0: List[int]=[15, 7, 11, 10, 12, 10, 11], heights1: List[int]=[9, 6, 8, 4, 7, 10, 10]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0, 0, 0], heights0=[15, 7, 11, 10, 12, 10, 11], heights1=[9, 6, 8, 4, 7, 10, 10]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_69",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], prices1: List[int]=[0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0], heights0: List[int]=[6, 2, 9, 12, 5, 2, 7, 7, 13, 6, 10, 9, 6, 3, 7, 4], heights1: List[int]=[1, 5, 8, 4, 2, 1, 1, 6, 7, 2, 5, 3, 6, 3, 1, 5]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], prices1=[0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0], heights0=[6, 2, 9, 12, 5, 2, 7, 7, 13, 6, 10, 9, 6, 3, 7, 4], heights1=[1, 5, 8, 4, 2, 1, 1, 6, 7, 2, 5, 3, 6, 3, 1, 5]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_70",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[2, 3, 1, 1, 3, 2, 1, 4, 2, 1, 2, 1, 0, 2, 2, 1, 1, 2, 0, 2, 1, 1, 1, 0, 4, 2, 2, 0, 1, 2, 4, 2, 1, 4, 3, 0, 1, 4, 2, 4, 0, 2, 2, 1], prices1: List[int]=[3, 2, 0, 4, 1, 1, 1, 3, 2, 3, 1, 4, 3, 3, 2, 2, 4, 4, 0, 3, 4, 3, 1, 1, 4, 2, 2, 2, 1, 4, 2, 1, 2, 2, 4, 3, 1, 0, 2, 4, 4, 0, 1, 2], heights0: List[int]=[9, 11, 5, 10, 14, 3, 11, 4, 5, 7, 11, 13, 10, 12, 15, 3, 8, 6, 9, 10, 4, 13, 7, 10, 11, 15, 10, 8, 8, 14, 6, 7, 4, 9, 11, 8, 9, 11, 6, 12, 4, 12, 13, 11], heights1: List[int]=[10, 4, 5, 5, 1, 9, 4, 3, 9, 4, 6, 7, 1, 9, 5, 8, 8, 10, 5, 9, 2, 7, 6, 8, 8, 6, 10, 7, 2, 7, 3, 7, 1, 10, 3, 10, 2, 5, 5, 9, 6, 5, 2, 2]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[2, 3, 1, 1, 3, 2, 1, 4, 2, 1, 2, 1, 0, 2, 2, 1, 1, 2, 0, 2, 1, 1, 1, 0, 4, 2, 2, 0, 1, 2, 4, 2, 1, 4, 3, 0, 1, 4, 2, 4, 0, 2, 2, 1], prices1=[3, 2, 0, 4, 1, 1, 1, 3, 2, 3, 1, 4, 3, 3, 2, 2, 4, 4, 0, 3, 4, 3, 1, 1, 4, 2, 2, 2, 1, 4, 2, 1, 2, 2, 4, 3, 1, 0, 2, 4, 4, 0, 1, 2], heights0=[9, 11, 5, 10, 14, 3, 11, 4, 5, 7, 11, 13, 10, 12, 15, 3, 8, 6, 9, 10, 4, 13, 7, 10, 11, 15, 10, 8, 8, 14, 6, 7, 4, 9, 11, 8, 9, 11, 6, 12, 4, 12, 13, 11], heights1=[10, 4, 5, 5, 1, 9, 4, 3, 9, 4, 6, 7, 1, 9, 5, 8, 8, 10, 5, 9, 2, 7, 6, 8, 8, 6, 10, 7, 2, 7, 3, 7, 1, 10, 3, 10, 2, 5, 5, 9, 6, 5, 2, 2]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_71",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 2, 2, 1, 3, 2, 0, 2, 3, 3, 3, 0, 3, 1, 2, 2, 3, 0, 3, 1, 1, 0, 3, 1, 2, 1, 0, 3, 3, 3], prices1: List[int]=[2, 2, 0, 3, 2, 2, 0, 0, 0, 3, 3, 0, 3, 2, 2, 2, 0, 3, 2, 0, 1, 1, 0, 2, 3, 2, 2, 2, 3, 1, 0], heights0: List[int]=[5, 6, 7, 9, 8, 7, 8, 9, 5, 7, 11, 9, 11, 10, 8, 9, 11, 8, 8, 9, 3, 4, 6, 6, 13, 12, 7, 6, 5, 10, 4], heights1: List[int]=[8, 8, 4, 6, 6, 9, 6, 1, 5, 7, 4, 8, 5, 4, 2, 2, 1, 2, 6, 3, 3, 5, 1, 7, 10, 7, 5, 3, 8, 5, 7]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 2, 2, 1, 3, 2, 0, 2, 3, 3, 3, 0, 3, 1, 2, 2, 3, 0, 3, 1, 1, 0, 3, 1, 2, 1, 0, 3, 3, 3], prices1=[2, 2, 0, 3, 2, 2, 0, 0, 0, 3, 3, 0, 3, 2, 2, 2, 0, 3, 2, 0, 1, 1, 0, 2, 3, 2, 2, 2, 3, 1, 0], heights0=[5, 6, 7, 9, 8, 7, 8, 9, 5, 7, 11, 9, 11, 10, 8, 9, 11, 8, 8, 9, 3, 4, 6, 6, 13, 12, 7, 6, 5, 10, 4], heights1=[8, 8, 4, 6, 6, 9, 6, 1, 5, 7, 4, 8, 5, 4, 2, 2, 1, 2, 6, 3, 3, 5, 1, 7, 10, 7, 5, 3, 8, 5, 7]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_72",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0], prices1: List[int]=[0, 0, 0], heights0: List[int]=[9, 12, 6], heights1: List[int]=[8, 6, 2]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0], prices1=[0, 0, 0], heights0=[9, 12, 6], heights1=[8, 6, 2]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_73",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0], prices1: List[int]=[0, 0, 0], heights0: List[int]=[15, 4, 10], heights1: List[int]=[3, 8, 10]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0], prices1=[0, 0, 0], heights0=[15, 4, 10], heights1=[3, 8, 10]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_74",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0], prices1: List[int]=[0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0], heights0: List[int]=[14, 14, 13, 11, 13, 8, 4, 15, 2, 7, 6, 13, 8, 11], heights1: List[int]=[8, 6, 3, 3, 10, 10, 1, 3, 1, 10, 10, 5, 7, 10]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0], prices1=[0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0], heights0=[14, 14, 13, 11, 13, 8, 4, 15, 2, 7, 6, 13, 8, 11], heights1=[8, 6, 3, 3, 10, 10, 1, 3, 1, 10, 10, 5, 7, 10]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_75",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0, 0, 0, 0, 0], prices1: List[int]=[0, 0, 0, 0, 0, 0, 0, 0], heights0: List[int]=[9, 6, 4, 8, 10, 8, 7, 14], heights1: List[int]=[5, 6, 5, 3, 5, 2, 3, 10]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0, 0, 0, 0], heights0=[9, 6, 4, 8, 10, 8, 7, 14], heights1=[5, 6, 5, 3, 5, 2, 3, 10]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_76",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 1, 1, 1, 0, 0, 0, 1, 0, 0], prices1: List[int]=[1, 1, 1, 0, 0, 0, 0, 1, 1, 0], heights0: List[int]=[10, 6, 3, 9, 3, 4, 6, 14, 6, 13], heights1: List[int]=[6, 10, 1, 1, 1, 1, 5, 1, 9, 10]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 1, 1, 1, 0, 0, 0, 1, 0, 0], prices1=[1, 1, 1, 0, 0, 0, 0, 1, 1, 0], heights0=[10, 6, 3, 9, 3, 4, 6, 14, 6, 13], heights1=[6, 10, 1, 1, 1, 1, 5, 1, 9, 10]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_77",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0, 0], prices1: List[int]=[0, 0, 0, 0, 0], heights0: List[int]=[12, 9, 12, 10, 8], heights1: List[int]=[10, 4, 6, 9, 8]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0], heights0=[12, 9, 12, 10, 8], heights1=[10, 4, 6, 9, 8]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_78",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0, 0, 0, 0, 0], prices1: List[int]=[0, 0, 0, 0, 0, 0, 0, 0], heights0: List[int]=[12, 8, 9, 10, 12, 6, 9, 9], heights1: List[int]=[5, 5, 6, 8, 8, 6, 6, 8]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0, 0, 0, 0], heights0=[12, 8, 9, 10, 12, 6, 9, 9], heights1=[5, 5, 6, 8, 8, 6, 6, 8]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_79",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1], prices1: List[int]=[0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1], heights0: List[int]=[7, 12, 5, 10, 5, 4, 11, 13, 9, 7, 7, 5, 7, 10, 14, 6], heights1: List[int]=[9, 3, 6, 6, 7, 10, 1, 4, 1, 6, 9, 3, 6, 5, 5, 7]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1], prices1=[0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1], heights0=[7, 12, 5, 10, 5, 4, 11, 13, 9, 7, 7, 5, 7, 10, 14, 6], heights1=[9, 3, 6, 6, 7, 10, 1, 4, 1, 6, 9, 3, 6, 5, 5, 7]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_80",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0], prices1: List[int]=[0, 0, 0], heights0: List[int]=[13, 8, 10], heights1: List[int]=[4, 8, 8]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0], prices1=[0, 0, 0], heights0=[13, 8, 10], heights1=[4, 8, 8]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_81",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0, 0], prices1: List[int]=[0, 0, 0, 0, 0], heights0: List[int]=[11, 7, 7, 9, 13], heights1: List[int]=[10, 3, 4, 7, 10]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0], heights0=[11, 7, 7, 9, 13], heights1=[10, 3, 4, 7, 10]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_82",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[2, 4, 1, 0, 1, 0, 0, 1, 4, 0, 4, 4, 1, 0, 4, 1, 1, 4, 2, 1, 4, 1, 3, 4, 2, 4, 0, 1, 2, 3, 4, 4, 2, 3, 0, 4, 0, 2, 3, 1, 1, 3, 3, 1, 2, 1, 0, 1], prices1: List[int]=[0, 0, 2, 3, 2, 4, 1, 4, 0, 3, 2, 1, 2, 0, 1, 4, 3, 2, 2, 4, 4, 2, 0, 4, 2, 4, 3, 1, 3, 2, 3, 3, 0, 2, 3, 4, 3, 2, 4, 3, 1, 3, 4, 3, 1, 0, 4, 4], heights0: List[int]=[10, 3, 9, 10, 15, 6, 15, 9, 10, 11, 5, 7, 5, 6, 10, 3, 9, 4, 12, 7, 14, 6, 3, 8, 10, 15, 4, 9, 12, 14, 7, 6, 8, 15, 12, 7, 5, 11, 12, 3, 7, 5, 2, 15, 6, 11, 6, 10], heights1: List[int]=[4, 5, 5, 4, 9, 4, 9, 2, 4, 3, 3, 2, 1, 2, 10, 2, 2, 5, 6, 2, 1, 2, 10, 2, 10, 9, 6, 5, 10, 6, 5, 1, 10, 2, 10, 9, 10, 7, 4, 9, 1, 10, 10, 7, 8, 9, 8, 3]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[2, 4, 1, 0, 1, 0, 0, 1, 4, 0, 4, 4, 1, 0, 4, 1, 1, 4, 2, 1, 4, 1, 3, 4, 2, 4, 0, 1, 2, 3, 4, 4, 2, 3, 0, 4, 0, 2, 3, 1, 1, 3, 3, 1, 2, 1, 0, 1], prices1=[0, 0, 2, 3, 2, 4, 1, 4, 0, 3, 2, 1, 2, 0, 1, 4, 3, 2, 2, 4, 4, 2, 0, 4, 2, 4, 3, 1, 3, 2, 3, 3, 0, 2, 3, 4, 3, 2, 4, 3, 1, 3, 4, 3, 1, 0, 4, 4], heights0=[10, 3, 9, 10, 15, 6, 15, 9, 10, 11, 5, 7, 5, 6, 10, 3, 9, 4, 12, 7, 14, 6, 3, 8, 10, 15, 4, 9, 12, 14, 7, 6, 8, 15, 12, 7, 5, 11, 12, 3, 7, 5, 2, 15, 6, 11, 6, 10], heights1=[4, 5, 5, 4, 9, 4, 9, 2, 4, 3, 3, 2, 1, 2, 10, 2, 2, 5, 6, 2, 1, 2, 10, 2, 10, 9, 6, 5, 10, 6, 5, 1, 10, 2, 10, 9, 10, 7, 4, 9, 1, 10, 10, 7, 8, 9, 8, 3]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_83",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], prices1: List[int]=[1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], heights0: List[int]=[9, 13, 5, 13, 13, 7, 12, 13, 11, 7, 4, 12, 10, 11], heights1: List[int]=[9, 10, 7, 9, 8, 3, 3, 5, 3, 9, 8, 4, 9, 8]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], prices1=[1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], heights0=[9, 13, 5, 13, 13, 7, 12, 13, 11, 7, 4, 12, 10, 11], heights1=[9, 10, 7, 9, 8, 3, 3, 5, 3, 9, 8, 4, 9, 8]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_84",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[5, 0, 3, 4, 4, 6, 4, 0, 0, 3, 6, 4, 1, 6, 0, 3, 3, 2, 3, 0, 1, 0, 3, 6, 4, 3, 0, 1, 2, 3, 6, 6, 5, 4, 1, 0, 1, 4, 0, 0, 2, 3, 6, 2, 5, 6, 1, 3, 4, 1, 4, 2, 6, 5, 5, 1, 5, 0, 4, 4, 1, 6, 6, 2, 0], prices1: List[int]=[5, 4, 5, 5, 1, 1, 0, 2, 0, 4, 6, 3, 6, 6, 0, 1, 2, 6, 0, 3, 6, 0, 6, 4, 1, 4, 2, 4, 4, 4, 3, 4, 3, 2, 1, 2, 6, 2, 2, 3, 6, 6, 0, 0, 4, 1, 5, 2, 3, 4, 1, 4, 4, 3, 5, 0, 5, 4, 5, 0, 3, 1, 2, 1, 0], heights0: List[int]=[4, 5, 5, 5, 11, 7, 12, 3, 14, 10, 8, 6, 11, 8, 5, 3, 14, 2, 11, 6, 6, 4, 10, 6, 5, 8, 10, 11, 9, 12, 10, 9, 5, 10, 6, 6, 4, 10, 4, 4, 13, 13, 5, 12, 11, 12, 9, 13, 8, 3, 13, 5, 10, 4, 7, 6, 9, 4, 7, 13, 5, 11, 5, 7, 10], heights1: List[int]=[7, 5, 2, 2, 2, 9, 2, 4, 3, 3, 6, 9, 7, 7, 4, 4, 6, 2, 3, 5, 8, 2, 8, 4, 2, 8, 5, 2, 2, 1, 3, 4, 6, 7, 3, 8, 6, 10, 1, 9, 4, 5, 1, 5, 8, 9, 2, 8, 9, 6, 8, 5, 10, 5, 6, 1, 8, 9, 1, 6, 9, 4, 6, 3, 4]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[5, 0, 3, 4, 4, 6, 4, 0, 0, 3, 6, 4, 1, 6, 0, 3, 3, 2, 3, 0, 1, 0, 3, 6, 4, 3, 0, 1, 2, 3, 6, 6, 5, 4, 1, 0, 1, 4, 0, 0, 2, 3, 6, 2, 5, 6, 1, 3, 4, 1, 4, 2, 6, 5, 5, 1, 5, 0, 4, 4, 1, 6, 6, 2, 0], prices1=[5, 4, 5, 5, 1, 1, 0, 2, 0, 4, 6, 3, 6, 6, 0, 1, 2, 6, 0, 3, 6, 0, 6, 4, 1, 4, 2, 4, 4, 4, 3, 4, 3, 2, 1, 2, 6, 2, 2, 3, 6, 6, 0, 0, 4, 1, 5, 2, 3, 4, 1, 4, 4, 3, 5, 0, 5, 4, 5, 0, 3, 1, 2, 1, 0], heights0=[4, 5, 5, 5, 11, 7, 12, 3, 14, 10, 8, 6, 11, 8, 5, 3, 14, 2, 11, 6, 6, 4, 10, 6, 5, 8, 10, 11, 9, 12, 10, 9, 5, 10, 6, 6, 4, 10, 4, 4, 13, 13, 5, 12, 11, 12, 9, 13, 8, 3, 13, 5, 10, 4, 7, 6, 9, 4, 7, 13, 5, 11, 5, 7, 10], heights1=[7, 5, 2, 2, 2, 9, 2, 4, 3, 3, 6, 9, 7, 7, 4, 4, 6, 2, 3, 5, 8, 2, 8, 4, 2, 8, 5, 2, 2, 1, 3, 4, 6, 7, 3, 8, 6, 10, 1, 9, 4, 5, 1, 5, 8, 9, 2, 8, 9, 6, 8, 5, 10, 5, 6, 1, 8, 9, 1, 6, 9, 4, 6, 3, 4]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_85",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1], prices1: List[int]=[0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1], heights0: List[int]=[9, 10, 5, 5, 13, 11, 14, 4, 6, 5, 7, 5, 10, 7, 3], heights1: List[int]=[6, 1, 9, 9, 4, 3, 5, 5, 10, 2, 1, 2, 1, 3, 10]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1], prices1=[0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1], heights0=[9, 10, 5, 5, 13, 11, 14, 4, 6, 5, 7, 5, 10, 7, 3], heights1=[6, 1, 9, 9, 4, 3, 5, 5, 10, 2, 1, 2, 1, 3, 10]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_86",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0, 0], prices1: List[int]=[0, 0, 0, 0, 0], heights0: List[int]=[12, 8, 7, 7, 10], heights1: List[int]=[3, 8, 7, 5, 7]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0], heights0=[12, 8, 7, 7, 10], heights1=[3, 8, 7, 5, 7]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_87",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], prices1: List[int]=[0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], heights0: List[int]=[9, 12, 8, 6, 3, 10, 8, 5, 8, 10, 5, 6, 12, 10, 7, 12, 5, 10, 13], heights1: List[int]=[8, 8, 5, 2, 7, 10, 4, 9, 5, 5, 2, 7, 4, 4, 7, 10, 7, 6, 5]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], prices1=[0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], heights0=[9, 12, 8, 6, 3, 10, 8, 5, 8, 10, 5, 6, 12, 10, 7, 12, 5, 10, 13], heights1=[8, 8, 5, 2, 7, 10, 4, 9, 5, 5, 2, 7, 4, 4, 7, 10, 7, 6, 5]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_88",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], prices1: List[int]=[0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], heights0: List[int]=[12, 13, 12, 12, 12, 8, 9, 12, 10, 14, 6, 5, 6, 8], heights1: List[int]=[8, 6, 10, 1, 3, 5, 3, 9, 9, 7, 7, 9, 9, 5]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], prices1=[0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], heights0=[12, 13, 12, 12, 12, 8, 9, 12, 10, 14, 6, 5, 6, 8], heights1=[8, 6, 10, 1, 3, 5, 3, 9, 9, 7, 7, 9, 9, 5]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_89",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0, 0, 0, 0, 0], prices1: List[int]=[0, 0, 0, 0, 0, 0, 0, 0], heights0: List[int]=[13, 2, 12, 12, 4, 10, 7, 5], heights1: List[int]=[5, 4, 10, 1, 7, 8, 5, 1]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0, 0, 0, 0], heights0=[13, 2, 12, 12, 4, 10, 7, 5], heights1=[5, 4, 10, 1, 7, 8, 5, 1]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_90",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0, 0, 0], prices1: List[int]=[0, 0, 0, 0, 0, 0], heights0: List[int]=[10, 13, 8, 14, 4, 12], heights1: List[int]=[6, 2, 8, 8, 7, 9]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0, 0], heights0=[10, 13, 8, 14, 4, 12], heights1=[6, 2, 8, 8, 7, 9]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_91",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0, 0, 0, 0, 0], prices1: List[int]=[0, 0, 0, 0, 0, 0, 0, 0], heights0: List[int]=[8, 5, 8, 11, 12, 11, 13, 9], heights1: List[int]=[10, 9, 7, 4, 4, 7, 9, 6]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0, 0, 0, 0], heights0=[8, 5, 8, 11, 12, 11, 13, 9], heights1=[10, 9, 7, 4, 4, 7, 9, 6]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_92",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[5, 4, 3, 1, 3, 3, 4, 1, 4, 0, 0, 2, 6, 4, 0, 3, 3, 4, 6, 1, 1, 2, 3, 2, 4, 5, 3, 3, 4, 4, 2, 5, 2, 0, 4, 6, 3, 4, 1, 6, 2, 1, 0, 0, 2, 2, 1, 2, 2, 5, 4, 4, 3, 2, 5, 6, 0, 2, 1, 0, 0, 2, 1, 6, 3, 2, 4, 6], prices1: List[int]=[6, 2, 5, 5, 1, 6, 3, 3, 3, 1, 0, 0, 4, 5, 6, 1, 5, 1, 6, 0, 0, 2, 2, 3, 0, 4, 6, 1, 5, 2, 2, 6, 5, 0, 1, 0, 3, 0, 5, 5, 5, 1, 5, 4, 2, 3, 0, 6, 1, 3, 5, 6, 2, 3, 5, 1, 4, 5, 2, 5, 2, 6, 5, 3, 1, 1, 6, 1], heights0: List[int]=[3, 4, 11, 4, 4, 7, 9, 12, 8, 6, 11, 14, 9, 11, 6, 14, 2, 8, 4, 8, 6, 3, 13, 10, 9, 11, 14, 8, 12, 9, 7, 3, 11, 13, 9, 10, 13, 6, 9, 3, 4, 2, 6, 11, 14, 9, 4, 5, 10, 11, 14, 8, 11, 6, 5, 9, 10, 5, 7, 7, 5, 11, 8, 10, 5, 4, 14, 6], heights1: List[int]=[1, 6, 10, 9, 7, 4, 2, 9, 2, 3, 8, 5, 6, 7, 2, 1, 6, 4, 7, 2, 6, 9, 3, 1, 8, 8, 7, 5, 4, 5, 10, 8, 10, 5, 1, 10, 9, 2, 5, 1, 10, 2, 1, 5, 5, 9, 8, 7, 2, 2, 4, 4, 8, 3, 3, 1, 1, 4, 1, 7, 9, 2, 3, 10, 6, 1, 5, 7]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[5, 4, 3, 1, 3, 3, 4, 1, 4, 0, 0, 2, 6, 4, 0, 3, 3, 4, 6, 1, 1, 2, 3, 2, 4, 5, 3, 3, 4, 4, 2, 5, 2, 0, 4, 6, 3, 4, 1, 6, 2, 1, 0, 0, 2, 2, 1, 2, 2, 5, 4, 4, 3, 2, 5, 6, 0, 2, 1, 0, 0, 2, 1, 6, 3, 2, 4, 6], prices1=[6, 2, 5, 5, 1, 6, 3, 3, 3, 1, 0, 0, 4, 5, 6, 1, 5, 1, 6, 0, 0, 2, 2, 3, 0, 4, 6, 1, 5, 2, 2, 6, 5, 0, 1, 0, 3, 0, 5, 5, 5, 1, 5, 4, 2, 3, 0, 6, 1, 3, 5, 6, 2, 3, 5, 1, 4, 5, 2, 5, 2, 6, 5, 3, 1, 1, 6, 1], heights0=[3, 4, 11, 4, 4, 7, 9, 12, 8, 6, 11, 14, 9, 11, 6, 14, 2, 8, 4, 8, 6, 3, 13, 10, 9, 11, 14, 8, 12, 9, 7, 3, 11, 13, 9, 10, 13, 6, 9, 3, 4, 2, 6, 11, 14, 9, 4, 5, 10, 11, 14, 8, 11, 6, 5, 9, 10, 5, 7, 7, 5, 11, 8, 10, 5, 4, 14, 6], heights1=[1, 6, 10, 9, 7, 4, 2, 9, 2, 3, 8, 5, 6, 7, 2, 1, 6, 4, 7, 2, 6, 9, 3, 1, 8, 8, 7, 5, 4, 5, 10, 8, 10, 5, 1, 10, 9, 2, 5, 1, 10, 2, 1, 5, 5, 9, 8, 7, 2, 2, 4, 4, 8, 3, 3, 1, 1, 4, 1, 7, 9, 2, 3, 10, 6, 1, 5, 7]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_93",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0, 0, 0, 0, 0], prices1: List[int]=[0, 0, 0, 0, 0, 0, 0, 0], heights0: List[int]=[5, 6, 8, 10, 14, 9, 14, 15], heights1: List[int]=[3, 10, 5, 10, 7, 10, 4, 4]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0, 0, 0, 0], heights0=[5, 6, 8, 10, 14, 9, 14, 15], heights1=[3, 10, 5, 10, 7, 10, 4, 4]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_94",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 1, 1, 1, 1, 1, 1, 1], prices1: List[int]=[0, 0, 0, 1, 0, 0, 1, 1, 1, 0], heights0: List[int]=[9, 7, 5, 11, 9, 14, 9, 6, 14, 6], heights1: List[int]=[10, 4, 6, 10, 3, 4, 4, 7, 4, 3]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 1, 1, 1, 1, 1, 1, 1], prices1=[0, 0, 0, 1, 0, 0, 1, 1, 1, 0], heights0=[9, 7, 5, 11, 9, 14, 9, 6, 14, 6], heights1=[10, 4, 6, 10, 3, 4, 4, 7, 4, 3]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_95",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[1, 1, 1, 0, 0, 0, 0, 0, 1, 1], prices1: List[int]=[1, 0, 0, 1, 0, 0, 0, 1, 0, 1], heights0: List[int]=[7, 9, 13, 9, 9, 15, 7, 12, 13, 6], heights1: List[int]=[8, 8, 10, 4, 6, 2, 5, 10, 8, 3]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[1, 1, 1, 0, 0, 0, 0, 0, 1, 1], prices1=[1, 0, 0, 1, 0, 0, 0, 1, 0, 1], heights0=[7, 9, 13, 9, 9, 15, 7, 12, 13, 6], heights1=[8, 8, 10, 4, 6, 2, 5, 10, 8, 3]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_96",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0], prices1: List[int]=[0, 0, 0], heights0: List[int]=[13, 5, 9], heights1: List[int]=[8, 1, 10]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0], prices1=[0, 0, 0], heights0=[13, 5, 9], heights1=[8, 1, 10]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_97",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0, 0, 0, 0, 0, 0], prices1: List[int]=[0, 0, 0, 0, 0, 0, 0, 0, 0], heights0: List[int]=[7, 6, 11, 9, 14, 7, 9, 8, 10], heights1: List[int]=[5, 6, 7, 4, 2, 9, 3, 8, 10]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0, 0, 0, 0, 0], heights0=[7, 6, 11, 9, 14, 7, 9, 8, 10], heights1=[5, 6, 7, 4, 2, 9, 3, 8, 10]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_98",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[3, 5, 3, 3, 1, 1, 1, 3, 2, 2, 2, 4, 2, 1, 3, 3, 5, 5, 4, 0, 0, 5, 0, 5, 1, 0, 5, 3, 1, 3, 3, 3, 2, 5, 5, 5, 3, 3, 5, 4, 3, 2, 2, 3, 3, 1, 0, 5, 0, 5, 5, 3, 0, 3], prices1: List[int]=[3, 0, 5, 3, 2, 5, 3, 3, 0, 0, 4, 0, 3, 4, 4, 3, 0, 0, 3, 3, 1, 1, 2, 0, 3, 2, 3, 5, 4, 0, 5, 4, 0, 0, 4, 2, 4, 0, 1, 3, 3, 5, 5, 2, 1, 4, 3, 4, 0, 5, 2, 4, 1, 3], heights0: List[int]=[12, 8, 3, 10, 14, 9, 9, 14, 4, 13, 10, 13, 13, 4, 10, 9, 14, 2, 7, 8, 15, 11, 5, 15, 9, 4, 4, 13, 9, 4, 11, 6, 11, 8, 9, 3, 6, 8, 7, 9, 3, 9, 14, 12, 2, 10, 11, 15, 14, 7, 10, 7, 10, 11], heights1: List[int]=[8, 6, 3, 1, 6, 10, 1, 5, 9, 5, 9, 1, 1, 1, 9, 2, 6, 8, 10, 9, 9, 7, 4, 9, 2, 8, 6, 5, 3, 6, 2, 10, 10, 4, 8, 8, 8, 2, 1, 9, 8, 4, 10, 9, 10, 1, 3, 3, 1, 9, 5, 7, 9, 7]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[3, 5, 3, 3, 1, 1, 1, 3, 2, 2, 2, 4, 2, 1, 3, 3, 5, 5, 4, 0, 0, 5, 0, 5, 1, 0, 5, 3, 1, 3, 3, 3, 2, 5, 5, 5, 3, 3, 5, 4, 3, 2, 2, 3, 3, 1, 0, 5, 0, 5, 5, 3, 0, 3], prices1=[3, 0, 5, 3, 2, 5, 3, 3, 0, 0, 4, 0, 3, 4, 4, 3, 0, 0, 3, 3, 1, 1, 2, 0, 3, 2, 3, 5, 4, 0, 5, 4, 0, 0, 4, 2, 4, 0, 1, 3, 3, 5, 5, 2, 1, 4, 3, 4, 0, 5, 2, 4, 1, 3], heights0=[12, 8, 3, 10, 14, 9, 9, 14, 4, 13, 10, 13, 13, 4, 10, 9, 14, 2, 7, 8, 15, 11, 5, 15, 9, 4, 4, 13, 9, 4, 11, 6, 11, 8, 9, 3, 6, 8, 7, 9, 3, 9, 14, 12, 2, 10, 11, 15, 14, 7, 10, 7, 10, 11], heights1=[8, 6, 3, 1, 6, 10, 1, 5, 9, 5, 9, 1, 1, 1, 9, 2, 6, 8, 10, 9, 9, 7, 4, 9, 2, 8, 6, 5, 3, 6, 2, 10, 10, 4, 8, 8, 8, 2, 1, 9, 8, 4, 10, 9, 10, 1, 3, 3, 1, 9, 5, 7, 9, 7]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "BiPermutations_99",
    "sat": "def sat(perms: List[List[int]], prices0: List[int]=[0, 0, 0, 0, 0], prices1: List[int]=[0, 0, 0, 0, 0], heights0: List[int]=[14, 8, 11, 9, 5], heights1: List[int]=[3, 10, 2, 10, 5]):\n    assert type(perms) is list and all(type(a) is list and all(type(b) is int for b in a) for a in perms), 'perms must be of type List[List[int]]'\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "sols": [
      "def sol(prices0=[0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0], heights0=[14, 8, 11, 9, 5], heights1=[3, 10, 2, 10, 5]):\n    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ]
  },
  {
    "name": "OptimalBridges_0",
    "sat": "def sat(indices: List[int], H: int=60, alpha: int=18, beta: int=2, xs: List[int]=[0, 10, 20, 30, 50, 80, 100, 120, 160, 190, 200], ys: List[int]=[0, 30, 10, 30, 50, 40, 10, 20, 20, 55, 10], thresh: int=26020):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=60, alpha=18, beta=2, xs=[0, 10, 20, 30, 50, 80, 100, 120, 160, 190, 200], ys=[0, 30, 10, 30, 50, 40, 10, 20, 20, 55, 10], thresh=26020):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_1",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=17, beta: int=10, xs: List[int]=[0, 22015, 29866, 59671, 90203, 96269, 99142, 99156, 99930, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 100000], ys: List[int]=[33491, 76730, 87624, 16309, 15771, 14755, 56472, 36078, 46965, 58822, 73891, 10576, 14042, 38765, 46421, 845, 68674, 19421, 24872, 3471, 69326, 18910, 63303, 36954, 880, 57549, 79255, 6772, 50678, 42973, 52083, 3129, 41121, 17191], thresh: int=28814018512):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=17, beta=10, xs=[0, 22015, 29866, 59671, 90203, 96269, 99142, 99156, 99930, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 100000], ys=[33491, 76730, 87624, 16309, 15771, 14755, 56472, 36078, 46965, 58822, 73891, 10576, 14042, 38765, 46421, 845, 68674, 19421, 24872, 3471, 69326, 18910, 63303, 36954, 880, 57549, 79255, 6772, 50678, 42973, 52083, 3129, 41121, 17191], thresh=28814018512):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_2",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=12, beta: int=16, xs: List[int]=[0, 13124, 16329, 23159, 29817, 38480, 39549, 39669, 39675, 39700, 39704, 39704, 39707, 39714, 60959, 78349, 78499, 91770, 100000], ys: List[int]=[9595, 83187, 85178, 39821, 44861, 69305, 67124, 88630, 4724, 72544, 51143, 56719, 91090, 75888, 39382, 21025, 82006, 46074, 87534], thresh: int=21564052456):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=12, beta=16, xs=[0, 13124, 16329, 23159, 29817, 38480, 39549, 39669, 39675, 39700, 39704, 39704, 39707, 39714, 60959, 78349, 78499, 91770, 100000], ys=[9595, 83187, 85178, 39821, 44861, 69305, 67124, 88630, 4724, 72544, 51143, 56719, 91090, 75888, 39382, 21025, 82006, 46074, 87534], thresh=21564052456):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_3",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=8, beta: int=6, xs: List[int]=[0, 83065, 87461, 100000], ys: List[int]=[6813, 7122, 73004, 27003], thresh: int=42460361836):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=8, beta=6, xs=[0, 83065, 87461, 100000], ys=[6813, 7122, 73004, 27003], thresh=42460361836):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_4",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=282, beta: int=679, xs: List[intys: List[int]=[90665, 11652, 73991, 36682, 90951, 7357, 15607, 44499, 57160, 90505, 17599, 30131, 56902, 35905, 59613, 90461, 3009, 13529, 78638, 16238, 12788, 93401, 47335, 53272, 90841, 43885, 45643, 48851, 24135, 71158, 97535, 23180, 24633, 59335, 5261, 70063, 67776, 75777, 47836, 11777, 14840, 76266, 88882, 99887, 33562, 34263, 11289, 33830, 17131, 45088, 23627, 54317, 38932, 18833, 29471, 60985, 21226, 62417, 76897, 1980, 70219, 29302, 57060, 18564, 32826, 87038, 42878, 82509, 57671, 59480, 84323, 67372, 31063, 17666, 32370, 72322, 43951, 2516, 62557, 46154, 4526, 5076, 24776, 99519, 65317, 98123, 63347, 4323, 46613, 68990, 49643, 97555, 7601, 94410, 8449, 46374, 60429, 42118, 22729, 242, 6893, 17235, 55226, 5395, 43149, 92747, 41190, 59849, 70247, 48794, 21576, 71018, 77073, 10342, 34896, 20398, 92233, 86485, 50972, 982, 31103, 94626, 17968, 77470, 38753, 35881, 28544, 68706, 26592, 74045, 47686, 13293, 67398, 17897, 85094, 69176, 11130, 73407, 48596, 44226, 96942, 70308, 20837, 23754, 67207, 98425, 30798, 43768, 13504, 71911, 52053, 70260, 65059, 20212, 23437, 22095, 91151, 66754, 35204, 76154, 23302, 3486, 23983, 75286, 35595, 61640, 91022, 16161, 96761, 31978, 13418, 96887, 54765, 38926, 76220, 79233, 44348, 70006, 77796, 73327, 9154, 42504, 72794, 72156, 61224, 81831, 40160, 83758, 10205, 90030, 74509, 70702, 35440, 18493, 51678, 15974, 4090, 78463, 40183, 18900, 75855, 58956, 41284, 486, 91159, 52536, 34856, 92659, 90529, 38624, 71193, 97993, 60528, 83497, 80042, 53884, 84492, 55594, 40475, 91425, 84338, 33471, 61707, 71465, 95732, 39111, 95245, 61330, 82188, 44718, 53072, 12662, 48772, 6138, 18611, 44080, 32084, 77794, 81216, 18822, 49715, 16004, 17298, 51742, 3323, 97520, 47329, 37787, 37305, 83626, 96502, 46033, 67348, 12747, 94926, 28046, 673, 96937, 51722, 37726, 91489, 8212, 26601, 8841, 64563, 81846, 61559, 43715, 70625, 73272, 60720, 20789, 80547, 3164, 31186, 23233, 44081, 18678, 36472, 81019, 83067, 15423, 86040, 38320, 38865, 73306, 72021, 21979, 17310, 66670, 57334, 19502, 45354, 75991, 43747, 77623, 61170, 54814, 23985, 77557, 54118, 2404, 57715, 20656, 34132, 70399, 71388, 39898, 39621, 9756, 69850, 78465, 16568, 45494, 72745, 96751, 53729, 1400, 21339, 34270, 46202, 5456, 21691, 30634, 90487, 62472, 54354, 1690, 96181, 62502, 36571, 87235, 9325, 51543, 8161, 50564, 70162, 16477, 91258, 4346, 40718, 27396, 8198, 50604, 93072, 92494, 81687, 18261, 38335, 55813, 50217, 75459, 25936, 82041, 73177, 44105, 24131, 52387, 73822, 69955, 67628, 54756, 22668, 12199, 56845, 93398, 82238, 76491, 81923, 12282, 13424, 6422, 64271, 96607, 16670, 87608, 20645, 13668, 65147, 67690, 44694, 93206, 97012, 2566, 1960, 13009, 43879, 16341, 7873, 68489, 79497, 16601, 98809, 15396, 29862, 55081, 86737, 60914, 37943, 50640, 49575, 14943, 91683, 69030, 76670, 98521, 73693, 75685, 41778, 18012, 21941, 69612, 6805, 17812, 68937, 16488, 99331, 20217, 66508, 22467, 87491, 22114, 29561, 97502, 29968, 48550, 64987, 39512, 92263, 94133, 19285, 81680, 57837, 33239, 45856, 16763, 11955, 59465, 91058, 34158, 34585, 28909, 20440, 94635, 3401, 59563, 85084, 92840, 86098, 61755, 70583, 32240, 18951, 94470, 80418, 36075, 54867, 88046, 16826, 89438, 8176, 17528, 92199, 21392, 443, 2672, 8650, 46401, 30951, 45875, 72953, 1715, 64687, 13980, 71897, 42966, 92244, 27204, 89306, 3579, 17169, 47915, 82067, 22296, 98268, 30848, 10898, 63345, 72447, 57028, 53258, 50788, 31853, 94484, 56021, 54481, 80197, 66841, 98065, 977, 67431, 27784, 20654, 66442, 55776, 22934, 47337, 87725, 61700, 25707, 59774, 76280, 63958, 97878, 79907, 29561, 95225, 17911, 55831, 18306, 86728, 25390, 18796, 96365, 42201, 59541, 1012, 5707, 39151, 93426, 83182, 53534, 50358, 15457, 19237, 61610, 23030, 99158, 81812, 83185, 59929, 49884, 30930, 74140, 19418, 87180, 54996, 7823, 11765, 41235, 92514, 67652, 5980, 18009, 5739, 72600, 6765, 98082, 32059, 46702, 67215, 11195, 49908, 65131, 36626, 21842, 5568, 69614, 66923, 58198, 11268, 89527, 54111, 92611, 26442, 87140, 34138, 25710, 44859, 91152, 44656, 66168, 27504, 12060, 69153, 78664, 93579, 63820, 68517, 90966, 80054, 29680, 51551, 99160, 42052, 87635, 86402, 83053, 71226, 7498, 15528, 86621, 52778, 35763, 41083, 33571, 85949, 81440, 52706, 96487, 14368, 21153, 78440, 99279, 37290, 58414, 7733, 67064, 40693, 55049, 83068, 67060, 73351, 48440, 12545, 77847, 22928, 92372, 17852, 76175, 2261, 90984, 2386, 28061, 2466, 10815, 82902, 13436, 27090, 24413, 11453, 88622, 36106, 71033, 19987, 10058, 81702, 86182, 82677, 1949, 46388, 65283, 37592, 8910, 78027, 71206, 73791, 78024, 49330, 29349, 90749, 94088, 43376, 91714, 84280, 88800, 70295, 27690, 77772, 39233, 39686, 21989, 7239, 62958, 448, 4987, 19492, 97448, 49254, 47357, 22079, 71646, 59778, 61338, 69344, 33343, 61685, 67533, 77541, 73120, 43658, 69695, 28705, 63395, 95750, 4933, 7387, 78389, 46668, 43308, 88057, 25297, 16778, 385, 6379, 15989, 76240, 32774, 46848, 55135, 30130, 74953, 7062, 9776, 12947, 84890, 58551, 84713, 55559, 46177, 72148, 33590, 64527, 63674, 70289, 3668, 82780, 24656, 34677, 29433, 29191, 3752, 72736, 46791, 53602, 85491, 12774, 2623, 62577, 33980, 21728, 8576, 41856, 41430, 70033, 40830, 30420, 76951, 80088, 72487, 18176, 53552, 76715, 62839, 64225, 70408, 76405, 16586, 65989, 76230, 99845, 8532, 56471, 32198, 65228, 63094, 9649, 95120, 75795, 17461, 78531, 68082, 36833, 39858, 61441, 21617, 13919, 24059, 96847, 66725, 94378, 26440, 62131, 2581, 70236, 27825, 94064, 48100, 68367, 78970, 35875, 16241, 10852, 51352, 33253, 81920, 73526, 12906, 90758, 65434, 79829, 2816, 1543, 55415, 61422, 10110, 57838, 67021, 7303, 89304, 77475, 17572, 78036, 15983, 87144, 84320, 69240, 16465, 33167, 57202, 75830, 89650, 14849, 33400, 90592, 76509, 43300, 44069, 70763, 46894, 73752, 82725, 12010, 56170, 94434, 59585, 35295, 19680, 96520, 63953, 92580, 732, 8315, 27559, 94999, 33893, 24807, 5185, 41110, 23907, 12208, 5513, 64303, 89810, 17759, 93988, 95516, 26181, 57579, 73739, 50207, 94508, 8122, 9302, 21009, 16607, 7743, 4336, 35751, 21949, 76444, 8273, 24709, 6826, 41723, 79911, 61826, 52818, 97031, 12979, 91143, 76372, 5159, 49247, 2944, 1145, 70067, 96809, 74108, 74320, 93911, 10690, 19467, 98148, 1919, 24568, 79070, 32405, 24295, 89499, 53796, 44731, 26063, 23890, 28906, 21707, 54530, 47072, 3306, 36948, 83203, 98596, 55753, 7548, 20507, 530, 73367, 86426, 21928, 49265, 89407, 87557, 76443, 25835, 33597, 1399, 75245, 56811, 88191, 59896, 95597, 14305, 21214, 85655, 54863, 16092, 11372, 72510, 3262, 99512, 6181, 57865, 68150, 58404, 18191, 45992, 46190, 35726, 84700, 25129, 78496, 45170, 65484, 28, 90039, 27355, 41114, 68718, 93186, 21509, 53198, 89217, 89472, 14585, 72767, 48710, 44896, 6264, 86928, 64314, 19393, 79991, 16206, 86134, 92689, 9097, 58746, 9766, 35510, 8958, 4188, 5065, 50586, 19128, 55372, 4017, 6328, 11413, 58150, 82629, 18568, 81340, 31689, 48129, 70911, 37705, 4328, 12238, 35137], thresh: int=41843200282):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=282, beta=679, xsys=[90665, 11652, 73991, 36682, 90951, 7357, 15607, 44499, 57160, 90505, 17599, 30131, 56902, 35905, 59613, 90461, 3009, 13529, 78638, 16238, 12788, 93401, 47335, 53272, 90841, 43885, 45643, 48851, 24135, 71158, 97535, 23180, 24633, 59335, 5261, 70063, 67776, 75777, 47836, 11777, 14840, 76266, 88882, 99887, 33562, 34263, 11289, 33830, 17131, 45088, 23627, 54317, 38932, 18833, 29471, 60985, 21226, 62417, 76897, 1980, 70219, 29302, 57060, 18564, 32826, 87038, 42878, 82509, 57671, 59480, 84323, 67372, 31063, 17666, 32370, 72322, 43951, 2516, 62557, 46154, 4526, 5076, 24776, 99519, 65317, 98123, 63347, 4323, 46613, 68990, 49643, 97555, 7601, 94410, 8449, 46374, 60429, 42118, 22729, 242, 6893, 17235, 55226, 5395, 43149, 92747, 41190, 59849, 70247, 48794, 21576, 71018, 77073, 10342, 34896, 20398, 92233, 86485, 50972, 982, 31103, 94626, 17968, 77470, 38753, 35881, 28544, 68706, 26592, 74045, 47686, 13293, 67398, 17897, 85094, 69176, 11130, 73407, 48596, 44226, 96942, 70308, 20837, 23754, 67207, 98425, 30798, 43768, 13504, 71911, 52053, 70260, 65059, 20212, 23437, 22095, 91151, 66754, 35204, 76154, 23302, 3486, 23983, 75286, 35595, 61640, 91022, 16161, 96761, 31978, 13418, 96887, 54765, 38926, 76220, 79233, 44348, 70006, 77796, 73327, 9154, 42504, 72794, 72156, 61224, 81831, 40160, 83758, 10205, 90030, 74509, 70702, 35440, 18493, 51678, 15974, 4090, 78463, 40183, 18900, 75855, 58956, 41284, 486, 91159, 52536, 34856, 92659, 90529, 38624, 71193, 97993, 60528, 83497, 80042, 53884, 84492, 55594, 40475, 91425, 84338, 33471, 61707, 71465, 95732, 39111, 95245, 61330, 82188, 44718, 53072, 12662, 48772, 6138, 18611, 44080, 32084, 77794, 81216, 18822, 49715, 16004, 17298, 51742, 3323, 97520, 47329, 37787, 37305, 83626, 96502, 46033, 67348, 12747, 94926, 28046, 673, 96937, 51722, 37726, 91489, 8212, 26601, 8841, 64563, 81846, 61559, 43715, 70625, 73272, 60720, 20789, 80547, 3164, 31186, 23233, 44081, 18678, 36472, 81019, 83067, 15423, 86040, 38320, 38865, 73306, 72021, 21979, 17310, 66670, 57334, 19502, 45354, 75991, 43747, 77623, 61170, 54814, 23985, 77557, 54118, 2404, 57715, 20656, 34132, 70399, 71388, 39898, 39621, 9756, 69850, 78465, 16568, 45494, 72745, 96751, 53729, 1400, 21339, 34270, 46202, 5456, 21691, 30634, 90487, 62472, 54354, 1690, 96181, 62502, 36571, 87235, 9325, 51543, 8161, 50564, 70162, 16477, 91258, 4346, 40718, 27396, 8198, 50604, 93072, 92494, 81687, 18261, 38335, 55813, 50217, 75459, 25936, 82041, 73177, 44105, 24131, 52387, 73822, 69955, 67628, 54756, 22668, 12199, 56845, 93398, 82238, 76491, 81923, 12282, 13424, 6422, 64271, 96607, 16670, 87608, 20645, 13668, 65147, 67690, 44694, 93206, 97012, 2566, 1960, 13009, 43879, 16341, 7873, 68489, 79497, 16601, 98809, 15396, 29862, 55081, 86737, 60914, 37943, 50640, 49575, 14943, 91683, 69030, 76670, 98521, 73693, 75685, 41778, 18012, 21941, 69612, 6805, 17812, 68937, 16488, 99331, 20217, 66508, 22467, 87491, 22114, 29561, 97502, 29968, 48550, 64987, 39512, 92263, 94133, 19285, 81680, 57837, 33239, 45856, 16763, 11955, 59465, 91058, 34158, 34585, 28909, 20440, 94635, 3401, 59563, 85084, 92840, 86098, 61755, 70583, 32240, 18951, 94470, 80418, 36075, 54867, 88046, 16826, 89438, 8176, 17528, 92199, 21392, 443, 2672, 8650, 46401, 30951, 45875, 72953, 1715, 64687, 13980, 71897, 42966, 92244, 27204, 89306, 3579, 17169, 47915, 82067, 22296, 98268, 30848, 10898, 63345, 72447, 57028, 53258, 50788, 31853, 94484, 56021, 54481, 80197, 66841, 98065, 977, 67431, 27784, 20654, 66442, 55776, 22934, 47337, 87725, 61700, 25707, 59774, 76280, 63958, 97878, 79907, 29561, 95225, 17911, 55831, 18306, 86728, 25390, 18796, 96365, 42201, 59541, 1012, 5707, 39151, 93426, 83182, 53534, 50358, 15457, 19237, 61610, 23030, 99158, 81812, 83185, 59929, 49884, 30930, 74140, 19418, 87180, 54996, 7823, 11765, 41235, 92514, 67652, 5980, 18009, 5739, 72600, 6765, 98082, 32059, 46702, 67215, 11195, 49908, 65131, 36626, 21842, 5568, 69614, 66923, 58198, 11268, 89527, 54111, 92611, 26442, 87140, 34138, 25710, 44859, 91152, 44656, 66168, 27504, 12060, 69153, 78664, 93579, 63820, 68517, 90966, 80054, 29680, 51551, 99160, 42052, 87635, 86402, 83053, 71226, 7498, 15528, 86621, 52778, 35763, 41083, 33571, 85949, 81440, 52706, 96487, 14368, 21153, 78440, 99279, 37290, 58414, 7733, 67064, 40693, 55049, 83068, 67060, 73351, 48440, 12545, 77847, 22928, 92372, 17852, 76175, 2261, 90984, 2386, 28061, 2466, 10815, 82902, 13436, 27090, 24413, 11453, 88622, 36106, 71033, 19987, 10058, 81702, 86182, 82677, 1949, 46388, 65283, 37592, 8910, 78027, 71206, 73791, 78024, 49330, 29349, 90749, 94088, 43376, 91714, 84280, 88800, 70295, 27690, 77772, 39233, 39686, 21989, 7239, 62958, 448, 4987, 19492, 97448, 49254, 47357, 22079, 71646, 59778, 61338, 69344, 33343, 61685, 67533, 77541, 73120, 43658, 69695, 28705, 63395, 95750, 4933, 7387, 78389, 46668, 43308, 88057, 25297, 16778, 385, 6379, 15989, 76240, 32774, 46848, 55135, 30130, 74953, 7062, 9776, 12947, 84890, 58551, 84713, 55559, 46177, 72148, 33590, 64527, 63674, 70289, 3668, 82780, 24656, 34677, 29433, 29191, 3752, 72736, 46791, 53602, 85491, 12774, 2623, 62577, 33980, 21728, 8576, 41856, 41430, 70033, 40830, 30420, 76951, 80088, 72487, 18176, 53552, 76715, 62839, 64225, 70408, 76405, 16586, 65989, 76230, 99845, 8532, 56471, 32198, 65228, 63094, 9649, 95120, 75795, 17461, 78531, 68082, 36833, 39858, 61441, 21617, 13919, 24059, 96847, 66725, 94378, 26440, 62131, 2581, 70236, 27825, 94064, 48100, 68367, 78970, 35875, 16241, 10852, 51352, 33253, 81920, 73526, 12906, 90758, 65434, 79829, 2816, 1543, 55415, 61422, 10110, 57838, 67021, 7303, 89304, 77475, 17572, 78036, 15983, 87144, 84320, 69240, 16465, 33167, 57202, 75830, 89650, 14849, 33400, 90592, 76509, 43300, 44069, 70763, 46894, 73752, 82725, 12010, 56170, 94434, 59585, 35295, 19680, 96520, 63953, 92580, 732, 8315, 27559, 94999, 33893, 24807, 5185, 41110, 23907, 12208, 5513, 64303, 89810, 17759, 93988, 95516, 26181, 57579, 73739, 50207, 94508, 8122, 9302, 21009, 16607, 7743, 4336, 35751, 21949, 76444, 8273, 24709, 6826, 41723, 79911, 61826, 52818, 97031, 12979, 91143, 76372, 5159, 49247, 2944, 1145, 70067, 96809, 74108, 74320, 93911, 10690, 19467, 98148, 1919, 24568, 79070, 32405, 24295, 89499, 53796, 44731, 26063, 23890, 28906, 21707, 54530, 47072, 3306, 36948, 83203, 98596, 55753, 7548, 20507, 530, 73367, 86426, 21928, 49265, 89407, 87557, 76443, 25835, 33597, 1399, 75245, 56811, 88191, 59896, 95597, 14305, 21214, 85655, 54863, 16092, 11372, 72510, 3262, 99512, 6181, 57865, 68150, 58404, 18191, 45992, 46190, 35726, 84700, 25129, 78496, 45170, 65484, 28, 90039, 27355, 41114, 68718, 93186, 21509, 53198, 89217, 89472, 14585, 72767, 48710, 44896, 6264, 86928, 64314, 19393, 79991, 16206, 86134, 92689, 9097, 58746, 9766, 35510, 8958, 4188, 5065, 50586, 19128, 55372, 4017, 6328, 11413, 58150, 82629, 18568, 81340, 31689, 48129, 70911, 37705, 4328, 12238, 35137], thresh=41843200282):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_5",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=878, beta: int=299, xs: List[int]=[0, 1759, 1843, 1986, 2014, 2681, 2725, 2734, 2744, 2775, 2790, 3018, 3211, 3216, 3249, 3252, 3254, 3254, 3254, 3254, 3254, 3254, 3255, 9696, 13356, 13744, 14223, 14409, 14436, 17054, 17939, 20869, 21734, 27589, 27628, 27807, 28419, 29898, 29988, 30004, 30014, 30044, 30115, 30132, 30190, 30201, 30206, 30206, 30208, 30209, 34774, 35845, 36056, 36328, 36564, 36699, 39407, 40740, 41540, 42930, 43969, 43988, 44673, 49977, 57237, 57320, 57350, 57477, 57485, 57485, 57488, 57488, 57488, 57488, 57488, 57488, 57488, 57488, 57488, 57488, 57488, 57488, 57488, 57488, 57488, 57488, 57488, 57488, 57489, 62446, 64045, 64422, 64862, 64878, 65107, 65165, 65174, 65175, 65177, 65179, 65960, 66317, 66614, 66616, 66622, 66625, 66627, 66628, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66631, 68049, 68135, 68152, 68185, 68320, 68365, 68403, 68542, 68663, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68749, 71273, 73872, 74146, 74682, 74874, 75249, 75268, 75300, 75302, 75303, 75312, 75666, 77060, 77884, 78059, 78857, 78868, 78905, 78927, 78974, 78977, 78983, 78983, 78983, 78983, 78983, 78983, 78983, 78983, 78983, 78983, 78984, 80141, 80320, 87532, 88460, 88471, 88471, 88472, 88473, 88473, 88473, 88473, 88473, 88473, 88473, 88473, 88473, 88473, 88473, 88473, 88473, 88473, 88474, 90219, 90933, 91393, 92445, 100000], ys: List[int]=[64790, 26968, 37438, 78770, 98585, 37193, 21881, 72601, 38524, 6306, 83356, 95009, 63359, 7374, 24065, 25279, 71000, 10081, 56739, 76323, 79091, 75953, 16428, 28191, 25933, 22613, 76474, 26512, 74250, 30573, 79463, 66541, 76618, 37978, 82800, 82262, 12204, 42298, 27561, 87481, 97887, 240, 28705, 7213, 28584, 48809, 53370, 74651, 23567, 6741, 77813, 28618, 51712, 77474, 25219, 17589, 63932, 61695, 28778, 98088, 28273, 42144, 49694, 58635, 12045, 72302, 39346, 58005, 30193, 59544, 76473, 42121, 33429, 39931, 36815, 30719, 57781, 56679, 29734, 15724, 52978, 27665, 90526, 72183, 10879, 45240, 61952, 43926, 24943, 84978, 88325, 15282, 90579, 43392, 16322, 26194, 43110, 59493, 21514, 45789, 51836, 71409, 19419, 95303, 29684, 51442, 80065, 83153, 6167, 37137, 97559, 10017, 5468, 64856, 21843, 65892, 4672, 98198, 64809, 84452, 56794, 70077, 20062, 732, 45177, 86465, 30225, 10033, 37555, 75213, 84216, 59228, 33670, 93242, 58003, 49033, 82676, 14699, 87650, 28596, 45783, 47036, 83678, 71462, 52063, 31021, 94972, 46346, 27144, 46494, 47147, 75084, 39536, 71022, 4504, 22989, 82207, 85691, 78072, 75010, 75406, 90396, 2443, 13430, 2037, 19390, 44055, 11270, 24997, 74446, 15492, 18027, 32022, 85721, 6620, 8375, 58327, 47162, 71235, 97431, 72980, 72182, 34915, 65170, 76906, 82119, 68229, 73896, 74468, 36852, 86540, 16661, 98796, 82242, 42999, 5874, 70495, 79195, 57862, 31754, 79578, 55409, 57098, 14842, 31455, 1451, 35891, 83170, 11728, 39970, 14690, 3132, 77645, 87239, 50079, 42372, 89262, 9176, 37607, 88428, 80447, 84738, 31176, 78335, 88256, 70973, 19714, 27191, 49821, 32251, 63282, 41519, 49182, 30314, 25114, 37600, 71871, 54111, 21060, 80894, 15583, 24890, 26668, 27521, 50803, 64191, 21238, 67361, 8060, 34495, 85544, 96162, 60828, 44715, 85535, 25292, 20347, 97101, 94986, 99079, 4867, 37264, 597, 15729, 98845, 84663, 55338, 88506, 5305, 6356, 23388, 85775, 48233, 43685, 83861, 3781, 51621, 57383, 78463, 96404, 10017, 87155, 96061, 52984, 8590, 2282, 5510, 63184, 34748, 21380, 80022, 57743, 90532, 44045, 94948, 255, 98455, 85471, 40961, 64826, 5094, 74774, 94597, 35536, 39516, 95665, 18863, 50991, 68342, 50902, 63429, 13928], thresh: int=119992549050):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=878, beta=299, xs=[0, 1759, 1843, 1986, 2014, 2681, 2725, 2734, 2744, 2775, 2790, 3018, 3211, 3216, 3249, 3252, 3254, 3254, 3254, 3254, 3254, 3254, 3255, 9696, 13356, 13744, 14223, 14409, 14436, 17054, 17939, 20869, 21734, 27589, 27628, 27807, 28419, 29898, 29988, 30004, 30014, 30044, 30115, 30132, 30190, 30201, 30206, 30206, 30208, 30209, 34774, 35845, 36056, 36328, 36564, 36699, 39407, 40740, 41540, 42930, 43969, 43988, 44673, 49977, 57237, 57320, 57350, 57477, 57485, 57485, 57488, 57488, 57488, 57488, 57488, 57488, 57488, 57488, 57488, 57488, 57488, 57488, 57488, 57488, 57488, 57488, 57488, 57488, 57489, 62446, 64045, 64422, 64862, 64878, 65107, 65165, 65174, 65175, 65177, 65179, 65960, 66317, 66614, 66616, 66622, 66625, 66627, 66628, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66630, 66631, 68049, 68135, 68152, 68185, 68320, 68365, 68403, 68542, 68663, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68748, 68749, 71273, 73872, 74146, 74682, 74874, 75249, 75268, 75300, 75302, 75303, 75312, 75666, 77060, 77884, 78059, 78857, 78868, 78905, 78927, 78974, 78977, 78983, 78983, 78983, 78983, 78983, 78983, 78983, 78983, 78983, 78983, 78984, 80141, 80320, 87532, 88460, 88471, 88471, 88472, 88473, 88473, 88473, 88473, 88473, 88473, 88473, 88473, 88473, 88473, 88473, 88473, 88473, 88473, 88474, 90219, 90933, 91393, 92445, 100000], ys=[64790, 26968, 37438, 78770, 98585, 37193, 21881, 72601, 38524, 6306, 83356, 95009, 63359, 7374, 24065, 25279, 71000, 10081, 56739, 76323, 79091, 75953, 16428, 28191, 25933, 22613, 76474, 26512, 74250, 30573, 79463, 66541, 76618, 37978, 82800, 82262, 12204, 42298, 27561, 87481, 97887, 240, 28705, 7213, 28584, 48809, 53370, 74651, 23567, 6741, 77813, 28618, 51712, 77474, 25219, 17589, 63932, 61695, 28778, 98088, 28273, 42144, 49694, 58635, 12045, 72302, 39346, 58005, 30193, 59544, 76473, 42121, 33429, 39931, 36815, 30719, 57781, 56679, 29734, 15724, 52978, 27665, 90526, 72183, 10879, 45240, 61952, 43926, 24943, 84978, 88325, 15282, 90579, 43392, 16322, 26194, 43110, 59493, 21514, 45789, 51836, 71409, 19419, 95303, 29684, 51442, 80065, 83153, 6167, 37137, 97559, 10017, 5468, 64856, 21843, 65892, 4672, 98198, 64809, 84452, 56794, 70077, 20062, 732, 45177, 86465, 30225, 10033, 37555, 75213, 84216, 59228, 33670, 93242, 58003, 49033, 82676, 14699, 87650, 28596, 45783, 47036, 83678, 71462, 52063, 31021, 94972, 46346, 27144, 46494, 47147, 75084, 39536, 71022, 4504, 22989, 82207, 85691, 78072, 75010, 75406, 90396, 2443, 13430, 2037, 19390, 44055, 11270, 24997, 74446, 15492, 18027, 32022, 85721, 6620, 8375, 58327, 47162, 71235, 97431, 72980, 72182, 34915, 65170, 76906, 82119, 68229, 73896, 74468, 36852, 86540, 16661, 98796, 82242, 42999, 5874, 70495, 79195, 57862, 31754, 79578, 55409, 57098, 14842, 31455, 1451, 35891, 83170, 11728, 39970, 14690, 3132, 77645, 87239, 50079, 42372, 89262, 9176, 37607, 88428, 80447, 84738, 31176, 78335, 88256, 70973, 19714, 27191, 49821, 32251, 63282, 41519, 49182, 30314, 25114, 37600, 71871, 54111, 21060, 80894, 15583, 24890, 26668, 27521, 50803, 64191, 21238, 67361, 8060, 34495, 85544, 96162, 60828, 44715, 85535, 25292, 20347, 97101, 94986, 99079, 4867, 37264, 597, 15729, 98845, 84663, 55338, 88506, 5305, 6356, 23388, 85775, 48233, 43685, 83861, 3781, 51621, 57383, 78463, 96404, 10017, 87155, 96061, 52984, 8590, 2282, 5510, 63184, 34748, 21380, 80022, 57743, 90532, 44045, 94948, 255, 98455, 85471, 40961, 64826, 5094, 74774, 94597, 35536, 39516, 95665, 18863, 50991, 68342, 50902, 63429, 13928], thresh=119992549050):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_6",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=398, beta: int=205, xs: List[int]=[0, 119, 588, 736, 1181, 1623, 2313, 2766, 3284, 4975, 5030, 5346, 5406, 5454, 5455, 5462, 6760, 6882, 7690, 8053, 8427, 8480, 8642, 9093, 9665, 10047, 10425, 10456, 10466, 10470, 10488, 10492, 10492, 10494, 10495, 10495, 10495, 10495, 10495, 10495, 10496, 10615, 10822, 11157, 11692, 13314, 14610, 15212, 15593, 15670, 17512, 19370, 19878, 19931, 22498, 23604, 23691, 23712, 23742, 23773, 23858, 24545, 24731, 26406, 26498, 26624, 30514, 30793, 30945, 30965, 30974, 31707, 31780, 31791, 31815, 31816, 31819, 31820, 32398, 32554, 32558, 32582, 32604, 32604, 32604, 32606, 32611, 32611, 32612, 32615, 32647, 32727, 32854, 32873, 32928, 33770, 33988, 34024, 34108, 34114, 34122, 34122, 34122, 34122, 34124, 34124, 34124, 34125, 34125, 34126, 34252, 34686, 34690, 34725, 34761, 34868, 35008, 35721, 36313, 36366, 36379, 36388, 36406, 36408, 36408, 36408, 36408, 36408, 36408, 36408, 36408, 36408, 36408, 36408, 36408, 36409, 37484, 37574, 38326, 38680, 38709, 38843, 38933, 38934, 38938, 38938, 38939, 40028, 40239, 40338, 40356, 40956, 40999, 41056, 44472, 44488, 44660, 44711, 44870, 44915, 45094, 45278, 45284, 45285, 45641, 45707, 45802, 46150, 46341, 46502, 46875, 48553, 48599, 48933, 49006, 49227, 49617, 51323, 51649, 51830, 52664, 54292, 56048, 56612, 57634, 57918, 58027, 58336, 58352, 58363, 58363, 58364, 58365, 58366, 59259, 59473, 59674, 59986, 60006, 60088, 60227, 60430, 60533, 61091, 61949, 62872, 63034, 63054, 63250, 63251, 63266, 63267, 63273, 64101, 64115, 64534, 64620, 64652, 64675, 65082, 65384, 65596, 65870, 66172, 66313, 66369, 66527, 66604, 66675, 66685, 67743, 68447, 68908, 68999, 69210, 69223, 70999, 71413, 71482, 71494, 71623, 71671, 73277, 73371, 73547, 74093, 74484, 74935, 74983, 75071, 75139, 75146, 75226, 76296, 78737, 79582, 79607, 79632, 79650, 79746, 79762, 79792, 79792, 79792, 79792, 79792, 79792, 79792, 79793, 80236, 80291, 82995, 83977, 84144, 84160, 84289, 84318, 84344, 85417, 85449, 85549, 85569, 85570, 85570, 85573, 85854, 86036, 86434, 86557, 86566, 86574, 86595, 86601, 86755, 87350, 87956, 88523, 88756, 90029, 90039, 90045, 90048, 90048, 90239, 90947, 91071, 91114, 91139, 91386, 91452, 91462, 91498, 91528, 94750, 95009, 95964, 96494, 96520, 96527, 96528, 96537, 96540, 96540, 96543, 96544, 96544, 96544, 96544, 96544, 96544, 96545, 96548, 96551, 96836, 96890, 96950, 96974, 96985, 96987, 97010, 97046, 97361, 97374, 97715, 97757, 97757, 97758, 97758, 97759, 97759, 97759, 97759, 97759, 97759, 97759, 97759, 97759, 97759, 97760, 99247, 99270, 99345, 99512, 99546, 99979, 100000], ys: List[int]=[48648, 79927, 48827, 81735, 71369, 74994, 2403, 2315, 66366, 68348, 59135, 40590, 30537, 44630, 13190, 29999, 83762, 22656, 41708, 85472, 73191, 25468, 48318, 44306, 80786, 33657, 41753, 2530, 71984, 5884, 15166, 45822, 2874, 77093, 70372, 61527, 84504, 48294, 79658, 20274, 27502, 93378, 84592, 68234, 7177, 47630, 54359, 45080, 41397, 39394, 26052, 38001, 36393, 55126, 42097, 62954, 78086, 82797, 61134, 9704, 85808, 33033, 81281, 25371, 91019, 96838, 177, 33998, 92945, 9999, 84144, 82105, 83371, 50280, 25339, 82113, 30288, 99447, 1747, 46075, 63294, 89911, 5215, 56624, 82953, 49656, 27728, 95018, 4851, 40813, 79985, 4355, 78217, 8520, 44463, 38921, 2033, 57687, 92147, 14446, 9803, 48056, 61747, 19822, 55901, 71167, 39503, 21365, 58405, 88061, 53808, 89478, 48269, 19781, 43895, 57436, 87585, 1095, 49487, 1138, 9036, 86917, 98431, 88777, 54839, 68395, 24607, 31469, 58940, 11388, 27708, 94973, 37209, 21154, 62445, 70948, 90991, 42061, 88285, 24141, 55400, 37228, 33921, 79280, 35050, 58597, 48266, 59406, 43855, 30074, 91970, 65504, 86902, 66373, 39669, 38303, 84159, 84762, 50903, 17611, 66019, 62266, 80441, 11084, 73356, 41956, 77837, 51212, 53476, 23139, 1789, 76071, 1340, 8059, 75374, 82670, 53660, 28414, 77283, 30452, 58340, 64783, 91108, 93132, 5838, 98329, 82335, 19212, 38118, 1309, 38168, 25504, 4165, 99, 37569, 85734, 77738, 79973, 83690, 6058, 76158, 73749, 16819, 56196, 22660, 90955, 92701, 4378, 20504, 76671, 45434, 36073, 73203, 94236, 5040, 14302, 9376, 23894, 51194, 53850, 95375, 18612, 43351, 46836, 30173, 31546, 17314, 41816, 90575, 77341, 50052, 66522, 55383, 5716, 98599, 70884, 6747, 89145, 97576, 71535, 39546, 70856, 57350, 58607, 93862, 66766, 92664, 13023, 7580, 88318, 31971, 32842, 83633, 30253, 73364, 84383, 40839, 21156, 79221, 23392, 4398, 61227, 15892, 68374, 29689, 45810, 63479, 78067, 32229, 91782, 2620, 2404, 69850, 96508, 44291, 9422, 36493, 61502, 20340, 71867, 13967, 88726, 30036, 95398, 17588, 50393, 80656, 75806, 24994, 17216, 20360, 44679, 17281, 58985, 86497, 30710, 22188, 52928, 47153, 5379, 99123, 37790, 251, 58862, 50659, 60495, 63259, 19860, 37951, 70327, 32733, 75796, 55713, 57177, 42354, 81024, 59985, 52445, 53917, 79190, 47404, 34389, 6018, 58323, 63442, 58703, 52049, 75918, 46328, 44773, 92457, 30432, 82295, 87876, 15123, 7309, 59511, 40436, 14153, 42889, 13079, 78250, 72475, 87640, 18641, 48390, 61791, 6649, 56240, 91511, 23298, 94770, 58091, 23162, 71202, 76682, 95577, 34946, 92702, 58645, 82342, 4689, 59465, 75445, 75238, 33409], thresh: int=29074784714):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=398, beta=205, xs=[0, 119, 588, 736, 1181, 1623, 2313, 2766, 3284, 4975, 5030, 5346, 5406, 5454, 5455, 5462, 6760, 6882, 7690, 8053, 8427, 8480, 8642, 9093, 9665, 10047, 10425, 10456, 10466, 10470, 10488, 10492, 10492, 10494, 10495, 10495, 10495, 10495, 10495, 10495, 10496, 10615, 10822, 11157, 11692, 13314, 14610, 15212, 15593, 15670, 17512, 19370, 19878, 19931, 22498, 23604, 23691, 23712, 23742, 23773, 23858, 24545, 24731, 26406, 26498, 26624, 30514, 30793, 30945, 30965, 30974, 31707, 31780, 31791, 31815, 31816, 31819, 31820, 32398, 32554, 32558, 32582, 32604, 32604, 32604, 32606, 32611, 32611, 32612, 32615, 32647, 32727, 32854, 32873, 32928, 33770, 33988, 34024, 34108, 34114, 34122, 34122, 34122, 34122, 34124, 34124, 34124, 34125, 34125, 34126, 34252, 34686, 34690, 34725, 34761, 34868, 35008, 35721, 36313, 36366, 36379, 36388, 36406, 36408, 36408, 36408, 36408, 36408, 36408, 36408, 36408, 36408, 36408, 36408, 36408, 36409, 37484, 37574, 38326, 38680, 38709, 38843, 38933, 38934, 38938, 38938, 38939, 40028, 40239, 40338, 40356, 40956, 40999, 41056, 44472, 44488, 44660, 44711, 44870, 44915, 45094, 45278, 45284, 45285, 45641, 45707, 45802, 46150, 46341, 46502, 46875, 48553, 48599, 48933, 49006, 49227, 49617, 51323, 51649, 51830, 52664, 54292, 56048, 56612, 57634, 57918, 58027, 58336, 58352, 58363, 58363, 58364, 58365, 58366, 59259, 59473, 59674, 59986, 60006, 60088, 60227, 60430, 60533, 61091, 61949, 62872, 63034, 63054, 63250, 63251, 63266, 63267, 63273, 64101, 64115, 64534, 64620, 64652, 64675, 65082, 65384, 65596, 65870, 66172, 66313, 66369, 66527, 66604, 66675, 66685, 67743, 68447, 68908, 68999, 69210, 69223, 70999, 71413, 71482, 71494, 71623, 71671, 73277, 73371, 73547, 74093, 74484, 74935, 74983, 75071, 75139, 75146, 75226, 76296, 78737, 79582, 79607, 79632, 79650, 79746, 79762, 79792, 79792, 79792, 79792, 79792, 79792, 79792, 79793, 80236, 80291, 82995, 83977, 84144, 84160, 84289, 84318, 84344, 85417, 85449, 85549, 85569, 85570, 85570, 85573, 85854, 86036, 86434, 86557, 86566, 86574, 86595, 86601, 86755, 87350, 87956, 88523, 88756, 90029, 90039, 90045, 90048, 90048, 90239, 90947, 91071, 91114, 91139, 91386, 91452, 91462, 91498, 91528, 94750, 95009, 95964, 96494, 96520, 96527, 96528, 96537, 96540, 96540, 96543, 96544, 96544, 96544, 96544, 96544, 96544, 96545, 96548, 96551, 96836, 96890, 96950, 96974, 96985, 96987, 97010, 97046, 97361, 97374, 97715, 97757, 97757, 97758, 97758, 97759, 97759, 97759, 97759, 97759, 97759, 97759, 97759, 97759, 97759, 97760, 99247, 99270, 99345, 99512, 99546, 99979, 100000], ys=[48648, 79927, 48827, 81735, 71369, 74994, 2403, 2315, 66366, 68348, 59135, 40590, 30537, 44630, 13190, 29999, 83762, 22656, 41708, 85472, 73191, 25468, 48318, 44306, 80786, 33657, 41753, 2530, 71984, 5884, 15166, 45822, 2874, 77093, 70372, 61527, 84504, 48294, 79658, 20274, 27502, 93378, 84592, 68234, 7177, 47630, 54359, 45080, 41397, 39394, 26052, 38001, 36393, 55126, 42097, 62954, 78086, 82797, 61134, 9704, 85808, 33033, 81281, 25371, 91019, 96838, 177, 33998, 92945, 9999, 84144, 82105, 83371, 50280, 25339, 82113, 30288, 99447, 1747, 46075, 63294, 89911, 5215, 56624, 82953, 49656, 27728, 95018, 4851, 40813, 79985, 4355, 78217, 8520, 44463, 38921, 2033, 57687, 92147, 14446, 9803, 48056, 61747, 19822, 55901, 71167, 39503, 21365, 58405, 88061, 53808, 89478, 48269, 19781, 43895, 57436, 87585, 1095, 49487, 1138, 9036, 86917, 98431, 88777, 54839, 68395, 24607, 31469, 58940, 11388, 27708, 94973, 37209, 21154, 62445, 70948, 90991, 42061, 88285, 24141, 55400, 37228, 33921, 79280, 35050, 58597, 48266, 59406, 43855, 30074, 91970, 65504, 86902, 66373, 39669, 38303, 84159, 84762, 50903, 17611, 66019, 62266, 80441, 11084, 73356, 41956, 77837, 51212, 53476, 23139, 1789, 76071, 1340, 8059, 75374, 82670, 53660, 28414, 77283, 30452, 58340, 64783, 91108, 93132, 5838, 98329, 82335, 19212, 38118, 1309, 38168, 25504, 4165, 99, 37569, 85734, 77738, 79973, 83690, 6058, 76158, 73749, 16819, 56196, 22660, 90955, 92701, 4378, 20504, 76671, 45434, 36073, 73203, 94236, 5040, 14302, 9376, 23894, 51194, 53850, 95375, 18612, 43351, 46836, 30173, 31546, 17314, 41816, 90575, 77341, 50052, 66522, 55383, 5716, 98599, 70884, 6747, 89145, 97576, 71535, 39546, 70856, 57350, 58607, 93862, 66766, 92664, 13023, 7580, 88318, 31971, 32842, 83633, 30253, 73364, 84383, 40839, 21156, 79221, 23392, 4398, 61227, 15892, 68374, 29689, 45810, 63479, 78067, 32229, 91782, 2620, 2404, 69850, 96508, 44291, 9422, 36493, 61502, 20340, 71867, 13967, 88726, 30036, 95398, 17588, 50393, 80656, 75806, 24994, 17216, 20360, 44679, 17281, 58985, 86497, 30710, 22188, 52928, 47153, 5379, 99123, 37790, 251, 58862, 50659, 60495, 63259, 19860, 37951, 70327, 32733, 75796, 55713, 57177, 42354, 81024, 59985, 52445, 53917, 79190, 47404, 34389, 6018, 58323, 63442, 58703, 52049, 75918, 46328, 44773, 92457, 30432, 82295, 87876, 15123, 7309, 59511, 40436, 14153, 42889, 13079, 78250, 72475, 87640, 18641, 48390, 61791, 6649, 56240, 91511, 23298, 94770, 58091, 23162, 71202, 76682, 95577, 34946, 92702, 58645, 82342, 4689, 59465, 75445, 75238, 33409], thresh=29074784714):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_7",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=8, beta: int=1, xs: List[int]=[0, 614, 1697, 4112, 7173, 58339, 60457, 60635, 100000], ys: List[int]=[66190, 49877, 50233, 21524, 62786, 54004, 42598, 29286, 11150], thresh: int=4192931036):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=8, beta=1, xs=[0, 614, 1697, 4112, 7173, 58339, 60457, 60635, 100000], ys=[66190, 49877, 50233, 21524, 62786, 54004, 42598, 29286, 11150], thresh=4192931036):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_8",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=28, beta: int=18, xs: List[int]=[0, 510, 540, 542, 544, 5206, 5485, 8181, 8841, 9894, 11281, 11413, 11467, 11479, 11479, 11480, 11480, 11481, 13010, 15749, 16887, 17144, 17339, 18288, 18421, 18990, 20514, 21628, 21738, 21749, 21773, 21783, 26977, 28980, 33493, 34583, 35378, 40679, 45496, 48872, 49446, 54944, 72688, 77025, 78224, 89949, 94786, 99345, 100000], ys: List[int]=[58439, 22630, 56250, 57440, 83375, 6003, 81624, 52423, 64510, 72235, 80397, 85689, 94738, 46523, 65157, 91793, 81711, 79088, 4281, 12953, 27374, 39140, 75473, 31821, 9221, 40314, 39078, 33075, 36958, 59658, 21611, 32678, 4641, 25597, 26720, 93491, 57762, 32598, 77185, 89589, 94173, 27662, 84485, 4748, 67184, 79707, 37239, 48392, 99146], thresh: int=12877114564):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=28, beta=18, xs=[0, 510, 540, 542, 544, 5206, 5485, 8181, 8841, 9894, 11281, 11413, 11467, 11479, 11479, 11480, 11480, 11481, 13010, 15749, 16887, 17144, 17339, 18288, 18421, 18990, 20514, 21628, 21738, 21749, 21773, 21783, 26977, 28980, 33493, 34583, 35378, 40679, 45496, 48872, 49446, 54944, 72688, 77025, 78224, 89949, 94786, 99345, 100000], ys=[58439, 22630, 56250, 57440, 83375, 6003, 81624, 52423, 64510, 72235, 80397, 85689, 94738, 46523, 65157, 91793, 81711, 79088, 4281, 12953, 27374, 39140, 75473, 31821, 9221, 40314, 39078, 33075, 36958, 59658, 21611, 32678, 4641, 25597, 26720, 93491, 57762, 32598, 77185, 89589, 94173, 27662, 84485, 4748, 67184, 79707, 37239, 48392, 99146], thresh=12877114564):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_9",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=26, beta: int=7, xs: List[int]=[0, 7016, 8813, 19988, 23626, 33728, 40941, 41438, 41577, 42685, 43239, 43918, 44385, 47190, 48185, 66392, 76529, 76935, 77048, 78040, 84065, 90213, 94435, 95282, 95283, 95579, 98243, 98915, 99546, 99576, 100000], ys: List[int]=[27280, 25588, 5085, 34460, 48760, 36505, 38386, 35558, 13648, 38565, 75942, 15838, 62206, 84754, 62969, 60639, 83581, 83504, 10464, 48360, 83070, 75681, 32823, 31259, 73925, 81893, 56683, 74645, 5567, 89396, 87055], thresh: int=6279776198):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=26, beta=7, xs=[0, 7016, 8813, 19988, 23626, 33728, 40941, 41438, 41577, 42685, 43239, 43918, 44385, 47190, 48185, 66392, 76529, 76935, 77048, 78040, 84065, 90213, 94435, 95282, 95283, 95579, 98243, 98915, 99546, 99576, 100000], ys=[27280, 25588, 5085, 34460, 48760, 36505, 38386, 35558, 13648, 38565, 75942, 15838, 62206, 84754, 62969, 60639, 83581, 83504, 10464, 48360, 83070, 75681, 32823, 31259, 73925, 81893, 56683, 74645, 5567, 89396, 87055], thresh=6279776198):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_10",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=399, beta: int=141, xs: List[int]=[0, 48, 62, 821, 1362, 1604, 1605, 1609, 1667, 1724, 1920, 2039, 2123, 2562, 2566, 2573, 2574, 2576, 2579, 2588, 2611, 2617, 2660, 2667, 2714, 2734, 2734, 2734, 2734, 2734, 2735, 2796, 3696, 3892, 4220, 4391, 4399, 4416, 4455, 4475, 4484, 4497, 4886, 4893, 4906, 4971, 4976, 4978, 4978, 4978, 4979, 5003, 5015, 5254, 5309, 5551, 5595, 5615, 5616, 5628, 5646, 5718, 5718, 5719, 5741, 5830, 5855, 5856, 5862, 5902, 5910, 5922, 5923, 5923, 5924, 5989, 6008, 6023, 6089, 6501, 6617, 6633, 6672, 6932, 7004, 7037, 7148, 7154, 7568, 7796, 7914, 7944, 7968, 7968, 7969, 7978, 8175, 8271, 8298, 8309, 8311, 8311, 8312, 8556, 8558, 8558, 8558, 8558, 8558, 8558, 8558, 8558, 8558, 8558, 8558, 8558, 8558, 8558, 8558, 8558, 8558, 8558, 8558, 8558, 8559, 8961, 9112, 9143, 9153, 9161, 9163, 9191, 9191, 9191, 9192, 9195, 9209, 9238, 9293, 9322, 9460, 9571, 9578, 9583, 9604, 9614, 9621, 9621, 9622, 9623, 9624, 9634, 9698, 9724, 9909, 9911, 9912, 9942, 9953, 9956, 9956, 9959, 10008, 10067, 10201, 10288, 10416, 10422, 10422, 10423, 10423, 10424, 10425, 10425, 10425, 10425, 10425, 10425, 10426, 10523, 10650, 10653, 10663, 10818, 10852, 10859, 10921, 11038, 11084, 11112, 11445, 11460, 11461, 11487, 11526, 11531, 11541, 11546, 11616, 11619, 11638, 11677, 11684, 11687, 11916, 12028, 12047, 12073, 12090, 12098, 12102, 12104, 12106, 12106, 12106, 12107, 12425, 12450, 12699, 12731, 12863, 13011, 13339, 13363, 13388, 13435, 13556, 13591, 13617, 13618, 13625, 13629, 13659, 13664, 13682, 13948, 14088, 14123, 14205, 14207, 14207, 14208, 14208, 14209, 14461, 14465, 14465, 14465, 14465, 14465, 14465, 14465, 14465, 14465, 14465, 14465, 14465, 14465, 14465, 14465, 14465, 14465, 14465, 14465, 14466, 14800, 15106, 15308, 15319, 15349, 15651, 15853, 16234, 16369, 16534, 16543, 16555, 16556, 16558, 16615, 16619, 16643, 16835, 16957, 17137, 17225, 17229, 17248, 17757, 17923, 17933, 17937, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17939, 17944, 17989, 17995, 17998, 18090, 18192, 18214, 18252, 18276, 18294, 18326, 18326, 18345, 18345, 18348, 18451, 18489, 18500, 18579, 18632, 18657, 18657, 18668, 18673, 18684, 18696, 18790, 18916, 19105, 19133, 19150, 19156, 19156, 19156, 19157, 19157, 19158, 19379, 19431, 19596, 19649, 19652, 19665, 20006, 20329, 20339, 20563, 20621, 20786, 21145, 21148, 21160, 21165, 21276, 21295, 21334, 21335, 21336, 21336, 21337, 21337, 21337, 21337, 21337, 21337, 21338, 21563, 21563, 21579, 22116, 22141, 22342, 22348, 22364, 22369, 22371, 22371, 22372, 22377, 22378, 22487, 22578, 22579, 22585, 22595, 22595, 22596, 22597, 22828, 22892, 22918, 22961, 23024, 23034, 23050, 23052, 23132, 23170, 23178, 23191, 23296, 23404, 23419, 23427, 23428, 23431, 23431, 23431, 23431, 23431, 23432, 23670, 23674, 23696, 23765, 23920, 23921, 23944, 24000, 24004, 24008, 24021, 24061, 24174, 24325, 24366, 24373, 24376, 24377, 24382, 24382, 24384, 24384, 24384, 24384, 24384, 24385, 24436, 24451, 24465, 24468, 24468, 24469, 24470, 24533, 24654, 24686, 24694, 24696, 24699, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24701, 25162, 25198, 25486, 25533, 25609, 25953, 26029, 26114, 26337, 26464, 26934, 27050, 27165, 27229, 27636, 27791, 28956, 29157, 29961, 29980, 30185, 30217, 30373, 30508, 30587, 31462, 31561, 31943, 32215, 32228, 32681, 32718, 33018, 33425, 33456, 33521, 33886, 33898, 34048, 34093, 34287, 34377, 34388, 34785, 34837, 34838, 34953, 35188, 35352, 35378, 35853, 36262, 36329, 36338, 36789, 36858, 36911, 37064, 37225, 37573, 37604, 37610, 37775, 37906, 38213, 38291, 38296, 38479, 38863, 38873, 39171, 39323, 39336, 39624, 40569, 40993, 41305, 41845, 41896, 42008, 42604, 42692, 42765, 43029, 43543, 43773, 43936, 43955, 44007, 44469, 44569, 44625, 44645, 45033, 45475, 45545, 45698, 45701, 45720, 45891, 46603, 46759, 46809, 46892, 47813, 48026, 48407, 48456, 49296, 49594, 49619, 49664, 49691, 49893, 49982, 50083, 50126, 50161, 50201, 50365, 51227, 51304, 51376, 51540, 51979, 52068, 52138, 52224, 52430, 52515, 52620, 52750, 52821, 52897, 53115, 53147, 53332, 53339, 53583, 53587, 53885, 54544, 54619, 54877, 55334, 55429, 55864, 55976, 56047, 56091, 56553, 56595, 56758, 56985, 57267, 57466, 57598, 57919, 58310, 58481, 58682, 58759, 58827, 58959, 59055, 59158, 59636, 59696, 59771, 60072, 60184, 60226, 60314, 60547, 60563, 60830, 61135, 61246, 61365, 61560, 61587, 61726, 62120, 62469, 62581, 63236, 63244, 63277, 63289, 63801, 64331, 64385, 64464, 64597, 64845, 64913, 64941, 65021, 65078, 65118, 65225, 65523, 66337, 66576, 66683, 66721, 66932, 67206, 67346, 67468, 67618, 67681, 67867, 67890, 68004, 68305, 68354, 68441, 68696, 69039, 69337, 69516, 69640, 70145, 70149, 70150, 70213, 70232, 70272, 70406, 70769, 70917, 71038, 71074, 71833, 71838, 71907, 71970, 72102, 72156, 72180, 72263, 72304, 72707, 72775, 72918, 73083, 73167, 73247, 73353, 73491, 73621, 73645, 73785, 73841, 73925, 73998, 74060, 74120, 74731, 74769, 74989, 75013, 75062, 75150, 75222, 75340, 75685, 75760, 76001, 76389, 76680, 76705, 76759, 76840, 76886, 77182, 77300, 77397, 77612, 78421, 78446, 78696, 78927, 79000, 79070, 79201, 79787, 79963, 80175, 80703, 81108, 82203, 82447, 82573, 82876, 82892, 83028, 83063, 84386, 84796, 84809, 84944, 85132, 85139, 85259, 85430, 85690, 85917, 86304, 86455, 86511, 87420, 87516, 88017, 88138, 88140, 88227, 88292, 88586, 88920, 89494, 89689, 89795, 90053, 90238, 90637, 90642, 90765, 90849, 90933, 91091, 91259, 91289, 91343, 91505, 91511, 91863, 92413, 92417, 92657, 92941, 93263, 93772, 93889, 93974, 94652, 94946, 95127, 95284, 95566, 95658, 96371, 96614, 96639, 97112, 97926, 97961, 98200, 98674, 98878, 99060, 99066, 99113, 99131, 99212, 99426, 99871, 99939, 100000], ys: List[int]=[14265, 87053, 18257, 22738, 30927, 17012, 19150, 37002, 46953, 134, 42383, 23041, 17110, 66773, 88830, 76838, 34076, 26287, 37494, 32125, 15842, 15813, 75946, 88467, 27300, 2272, 2067, 71639, 46518, 43477, 51492, 73312, 57872, 45376, 12364, 3591, 87115, 33157, 18887, 57383, 16853, 57105, 91447, 3320, 69763, 37539, 43909, 24144, 56846, 90148, 9559, 8365, 42216, 87265, 56680, 78754, 19823, 70234, 49289, 44544, 2531, 16498, 80365, 8698, 59701, 76606, 10823, 23127, 90662, 39620, 23115, 82522, 55059, 63989, 55251, 70945, 88508, 39341, 22569, 66825, 61679, 1833, 98979, 25469, 33170, 66086, 311, 61795, 46582, 50313, 79634, 46522, 22048, 97779, 49824, 15062, 93034, 83784, 30294, 11912, 21849, 10666, 28252, 81779, 582, 13582, 4625, 56915, 33014, 11443, 31443, 21836, 99252, 24480, 13758, 65965, 14801, 59977, 14573, 12729, 2292, 74393, 89639, 35708, 7070, 67668, 19173, 32589, 50372, 32105, 48191, 25473, 18997, 38468, 37730, 19188, 29223, 26741, 65939, 33477, 74493, 31508, 80453, 47725, 97967, 62737, 19595, 48788, 87590, 12747, 24093, 15971, 20171, 77079, 11713, 32282, 8846, 15128, 14924, 33257, 92780, 97113, 9035, 79284, 40028, 6704, 3451, 76947, 52009, 62817, 36008, 23642, 11158, 98551, 43204, 89145, 91086, 19935, 83770, 75263, 19317, 55264, 67069, 19529, 69249, 20835, 82909, 91658, 54212, 34475, 97537, 5310, 41929, 16578, 80570, 37420, 63569, 85701, 71518, 85942, 52644, 35906, 62898, 32786, 99283, 34667, 12771, 40039, 84101, 27730, 83628, 5299, 31847, 63560, 49257, 76362, 77189, 69091, 23458, 35948, 77446, 28366, 7490, 41400, 89674, 33965, 49593, 90013, 24728, 90010, 51206, 37055, 231, 35644, 3242, 88448, 72896, 41175, 25889, 63453, 61664, 46855, 8513, 31610, 50593, 25049, 21597, 34499, 4468, 42930, 95444, 56850, 94111, 99860, 74708, 86701, 94574, 13922, 56950, 6189, 14808, 2265, 23833, 11066, 58453, 38795, 74941, 21177, 55002, 11846, 72403, 14205, 84494, 61418, 44214, 61209, 54619, 10584, 51915, 47491, 75436, 96250, 48469, 75115, 48800, 28916, 69884, 45780, 64402, 93234, 27683, 8805, 60172, 66209, 81949, 44937, 98190, 14696, 71634, 73972, 21069, 6492, 77507, 55197, 41743, 51240, 55763, 14713, 10037, 29651, 6243, 61871, 43796, 77436, 75646, 54575, 61041, 34714, 88158, 56598, 80841, 75838, 19286, 46030, 28500, 92609, 22119, 87668, 24413, 40225, 45894, 64500, 31587, 3932, 88707, 76659, 53095, 25288, 44194, 24368, 84313, 56909, 44929, 10428, 51974, 93540, 68875, 28806, 53727, 99141, 51471, 80503, 4753, 48268, 30014, 18306, 776, 18846, 84022, 429, 52336, 65951, 64850, 38438, 1427, 83178, 53524, 26421, 38257, 8547, 72427, 50338, 19519, 29568, 73992, 61824, 25181, 66868, 1172, 63904, 27861, 33928, 42338, 98831, 44950, 12106, 58851, 58293, 34917, 91025, 34147, 61469, 38407, 56211, 5089, 69957, 40400, 39805, 94632, 67729, 70051, 2759, 14122, 85643, 85936, 11901, 96113, 71769, 82562, 98485, 71201, 53932, 92049, 73403, 12204, 10049, 81617, 66719, 60462, 79277, 32722, 7354, 80601, 48166, 53234, 41695, 13183, 18214, 15249, 96125, 92339, 79243, 52578, 62142, 40295, 44688, 16462, 15693, 84104, 50655, 34818, 1816, 70766, 53253, 36489, 65947, 43108, 14584, 55517, 33418, 42031, 29737, 13462, 40359, 75893, 32998, 45688, 21623, 53187, 25736, 65960, 2165, 41201, 95357, 89703, 41770, 58137, 8978, 52616, 97188, 82427, 34100, 26453, 49716, 92733, 67276, 14796, 31867, 39543, 32004, 97700, 4322, 60945, 79387, 11789, 34244, 8047, 45187, 76781, 36291, 44876, 81700, 53039, 88526, 70159, 41546, 35493, 97934, 75218, 39814, 1639, 79107, 32476, 20121, 78415, 33777, 50071, 55927, 68162, 17289, 2037, 39175, 41566, 97072, 62811, 4927, 48338, 45579, 805, 36229, 20685, 2293, 81182, 12082, 89704, 73214, 92565, 60831, 80970, 45359, 56960, 13484, 23981, 89839, 4566, 78443, 8708, 56264, 38887, 29842, 78155, 30716, 45187, 31166, 63067, 14623, 37184, 92621, 59531, 3225, 87290, 80173, 13914, 16702, 74956, 93885, 61721, 44665, 99454, 24635, 28109, 83216, 68509, 97965, 18676, 46159, 18350, 99638, 7627, 90905, 41246, 92043, 11066, 75179, 4776, 80985, 68352, 50462, 12609, 13448, 38972, 63880, 59937, 66960, 82312, 63878, 53437, 45889, 48950, 92579, 55456, 29526, 32861, 84632, 67477, 55800, 62154, 26399, 88680, 64303, 7892, 18867, 11140, 59053, 90948, 51836, 1685, 67763, 64047, 48778, 12047, 29455, 30176, 24301, 83578, 38029, 91397, 89852, 92356, 12382, 93476, 26589, 39252, 52950, 73636, 71981, 82717, 89217, 32459, 19290, 19446, 60221, 55839, 69729, 57379, 84037, 58876, 5725, 53211, 90510, 74593, 91144, 14392, 96991, 9096, 91884, 56310, 50198, 66781, 11930, 4792, 71130, 57935, 17428, 27324, 45962, 93361, 58522, 50091, 38378, 62088, 45705, 79634, 58850, 40032, 65552, 33526, 55167, 96178, 16759, 46876, 70068, 34972, 76505, 64242, 48702, 8587, 92637, 3118, 44956, 44985, 57094, 82620, 90676, 6533, 21319, 19077, 1419, 49257, 1452, 5050, 51588, 74004, 92341, 4989, 70364, 63338, 38630, 77047, 69485, 71557, 73199, 14931, 67666, 54427, 58, 2563, 97061, 83893, 43811, 42916, 72241, 52264, 66856, 39109, 5843, 76317, 57275, 58307, 86113, 97609, 63120, 6721, 51998, 47234, 41757, 60908, 16528, 66723, 24610, 34889, 78504, 34908, 64192, 19366, 95240, 14960, 19044, 80625, 6725, 24992, 95564, 147, 96383, 18877, 17228, 49777, 79751, 75648, 25262, 63168, 8913, 9271, 2266, 86627, 36799, 77901, 24720, 75523, 13231, 92041, 31761, 62947, 98535, 78774, 49969, 36368, 65345, 70383, 50189, 77553, 39142, 3079, 92764, 68086, 25747, 94351, 33707, 52476, 43154, 1877, 97662, 96502, 42245, 7491, 58302, 44743, 48639, 18565, 69871, 39242, 34939, 68791, 47047, 39176, 16624, 48677, 93423, 15801, 71757, 81420, 19248, 68543, 72089, 3747, 10242, 50826, 15122, 18500, 94160, 85247, 39450, 58177, 22826, 3232, 43482, 64221, 33905, 82254, 71478, 12319, 7361, 33713, 50827, 18713, 7643, 15762, 50950, 45541, 8586, 3369, 84410, 24027, 81407, 60970, 65842, 60712, 24743, 23464, 43014, 60205, 24325, 85667, 52936, 6678, 62689, 91564, 81835, 93455, 87261, 27394, 90000, 6256, 60508, 62127, 28233, 53259, 53979, 87864, 12969, 67967, 2289, 67780, 8413, 30791, 759, 60367, 25191, 5883, 55298, 28953, 23005, 4367, 64117, 92151, 61491, 28391, 91886, 73418, 91474, 27107, 1154, 61568, 39490, 12036, 27764, 83242, 78040, 97686, 83791, 57157, 60344, 75622, 54055, 9464, 48696, 28409, 2890, 20331, 77766, 56703, 41480, 48876, 33238, 94683, 57302, 94757, 10550, 11235, 15938, 50852, 38721, 75180, 52433, 69943, 68724, 43361, 12613, 10948, 81323, 85446, 19626, 76597, 15323, 99009, 17353, 5227, 25248, 98376, 19495, 3402, 38885, 89262, 38575, 36304, 52181, 58648, 93121, 39331, 58156, 75717, 78918, 71730, 26551, 25945, 84424, 23848, 73295, 64124, 80395, 39295, 90906, 57632, 59729, 93564, 24713, 64726, 2155, 81511, 84835, 67402, 88866, 36782, 96362, 1004, 21196, 38013, 8110, 32004, 32198, 71386, 69729, 88850, 32945, 91185, 88891, 28918, 44114, 78641, 69442, 65902, 76258, 7300, 38409, 81702, 6094, 8918, 46059, 54609, 38103, 86795, 1211, 16301, 25013, 25882, 22644, 83186, 98868, 80937], thresh: int=10011161178):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=399, beta=141, xs=[0, 48, 62, 821, 1362, 1604, 1605, 1609, 1667, 1724, 1920, 2039, 2123, 2562, 2566, 2573, 2574, 2576, 2579, 2588, 2611, 2617, 2660, 2667, 2714, 2734, 2734, 2734, 2734, 2734, 2735, 2796, 3696, 3892, 4220, 4391, 4399, 4416, 4455, 4475, 4484, 4497, 4886, 4893, 4906, 4971, 4976, 4978, 4978, 4978, 4979, 5003, 5015, 5254, 5309, 5551, 5595, 5615, 5616, 5628, 5646, 5718, 5718, 5719, 5741, 5830, 5855, 5856, 5862, 5902, 5910, 5922, 5923, 5923, 5924, 5989, 6008, 6023, 6089, 6501, 6617, 6633, 6672, 6932, 7004, 7037, 7148, 7154, 7568, 7796, 7914, 7944, 7968, 7968, 7969, 7978, 8175, 8271, 8298, 8309, 8311, 8311, 8312, 8556, 8558, 8558, 8558, 8558, 8558, 8558, 8558, 8558, 8558, 8558, 8558, 8558, 8558, 8558, 8558, 8558, 8558, 8558, 8558, 8558, 8559, 8961, 9112, 9143, 9153, 9161, 9163, 9191, 9191, 9191, 9192, 9195, 9209, 9238, 9293, 9322, 9460, 9571, 9578, 9583, 9604, 9614, 9621, 9621, 9622, 9623, 9624, 9634, 9698, 9724, 9909, 9911, 9912, 9942, 9953, 9956, 9956, 9959, 10008, 10067, 10201, 10288, 10416, 10422, 10422, 10423, 10423, 10424, 10425, 10425, 10425, 10425, 10425, 10425, 10426, 10523, 10650, 10653, 10663, 10818, 10852, 10859, 10921, 11038, 11084, 11112, 11445, 11460, 11461, 11487, 11526, 11531, 11541, 11546, 11616, 11619, 11638, 11677, 11684, 11687, 11916, 12028, 12047, 12073, 12090, 12098, 12102, 12104, 12106, 12106, 12106, 12107, 12425, 12450, 12699, 12731, 12863, 13011, 13339, 13363, 13388, 13435, 13556, 13591, 13617, 13618, 13625, 13629, 13659, 13664, 13682, 13948, 14088, 14123, 14205, 14207, 14207, 14208, 14208, 14209, 14461, 14465, 14465, 14465, 14465, 14465, 14465, 14465, 14465, 14465, 14465, 14465, 14465, 14465, 14465, 14465, 14465, 14465, 14465, 14465, 14466, 14800, 15106, 15308, 15319, 15349, 15651, 15853, 16234, 16369, 16534, 16543, 16555, 16556, 16558, 16615, 16619, 16643, 16835, 16957, 17137, 17225, 17229, 17248, 17757, 17923, 17933, 17937, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17938, 17939, 17944, 17989, 17995, 17998, 18090, 18192, 18214, 18252, 18276, 18294, 18326, 18326, 18345, 18345, 18348, 18451, 18489, 18500, 18579, 18632, 18657, 18657, 18668, 18673, 18684, 18696, 18790, 18916, 19105, 19133, 19150, 19156, 19156, 19156, 19157, 19157, 19158, 19379, 19431, 19596, 19649, 19652, 19665, 20006, 20329, 20339, 20563, 20621, 20786, 21145, 21148, 21160, 21165, 21276, 21295, 21334, 21335, 21336, 21336, 21337, 21337, 21337, 21337, 21337, 21337, 21338, 21563, 21563, 21579, 22116, 22141, 22342, 22348, 22364, 22369, 22371, 22371, 22372, 22377, 22378, 22487, 22578, 22579, 22585, 22595, 22595, 22596, 22597, 22828, 22892, 22918, 22961, 23024, 23034, 23050, 23052, 23132, 23170, 23178, 23191, 23296, 23404, 23419, 23427, 23428, 23431, 23431, 23431, 23431, 23431, 23432, 23670, 23674, 23696, 23765, 23920, 23921, 23944, 24000, 24004, 24008, 24021, 24061, 24174, 24325, 24366, 24373, 24376, 24377, 24382, 24382, 24384, 24384, 24384, 24384, 24384, 24385, 24436, 24451, 24465, 24468, 24468, 24469, 24470, 24533, 24654, 24686, 24694, 24696, 24699, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24700, 24701, 25162, 25198, 25486, 25533, 25609, 25953, 26029, 26114, 26337, 26464, 26934, 27050, 27165, 27229, 27636, 27791, 28956, 29157, 29961, 29980, 30185, 30217, 30373, 30508, 30587, 31462, 31561, 31943, 32215, 32228, 32681, 32718, 33018, 33425, 33456, 33521, 33886, 33898, 34048, 34093, 34287, 34377, 34388, 34785, 34837, 34838, 34953, 35188, 35352, 35378, 35853, 36262, 36329, 36338, 36789, 36858, 36911, 37064, 37225, 37573, 37604, 37610, 37775, 37906, 38213, 38291, 38296, 38479, 38863, 38873, 39171, 39323, 39336, 39624, 40569, 40993, 41305, 41845, 41896, 42008, 42604, 42692, 42765, 43029, 43543, 43773, 43936, 43955, 44007, 44469, 44569, 44625, 44645, 45033, 45475, 45545, 45698, 45701, 45720, 45891, 46603, 46759, 46809, 46892, 47813, 48026, 48407, 48456, 49296, 49594, 49619, 49664, 49691, 49893, 49982, 50083, 50126, 50161, 50201, 50365, 51227, 51304, 51376, 51540, 51979, 52068, 52138, 52224, 52430, 52515, 52620, 52750, 52821, 52897, 53115, 53147, 53332, 53339, 53583, 53587, 53885, 54544, 54619, 54877, 55334, 55429, 55864, 55976, 56047, 56091, 56553, 56595, 56758, 56985, 57267, 57466, 57598, 57919, 58310, 58481, 58682, 58759, 58827, 58959, 59055, 59158, 59636, 59696, 59771, 60072, 60184, 60226, 60314, 60547, 60563, 60830, 61135, 61246, 61365, 61560, 61587, 61726, 62120, 62469, 62581, 63236, 63244, 63277, 63289, 63801, 64331, 64385, 64464, 64597, 64845, 64913, 64941, 65021, 65078, 65118, 65225, 65523, 66337, 66576, 66683, 66721, 66932, 67206, 67346, 67468, 67618, 67681, 67867, 67890, 68004, 68305, 68354, 68441, 68696, 69039, 69337, 69516, 69640, 70145, 70149, 70150, 70213, 70232, 70272, 70406, 70769, 70917, 71038, 71074, 71833, 71838, 71907, 71970, 72102, 72156, 72180, 72263, 72304, 72707, 72775, 72918, 73083, 73167, 73247, 73353, 73491, 73621, 73645, 73785, 73841, 73925, 73998, 74060, 74120, 74731, 74769, 74989, 75013, 75062, 75150, 75222, 75340, 75685, 75760, 76001, 76389, 76680, 76705, 76759, 76840, 76886, 77182, 77300, 77397, 77612, 78421, 78446, 78696, 78927, 79000, 79070, 79201, 79787, 79963, 80175, 80703, 81108, 82203, 82447, 82573, 82876, 82892, 83028, 83063, 84386, 84796, 84809, 84944, 85132, 85139, 85259, 85430, 85690, 85917, 86304, 86455, 86511, 87420, 87516, 88017, 88138, 88140, 88227, 88292, 88586, 88920, 89494, 89689, 89795, 90053, 90238, 90637, 90642, 90765, 90849, 90933, 91091, 91259, 91289, 91343, 91505, 91511, 91863, 92413, 92417, 92657, 92941, 93263, 93772, 93889, 93974, 94652, 94946, 95127, 95284, 95566, 95658, 96371, 96614, 96639, 97112, 97926, 97961, 98200, 98674, 98878, 99060, 99066, 99113, 99131, 99212, 99426, 99871, 99939, 100000], ys=[14265, 87053, 18257, 22738, 30927, 17012, 19150, 37002, 46953, 134, 42383, 23041, 17110, 66773, 88830, 76838, 34076, 26287, 37494, 32125, 15842, 15813, 75946, 88467, 27300, 2272, 2067, 71639, 46518, 43477, 51492, 73312, 57872, 45376, 12364, 3591, 87115, 33157, 18887, 57383, 16853, 57105, 91447, 3320, 69763, 37539, 43909, 24144, 56846, 90148, 9559, 8365, 42216, 87265, 56680, 78754, 19823, 70234, 49289, 44544, 2531, 16498, 80365, 8698, 59701, 76606, 10823, 23127, 90662, 39620, 23115, 82522, 55059, 63989, 55251, 70945, 88508, 39341, 22569, 66825, 61679, 1833, 98979, 25469, 33170, 66086, 311, 61795, 46582, 50313, 79634, 46522, 22048, 97779, 49824, 15062, 93034, 83784, 30294, 11912, 21849, 10666, 28252, 81779, 582, 13582, 4625, 56915, 33014, 11443, 31443, 21836, 99252, 24480, 13758, 65965, 14801, 59977, 14573, 12729, 2292, 74393, 89639, 35708, 7070, 67668, 19173, 32589, 50372, 32105, 48191, 25473, 18997, 38468, 37730, 19188, 29223, 26741, 65939, 33477, 74493, 31508, 80453, 47725, 97967, 62737, 19595, 48788, 87590, 12747, 24093, 15971, 20171, 77079, 11713, 32282, 8846, 15128, 14924, 33257, 92780, 97113, 9035, 79284, 40028, 6704, 3451, 76947, 52009, 62817, 36008, 23642, 11158, 98551, 43204, 89145, 91086, 19935, 83770, 75263, 19317, 55264, 67069, 19529, 69249, 20835, 82909, 91658, 54212, 34475, 97537, 5310, 41929, 16578, 80570, 37420, 63569, 85701, 71518, 85942, 52644, 35906, 62898, 32786, 99283, 34667, 12771, 40039, 84101, 27730, 83628, 5299, 31847, 63560, 49257, 76362, 77189, 69091, 23458, 35948, 77446, 28366, 7490, 41400, 89674, 33965, 49593, 90013, 24728, 90010, 51206, 37055, 231, 35644, 3242, 88448, 72896, 41175, 25889, 63453, 61664, 46855, 8513, 31610, 50593, 25049, 21597, 34499, 4468, 42930, 95444, 56850, 94111, 99860, 74708, 86701, 94574, 13922, 56950, 6189, 14808, 2265, 23833, 11066, 58453, 38795, 74941, 21177, 55002, 11846, 72403, 14205, 84494, 61418, 44214, 61209, 54619, 10584, 51915, 47491, 75436, 96250, 48469, 75115, 48800, 28916, 69884, 45780, 64402, 93234, 27683, 8805, 60172, 66209, 81949, 44937, 98190, 14696, 71634, 73972, 21069, 6492, 77507, 55197, 41743, 51240, 55763, 14713, 10037, 29651, 6243, 61871, 43796, 77436, 75646, 54575, 61041, 34714, 88158, 56598, 80841, 75838, 19286, 46030, 28500, 92609, 22119, 87668, 24413, 40225, 45894, 64500, 31587, 3932, 88707, 76659, 53095, 25288, 44194, 24368, 84313, 56909, 44929, 10428, 51974, 93540, 68875, 28806, 53727, 99141, 51471, 80503, 4753, 48268, 30014, 18306, 776, 18846, 84022, 429, 52336, 65951, 64850, 38438, 1427, 83178, 53524, 26421, 38257, 8547, 72427, 50338, 19519, 29568, 73992, 61824, 25181, 66868, 1172, 63904, 27861, 33928, 42338, 98831, 44950, 12106, 58851, 58293, 34917, 91025, 34147, 61469, 38407, 56211, 5089, 69957, 40400, 39805, 94632, 67729, 70051, 2759, 14122, 85643, 85936, 11901, 96113, 71769, 82562, 98485, 71201, 53932, 92049, 73403, 12204, 10049, 81617, 66719, 60462, 79277, 32722, 7354, 80601, 48166, 53234, 41695, 13183, 18214, 15249, 96125, 92339, 79243, 52578, 62142, 40295, 44688, 16462, 15693, 84104, 50655, 34818, 1816, 70766, 53253, 36489, 65947, 43108, 14584, 55517, 33418, 42031, 29737, 13462, 40359, 75893, 32998, 45688, 21623, 53187, 25736, 65960, 2165, 41201, 95357, 89703, 41770, 58137, 8978, 52616, 97188, 82427, 34100, 26453, 49716, 92733, 67276, 14796, 31867, 39543, 32004, 97700, 4322, 60945, 79387, 11789, 34244, 8047, 45187, 76781, 36291, 44876, 81700, 53039, 88526, 70159, 41546, 35493, 97934, 75218, 39814, 1639, 79107, 32476, 20121, 78415, 33777, 50071, 55927, 68162, 17289, 2037, 39175, 41566, 97072, 62811, 4927, 48338, 45579, 805, 36229, 20685, 2293, 81182, 12082, 89704, 73214, 92565, 60831, 80970, 45359, 56960, 13484, 23981, 89839, 4566, 78443, 8708, 56264, 38887, 29842, 78155, 30716, 45187, 31166, 63067, 14623, 37184, 92621, 59531, 3225, 87290, 80173, 13914, 16702, 74956, 93885, 61721, 44665, 99454, 24635, 28109, 83216, 68509, 97965, 18676, 46159, 18350, 99638, 7627, 90905, 41246, 92043, 11066, 75179, 4776, 80985, 68352, 50462, 12609, 13448, 38972, 63880, 59937, 66960, 82312, 63878, 53437, 45889, 48950, 92579, 55456, 29526, 32861, 84632, 67477, 55800, 62154, 26399, 88680, 64303, 7892, 18867, 11140, 59053, 90948, 51836, 1685, 67763, 64047, 48778, 12047, 29455, 30176, 24301, 83578, 38029, 91397, 89852, 92356, 12382, 93476, 26589, 39252, 52950, 73636, 71981, 82717, 89217, 32459, 19290, 19446, 60221, 55839, 69729, 57379, 84037, 58876, 5725, 53211, 90510, 74593, 91144, 14392, 96991, 9096, 91884, 56310, 50198, 66781, 11930, 4792, 71130, 57935, 17428, 27324, 45962, 93361, 58522, 50091, 38378, 62088, 45705, 79634, 58850, 40032, 65552, 33526, 55167, 96178, 16759, 46876, 70068, 34972, 76505, 64242, 48702, 8587, 92637, 3118, 44956, 44985, 57094, 82620, 90676, 6533, 21319, 19077, 1419, 49257, 1452, 5050, 51588, 74004, 92341, 4989, 70364, 63338, 38630, 77047, 69485, 71557, 73199, 14931, 67666, 54427, 58, 2563, 97061, 83893, 43811, 42916, 72241, 52264, 66856, 39109, 5843, 76317, 57275, 58307, 86113, 97609, 63120, 6721, 51998, 47234, 41757, 60908, 16528, 66723, 24610, 34889, 78504, 34908, 64192, 19366, 95240, 14960, 19044, 80625, 6725, 24992, 95564, 147, 96383, 18877, 17228, 49777, 79751, 75648, 25262, 63168, 8913, 9271, 2266, 86627, 36799, 77901, 24720, 75523, 13231, 92041, 31761, 62947, 98535, 78774, 49969, 36368, 65345, 70383, 50189, 77553, 39142, 3079, 92764, 68086, 25747, 94351, 33707, 52476, 43154, 1877, 97662, 96502, 42245, 7491, 58302, 44743, 48639, 18565, 69871, 39242, 34939, 68791, 47047, 39176, 16624, 48677, 93423, 15801, 71757, 81420, 19248, 68543, 72089, 3747, 10242, 50826, 15122, 18500, 94160, 85247, 39450, 58177, 22826, 3232, 43482, 64221, 33905, 82254, 71478, 12319, 7361, 33713, 50827, 18713, 7643, 15762, 50950, 45541, 8586, 3369, 84410, 24027, 81407, 60970, 65842, 60712, 24743, 23464, 43014, 60205, 24325, 85667, 52936, 6678, 62689, 91564, 81835, 93455, 87261, 27394, 90000, 6256, 60508, 62127, 28233, 53259, 53979, 87864, 12969, 67967, 2289, 67780, 8413, 30791, 759, 60367, 25191, 5883, 55298, 28953, 23005, 4367, 64117, 92151, 61491, 28391, 91886, 73418, 91474, 27107, 1154, 61568, 39490, 12036, 27764, 83242, 78040, 97686, 83791, 57157, 60344, 75622, 54055, 9464, 48696, 28409, 2890, 20331, 77766, 56703, 41480, 48876, 33238, 94683, 57302, 94757, 10550, 11235, 15938, 50852, 38721, 75180, 52433, 69943, 68724, 43361, 12613, 10948, 81323, 85446, 19626, 76597, 15323, 99009, 17353, 5227, 25248, 98376, 19495, 3402, 38885, 89262, 38575, 36304, 52181, 58648, 93121, 39331, 58156, 75717, 78918, 71730, 26551, 25945, 84424, 23848, 73295, 64124, 80395, 39295, 90906, 57632, 59729, 93564, 24713, 64726, 2155, 81511, 84835, 67402, 88866, 36782, 96362, 1004, 21196, 38013, 8110, 32004, 32198, 71386, 69729, 88850, 32945, 91185, 88891, 28918, 44114, 78641, 69442, 65902, 76258, 7300, 38409, 81702, 6094, 8918, 46059, 54609, 38103, 86795, 1211, 16301, 25013, 25882, 22644, 83186, 98868, 80937], thresh=10011161178):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_11",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=12, beta: int=810, xs: List[int]=[0, 32, 127, 148, 155, 159, 159, 159, 159, 159, 160, 601, 1646, 2510, 2676, 2868, 3247, 3470, 7371, 7810, 8028, 8190, 8677, 8949, 9055, 9572, 9716, 9796, 9797, 10026, 10137, 10454, 10483, 10756, 10785, 10815, 10827, 10859, 10867, 10867, 10876, 10881, 10882, 10894, 10930, 12238, 12256, 12267, 12447, 13086, 13289, 14017, 14190, 14246, 14304, 14333, 14374, 14381, 14864, 14957, 15440, 16055, 16345, 16985, 16988, 17179, 17181, 17205, 17208, 17212, 17213, 17213, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17215, 18044, 18528, 18565, 18852, 19137, 20316, 20628, 21348, 21425, 21486, 21547, 21723, 21983, 22028, 22028, 22028, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22030, 23844, 24972, 26987, 30192, 30233, 30243, 30260, 30772, 30905, 31232, 31287, 31540, 31574, 31576, 31580, 31582, 31878, 32418, 32601, 33145, 33320, 34623, 34627, 34896, 34903, 35251, 35270, 35331, 35388, 35390, 35400, 35400, 35400, 35400, 35400, 35400, 35401, 35574, 35812, 36313, 36334, 36334, 36337, 36339, 36395, 36399, 36445, 36565, 36931, 37946, 37972, 38249, 38313, 38390, 38645, 38954, 39091, 39126, 39143, 39261, 39264, 39265, 39276, 39278, 39280, 39284, 39288, 39302, 39316, 39731, 39975, 40786, 41555, 41664, 42155, 42164, 42245, 42376, 44520, 45322, 45658, 45688, 45791, 45860, 45880, 45883, 45883, 45884, 45884, 45884, 45884, 45884, 45884, 45884, 45884, 45884, 45884, 45884, 45884, 45885, 45951, 46017, 46209, 46249, 46596, 46710, 46770, 46852, 46949, 47786, 47864, 48362, 48479, 49335, 49404, 49645, 49849, 49862, 49866, 49866, 49867, 49867, 49868, 49940, 50551, 50784, 50863, 50908, 53168, 53249, 53376, 53436, 53470, 53470, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53482, 53760, 53761, 53783, 53824, 53862, 54316, 54324, 54452, 54482, 54532, 54755, 55774, 56213, 56259, 56405, 58385, 58999, 59484, 59487, 59826, 59855, 60007, 60256, 60260, 60260, 60261, 60270, 60279, 60792, 60980, 61071, 61079, 61091, 61091, 61091, 61091, 61092, 61218, 61594, 61702, 61871, 61899, 61908, 61928, 61929, 61939, 61946, 61953, 61953, 61956, 65432, 65450, 66782, 67010, 67218, 67240, 67390, 69720, 69784, 70471, 70522, 70591, 70689, 70823, 70828, 70828, 70829, 71347, 71506, 71544, 72204, 72365, 72527, 72582, 73733, 73943, 74177, 76332, 76356, 76645, 77037, 77333, 77735, 77759, 77796, 78506, 79008, 81080, 81096, 81590, 81645, 81815, 82778, 82951, 83074, 83375, 83549, 84966, 85015, 85109, 86090, 86451, 88680, 88814, 88884, 89324, 89366, 89605, 89652, 89733, 89749, 90502, 90590, 90597, 90611, 90633, 90670, 90671, 90682, 90771, 91175, 91192, 91199, 91207, 92167, 92618, 93248, 93252, 93272, 93273, 93277, 93318, 93321, 93338, 93450, 93711, 93871, 94829, 94839, 95473, 95521, 95858, 95954, 96013, 96127, 96134, 96138, 96139, 97626, 98492, 99262, 99882, 99927, 99939, 99939, 99969, 99988, 99990, 99993, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 100000], ys: List[int]=[58969, 22396, 36366, 50168, 12556, 56315, 3662, 14343, 1399, 48352, 38014, 94674, 57986, 37805, 33329, 81217, 59162, 18258, 87522, 88969, 4599, 37961, 2336, 48778, 58197, 19017, 76909, 27057, 42163, 76908, 82542, 56140, 36006, 94047, 39669, 74101, 52262, 12764, 66467, 62413, 83289, 28513, 59199, 73463, 81801, 21303, 53909, 55639, 90539, 86515, 59475, 80556, 19326, 87761, 95165, 85962, 32352, 75090, 51884, 37624, 92828, 11746, 19015, 59305, 5397, 35637, 45651, 79325, 23947, 6113, 83280, 81580, 98863, 28520, 64632, 2681, 24003, 31946, 45559, 74226, 86895, 19853, 96038, 4447, 82949, 29170, 28734, 16021, 68241, 68134, 29222, 63438, 34355, 41167, 79462, 6610, 33042, 95867, 7499, 47316, 68144, 34004, 24563, 33245, 98823, 45952, 22776, 36795, 58179, 52762, 35355, 67821, 42269, 48092, 53713, 19024, 56262, 21840, 81965, 85445, 86007, 10285, 61416, 30457, 25424, 25559, 73026, 43037, 97901, 24371, 31090, 43332, 36830, 79742, 89558, 3422, 20419, 97491, 74740, 26448, 64313, 11552, 15654, 54302, 19892, 97598, 30333, 85627, 25110, 9086, 18483, 29846, 35755, 42184, 77416, 884, 84723, 36608, 74444, 46807, 38306, 93043, 32297, 76467, 32135, 61392, 68440, 41908, 26368, 28024, 67000, 89218, 14023, 66830, 66053, 55927, 51873, 54237, 43345, 52121, 53675, 57953, 95535, 93126, 78724, 87204, 55302, 26602, 31880, 3525, 16291, 90345, 81043, 76647, 43947, 57846, 46388, 2062, 21935, 8585, 5845, 80075, 95022, 80338, 19667, 57308, 91766, 56161, 16616, 99653, 4145, 51838, 8580, 32325, 41165, 73829, 97019, 38577, 64681, 65030, 80865, 56320, 5978, 88092, 51275, 79097, 87756, 86522, 254, 80187, 56489, 78706, 5241, 42168, 11020, 98652, 14072, 87064, 47197, 74875, 14117, 37102, 40202, 39674, 63620, 17765, 88417, 63587, 48735, 34, 19864, 61335, 85496, 99395, 82658, 41853, 48742, 77444, 50981, 15898, 72037, 7789, 14776, 70329, 2750, 21732, 56915, 33765, 8529, 60494, 96928, 48338, 84969, 65877, 38682, 91758, 44996, 44083, 96797, 49706, 16116, 10637, 57378, 34322, 94252, 15494, 86552, 82815, 10750, 95259, 93834, 18599, 53466, 92802, 47738, 47850, 89534, 28966, 89365, 88965, 27092, 58427, 89184, 47551, 54827, 60961, 87336, 7747, 22100, 80278, 36534, 14662, 93631, 80342, 85806, 27857, 73998, 53152, 95594, 11456, 10763, 97646, 24161, 65615, 31180, 73766, 25755, 38904, 30329, 13297, 73700, 43870, 31398, 10405, 5701, 51060, 79067, 20901, 76932, 37266, 22030, 6187, 21990, 68793, 36009, 47658, 85339, 6075, 67805, 87315, 48429, 12002, 30120, 10458, 19699, 782, 40896, 8208, 32487, 9141, 81965, 63116, 88999, 35860, 9314, 22867, 50134, 84653, 84439, 58404, 22564, 58111, 11428, 43161, 24147, 16079, 46643, 24668, 41417, 52236, 5482, 62017, 21551, 99193, 63947, 55732, 97550, 4349, 74098, 68642, 93335, 61166, 60609, 75518, 95909, 6028, 9556, 42199, 90140, 35130, 32852, 44137, 10629, 50359, 86167, 59226, 78948, 55899, 59882, 49035, 21155, 44381, 70603, 38094, 75263, 62239, 58902, 51165, 4274, 27981, 7792, 88194, 23582, 66432, 50433, 56423, 75615, 49181, 42939, 88610, 13541, 47420, 7168, 53746, 38886, 51487, 61075, 75082, 39121, 78590, 62772, 12805, 90658, 27037, 5681, 78396, 20900, 95564, 430, 34401, 46275, 15678, 39635, 81860, 57679, 1259, 66573, 72102, 84269, 28613, 70431, 49311, 67323, 99047, 15810, 56839, 97533, 39671, 71017, 6229, 81708, 18763, 85338, 84173, 34865, 79283, 4327, 61310, 18612, 71133, 41765, 63926, 3557, 56390, 71130, 89923, 18113, 11816, 14956, 6857, 17450, 90162, 56519, 58416, 25257, 88295, 85612, 76722, 75234, 70013, 73985, 6727, 27070, 13102, 74240, 72440, 42385, 95355, 979, 91917, 23000, 81040, 58329, 3001, 97715, 3829, 50311, 56912, 79949, 71684, 50828, 858, 43560, 27311, 57021, 42289, 9024, 77549, 57460, 89930, 8438, 8699, 14561, 20379, 31657, 44907, 91136, 21522, 459, 5332, 6322, 39238, 73156, 65323, 5534, 22796, 16758, 72142, 32542, 86805, 56445, 75474, 64682, 40434, 4442, 93021, 54242, 33785, 34145, 18900, 89762, 95899, 75619, 81830, 34043, 18572, 82501, 39587, 25144, 39999, 78715, 21007, 34311, 43894, 63071, 20110, 75824, 10510, 31770, 22853, 4293, 7136, 64140, 33404, 30526, 6511, 52354, 70557, 71890, 70808, 63652, 92897, 73910, 41548, 2387, 19706, 49174, 93501, 59105, 45337, 95539, 37036, 90576, 31224, 45588, 84100, 42044, 46081, 61983, 70400, 35828, 8285, 88782, 60472, 24766, 74283, 93092], thresh: int=98322891228):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=12, beta=810, xs=[0, 32, 127, 148, 155, 159, 159, 159, 159, 159, 160, 601, 1646, 2510, 2676, 2868, 3247, 3470, 7371, 7810, 8028, 8190, 8677, 8949, 9055, 9572, 9716, 9796, 9797, 10026, 10137, 10454, 10483, 10756, 10785, 10815, 10827, 10859, 10867, 10867, 10876, 10881, 10882, 10894, 10930, 12238, 12256, 12267, 12447, 13086, 13289, 14017, 14190, 14246, 14304, 14333, 14374, 14381, 14864, 14957, 15440, 16055, 16345, 16985, 16988, 17179, 17181, 17205, 17208, 17212, 17213, 17213, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17214, 17215, 18044, 18528, 18565, 18852, 19137, 20316, 20628, 21348, 21425, 21486, 21547, 21723, 21983, 22028, 22028, 22028, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22029, 22030, 23844, 24972, 26987, 30192, 30233, 30243, 30260, 30772, 30905, 31232, 31287, 31540, 31574, 31576, 31580, 31582, 31878, 32418, 32601, 33145, 33320, 34623, 34627, 34896, 34903, 35251, 35270, 35331, 35388, 35390, 35400, 35400, 35400, 35400, 35400, 35400, 35401, 35574, 35812, 36313, 36334, 36334, 36337, 36339, 36395, 36399, 36445, 36565, 36931, 37946, 37972, 38249, 38313, 38390, 38645, 38954, 39091, 39126, 39143, 39261, 39264, 39265, 39276, 39278, 39280, 39284, 39288, 39302, 39316, 39731, 39975, 40786, 41555, 41664, 42155, 42164, 42245, 42376, 44520, 45322, 45658, 45688, 45791, 45860, 45880, 45883, 45883, 45884, 45884, 45884, 45884, 45884, 45884, 45884, 45884, 45884, 45884, 45884, 45884, 45885, 45951, 46017, 46209, 46249, 46596, 46710, 46770, 46852, 46949, 47786, 47864, 48362, 48479, 49335, 49404, 49645, 49849, 49862, 49866, 49866, 49867, 49867, 49868, 49940, 50551, 50784, 50863, 50908, 53168, 53249, 53376, 53436, 53470, 53470, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53481, 53482, 53760, 53761, 53783, 53824, 53862, 54316, 54324, 54452, 54482, 54532, 54755, 55774, 56213, 56259, 56405, 58385, 58999, 59484, 59487, 59826, 59855, 60007, 60256, 60260, 60260, 60261, 60270, 60279, 60792, 60980, 61071, 61079, 61091, 61091, 61091, 61091, 61092, 61218, 61594, 61702, 61871, 61899, 61908, 61928, 61929, 61939, 61946, 61953, 61953, 61956, 65432, 65450, 66782, 67010, 67218, 67240, 67390, 69720, 69784, 70471, 70522, 70591, 70689, 70823, 70828, 70828, 70829, 71347, 71506, 71544, 72204, 72365, 72527, 72582, 73733, 73943, 74177, 76332, 76356, 76645, 77037, 77333, 77735, 77759, 77796, 78506, 79008, 81080, 81096, 81590, 81645, 81815, 82778, 82951, 83074, 83375, 83549, 84966, 85015, 85109, 86090, 86451, 88680, 88814, 88884, 89324, 89366, 89605, 89652, 89733, 89749, 90502, 90590, 90597, 90611, 90633, 90670, 90671, 90682, 90771, 91175, 91192, 91199, 91207, 92167, 92618, 93248, 93252, 93272, 93273, 93277, 93318, 93321, 93338, 93450, 93711, 93871, 94829, 94839, 95473, 95521, 95858, 95954, 96013, 96127, 96134, 96138, 96139, 97626, 98492, 99262, 99882, 99927, 99939, 99939, 99969, 99988, 99990, 99993, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 100000], ys=[58969, 22396, 36366, 50168, 12556, 56315, 3662, 14343, 1399, 48352, 38014, 94674, 57986, 37805, 33329, 81217, 59162, 18258, 87522, 88969, 4599, 37961, 2336, 48778, 58197, 19017, 76909, 27057, 42163, 76908, 82542, 56140, 36006, 94047, 39669, 74101, 52262, 12764, 66467, 62413, 83289, 28513, 59199, 73463, 81801, 21303, 53909, 55639, 90539, 86515, 59475, 80556, 19326, 87761, 95165, 85962, 32352, 75090, 51884, 37624, 92828, 11746, 19015, 59305, 5397, 35637, 45651, 79325, 23947, 6113, 83280, 81580, 98863, 28520, 64632, 2681, 24003, 31946, 45559, 74226, 86895, 19853, 96038, 4447, 82949, 29170, 28734, 16021, 68241, 68134, 29222, 63438, 34355, 41167, 79462, 6610, 33042, 95867, 7499, 47316, 68144, 34004, 24563, 33245, 98823, 45952, 22776, 36795, 58179, 52762, 35355, 67821, 42269, 48092, 53713, 19024, 56262, 21840, 81965, 85445, 86007, 10285, 61416, 30457, 25424, 25559, 73026, 43037, 97901, 24371, 31090, 43332, 36830, 79742, 89558, 3422, 20419, 97491, 74740, 26448, 64313, 11552, 15654, 54302, 19892, 97598, 30333, 85627, 25110, 9086, 18483, 29846, 35755, 42184, 77416, 884, 84723, 36608, 74444, 46807, 38306, 93043, 32297, 76467, 32135, 61392, 68440, 41908, 26368, 28024, 67000, 89218, 14023, 66830, 66053, 55927, 51873, 54237, 43345, 52121, 53675, 57953, 95535, 93126, 78724, 87204, 55302, 26602, 31880, 3525, 16291, 90345, 81043, 76647, 43947, 57846, 46388, 2062, 21935, 8585, 5845, 80075, 95022, 80338, 19667, 57308, 91766, 56161, 16616, 99653, 4145, 51838, 8580, 32325, 41165, 73829, 97019, 38577, 64681, 65030, 80865, 56320, 5978, 88092, 51275, 79097, 87756, 86522, 254, 80187, 56489, 78706, 5241, 42168, 11020, 98652, 14072, 87064, 47197, 74875, 14117, 37102, 40202, 39674, 63620, 17765, 88417, 63587, 48735, 34, 19864, 61335, 85496, 99395, 82658, 41853, 48742, 77444, 50981, 15898, 72037, 7789, 14776, 70329, 2750, 21732, 56915, 33765, 8529, 60494, 96928, 48338, 84969, 65877, 38682, 91758, 44996, 44083, 96797, 49706, 16116, 10637, 57378, 34322, 94252, 15494, 86552, 82815, 10750, 95259, 93834, 18599, 53466, 92802, 47738, 47850, 89534, 28966, 89365, 88965, 27092, 58427, 89184, 47551, 54827, 60961, 87336, 7747, 22100, 80278, 36534, 14662, 93631, 80342, 85806, 27857, 73998, 53152, 95594, 11456, 10763, 97646, 24161, 65615, 31180, 73766, 25755, 38904, 30329, 13297, 73700, 43870, 31398, 10405, 5701, 51060, 79067, 20901, 76932, 37266, 22030, 6187, 21990, 68793, 36009, 47658, 85339, 6075, 67805, 87315, 48429, 12002, 30120, 10458, 19699, 782, 40896, 8208, 32487, 9141, 81965, 63116, 88999, 35860, 9314, 22867, 50134, 84653, 84439, 58404, 22564, 58111, 11428, 43161, 24147, 16079, 46643, 24668, 41417, 52236, 5482, 62017, 21551, 99193, 63947, 55732, 97550, 4349, 74098, 68642, 93335, 61166, 60609, 75518, 95909, 6028, 9556, 42199, 90140, 35130, 32852, 44137, 10629, 50359, 86167, 59226, 78948, 55899, 59882, 49035, 21155, 44381, 70603, 38094, 75263, 62239, 58902, 51165, 4274, 27981, 7792, 88194, 23582, 66432, 50433, 56423, 75615, 49181, 42939, 88610, 13541, 47420, 7168, 53746, 38886, 51487, 61075, 75082, 39121, 78590, 62772, 12805, 90658, 27037, 5681, 78396, 20900, 95564, 430, 34401, 46275, 15678, 39635, 81860, 57679, 1259, 66573, 72102, 84269, 28613, 70431, 49311, 67323, 99047, 15810, 56839, 97533, 39671, 71017, 6229, 81708, 18763, 85338, 84173, 34865, 79283, 4327, 61310, 18612, 71133, 41765, 63926, 3557, 56390, 71130, 89923, 18113, 11816, 14956, 6857, 17450, 90162, 56519, 58416, 25257, 88295, 85612, 76722, 75234, 70013, 73985, 6727, 27070, 13102, 74240, 72440, 42385, 95355, 979, 91917, 23000, 81040, 58329, 3001, 97715, 3829, 50311, 56912, 79949, 71684, 50828, 858, 43560, 27311, 57021, 42289, 9024, 77549, 57460, 89930, 8438, 8699, 14561, 20379, 31657, 44907, 91136, 21522, 459, 5332, 6322, 39238, 73156, 65323, 5534, 22796, 16758, 72142, 32542, 86805, 56445, 75474, 64682, 40434, 4442, 93021, 54242, 33785, 34145, 18900, 89762, 95899, 75619, 81830, 34043, 18572, 82501, 39587, 25144, 39999, 78715, 21007, 34311, 43894, 63071, 20110, 75824, 10510, 31770, 22853, 4293, 7136, 64140, 33404, 30526, 6511, 52354, 70557, 71890, 70808, 63652, 92897, 73910, 41548, 2387, 19706, 49174, 93501, 59105, 45337, 95539, 37036, 90576, 31224, 45588, 84100, 42044, 46081, 61983, 70400, 35828, 8285, 88782, 60472, 24766, 74283, 93092], thresh=98322891228):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_12",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=14, beta: int=53, xs: List[int]=[0, 1048, 1183, 1763, 1775, 1776, 1776, 1776, 1776, 1776, 1776, 1776, 1776, 1776, 1776, 1776, 1776, 1776, 1776, 1776, 1776, 1777, 6418, 7084, 7843, 9530, 11146, 12186, 14051, 17293, 20214, 22771, 23287, 23313, 25683, 25730, 26306, 26537, 26946, 29281, 30569, 37695, 41390, 41569, 42208, 44049, 45066, 46483, 46591, 47322, 47607, 49410, 49649, 49836, 49973, 52845, 55702, 56480, 58533, 60379, 60437, 60673, 61888, 66404, 66599, 67536, 68046, 68637, 68988, 69211, 72730, 72958, 73111, 73328, 73695, 74517, 74987, 75185, 79061, 80210, 81386, 82232, 82562, 87182, 87513, 90285, 90330, 90452, 90739, 91737, 94810, 95275, 95527, 95882, 95959, 97653, 98327, 99023, 100000], ys: List[int]=[1422, 55801, 47473, 26825, 14826, 63825, 91321, 78348, 35824, 86531, 30257, 25114, 10427, 45983, 4043, 30966, 29136, 36329, 38745, 35257, 98360, 40949, 8170, 85406, 6936, 36316, 69459, 32758, 16382, 71813, 88931, 43174, 9740, 3587, 47632, 43026, 15224, 6363, 87179, 17580, 34284, 81639, 53241, 65546, 15515, 60369, 85076, 8982, 13981, 99539, 82829, 64177, 2732, 36859, 70589, 13144, 1150, 66067, 96857, 17734, 20725, 68539, 31300, 41160, 54124, 12744, 5491, 45179, 28135, 10856, 90769, 88854, 82362, 2031, 58653, 3137, 85983, 61733, 81674, 49352, 25346, 77035, 33032, 47580, 7919, 45726, 78897, 63882, 59063, 30781, 38682, 20402, 10574, 20519, 92163, 49038, 90258, 4063, 80943], thresh: int=14569769396):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=14, beta=53, xs=[0, 1048, 1183, 1763, 1775, 1776, 1776, 1776, 1776, 1776, 1776, 1776, 1776, 1776, 1776, 1776, 1776, 1776, 1776, 1776, 1776, 1777, 6418, 7084, 7843, 9530, 11146, 12186, 14051, 17293, 20214, 22771, 23287, 23313, 25683, 25730, 26306, 26537, 26946, 29281, 30569, 37695, 41390, 41569, 42208, 44049, 45066, 46483, 46591, 47322, 47607, 49410, 49649, 49836, 49973, 52845, 55702, 56480, 58533, 60379, 60437, 60673, 61888, 66404, 66599, 67536, 68046, 68637, 68988, 69211, 72730, 72958, 73111, 73328, 73695, 74517, 74987, 75185, 79061, 80210, 81386, 82232, 82562, 87182, 87513, 90285, 90330, 90452, 90739, 91737, 94810, 95275, 95527, 95882, 95959, 97653, 98327, 99023, 100000], ys=[1422, 55801, 47473, 26825, 14826, 63825, 91321, 78348, 35824, 86531, 30257, 25114, 10427, 45983, 4043, 30966, 29136, 36329, 38745, 35257, 98360, 40949, 8170, 85406, 6936, 36316, 69459, 32758, 16382, 71813, 88931, 43174, 9740, 3587, 47632, 43026, 15224, 6363, 87179, 17580, 34284, 81639, 53241, 65546, 15515, 60369, 85076, 8982, 13981, 99539, 82829, 64177, 2732, 36859, 70589, 13144, 1150, 66067, 96857, 17734, 20725, 68539, 31300, 41160, 54124, 12744, 5491, 45179, 28135, 10856, 90769, 88854, 82362, 2031, 58653, 3137, 85983, 61733, 81674, 49352, 25346, 77035, 33032, 47580, 7919, 45726, 78897, 63882, 59063, 30781, 38682, 20402, 10574, 20519, 92163, 49038, 90258, 4063, 80943], thresh=14569769396):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_13",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=2, beta: int=9, xs: List[int]=[0, 33168, 67553, 89290, 91269, 97001, 98594, 99388, 99783, 99960, 99982, 99986, 99987, 99999, 99999, 100000], ys: List[int]=[13553, 89186, 87781, 2749, 28057, 39874, 20118, 17486, 19816, 50116, 5036, 46896, 23423, 36175, 24837, 44960], thresh: int=72116827178):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=2, beta=9, xs=[0, 33168, 67553, 89290, 91269, 97001, 98594, 99388, 99783, 99960, 99982, 99986, 99987, 99999, 99999, 100000], ys=[13553, 89186, 87781, 2749, 28057, 39874, 20118, 17486, 19816, 50116, 5036, 46896, 23423, 36175, 24837, 44960], thresh=72116827178):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_14",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=895, beta: int=505, xs: List[int]=[0, 909, 1012, 1187, 1436, 1549, 1587, 1602, 1612, 1617, 1638, 1639, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1643, 1700, 2426, 3925, 4387, 4613, 4840, 4938, 4941, 4949, 4949, 4949, 4949, 4949, 4949, 4950, 5883, 6043, 7289, 7524, 7723, 7779, 9262, 9760, 10604, 11159, 11585, 11672, 11768, 12289, 12434, 12434, 12989, 13644, 13866, 13902, 13946, 14025, 14051, 14128, 14128, 14129, 14813, 14814, 14814, 14815, 14816, 17392, 19642, 20540, 21084, 21151, 21797, 22827, 23146, 26569, 27979, 28615, 28721, 28824, 29448, 29626, 29669, 29785, 30472, 30648, 30723, 31304, 31926, 31967, 32201, 32557, 32647, 32662, 32682, 32690, 32704, 32704, 32704, 32705, 32851, 32891, 32909, 32913, 32920, 32934, 32960, 33290, 34093, 34184, 34567, 34756, 35172, 35902, 36019, 38361, 38627, 39599, 39626, 40187, 40271, 40343, 40354, 40751, 40769, 40831, 40855, 40983, 41136, 41333, 41558, 41599, 41601, 41617, 41618, 42205, 42584, 43006, 43199, 43213, 43524, 43582, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43681, 44551, 44632, 45010, 45038, 45925, 45939, 45996, 46052, 46148, 46823, 47080, 47199, 47701, 49037, 49461, 49653, 49847, 50316, 50339, 50655, 50658, 50661, 51679, 52454, 52511, 52894, 52918, 52927, 52928, 52934, 53797, 54089, 56927, 56933, 56934, 57135, 57603, 57843, 58184, 58848, 58989, 59145, 60967, 63578, 63614, 63617, 64910, 65463, 65595, 65624, 65625, 65630, 65678, 65885, 67478, 68367, 68794, 69667, 71160, 72703, 73213, 73421, 74471, 74585, 74654, 74661, 74672, 74679, 75667, 76165, 76377, 76423, 76460, 76463, 76463, 76463, 76465, 76466, 77461, 77943, 78333, 78425, 78607, 79569, 79672, 80613, 81761, 82738, 87466, 88308, 88550, 88612, 88612, 88622, 88630, 88638, 88663, 89772, 90698, 90700, 90705, 91203, 92135, 92347, 92433, 92839, 93499, 94151, 94253, 94261, 94261, 94303, 94304, 94304, 94317, 94317, 94317, 94317, 94317, 94318, 94581, 94953, 95005, 95233, 95243, 95245, 95246, 95246, 95246, 95246, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95248, 95289, 95798, 95807, 95808, 95810, 95850, 95868, 95890, 96024, 96260, 96277, 96282, 96284, 96287, 96288, 96288, 96289, 96289, 96289, 96289, 96289, 96290, 96813, 96839, 96845, 96898, 97023, 97024, 97240, 97488, 97830, 97923, 98079, 98154, 98176, 98190, 98201, 98202, 98203, 98205, 98205, 98205, 98205, 98206, 99752, 99983, 99989, 100000], ys: List[int]=[88848, 91046, 92839, 81485, 19343, 94763, 92271, 57315, 91317, 88178, 70820, 69361, 64396, 33569, 46186, 19752, 35743, 81761, 46467, 52517, 50947, 52646, 35233, 64584, 21089, 26589, 1193, 3495, 36053, 98128, 34535, 96660, 81857, 66592, 31297, 6256, 8913, 77534, 16568, 65565, 42718, 38751, 37456, 76825, 78747, 41621, 25482, 54002, 43249, 23340, 11333, 72151, 18139, 58607, 83237, 60736, 7804, 82317, 13040, 63216, 44045, 64662, 80999, 3226, 16173, 39077, 33371, 76431, 76863, 45911, 32389, 33928, 44384, 18442, 61200, 10103, 18918, 90984, 52886, 60737, 1661, 52757, 93446, 44081, 2078, 15216, 52300, 8086, 23509, 41362, 33826, 86532, 46592, 67776, 21243, 87947, 58405, 58240, 34330, 33804, 32247, 48621, 13925, 32098, 42863, 32580, 2747, 82706, 49812, 48421, 97107, 14746, 65378, 8639, 61586, 11502, 43854, 61556, 42980, 31909, 61479, 37245, 22695, 85281, 85317, 24644, 92195, 77897, 29734, 87001, 68457, 84815, 9501, 22842, 73352, 63015, 80214, 42952, 15086, 61937, 9026, 76751, 60306, 48648, 92464, 55076, 54937, 83070, 64011, 42746, 41030, 49847, 87319, 47730, 5515, 61373, 14597, 25898, 21158, 88114, 43544, 96515, 73299, 38199, 32690, 34410, 42917, 45240, 88210, 56149, 60624, 95854, 8395, 59802, 76632, 72071, 93564, 53461, 17408, 87362, 62019, 73577, 79982, 32677, 73231, 34022, 1193, 62702, 31857, 66519, 78200, 69201, 91777, 87737, 99019, 22586, 57812, 78858, 71085, 55144, 45744, 24677, 2392, 65818, 42661, 10887, 28613, 85794, 62311, 38816, 35630, 79584, 35982, 8160, 40016, 70446, 29399, 69353, 72926, 57047, 55243, 13755, 67995, 45018, 80816, 61338, 63581, 98793, 72716, 30789, 50722, 11712, 47021, 15393, 47742, 54738, 4031, 3367, 13389, 6604, 66750, 62439, 76866, 45930, 74143, 60835, 22206, 87800, 79710, 14185, 85060, 47921, 46352, 19874, 10783, 67361, 22488, 12464, 57793, 78773, 18301, 21977, 4160, 44846, 82928, 69310, 10963, 74870, 90599, 47589, 48536, 32093, 32229, 75904, 55662, 37121, 16982, 42979, 89746, 26582, 15607, 69773, 28862, 7157, 68769, 4351, 46896, 24879, 4906, 60019, 86221, 90004, 44111, 25890, 36781, 60166, 57331, 92097, 88091, 34761, 79961, 81983, 89878, 83889, 55075, 32957, 75413, 39454, 72036, 72695, 18566, 60343, 80467, 15236, 3867, 94744, 94510, 94686, 32457, 30229, 42332, 32431, 68866, 46037, 27326, 20474, 59781, 3648, 87847, 43555, 85209, 2827, 94791, 17577, 77997, 64109, 72405, 71406, 86765, 70249, 49161, 84795, 81323, 61510, 56855, 78093, 71443, 49442, 62412, 40028, 24426, 57948, 15094, 24451, 11897, 22765, 2894, 59613, 90769, 83529, 3465, 41641, 52707, 34644, 53079, 31297, 8458, 44647, 17758, 78024, 44690, 35129, 4240, 77493, 29216, 48008, 38280, 35400, 72185, 29957, 79431, 25186, 68913, 8717, 47835, 6502, 58527, 27053, 57417, 46893, 33684, 13174, 5085, 98794, 13110, 21346, 46898, 68744, 41465, 93555, 83257, 67875, 25576, 59297, 49922, 7067, 35256, 6545, 48717, 27441, 96438, 53517, 20811, 48926, 92728, 94012, 57078, 58986, 47785, 31348, 9099, 41559, 42393, 97103, 14955, 38846, 20417, 25961, 42016, 15418, 24940, 67318, 5220, 29092, 17171, 93879, 6182, 33599, 53167, 86168, 98326, 35072, 47986, 19527, 45765, 83224, 80527, 31006, 71579, 54411, 82517, 64197, 9876, 28431, 32678, 38808, 33296, 39372, 79280, 45604, 4347, 53099, 40873, 25056, 72480, 3027, 15297, 85956, 37821, 63723, 88194, 15801, 84246, 50453, 66446, 13034, 95852, 29118, 93062, 92473, 21969, 63039, 12456, 63949, 30671, 4856, 9535, 82192, 65816, 96007, 99725, 82771, 90516, 58138, 90904, 96865, 38255, 62836, 41425, 72206, 6926, 94593, 98237, 27014, 63557, 18651, 55101, 94445, 27768, 75100, 38202, 73129, 79096, 99651, 4950, 10553, 21213, 26027, 90885, 1829, 37779, 19502, 86048, 31127, 10114, 4352, 31786, 28032, 42587, 31845, 51006, 84154, 93332, 23687, 48586, 85495, 20281, 32621, 40497, 35518, 89186, 31413, 84429, 86324, 63915, 52727, 61711, 50084, 11631, 59771, 77891, 96115, 50151, 30314, 45318, 99745, 43400, 40906, 97417, 94923, 91398, 90503, 5109, 43948, 29741, 37765, 59852, 5819, 21805, 74543, 14478, 1939, 32456, 19528, 82873, 72287, 89722, 85220, 75895, 33210, 39394, 86043, 11507, 75352, 50023, 90435, 55111, 95563, 62043, 43341, 70952, 80915, 56035, 5393, 35126, 71582, 70432, 61050, 6147, 89129, 27636, 72061, 39673, 84817, 46886, 45741, 31492, 27335, 76934, 5048, 87919, 50005, 65404, 99436, 75202, 16926, 10982, 71316, 276, 48557, 92320, 22339, 6295, 5783, 49605, 63496, 8554, 74128, 28217, 13048, 14344, 10371, 89034, 82038, 97158, 45730, 11809, 58134, 68138, 5237, 29238, 82157, 67438, 40140, 22521, 1272, 17438, 61684, 92367, 56622, 16212, 15566, 66013, 25604, 64974, 90896, 40030, 62568, 38724, 36205, 67181, 61802, 25758, 53935, 15799, 70799, 35307, 9492, 17243, 25205, 91470, 97432, 30125, 32138, 36196, 25661, 27395, 66525, 4401, 94830, 66078, 30066, 92247, 73560, 73504, 16696, 98282, 65186, 39267, 86764, 63103, 75042, 26404, 87948, 23932, 73980, 60235, 87135, 75371, 76385, 18973, 10591, 92103, 1634, 91182, 50152, 27737, 96453, 48310, 77181, 46673, 25692, 1227, 977, 39472, 31247, 32051, 6552, 39410, 23575, 64810, 18125, 43342, 6912, 17335, 90376, 50995, 72801, 22132, 9609, 29640, 8836, 69515, 63940, 57054, 96076, 35699, 97514, 9295, 83185, 30847, 76910, 47104, 87176, 28283, 21978, 64055, 39133, 6357, 77118, 53651, 43051, 33816, 61629, 35307, 89960, 98546, 4850, 71410, 53596, 70228, 35513, 83969, 34725, 74950, 89048, 94706, 68885, 82909, 90752, 64451, 57549, 45147, 23144, 82522, 27432, 16186, 21168, 28356, 77785, 19619, 75219, 42069, 50955, 68535, 44651, 18022, 32019, 51516, 6317, 65387, 4213, 52756, 76192, 46108, 40469, 97490, 41008], thresh: int=71904659285):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=895, beta=505, xs=[0, 909, 1012, 1187, 1436, 1549, 1587, 1602, 1612, 1617, 1638, 1639, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1643, 1700, 2426, 3925, 4387, 4613, 4840, 4938, 4941, 4949, 4949, 4949, 4949, 4949, 4949, 4950, 5883, 6043, 7289, 7524, 7723, 7779, 9262, 9760, 10604, 11159, 11585, 11672, 11768, 12289, 12434, 12434, 12989, 13644, 13866, 13902, 13946, 14025, 14051, 14128, 14128, 14129, 14813, 14814, 14814, 14815, 14816, 17392, 19642, 20540, 21084, 21151, 21797, 22827, 23146, 26569, 27979, 28615, 28721, 28824, 29448, 29626, 29669, 29785, 30472, 30648, 30723, 31304, 31926, 31967, 32201, 32557, 32647, 32662, 32682, 32690, 32704, 32704, 32704, 32705, 32851, 32891, 32909, 32913, 32920, 32934, 32960, 33290, 34093, 34184, 34567, 34756, 35172, 35902, 36019, 38361, 38627, 39599, 39626, 40187, 40271, 40343, 40354, 40751, 40769, 40831, 40855, 40983, 41136, 41333, 41558, 41599, 41601, 41617, 41618, 42205, 42584, 43006, 43199, 43213, 43524, 43582, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43680, 43681, 44551, 44632, 45010, 45038, 45925, 45939, 45996, 46052, 46148, 46823, 47080, 47199, 47701, 49037, 49461, 49653, 49847, 50316, 50339, 50655, 50658, 50661, 51679, 52454, 52511, 52894, 52918, 52927, 52928, 52934, 53797, 54089, 56927, 56933, 56934, 57135, 57603, 57843, 58184, 58848, 58989, 59145, 60967, 63578, 63614, 63617, 64910, 65463, 65595, 65624, 65625, 65630, 65678, 65885, 67478, 68367, 68794, 69667, 71160, 72703, 73213, 73421, 74471, 74585, 74654, 74661, 74672, 74679, 75667, 76165, 76377, 76423, 76460, 76463, 76463, 76463, 76465, 76466, 77461, 77943, 78333, 78425, 78607, 79569, 79672, 80613, 81761, 82738, 87466, 88308, 88550, 88612, 88612, 88622, 88630, 88638, 88663, 89772, 90698, 90700, 90705, 91203, 92135, 92347, 92433, 92839, 93499, 94151, 94253, 94261, 94261, 94303, 94304, 94304, 94317, 94317, 94317, 94317, 94317, 94318, 94581, 94953, 95005, 95233, 95243, 95245, 95246, 95246, 95246, 95246, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95247, 95248, 95289, 95798, 95807, 95808, 95810, 95850, 95868, 95890, 96024, 96260, 96277, 96282, 96284, 96287, 96288, 96288, 96289, 96289, 96289, 96289, 96289, 96290, 96813, 96839, 96845, 96898, 97023, 97024, 97240, 97488, 97830, 97923, 98079, 98154, 98176, 98190, 98201, 98202, 98203, 98205, 98205, 98205, 98205, 98206, 99752, 99983, 99989, 100000], ys=[88848, 91046, 92839, 81485, 19343, 94763, 92271, 57315, 91317, 88178, 70820, 69361, 64396, 33569, 46186, 19752, 35743, 81761, 46467, 52517, 50947, 52646, 35233, 64584, 21089, 26589, 1193, 3495, 36053, 98128, 34535, 96660, 81857, 66592, 31297, 6256, 8913, 77534, 16568, 65565, 42718, 38751, 37456, 76825, 78747, 41621, 25482, 54002, 43249, 23340, 11333, 72151, 18139, 58607, 83237, 60736, 7804, 82317, 13040, 63216, 44045, 64662, 80999, 3226, 16173, 39077, 33371, 76431, 76863, 45911, 32389, 33928, 44384, 18442, 61200, 10103, 18918, 90984, 52886, 60737, 1661, 52757, 93446, 44081, 2078, 15216, 52300, 8086, 23509, 41362, 33826, 86532, 46592, 67776, 21243, 87947, 58405, 58240, 34330, 33804, 32247, 48621, 13925, 32098, 42863, 32580, 2747, 82706, 49812, 48421, 97107, 14746, 65378, 8639, 61586, 11502, 43854, 61556, 42980, 31909, 61479, 37245, 22695, 85281, 85317, 24644, 92195, 77897, 29734, 87001, 68457, 84815, 9501, 22842, 73352, 63015, 80214, 42952, 15086, 61937, 9026, 76751, 60306, 48648, 92464, 55076, 54937, 83070, 64011, 42746, 41030, 49847, 87319, 47730, 5515, 61373, 14597, 25898, 21158, 88114, 43544, 96515, 73299, 38199, 32690, 34410, 42917, 45240, 88210, 56149, 60624, 95854, 8395, 59802, 76632, 72071, 93564, 53461, 17408, 87362, 62019, 73577, 79982, 32677, 73231, 34022, 1193, 62702, 31857, 66519, 78200, 69201, 91777, 87737, 99019, 22586, 57812, 78858, 71085, 55144, 45744, 24677, 2392, 65818, 42661, 10887, 28613, 85794, 62311, 38816, 35630, 79584, 35982, 8160, 40016, 70446, 29399, 69353, 72926, 57047, 55243, 13755, 67995, 45018, 80816, 61338, 63581, 98793, 72716, 30789, 50722, 11712, 47021, 15393, 47742, 54738, 4031, 3367, 13389, 6604, 66750, 62439, 76866, 45930, 74143, 60835, 22206, 87800, 79710, 14185, 85060, 47921, 46352, 19874, 10783, 67361, 22488, 12464, 57793, 78773, 18301, 21977, 4160, 44846, 82928, 69310, 10963, 74870, 90599, 47589, 48536, 32093, 32229, 75904, 55662, 37121, 16982, 42979, 89746, 26582, 15607, 69773, 28862, 7157, 68769, 4351, 46896, 24879, 4906, 60019, 86221, 90004, 44111, 25890, 36781, 60166, 57331, 92097, 88091, 34761, 79961, 81983, 89878, 83889, 55075, 32957, 75413, 39454, 72036, 72695, 18566, 60343, 80467, 15236, 3867, 94744, 94510, 94686, 32457, 30229, 42332, 32431, 68866, 46037, 27326, 20474, 59781, 3648, 87847, 43555, 85209, 2827, 94791, 17577, 77997, 64109, 72405, 71406, 86765, 70249, 49161, 84795, 81323, 61510, 56855, 78093, 71443, 49442, 62412, 40028, 24426, 57948, 15094, 24451, 11897, 22765, 2894, 59613, 90769, 83529, 3465, 41641, 52707, 34644, 53079, 31297, 8458, 44647, 17758, 78024, 44690, 35129, 4240, 77493, 29216, 48008, 38280, 35400, 72185, 29957, 79431, 25186, 68913, 8717, 47835, 6502, 58527, 27053, 57417, 46893, 33684, 13174, 5085, 98794, 13110, 21346, 46898, 68744, 41465, 93555, 83257, 67875, 25576, 59297, 49922, 7067, 35256, 6545, 48717, 27441, 96438, 53517, 20811, 48926, 92728, 94012, 57078, 58986, 47785, 31348, 9099, 41559, 42393, 97103, 14955, 38846, 20417, 25961, 42016, 15418, 24940, 67318, 5220, 29092, 17171, 93879, 6182, 33599, 53167, 86168, 98326, 35072, 47986, 19527, 45765, 83224, 80527, 31006, 71579, 54411, 82517, 64197, 9876, 28431, 32678, 38808, 33296, 39372, 79280, 45604, 4347, 53099, 40873, 25056, 72480, 3027, 15297, 85956, 37821, 63723, 88194, 15801, 84246, 50453, 66446, 13034, 95852, 29118, 93062, 92473, 21969, 63039, 12456, 63949, 30671, 4856, 9535, 82192, 65816, 96007, 99725, 82771, 90516, 58138, 90904, 96865, 38255, 62836, 41425, 72206, 6926, 94593, 98237, 27014, 63557, 18651, 55101, 94445, 27768, 75100, 38202, 73129, 79096, 99651, 4950, 10553, 21213, 26027, 90885, 1829, 37779, 19502, 86048, 31127, 10114, 4352, 31786, 28032, 42587, 31845, 51006, 84154, 93332, 23687, 48586, 85495, 20281, 32621, 40497, 35518, 89186, 31413, 84429, 86324, 63915, 52727, 61711, 50084, 11631, 59771, 77891, 96115, 50151, 30314, 45318, 99745, 43400, 40906, 97417, 94923, 91398, 90503, 5109, 43948, 29741, 37765, 59852, 5819, 21805, 74543, 14478, 1939, 32456, 19528, 82873, 72287, 89722, 85220, 75895, 33210, 39394, 86043, 11507, 75352, 50023, 90435, 55111, 95563, 62043, 43341, 70952, 80915, 56035, 5393, 35126, 71582, 70432, 61050, 6147, 89129, 27636, 72061, 39673, 84817, 46886, 45741, 31492, 27335, 76934, 5048, 87919, 50005, 65404, 99436, 75202, 16926, 10982, 71316, 276, 48557, 92320, 22339, 6295, 5783, 49605, 63496, 8554, 74128, 28217, 13048, 14344, 10371, 89034, 82038, 97158, 45730, 11809, 58134, 68138, 5237, 29238, 82157, 67438, 40140, 22521, 1272, 17438, 61684, 92367, 56622, 16212, 15566, 66013, 25604, 64974, 90896, 40030, 62568, 38724, 36205, 67181, 61802, 25758, 53935, 15799, 70799, 35307, 9492, 17243, 25205, 91470, 97432, 30125, 32138, 36196, 25661, 27395, 66525, 4401, 94830, 66078, 30066, 92247, 73560, 73504, 16696, 98282, 65186, 39267, 86764, 63103, 75042, 26404, 87948, 23932, 73980, 60235, 87135, 75371, 76385, 18973, 10591, 92103, 1634, 91182, 50152, 27737, 96453, 48310, 77181, 46673, 25692, 1227, 977, 39472, 31247, 32051, 6552, 39410, 23575, 64810, 18125, 43342, 6912, 17335, 90376, 50995, 72801, 22132, 9609, 29640, 8836, 69515, 63940, 57054, 96076, 35699, 97514, 9295, 83185, 30847, 76910, 47104, 87176, 28283, 21978, 64055, 39133, 6357, 77118, 53651, 43051, 33816, 61629, 35307, 89960, 98546, 4850, 71410, 53596, 70228, 35513, 83969, 34725, 74950, 89048, 94706, 68885, 82909, 90752, 64451, 57549, 45147, 23144, 82522, 27432, 16186, 21168, 28356, 77785, 19619, 75219, 42069, 50955, 68535, 44651, 18022, 32019, 51516, 6317, 65387, 4213, 52756, 76192, 46108, 40469, 97490, 41008], thresh=71904659285):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_15",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=3, beta: int=5, xs: List[int]=[0, 2160, 5823, 6113, 10013, 12032, 31794, 31860, 85050, 85217, 96485, 100000], ys: List[int]=[166, 26640, 37200, 79462, 75020, 5176, 27439, 74533, 47513, 77203, 13345, 9580], thresh: int=17019817508):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=3, beta=5, xs=[0, 2160, 5823, 6113, 10013, 12032, 31794, 31860, 85050, 85217, 96485, 100000], ys=[166, 26640, 37200, 79462, 75020, 5176, 27439, 74533, 47513, 77203, 13345, 9580], thresh=17019817508):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_16",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=43, beta: int=37, xs: List[int]=[0, 11979, 12924, 13337, 13465, 13535, 13549, 13590, 13591, 13607, 13655, 13656, 13657, 13658, 13658, 13658, 13658, 13659, 20545, 30233, 32249, 57093, 57522, 58183, 60231, 61374, 61408, 61709, 62664, 63544, 63573, 63595, 63680, 63742, 63744, 63754, 66035, 69913, 74886, 78937, 83233, 83294, 83294, 83296, 89746, 100000], ys: List[int]=[12376, 44195, 86212, 79333, 38505, 83727, 14179, 3591, 24339, 78030, 62346, 91145, 49472, 12437, 37331, 74971, 69213, 79070, 40336, 73117, 51957, 4635, 26737, 35455, 17535, 64727, 1049, 7368, 57200, 12482, 81621, 45842, 79529, 64099, 26302, 5372, 53573, 75614, 30974, 64907, 18916, 52565, 49857, 56360, 83064, 16444], thresh: int=42302940930):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=43, beta=37, xs=[0, 11979, 12924, 13337, 13465, 13535, 13549, 13590, 13591, 13607, 13655, 13656, 13657, 13658, 13658, 13658, 13658, 13659, 20545, 30233, 32249, 57093, 57522, 58183, 60231, 61374, 61408, 61709, 62664, 63544, 63573, 63595, 63680, 63742, 63744, 63754, 66035, 69913, 74886, 78937, 83233, 83294, 83294, 83296, 89746, 100000], ys=[12376, 44195, 86212, 79333, 38505, 83727, 14179, 3591, 24339, 78030, 62346, 91145, 49472, 12437, 37331, 74971, 69213, 79070, 40336, 73117, 51957, 4635, 26737, 35455, 17535, 64727, 1049, 7368, 57200, 12482, 81621, 45842, 79529, 64099, 26302, 5372, 53573, 75614, 30974, 64907, 18916, 52565, 49857, 56360, 83064, 16444], thresh=42302940930):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_17",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=24, beta: int=4, xs: List[int]=[0, 171, 282, 324, 3398, 8203, 10401, 11456, 13194, 16274, 19651, 20154, 20325, 22511, 26595, 26939, 27360, 27528, 27730, 27760, 27780, 27780, 28003, 28049, 28060, 28073, 28076, 28076, 28077, 28078, 28679, 30140, 30525, 30597, 30864, 37524, 41387, 43138, 45788, 50655, 54113, 57054, 63160, 66473, 81631, 92393, 94612, 95029, 100000], ys: List[int]=[5440, 96657, 98099, 59963, 77980, 54980, 10176, 36634, 50753, 60855, 50897, 37624, 65848, 80535, 9020, 81943, 88583, 27172, 32721, 11650, 70289, 32763, 52758, 79328, 69091, 74949, 86886, 49008, 13956, 53086, 88325, 84401, 1386, 75694, 9030, 27362, 66701, 97940, 7330, 40422, 6484, 69659, 84921, 25422, 76188, 25555, 30312, 70927, 10212], thresh: int=2538818824):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=24, beta=4, xs=[0, 171, 282, 324, 3398, 8203, 10401, 11456, 13194, 16274, 19651, 20154, 20325, 22511, 26595, 26939, 27360, 27528, 27730, 27760, 27780, 27780, 28003, 28049, 28060, 28073, 28076, 28076, 28077, 28078, 28679, 30140, 30525, 30597, 30864, 37524, 41387, 43138, 45788, 50655, 54113, 57054, 63160, 66473, 81631, 92393, 94612, 95029, 100000], ys=[5440, 96657, 98099, 59963, 77980, 54980, 10176, 36634, 50753, 60855, 50897, 37624, 65848, 80535, 9020, 81943, 88583, 27172, 32721, 11650, 70289, 32763, 52758, 79328, 69091, 74949, 86886, 49008, 13956, 53086, 88325, 84401, 1386, 75694, 9030, 27362, 66701, 97940, 7330, 40422, 6484, 69659, 84921, 25422, 76188, 25555, 30312, 70927, 10212], thresh=2538818824):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_18",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=545, beta: int=954, xs: List[int]=[0, 1135, 1341, 2019, 2118, 2137, 2138, 2150, 2150, 2150, 2150, 2151, 2166, 2181, 2251, 2252, 2286, 2783, 3630, 3657, 4702, 4712, 5469, 6362, 7435, 7439, 7945, 8040, 8073, 8146, 8157, 8195, 8195, 8195, 8198, 8198, 8198, 8198, 8198, 8198, 8198, 8198, 8198, 8199, 8792, 8835, 8889, 9079, 9239, 9283, 9297, 9301, 9527, 9645, 10124, 10295, 10308, 10328, 10356, 12970, 13193, 13399, 13859, 13980, 14230, 16219, 16462, 16493, 16508, 16537, 16540, 16542, 16542, 16542, 16543, 16767, 16864, 16904, 17356, 18021, 18556, 18786, 19124, 19220, 19772, 20288, 22481, 22640, 22686, 22701, 22716, 22726, 22727, 22955, 22975, 23009, 23020, 23021, 23021, 23021, 23021, 23021, 23021, 23021, 23021, 23021, 23021, 23021, 23021, 23022, 24166, 24267, 24363, 24381, 24393, 24401, 24429, 24429, 24429, 24429, 24430, 24431, 25917, 25979, 26545, 26628, 26660, 26678, 26679, 26679, 26679, 26679, 26680, 26680, 26680, 26681, 28425, 33461, 34107, 34363, 35479, 36384, 36671, 38779, 39401, 39454, 39921, 40200, 40286, 40421, 40490, 40490, 40490, 40490, 40490, 40490, 40491, 40839, 40904, 40914, 40925, 40925, 40925, 40925, 40925, 40925, 40925, 40926, 43014, 43549, 43621, 44014, 44202, 47255, 47975, 48030, 48123, 48590, 49855, 50059, 50099, 50114, 50124, 50177, 50179, 50182, 50184, 50185, 50734, 53627, 54005, 55806, 57300, 58464, 58648, 60552, 60606, 62033, 62867, 62892, 62897, 62908, 62908, 62910, 62913, 62913, 62915, 62917, 62939, 63011, 63013, 63035, 63794, 64695, 64762, 64837, 65218, 65279, 65283, 65283, 65285, 65287, 65290, 65290, 65290, 65290, 65291, 65469, 65472, 65474, 65486, 65486, 65490, 65491, 65492, 66483, 66797, 66854, 66879, 66880, 68277, 68680, 68685, 69398, 71774, 72984, 73215, 75639, 77468, 78753, 79046, 79396, 79396, 79396, 79396, 79396, 79396, 79397, 79852, 80207, 81745, 81876, 82286, 82447, 82583, 82602, 82616, 82749, 82927, 83648, 84088, 84387, 84406, 84739, 85277, 85336, 85359, 85422, 85431, 85436, 85436, 85436, 85438, 85886, 86141, 87468, 87935, 88382, 88433, 88533, 89655, 91381, 93029, 94575, 94599, 94621, 95478, 95911, 96125, 96151, 96205, 96304, 96401, 96416, 96424, 96918, 96934, 97007, 97010, 97013, 97024, 97026, 97026, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97028, 97355, 98636, 98895, 100000], ys: List[int]=[44664, 61724, 55274, 42932, 51084, 84384, 38185, 87400, 24125, 82622, 23631, 36722, 22300, 79704, 15093, 66300, 20609, 35043, 5752, 77452, 15518, 528, 14956, 44317, 74953, 66287, 51350, 42617, 26634, 99555, 56940, 30562, 86132, 26211, 33262, 75492, 88012, 40144, 61293, 75068, 14974, 51465, 44861, 37555, 12980, 33798, 48326, 51493, 29100, 80272, 84295, 21657, 18756, 93159, 24615, 65184, 39568, 19611, 9525, 95254, 10774, 38947, 17166, 58319, 90749, 10503, 80892, 29791, 16718, 98870, 85904, 60733, 23857, 62454, 16058, 65846, 42233, 79862, 84014, 5448, 88013, 60730, 78295, 76892, 31933, 59626, 7725, 38889, 41779, 33230, 585, 94749, 44826, 7171, 2415, 90175, 95125, 14574, 58000, 11646, 4566, 52527, 46876, 80017, 82781, 8045, 23783, 28035, 93241, 67446, 40146, 8800, 49602, 27588, 78429, 35192, 13071, 96286, 98105, 2834, 69839, 4197, 94855, 44678, 19757, 76455, 18490, 35431, 23669, 47528, 70200, 13729, 46580, 8268, 4827, 17590, 34168, 83614, 82581, 10207, 92429, 80014, 26605, 50016, 94082, 83608, 82428, 81674, 81002, 87778, 52290, 73826, 49485, 11669, 75058, 69466, 88967, 76253, 78725, 81662, 7857, 87415, 53344, 48015, 8971, 53351, 43274, 20899, 88321, 57132, 67070, 12738, 23014, 91862, 88384, 14809, 43316, 48647, 69645, 11359, 94164, 16895, 48707, 79869, 31914, 73646, 40816, 62439, 37825, 67328, 71875, 94321, 74651, 67694, 89534, 88987, 76949, 51490, 69136, 82897, 88283, 64803, 86771, 77415, 95667, 63635, 44013, 12941, 19710, 19591, 20310, 45816, 77145, 17524, 86705, 86927, 65807, 53008, 38944, 37076, 11640, 69438, 27584, 31490, 1243, 76196, 89832, 40042, 42211, 2656, 31876, 14447, 85383, 59798, 72424, 82597, 31490, 49552, 14007, 80982, 49453, 56023, 11017, 74682, 19950, 90250, 31691, 44475, 51744, 51945, 7121, 93588, 49724, 38253, 74638, 97403, 27726, 10791, 47383, 6460, 35233, 64373, 15116, 83319, 49298, 18495, 39605, 70594, 7206, 19989, 92457, 73585, 29685, 48483, 29774, 72998, 46718, 92539, 78125, 36822, 20729, 2232, 37313, 88679, 34519, 8779, 52396, 73163, 8287, 10831, 45488, 85996, 3699, 83100, 93061, 68622, 30988, 94167, 24859, 82482, 49760, 14490, 66458, 48351, 1444, 14403, 17011, 37773, 33857, 4568, 66688, 8244, 4228, 74868, 29842, 52681, 19193, 77243, 74516, 76476, 44164, 72285, 14693, 25711, 92956, 3125, 82781, 90628, 64169, 74548, 1504, 52902, 37022, 33839, 3491, 25617, 29706, 785, 70653, 35823, 77292, 63325, 46784, 46417, 37989, 52618, 64459, 1309, 69766, 64417, 20119, 24909, 52918, 29867, 34604, 37986, 1280, 60873, 72140, 27754, 34895, 26941, 57149, 87350, 36784, 62757, 41135], thresh: int=144854408840):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=545, beta=954, xs=[0, 1135, 1341, 2019, 2118, 2137, 2138, 2150, 2150, 2150, 2150, 2151, 2166, 2181, 2251, 2252, 2286, 2783, 3630, 3657, 4702, 4712, 5469, 6362, 7435, 7439, 7945, 8040, 8073, 8146, 8157, 8195, 8195, 8195, 8198, 8198, 8198, 8198, 8198, 8198, 8198, 8198, 8198, 8199, 8792, 8835, 8889, 9079, 9239, 9283, 9297, 9301, 9527, 9645, 10124, 10295, 10308, 10328, 10356, 12970, 13193, 13399, 13859, 13980, 14230, 16219, 16462, 16493, 16508, 16537, 16540, 16542, 16542, 16542, 16543, 16767, 16864, 16904, 17356, 18021, 18556, 18786, 19124, 19220, 19772, 20288, 22481, 22640, 22686, 22701, 22716, 22726, 22727, 22955, 22975, 23009, 23020, 23021, 23021, 23021, 23021, 23021, 23021, 23021, 23021, 23021, 23021, 23021, 23021, 23022, 24166, 24267, 24363, 24381, 24393, 24401, 24429, 24429, 24429, 24429, 24430, 24431, 25917, 25979, 26545, 26628, 26660, 26678, 26679, 26679, 26679, 26679, 26680, 26680, 26680, 26681, 28425, 33461, 34107, 34363, 35479, 36384, 36671, 38779, 39401, 39454, 39921, 40200, 40286, 40421, 40490, 40490, 40490, 40490, 40490, 40490, 40491, 40839, 40904, 40914, 40925, 40925, 40925, 40925, 40925, 40925, 40925, 40926, 43014, 43549, 43621, 44014, 44202, 47255, 47975, 48030, 48123, 48590, 49855, 50059, 50099, 50114, 50124, 50177, 50179, 50182, 50184, 50185, 50734, 53627, 54005, 55806, 57300, 58464, 58648, 60552, 60606, 62033, 62867, 62892, 62897, 62908, 62908, 62910, 62913, 62913, 62915, 62917, 62939, 63011, 63013, 63035, 63794, 64695, 64762, 64837, 65218, 65279, 65283, 65283, 65285, 65287, 65290, 65290, 65290, 65290, 65291, 65469, 65472, 65474, 65486, 65486, 65490, 65491, 65492, 66483, 66797, 66854, 66879, 66880, 68277, 68680, 68685, 69398, 71774, 72984, 73215, 75639, 77468, 78753, 79046, 79396, 79396, 79396, 79396, 79396, 79396, 79397, 79852, 80207, 81745, 81876, 82286, 82447, 82583, 82602, 82616, 82749, 82927, 83648, 84088, 84387, 84406, 84739, 85277, 85336, 85359, 85422, 85431, 85436, 85436, 85436, 85438, 85886, 86141, 87468, 87935, 88382, 88433, 88533, 89655, 91381, 93029, 94575, 94599, 94621, 95478, 95911, 96125, 96151, 96205, 96304, 96401, 96416, 96424, 96918, 96934, 97007, 97010, 97013, 97024, 97026, 97026, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97027, 97028, 97355, 98636, 98895, 100000], ys=[44664, 61724, 55274, 42932, 51084, 84384, 38185, 87400, 24125, 82622, 23631, 36722, 22300, 79704, 15093, 66300, 20609, 35043, 5752, 77452, 15518, 528, 14956, 44317, 74953, 66287, 51350, 42617, 26634, 99555, 56940, 30562, 86132, 26211, 33262, 75492, 88012, 40144, 61293, 75068, 14974, 51465, 44861, 37555, 12980, 33798, 48326, 51493, 29100, 80272, 84295, 21657, 18756, 93159, 24615, 65184, 39568, 19611, 9525, 95254, 10774, 38947, 17166, 58319, 90749, 10503, 80892, 29791, 16718, 98870, 85904, 60733, 23857, 62454, 16058, 65846, 42233, 79862, 84014, 5448, 88013, 60730, 78295, 76892, 31933, 59626, 7725, 38889, 41779, 33230, 585, 94749, 44826, 7171, 2415, 90175, 95125, 14574, 58000, 11646, 4566, 52527, 46876, 80017, 82781, 8045, 23783, 28035, 93241, 67446, 40146, 8800, 49602, 27588, 78429, 35192, 13071, 96286, 98105, 2834, 69839, 4197, 94855, 44678, 19757, 76455, 18490, 35431, 23669, 47528, 70200, 13729, 46580, 8268, 4827, 17590, 34168, 83614, 82581, 10207, 92429, 80014, 26605, 50016, 94082, 83608, 82428, 81674, 81002, 87778, 52290, 73826, 49485, 11669, 75058, 69466, 88967, 76253, 78725, 81662, 7857, 87415, 53344, 48015, 8971, 53351, 43274, 20899, 88321, 57132, 67070, 12738, 23014, 91862, 88384, 14809, 43316, 48647, 69645, 11359, 94164, 16895, 48707, 79869, 31914, 73646, 40816, 62439, 37825, 67328, 71875, 94321, 74651, 67694, 89534, 88987, 76949, 51490, 69136, 82897, 88283, 64803, 86771, 77415, 95667, 63635, 44013, 12941, 19710, 19591, 20310, 45816, 77145, 17524, 86705, 86927, 65807, 53008, 38944, 37076, 11640, 69438, 27584, 31490, 1243, 76196, 89832, 40042, 42211, 2656, 31876, 14447, 85383, 59798, 72424, 82597, 31490, 49552, 14007, 80982, 49453, 56023, 11017, 74682, 19950, 90250, 31691, 44475, 51744, 51945, 7121, 93588, 49724, 38253, 74638, 97403, 27726, 10791, 47383, 6460, 35233, 64373, 15116, 83319, 49298, 18495, 39605, 70594, 7206, 19989, 92457, 73585, 29685, 48483, 29774, 72998, 46718, 92539, 78125, 36822, 20729, 2232, 37313, 88679, 34519, 8779, 52396, 73163, 8287, 10831, 45488, 85996, 3699, 83100, 93061, 68622, 30988, 94167, 24859, 82482, 49760, 14490, 66458, 48351, 1444, 14403, 17011, 37773, 33857, 4568, 66688, 8244, 4228, 74868, 29842, 52681, 19193, 77243, 74516, 76476, 44164, 72285, 14693, 25711, 92956, 3125, 82781, 90628, 64169, 74548, 1504, 52902, 37022, 33839, 3491, 25617, 29706, 785, 70653, 35823, 77292, 63325, 46784, 46417, 37989, 52618, 64459, 1309, 69766, 64417, 20119, 24909, 52918, 29867, 34604, 37986, 1280, 60873, 72140, 27754, 34895, 26941, 57149, 87350, 36784, 62757, 41135], thresh=144854408840):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_19",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=2, beta: int=3, xs: List[int]=[0, 74467, 91138, 98229, 99673, 100000], ys: List[int]=[31523, 89564, 42646, 29715, 12002, 30753], thresh: int=25076534892):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=2, beta=3, xs=[0, 74467, 91138, 98229, 99673, 100000], ys=[31523, 89564, 42646, 29715, 12002, 30753], thresh=25076534892):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_20",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=13, beta: int=3, xs: List[int]=[0, 91, 652, 690, 1361, 48510, 94343, 96436, 96598, 97097, 97153, 97441, 97474, 97491, 97575, 97575, 97578, 97580, 100000], ys: List[int]=[69503, 80457, 40775, 17763, 40110, 92132, 33554, 28630, 24183, 60617, 83425, 16242, 52988, 12780, 56098, 9943, 19660, 9720, 41942], thresh: int=25977825940):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=13, beta=3, xs=[0, 91, 652, 690, 1361, 48510, 94343, 96436, 96598, 97097, 97153, 97441, 97474, 97491, 97575, 97575, 97578, 97580, 100000], ys=[69503, 80457, 40775, 17763, 40110, 92132, 33554, 28630, 24183, 60617, 83425, 16242, 52988, 12780, 56098, 9943, 19660, 9720, 41942], thresh=25977825940):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_21",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=8, beta: int=7, xs: List[int]=[0, 15208, 56594, 57360, 75012, 95426, 96863, 98287, 100000], ys: List[int]=[36676, 40380, 311, 34377, 82990, 58589, 27073, 6710, 94221], thresh: int=18764307794):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=8, beta=7, xs=[0, 15208, 56594, 57360, 75012, 95426, 96863, 98287, 100000], ys=[36676, 40380, 311, 34377, 82990, 58589, 27073, 6710, 94221], thresh=18764307794):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_22",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=3, beta: int=2, xs: List[int]=[0, 2763, 8554, 14771, 99860, 99936, 100000], ys: List[int]=[58861, 26885, 58207, 6469, 17726, 17842, 27615], thresh: int=14641169631):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=3, beta=2, xs=[0, 2763, 8554, 14771, 99860, 99936, 100000], ys=[58861, 26885, 58207, 6469, 17726, 17842, 27615], thresh=14641169631):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_23",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=5, beta: int=19, xs: List[int]=[0, 44480, 92341, 95964, 100000], ys: List[int]=[5288, 62767, 20256, 66568, 67055], thresh: int=81674052104):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=5, beta=19, xs=[0, 44480, 92341, 95964, 100000], ys=[5288, 62767, 20256, 66568, 67055], thresh=81674052104):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_24",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=25, beta: int=16, xs: List[int]=[0, 63, 253, 353, 741, 903, 1133, 1133, 1175, 1176, 1176, 1177, 1182, 1220, 1425, 1603, 2722, 2742, 2755, 2755, 2759, 2761, 2761, 2761, 2761, 2761, 2761, 2761, 2761, 2761, 2761, 2762, 3190, 5066, 5098, 7145, 8430, 9692, 12184, 12703, 13221, 14201, 16477, 16515, 17204, 17886, 20207, 23521, 23803, 25790, 26135, 30995, 33002, 35032, 35751, 38012, 38523, 38864, 41206, 41822, 44068, 46239, 46346, 48272, 50383, 54535, 55153, 57918, 57980, 58338, 58805, 59521, 61001, 62982, 63478, 64364, 67265, 70674, 72098, 72936, 76772, 77322, 77640, 79131, 80172, 80228, 82153, 82484, 84248, 86443, 89947, 91021, 91353, 91995, 92780, 96357, 99061, 99767, 100000], ys: List[int]=[33740, 79014, 1392, 41180, 23376, 41162, 15001, 28098, 399, 46228, 90978, 11655, 96786, 57663, 30126, 40996, 18459, 94715, 51942, 97269, 75553, 23920, 65274, 46010, 77914, 41462, 19836, 77461, 21794, 92866, 16826, 5243, 41776, 22389, 71084, 45033, 2416, 28888, 89820, 77423, 88863, 72645, 25407, 66257, 82186, 58303, 34022, 77889, 35415, 71849, 91556, 48065, 23602, 32987, 47283, 17938, 38157, 59968, 39221, 50894, 96208, 44968, 24558, 81572, 31164, 33129, 61410, 9285, 35647, 12871, 79569, 7189, 10483, 54991, 71896, 47483, 59874, 3705, 50893, 96323, 25748, 18988, 99127, 24058, 84676, 7768, 18390, 62107, 88633, 6811, 53771, 25610, 88279, 95564, 843, 76646, 12424, 61998, 23732], thresh: int=3779820914):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=25, beta=16, xs=[0, 63, 253, 353, 741, 903, 1133, 1133, 1175, 1176, 1176, 1177, 1182, 1220, 1425, 1603, 2722, 2742, 2755, 2755, 2759, 2761, 2761, 2761, 2761, 2761, 2761, 2761, 2761, 2761, 2761, 2762, 3190, 5066, 5098, 7145, 8430, 9692, 12184, 12703, 13221, 14201, 16477, 16515, 17204, 17886, 20207, 23521, 23803, 25790, 26135, 30995, 33002, 35032, 35751, 38012, 38523, 38864, 41206, 41822, 44068, 46239, 46346, 48272, 50383, 54535, 55153, 57918, 57980, 58338, 58805, 59521, 61001, 62982, 63478, 64364, 67265, 70674, 72098, 72936, 76772, 77322, 77640, 79131, 80172, 80228, 82153, 82484, 84248, 86443, 89947, 91021, 91353, 91995, 92780, 96357, 99061, 99767, 100000], ys=[33740, 79014, 1392, 41180, 23376, 41162, 15001, 28098, 399, 46228, 90978, 11655, 96786, 57663, 30126, 40996, 18459, 94715, 51942, 97269, 75553, 23920, 65274, 46010, 77914, 41462, 19836, 77461, 21794, 92866, 16826, 5243, 41776, 22389, 71084, 45033, 2416, 28888, 89820, 77423, 88863, 72645, 25407, 66257, 82186, 58303, 34022, 77889, 35415, 71849, 91556, 48065, 23602, 32987, 47283, 17938, 38157, 59968, 39221, 50894, 96208, 44968, 24558, 81572, 31164, 33129, 61410, 9285, 35647, 12871, 79569, 7189, 10483, 54991, 71896, 47483, 59874, 3705, 50893, 96323, 25748, 18988, 99127, 24058, 84676, 7768, 18390, 62107, 88633, 6811, 53771, 25610, 88279, 95564, 843, 76646, 12424, 61998, 23732], thresh=3779820914):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_25",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=9, beta: int=9, xs: List[int]=[0, 56126, 73853, 92563, 94701, 95545, 95996, 100000], ys: List[int]=[23035, 52582, 53318, 1470, 84280, 91231, 46790, 55026], thresh: int=34527146130):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=9, beta=9, xs=[0, 56126, 73853, 92563, 94701, 95545, 95996, 100000], ys=[23035, 52582, 53318, 1470, 84280, 91231, 46790, 55026], thresh=34527146130):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_26",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=26, beta: int=90, xs: List[int]=[0, 7928, 8027, 8768, 8973, 9110, 10236, 29956, 30738, 33896, 33942, 34639, 57760, 84646, 86611, 100000], ys: List[int]=[80594, 54094, 9402, 36412, 40196, 55774, 79672, 45978, 84071, 51332, 4041, 63298, 99899, 32108, 87895, 52663], thresh: int=283385417180):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=26, beta=90, xs=[0, 7928, 8027, 8768, 8973, 9110, 10236, 29956, 30738, 33896, 33942, 34639, 57760, 84646, 86611, 100000], ys=[80594, 54094, 9402, 36412, 40196, 55774, 79672, 45978, 84071, 51332, 4041, 63298, 99899, 32108, 87895, 52663], thresh=283385417180):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_27",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=0, beta: int=17, xs: List[int]=[0, 62984, 79252, 92928, 98597, 99342, 99935, 99972, 99991, 99995, 99995, 99998, 99998, 99999, 100000], ys: List[int]=[31245, 46613, 36011, 51951, 1602, 22934, 5139, 17322, 49323, 48217, 45846, 8289, 10560, 7119, 36879], thresh: int=75679087816):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=0, beta=17, xs=[0, 62984, 79252, 92928, 98597, 99342, 99935, 99972, 99991, 99995, 99995, 99998, 99998, 99999, 100000], ys=[31245, 46613, 36011, 51951, 1602, 22934, 5139, 17322, 49323, 48217, 45846, 8289, 10560, 7119, 36879], thresh=75679087816):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_28",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=2, beta: int=4, xs: List[int]=[0, 73736, 88072, 88942, 97308, 100000], ys: List[int]=[20766, 59574, 10826, 53581, 45918, 17224], thresh: int=22882833470):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=2, beta=4, xs=[0, 73736, 88072, 88942, 97308, 100000], ys=[20766, 59574, 10826, 53581, 45918, 17224], thresh=22882833470):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_29",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=86, beta: int=64, xs: List[int]=[0, 4147, 9676, 10179, 17476, 21757, 51568, 52331, 75270, 78581, 88110, 88246, 88252, 88278, 88278, 88278, 88279, 89354, 100000], ys: List[int]=[82283, 18597, 45612, 10755, 43698, 87561, 52435, 40146, 50355, 2151, 69678, 15712, 14626, 47343, 47753, 74655, 30911, 78557, 47877], thresh: int=128481084886):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=86, beta=64, xs=[0, 4147, 9676, 10179, 17476, 21757, 51568, 52331, 75270, 78581, 88110, 88246, 88252, 88278, 88278, 88278, 88279, 89354, 100000], ys=[82283, 18597, 45612, 10755, 43698, 87561, 52435, 40146, 50355, 2151, 69678, 15712, 14626, 47343, 47753, 74655, 30911, 78557, 47877], thresh=128481084886):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_30",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=303, beta: int=940, xs: List[int]=[0, 136, 220, 279, 288, 302, 302, 309, 309, 311, 312, 312, 313, 313, 313, 313, 313, 313, 314, 2384, 2705, 2801, 3038, 3181, 3211, 3227, 3617, 3663, 3680, 3769, 3770, 3775, 3819, 3837, 4080, 4232, 4531, 4698, 5046, 5294, 5304, 5776, 6777, 6911, 6923, 7253, 7269, 7446, 7596, 7841, 8639, 9111, 9136, 9165, 9165, 9176, 9226, 9457, 10249, 10305, 10365, 10703, 10879, 12000, 12335, 12851, 12968, 13168, 13913, 14406, 14425, 14531, 14680, 14751, 14835, 14901, 16042, 16087, 16130, 16173, 16673, 16801, 17117, 17881, 17922, 17974, 18023, 18799, 19157, 19320, 19411, 19543, 19604, 21771, 21786, 21786, 21786, 21786, 21786, 21786, 21787, 23701, 23815, 23831, 23838, 23879, 23889, 24262, 24366, 24502, 24510, 24511, 24511, 24511, 24511, 24511, 24511, 24511, 24511, 24511, 24511, 24511, 24511, 24511, 24511, 24511, 24511, 24511, 24511, 24511, 24511, 24511, 24511, 24512, 24641, 24665, 24748, 25128, 25341, 25400, 26997, 28114, 28515, 28737, 28783, 28808, 28848, 29054, 29061, 29074, 29080, 29083, 29088, 29100, 29165, 29252, 29415, 29597, 29726, 29837, 29936, 29940, 30009, 30184, 30242, 30638, 30707, 30881, 30938, 31007, 31020, 31082, 31084, 31085, 31085, 31086, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31088, 31107, 31282, 31653, 31696, 31761, 31769, 32168, 32184, 32296, 34461, 34483, 34490, 34492, 34492, 34493, 35149, 35254, 38232, 38306, 38571, 38571, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38573, 38711, 39332, 40349, 40360, 40364, 40417, 40992, 41332, 41493, 41719, 41740, 41755, 41755, 41758, 41760, 41848, 41875, 42001, 42133, 42302, 42335, 42367, 42399, 42405, 42407, 42532, 42535, 42539, 42540, 42540, 42540, 42540, 42540, 42540, 42540, 42540, 42540, 42540, 42540, 42540, 42540, 42540, 42541, 47833, 48242, 48341, 48470, 48505, 48505, 48507, 48508, 48508, 48509, 48511, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48513, 48624, 49387, 49598, 49801, 49868, 49869, 49878, 49885, 54227, 55234, 55495, 55509, 55510, 55511, 56412, 57288, 57409, 57552, 57575, 57589, 57590, 57590, 57590, 57590, 57590, 57590, 57590, 57590, 57590, 57590, 57590, 57590, 57590, 57590, 57590, 57591, 57677, 57835, 58148, 58274, 58317, 58328, 58334, 58712, 60366, 61781, 62148, 64083, 64098, 64110, 64130, 64397, 64438, 64466, 64481, 64495, 64945, 66161, 66450, 66703, 66796, 67760, 67827, 67903, 67956, 67978, 67983, 68008, 68012, 68014, 68014, 68015, 68015, 68016, 68017, 68017, 68017, 68017, 68017, 68017, 68017, 68017, 68017, 68017, 68017, 68017, 68017, 68017, 68017, 68017, 68017, 68018, 69331, 69351, 69383, 69498, 69769, 69886, 69918, 70579, 71197, 71208, 71214, 71214, 71215, 71217, 71220, 71715, 72121, 72885, 73038, 73830, 74003, 74090, 75290, 76020, 76027, 76036, 76082, 76331, 77314, 77341, 77341, 77352, 77402, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77410, 77427, 77435, 77484, 77503, 77545, 77548, 77559, 77799, 77861, 77895, 78182, 79165, 79873, 79894, 79899, 80541, 80798, 81081, 81217, 81272, 81289, 81294, 81313, 81860, 82009, 82036, 82080, 82098, 82637, 82682, 83215, 83217, 83237, 84831, 85103, 85373, 85462, 85550, 85620, 85692, 85916, 85968, 86090, 87132, 87609, 87971, 88162, 88190, 88266, 88309, 88309, 88309, 88310, 90072, 90149, 90399, 90460, 90489, 90507, 90601, 90601, 90618, 90904, 90924, 90961, 91788, 91788, 91788, 91789, 91789, 91790, 91790, 91790, 91790, 91790, 91790, 91790, 91790, 91790, 91790, 91790, 91790, 91790, 91790, 91790, 91790, 91790, 91790, 91790, 91790, 91790, 91790, 91791, 92415, 92643, 93509, 93682, 93712, 93745, 93773, 93773, 93789, 93799, 93801, 96871, 96990, 97098, 97288, 97465, 97709, 98520, 98669, 98734, 98793, 98988, 99409, 99446, 99466, 99497, 99588, 99629, 100000], ys: List[int]=[51104, 89297, 75465, 6000, 95729, 22876, 83986, 4383, 59470, 88823, 17096, 50028, 58250, 93048, 22081, 9827, 73992, 52991, 37622, 6900, 19955, 81805, 60800, 54421, 66697, 56728, 99443, 44262, 6090, 71380, 92265, 79457, 20333, 10570, 69739, 44688, 69406, 7752, 88956, 27099, 80752, 88947, 34080, 61655, 44733, 96050, 52826, 13113, 60568, 40669, 72270, 52119, 7502, 40637, 8798, 57332, 74621, 57648, 92438, 90562, 61552, 8503, 7701, 66482, 86587, 69166, 73938, 43973, 70780, 65494, 95886, 47457, 42215, 81326, 45284, 71035, 72261, 77456, 69561, 83316, 21475, 83287, 5851, 75527, 18313, 57870, 19533, 46777, 71684, 82767, 19181, 183, 65140, 82674, 86633, 88925, 32803, 60036, 38755, 58784, 14915, 33817, 72066, 30543, 28240, 21752, 37852, 84796, 58232, 79907, 29373, 9958, 61047, 56593, 29574, 68185, 18197, 80082, 37436, 98169, 4254, 28471, 2968, 45187, 20530, 54352, 16845, 61300, 26032, 25151, 68975, 23044, 74939, 48784, 98435, 18393, 78260, 55811, 94962, 9886, 69474, 48399, 49048, 35553, 70135, 3130, 56324, 95666, 85104, 16784, 52237, 37597, 52447, 99266, 88848, 22385, 80925, 88590, 13562, 63065, 20999, 15372, 75711, 14803, 76812, 96303, 60960, 46669, 42248, 86153, 96974, 43468, 19392, 68389, 69350, 53947, 65412, 64049, 8687, 51133, 37013, 14698, 41296, 95135, 46140, 60088, 76600, 41681, 24649, 1366, 57415, 79029, 86658, 72528, 66240, 34693, 43068, 69934, 45834, 9242, 66969, 7446, 65611, 33036, 81911, 29066, 31844, 21351, 54200, 47965, 2447, 45541, 12036, 74569, 81093, 2359, 29283, 90723, 25363, 3473, 38816, 77984, 97347, 82176, 92808, 26020, 77493, 63232, 71630, 946, 33663, 68040, 82595, 35574, 38736, 63058, 42606, 50213, 4226, 88742, 98629, 66406, 21232, 67930, 54863, 68134, 86225, 82744, 80035, 35762, 79394, 82420, 62200, 67573, 87270, 38053, 27000, 43985, 17794, 76745, 36880, 78238, 24118, 76535, 86182, 90368, 17463, 83052, 39895, 49684, 28376, 78599, 98466, 32754, 4298, 57158, 21030, 57659, 93389, 5836, 23509, 40056, 10996, 97647, 78266, 47579, 17664, 78995, 23263, 38652, 16678, 13844, 37281, 29540, 70221, 32962, 78788, 89623, 60439, 94434, 20528, 72759, 44676, 59793, 58831, 61155, 17622, 95921, 27193, 91623, 5009, 11387, 91220, 36824, 75117, 28739, 97880, 29311, 39118, 73903, 6108, 65776, 4578, 66308, 49773, 8632, 66383, 32609, 81275, 5626, 48792, 7258, 3389, 13685, 64091, 31296, 61352, 55242, 29208, 17953, 83442, 81727, 32307, 66900, 62091, 72065, 76624, 61317, 3354, 22799, 73692, 52712, 78052, 80538, 58029, 97750, 62945, 81890, 99086, 42340, 19022, 71063, 62833, 10038, 2380, 18657, 29839, 63383, 27863, 95815, 71303, 90121, 81903, 21852, 76742, 74675, 73249, 79444, 90437, 69237, 36264, 59822, 75219, 30293, 49976, 73948, 44249, 9595, 23670, 85842, 53861, 49950, 49255, 91511, 78711, 51964, 13188, 68765, 70853, 45254, 48243, 8262, 36087, 5162, 72586, 47407, 31539, 44138, 60536, 6204, 48344, 50324, 14990, 36890, 31917, 88017, 40879, 40793, 98006, 16008, 98596, 37785, 213, 33211, 19802, 64522, 89109, 31449, 907, 29163, 34397, 28396, 39353, 79346, 53907, 2635, 52373, 21753, 1002, 44569, 30464, 20774, 24490, 10800, 36243, 111, 47486, 37840, 94344, 82057, 70271, 85563, 26737, 17633, 76230, 53003, 21677, 92186, 39645, 19219, 59033, 89390, 60705, 90910, 29386, 1400, 38052, 92245, 82552, 83650, 87391, 25892, 96978, 54514, 80524, 49481, 46924, 2444, 54665, 11266, 78945, 57768, 33690, 69463, 41045, 39093, 21769, 69511, 52510, 9509, 48384, 11558, 45607, 16386, 87734, 94815, 18449, 43659, 33665, 31305, 1771, 25534, 58455, 48377, 60486, 16709, 58028, 56466, 68627, 50644, 80155, 31625, 65444, 26242, 39990, 69629, 48884, 6100, 79810, 55049, 30533, 64910, 39076, 37968, 61217, 23626, 3031, 7766, 22513, 96778, 23272, 25002, 13475, 1298, 60857, 88808, 60713, 31505, 49611, 16077, 56401, 50494, 2468, 96477, 33797, 83148, 49371, 26964, 45209, 37805, 55226, 15068, 10786, 72001, 84813, 85006, 4728, 46852, 75750, 1383, 65797, 93236, 35774, 55890, 18509, 5654, 62195, 94461, 41397, 13868, 35093, 93361, 48856, 73603, 5017, 60520, 13310, 92085, 79217, 50764, 2977, 59761, 35328, 70348, 61588, 88955, 10588, 1071, 91694, 60457, 68549, 68026, 36209, 99829, 70989, 97234, 84984, 22586, 17564, 50101, 92631, 38167, 36283, 55804, 20604, 68851, 96035, 12760, 78007, 53335, 16930, 83382, 86493, 6626, 40689, 82784, 23329, 68990, 81997, 53346, 40151, 95251, 38808, 7356, 27697, 84847, 76183, 224, 84687, 95593, 83496, 22820, 54643, 80598, 51644, 33489, 46189, 22915, 2833, 20928, 8664, 80002, 78575, 98252, 5024, 7918, 4105, 96839, 38642, 34816, 36678, 81466, 56208, 76815, 97153, 12462, 86314, 14980, 88758, 95808, 59134, 62441, 19827, 7564, 23410, 53118, 69013, 74647, 94165, 41266, 48410, 64139, 77721, 10597, 7389, 27746, 4627, 20687, 53593, 28370, 12886, 37415, 94009, 60119, 61760, 87781, 77278, 46391, 41356, 99163, 61015, 16598, 74714, 10164, 78759, 2028, 42276, 13044, 24371, 16730, 63419, 61425, 97419, 52892, 71372, 81116, 31757, 89458, 52875, 28060, 51383, 70168, 48698, 56861, 3867, 27047, 78803, 86842, 51888, 18153, 88806, 81062, 4885, 96212, 31143, 17520, 12244, 15699, 55004, 93308, 21138, 99277, 16576, 56577, 20966, 436, 20231, 75465, 26835, 39783, 27336, 94991, 317, 50191, 30840, 88943, 8166, 63674, 75892, 79964, 22636, 93933, 14516, 63709, 49883, 49082, 45683, 39931, 87464, 55374, 93719, 4814, 94923, 54306, 9284, 22897, 40348, 99149, 30135, 16539, 95292, 32916, 2860, 86632, 8183, 29588, 30395, 42825, 97734, 77275, 23907, 72495, 33971, 71056, 20677, 58972, 55910, 79332, 90385, 75411, 96212, 92929, 3972, 30203, 7734, 99174, 59363, 8597, 69030, 5502, 18077, 97150, 44295, 6738, 35331, 87018, 28358, 63831, 20482, 31801, 63070, 79706, 46804, 62929, 70902, 71869, 14286, 80465, 43287, 53759, 15689, 28167, 27887, 15222, 23512, 59804, 22004, 97468, 97833, 20018, 60269, 56215, 58269, 91772, 55699, 39063, 64506, 84870, 60093, 57167, 31418, 9346, 72962, 7763, 60022, 44516, 48541, 22665, 42293, 75191, 23305, 33654, 96796, 26075, 61414, 65406, 1537, 87989, 61418, 66044, 60819, 58417, 83593, 67198, 68726, 96742, 58624, 28720, 40148, 62405, 50154, 23278, 48866, 70194, 83848, 93112, 31130, 53458, 92552, 64122, 21564, 44017, 74490, 35628, 844, 62398, 74205, 58411, 79335, 44818, 85347, 65965, 25268, 19987, 34640, 16540, 85864, 30908, 50458, 70045, 91124, 40866, 70593, 27581, 8120, 16839, 15639, 30731, 57062, 99012, 83979, 41233, 75723, 33292, 68934, 18553, 29472, 74856, 85364, 76256, 99553, 29113, 34189, 42564, 41278, 61215, 24422, 3661, 67093, 2668, 17126, 15376, 52549, 49610, 72361, 57802, 97567, 99608, 83575, 49762, 43541, 9474, 94518, 85084, 98711, 17938, 72273, 28441, 9649, 15529, 23964, 7688, 62746, 89720, 38730, 58841, 76349, 47507, 3217, 77109, 72402, 47965, 63226, 21663, 36258, 31677, 71558, 12049, 27599, 37130, 90931, 29066, 61253, 22839, 18197, 70051, 40364, 2539, 15402, 6352, 96892, 56648, 33425], thresh: int=131770125801):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=303, beta=940, xs=[0, 136, 220, 279, 288, 302, 302, 309, 309, 311, 312, 312, 313, 313, 313, 313, 313, 313, 314, 2384, 2705, 2801, 3038, 3181, 3211, 3227, 3617, 3663, 3680, 3769, 3770, 3775, 3819, 3837, 4080, 4232, 4531, 4698, 5046, 5294, 5304, 5776, 6777, 6911, 6923, 7253, 7269, 7446, 7596, 7841, 8639, 9111, 9136, 9165, 9165, 9176, 9226, 9457, 10249, 10305, 10365, 10703, 10879, 12000, 12335, 12851, 12968, 13168, 13913, 14406, 14425, 14531, 14680, 14751, 14835, 14901, 16042, 16087, 16130, 16173, 16673, 16801, 17117, 17881, 17922, 17974, 18023, 18799, 19157, 19320, 19411, 19543, 19604, 21771, 21786, 21786, 21786, 21786, 21786, 21786, 21787, 23701, 23815, 23831, 23838, 23879, 23889, 24262, 24366, 24502, 24510, 24511, 24511, 24511, 24511, 24511, 24511, 24511, 24511, 24511, 24511, 24511, 24511, 24511, 24511, 24511, 24511, 24511, 24511, 24511, 24511, 24511, 24511, 24512, 24641, 24665, 24748, 25128, 25341, 25400, 26997, 28114, 28515, 28737, 28783, 28808, 28848, 29054, 29061, 29074, 29080, 29083, 29088, 29100, 29165, 29252, 29415, 29597, 29726, 29837, 29936, 29940, 30009, 30184, 30242, 30638, 30707, 30881, 30938, 31007, 31020, 31082, 31084, 31085, 31085, 31086, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31087, 31088, 31107, 31282, 31653, 31696, 31761, 31769, 32168, 32184, 32296, 34461, 34483, 34490, 34492, 34492, 34493, 35149, 35254, 38232, 38306, 38571, 38571, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38572, 38573, 38711, 39332, 40349, 40360, 40364, 40417, 40992, 41332, 41493, 41719, 41740, 41755, 41755, 41758, 41760, 41848, 41875, 42001, 42133, 42302, 42335, 42367, 42399, 42405, 42407, 42532, 42535, 42539, 42540, 42540, 42540, 42540, 42540, 42540, 42540, 42540, 42540, 42540, 42540, 42540, 42540, 42540, 42541, 47833, 48242, 48341, 48470, 48505, 48505, 48507, 48508, 48508, 48509, 48511, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48512, 48513, 48624, 49387, 49598, 49801, 49868, 49869, 49878, 49885, 54227, 55234, 55495, 55509, 55510, 55511, 56412, 57288, 57409, 57552, 57575, 57589, 57590, 57590, 57590, 57590, 57590, 57590, 57590, 57590, 57590, 57590, 57590, 57590, 57590, 57590, 57590, 57591, 57677, 57835, 58148, 58274, 58317, 58328, 58334, 58712, 60366, 61781, 62148, 64083, 64098, 64110, 64130, 64397, 64438, 64466, 64481, 64495, 64945, 66161, 66450, 66703, 66796, 67760, 67827, 67903, 67956, 67978, 67983, 68008, 68012, 68014, 68014, 68015, 68015, 68016, 68017, 68017, 68017, 68017, 68017, 68017, 68017, 68017, 68017, 68017, 68017, 68017, 68017, 68017, 68017, 68017, 68017, 68018, 69331, 69351, 69383, 69498, 69769, 69886, 69918, 70579, 71197, 71208, 71214, 71214, 71215, 71217, 71220, 71715, 72121, 72885, 73038, 73830, 74003, 74090, 75290, 76020, 76027, 76036, 76082, 76331, 77314, 77341, 77341, 77352, 77402, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77409, 77410, 77427, 77435, 77484, 77503, 77545, 77548, 77559, 77799, 77861, 77895, 78182, 79165, 79873, 79894, 79899, 80541, 80798, 81081, 81217, 81272, 81289, 81294, 81313, 81860, 82009, 82036, 82080, 82098, 82637, 82682, 83215, 83217, 83237, 84831, 85103, 85373, 85462, 85550, 85620, 85692, 85916, 85968, 86090, 87132, 87609, 87971, 88162, 88190, 88266, 88309, 88309, 88309, 88310, 90072, 90149, 90399, 90460, 90489, 90507, 90601, 90601, 90618, 90904, 90924, 90961, 91788, 91788, 91788, 91789, 91789, 91790, 91790, 91790, 91790, 91790, 91790, 91790, 91790, 91790, 91790, 91790, 91790, 91790, 91790, 91790, 91790, 91790, 91790, 91790, 91790, 91790, 91790, 91791, 92415, 92643, 93509, 93682, 93712, 93745, 93773, 93773, 93789, 93799, 93801, 96871, 96990, 97098, 97288, 97465, 97709, 98520, 98669, 98734, 98793, 98988, 99409, 99446, 99466, 99497, 99588, 99629, 100000], ys=[51104, 89297, 75465, 6000, 95729, 22876, 83986, 4383, 59470, 88823, 17096, 50028, 58250, 93048, 22081, 9827, 73992, 52991, 37622, 6900, 19955, 81805, 60800, 54421, 66697, 56728, 99443, 44262, 6090, 71380, 92265, 79457, 20333, 10570, 69739, 44688, 69406, 7752, 88956, 27099, 80752, 88947, 34080, 61655, 44733, 96050, 52826, 13113, 60568, 40669, 72270, 52119, 7502, 40637, 8798, 57332, 74621, 57648, 92438, 90562, 61552, 8503, 7701, 66482, 86587, 69166, 73938, 43973, 70780, 65494, 95886, 47457, 42215, 81326, 45284, 71035, 72261, 77456, 69561, 83316, 21475, 83287, 5851, 75527, 18313, 57870, 19533, 46777, 71684, 82767, 19181, 183, 65140, 82674, 86633, 88925, 32803, 60036, 38755, 58784, 14915, 33817, 72066, 30543, 28240, 21752, 37852, 84796, 58232, 79907, 29373, 9958, 61047, 56593, 29574, 68185, 18197, 80082, 37436, 98169, 4254, 28471, 2968, 45187, 20530, 54352, 16845, 61300, 26032, 25151, 68975, 23044, 74939, 48784, 98435, 18393, 78260, 55811, 94962, 9886, 69474, 48399, 49048, 35553, 70135, 3130, 56324, 95666, 85104, 16784, 52237, 37597, 52447, 99266, 88848, 22385, 80925, 88590, 13562, 63065, 20999, 15372, 75711, 14803, 76812, 96303, 60960, 46669, 42248, 86153, 96974, 43468, 19392, 68389, 69350, 53947, 65412, 64049, 8687, 51133, 37013, 14698, 41296, 95135, 46140, 60088, 76600, 41681, 24649, 1366, 57415, 79029, 86658, 72528, 66240, 34693, 43068, 69934, 45834, 9242, 66969, 7446, 65611, 33036, 81911, 29066, 31844, 21351, 54200, 47965, 2447, 45541, 12036, 74569, 81093, 2359, 29283, 90723, 25363, 3473, 38816, 77984, 97347, 82176, 92808, 26020, 77493, 63232, 71630, 946, 33663, 68040, 82595, 35574, 38736, 63058, 42606, 50213, 4226, 88742, 98629, 66406, 21232, 67930, 54863, 68134, 86225, 82744, 80035, 35762, 79394, 82420, 62200, 67573, 87270, 38053, 27000, 43985, 17794, 76745, 36880, 78238, 24118, 76535, 86182, 90368, 17463, 83052, 39895, 49684, 28376, 78599, 98466, 32754, 4298, 57158, 21030, 57659, 93389, 5836, 23509, 40056, 10996, 97647, 78266, 47579, 17664, 78995, 23263, 38652, 16678, 13844, 37281, 29540, 70221, 32962, 78788, 89623, 60439, 94434, 20528, 72759, 44676, 59793, 58831, 61155, 17622, 95921, 27193, 91623, 5009, 11387, 91220, 36824, 75117, 28739, 97880, 29311, 39118, 73903, 6108, 65776, 4578, 66308, 49773, 8632, 66383, 32609, 81275, 5626, 48792, 7258, 3389, 13685, 64091, 31296, 61352, 55242, 29208, 17953, 83442, 81727, 32307, 66900, 62091, 72065, 76624, 61317, 3354, 22799, 73692, 52712, 78052, 80538, 58029, 97750, 62945, 81890, 99086, 42340, 19022, 71063, 62833, 10038, 2380, 18657, 29839, 63383, 27863, 95815, 71303, 90121, 81903, 21852, 76742, 74675, 73249, 79444, 90437, 69237, 36264, 59822, 75219, 30293, 49976, 73948, 44249, 9595, 23670, 85842, 53861, 49950, 49255, 91511, 78711, 51964, 13188, 68765, 70853, 45254, 48243, 8262, 36087, 5162, 72586, 47407, 31539, 44138, 60536, 6204, 48344, 50324, 14990, 36890, 31917, 88017, 40879, 40793, 98006, 16008, 98596, 37785, 213, 33211, 19802, 64522, 89109, 31449, 907, 29163, 34397, 28396, 39353, 79346, 53907, 2635, 52373, 21753, 1002, 44569, 30464, 20774, 24490, 10800, 36243, 111, 47486, 37840, 94344, 82057, 70271, 85563, 26737, 17633, 76230, 53003, 21677, 92186, 39645, 19219, 59033, 89390, 60705, 90910, 29386, 1400, 38052, 92245, 82552, 83650, 87391, 25892, 96978, 54514, 80524, 49481, 46924, 2444, 54665, 11266, 78945, 57768, 33690, 69463, 41045, 39093, 21769, 69511, 52510, 9509, 48384, 11558, 45607, 16386, 87734, 94815, 18449, 43659, 33665, 31305, 1771, 25534, 58455, 48377, 60486, 16709, 58028, 56466, 68627, 50644, 80155, 31625, 65444, 26242, 39990, 69629, 48884, 6100, 79810, 55049, 30533, 64910, 39076, 37968, 61217, 23626, 3031, 7766, 22513, 96778, 23272, 25002, 13475, 1298, 60857, 88808, 60713, 31505, 49611, 16077, 56401, 50494, 2468, 96477, 33797, 83148, 49371, 26964, 45209, 37805, 55226, 15068, 10786, 72001, 84813, 85006, 4728, 46852, 75750, 1383, 65797, 93236, 35774, 55890, 18509, 5654, 62195, 94461, 41397, 13868, 35093, 93361, 48856, 73603, 5017, 60520, 13310, 92085, 79217, 50764, 2977, 59761, 35328, 70348, 61588, 88955, 10588, 1071, 91694, 60457, 68549, 68026, 36209, 99829, 70989, 97234, 84984, 22586, 17564, 50101, 92631, 38167, 36283, 55804, 20604, 68851, 96035, 12760, 78007, 53335, 16930, 83382, 86493, 6626, 40689, 82784, 23329, 68990, 81997, 53346, 40151, 95251, 38808, 7356, 27697, 84847, 76183, 224, 84687, 95593, 83496, 22820, 54643, 80598, 51644, 33489, 46189, 22915, 2833, 20928, 8664, 80002, 78575, 98252, 5024, 7918, 4105, 96839, 38642, 34816, 36678, 81466, 56208, 76815, 97153, 12462, 86314, 14980, 88758, 95808, 59134, 62441, 19827, 7564, 23410, 53118, 69013, 74647, 94165, 41266, 48410, 64139, 77721, 10597, 7389, 27746, 4627, 20687, 53593, 28370, 12886, 37415, 94009, 60119, 61760, 87781, 77278, 46391, 41356, 99163, 61015, 16598, 74714, 10164, 78759, 2028, 42276, 13044, 24371, 16730, 63419, 61425, 97419, 52892, 71372, 81116, 31757, 89458, 52875, 28060, 51383, 70168, 48698, 56861, 3867, 27047, 78803, 86842, 51888, 18153, 88806, 81062, 4885, 96212, 31143, 17520, 12244, 15699, 55004, 93308, 21138, 99277, 16576, 56577, 20966, 436, 20231, 75465, 26835, 39783, 27336, 94991, 317, 50191, 30840, 88943, 8166, 63674, 75892, 79964, 22636, 93933, 14516, 63709, 49883, 49082, 45683, 39931, 87464, 55374, 93719, 4814, 94923, 54306, 9284, 22897, 40348, 99149, 30135, 16539, 95292, 32916, 2860, 86632, 8183, 29588, 30395, 42825, 97734, 77275, 23907, 72495, 33971, 71056, 20677, 58972, 55910, 79332, 90385, 75411, 96212, 92929, 3972, 30203, 7734, 99174, 59363, 8597, 69030, 5502, 18077, 97150, 44295, 6738, 35331, 87018, 28358, 63831, 20482, 31801, 63070, 79706, 46804, 62929, 70902, 71869, 14286, 80465, 43287, 53759, 15689, 28167, 27887, 15222, 23512, 59804, 22004, 97468, 97833, 20018, 60269, 56215, 58269, 91772, 55699, 39063, 64506, 84870, 60093, 57167, 31418, 9346, 72962, 7763, 60022, 44516, 48541, 22665, 42293, 75191, 23305, 33654, 96796, 26075, 61414, 65406, 1537, 87989, 61418, 66044, 60819, 58417, 83593, 67198, 68726, 96742, 58624, 28720, 40148, 62405, 50154, 23278, 48866, 70194, 83848, 93112, 31130, 53458, 92552, 64122, 21564, 44017, 74490, 35628, 844, 62398, 74205, 58411, 79335, 44818, 85347, 65965, 25268, 19987, 34640, 16540, 85864, 30908, 50458, 70045, 91124, 40866, 70593, 27581, 8120, 16839, 15639, 30731, 57062, 99012, 83979, 41233, 75723, 33292, 68934, 18553, 29472, 74856, 85364, 76256, 99553, 29113, 34189, 42564, 41278, 61215, 24422, 3661, 67093, 2668, 17126, 15376, 52549, 49610, 72361, 57802, 97567, 99608, 83575, 49762, 43541, 9474, 94518, 85084, 98711, 17938, 72273, 28441, 9649, 15529, 23964, 7688, 62746, 89720, 38730, 58841, 76349, 47507, 3217, 77109, 72402, 47965, 63226, 21663, 36258, 31677, 71558, 12049, 27599, 37130, 90931, 29066, 61253, 22839, 18197, 70051, 40364, 2539, 15402, 6352, 96892, 56648, 33425], thresh=131770125801):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_31",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=7, beta: int=10, xs: List[int]=[0, 32886, 54802, 87940, 96574, 96853, 98292, 100000], ys: List[int]=[0, 61787, 96511, 20570, 8351, 9741, 438, 49580], thresh: int=41924283671):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=7, beta=10, xs=[0, 32886, 54802, 87940, 96574, 96853, 98292, 100000], ys=[0, 61787, 96511, 20570, 8351, 9741, 438, 49580], thresh=41924283671):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_32",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=15, beta: int=12, xs: List[int]=[0, 53246, 57670, 86026, 100000], ys: List[int]=[51301, 16869, 37927, 42169, 56895], thresh: int=46252947033):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=15, beta=12, xs=[0, 53246, 57670, 86026, 100000], ys=[51301, 16869, 37927, 42169, 56895], thresh=46252947033):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_33",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=3, beta: int=12, xs: List[int]=[0, 41790, 100000], ys: List[int]=[2025, 22722, 21718], thresh: int=61618459005):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=3, beta=12, xs=[0, 41790, 100000], ys=[2025, 22722, 21718], thresh=61618459005):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_34",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=13, beta: int=10, xs: List[int]=[0, 778, 49571, 58878, 59081, 59426, 73259, 78854, 87840, 100000], ys: List[int]=[7837, 7250, 69416, 71436, 34690, 33842, 51381, 27753, 33204, 56963], thresh: int=29202004224):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=13, beta=10, xs=[0, 778, 49571, 58878, 59081, 59426, 73259, 78854, 87840, 100000], ys=[7837, 7250, 69416, 71436, 34690, 33842, 51381, 27753, 33204, 56963], thresh=29202004224):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_35",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=4, beta: int=20, xs: List[int]=[0, 1042, 1397, 5030, 15731, 19640, 23572, 29330, 31584, 45190, 51105, 51398, 51661, 51712, 53523, 55397, 57522, 59285, 60235, 60243, 60788, 60882, 60922, 60993, 61007, 61009, 61009, 61011, 61011, 61011, 61011, 61011, 61011, 61011, 61011, 61011, 61011, 61011, 61011, 61011, 61012, 63807, 67768, 68762, 69079, 86796, 89919, 89934, 100000], ys: List[int]=[39623, 21601, 17223, 39619, 68467, 11258, 83997, 13382, 73342, 12802, 48487, 64374, 82529, 30053, 41874, 53257, 57272, 88024, 30841, 90662, 33010, 23174, 88071, 63932, 17164, 91034, 59029, 84225, 69251, 39860, 75989, 82086, 29369, 29468, 4773, 13642, 67861, 2075, 71929, 71189, 16445, 61682, 92442, 71676, 54829, 20443, 31062, 39483, 23832], thresh: int=17673567472):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=4, beta=20, xs=[0, 1042, 1397, 5030, 15731, 19640, 23572, 29330, 31584, 45190, 51105, 51398, 51661, 51712, 53523, 55397, 57522, 59285, 60235, 60243, 60788, 60882, 60922, 60993, 61007, 61009, 61009, 61011, 61011, 61011, 61011, 61011, 61011, 61011, 61011, 61011, 61011, 61011, 61011, 61011, 61012, 63807, 67768, 68762, 69079, 86796, 89919, 89934, 100000], ys=[39623, 21601, 17223, 39619, 68467, 11258, 83997, 13382, 73342, 12802, 48487, 64374, 82529, 30053, 41874, 53257, 57272, 88024, 30841, 90662, 33010, 23174, 88071, 63932, 17164, 91034, 59029, 84225, 69251, 39860, 75989, 82086, 29369, 29468, 4773, 13642, 67861, 2075, 71929, 71189, 16445, 61682, 92442, 71676, 54829, 20443, 31062, 39483, 23832], thresh=17673567472):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_36",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=12, beta: int=10, xs: List[int]=[0, 26581, 85602, 85690, 86366, 99373, 100000], ys: List[int]=[37315, 68320, 46933, 14658, 5202, 4136, 17075], thresh: int=43606755332):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=12, beta=10, xs=[0, 26581, 85602, 85690, 86366, 99373, 100000], ys=[37315, 68320, 46933, 14658, 5202, 4136, 17075], thresh=43606755332):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_37",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=397, beta: int=852, xs: List[int]=[0, 310, 417, 420, 427, 1985, 3316, 7060, 7209, 7506, 8380, 9370, 10085, 10575, 10736, 10805, 11616, 11681, 11856, 11933, 12295, 12511, 12522, 12534, 12577, 12708, 13057, 13816, 15895, 16708, 16977, 17027, 17029, 17049, 17074, 17607, 17634, 17646, 17674, 17675, 17676, 17676, 17676, 17680, 18357, 18381, 18392, 18404, 18406, 18409, 18409, 18413, 18413, 18413, 18413, 18413, 18413, 18413, 18413, 18413, 18413, 18413, 18413, 18413, 18413, 18413, 18414, 23427, 23595, 23936, 23985, 24298, 24535, 25069, 25182, 25192, 25194, 25194, 25194, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25196, 26329, 27715, 31039, 31389, 31638, 33106, 33684, 39132, 39382, 39720, 39771, 39941, 39970, 41426, 41546, 41581, 41615, 41620, 41620, 41634, 41634, 41656, 41656, 41657, 41657, 41657, 41657, 41657, 41658, 41749, 41756, 42795, 43792, 43947, 44013, 44028, 44028, 44028, 44028, 44029, 44230, 44296, 44364, 48033, 48342, 48427, 48516, 48592, 54367, 54516, 55089, 55279, 55985, 56539, 57211, 57250, 57335, 57345, 57345, 57346, 57346, 57347, 57347, 57348, 57737, 58786, 60367, 61317, 62999, 63456, 63496, 63523, 63543, 63547, 63560, 63575, 63749, 67968, 68482, 70142, 70250, 70612, 71240, 71991, 73372, 73906, 74042, 74175, 74302, 74368, 74420, 74688, 75124, 75221, 76883, 77922, 78033, 78389, 78518, 78609, 79131, 79267, 79272, 79330, 79334, 79335, 79341, 79368, 79391, 79712, 79855, 80022, 80226, 80615, 82389, 83945, 88193, 88202, 89724, 97366, 97947, 98333, 98434, 98481, 98500, 98516, 98517, 98547, 98582, 98583, 98585, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98587, 99849, 100000], ys: List[int]=[60030, 22966, 69187, 88102, 48514, 82795, 21939, 48145, 53423, 4489, 62539, 98826, 25980, 97737, 71384, 40008, 78896, 13077, 59377, 34328, 27690, 25634, 98205, 35854, 95306, 61919, 93353, 60305, 70769, 4744, 11728, 32120, 40430, 55693, 43987, 52662, 46246, 55238, 59129, 85627, 69289, 31756, 61681, 59862, 58090, 69206, 85608, 86343, 37766, 42312, 95653, 21151, 46668, 99005, 5918, 10274, 73206, 81440, 41139, 11245, 62502, 65907, 36375, 60505, 44733, 68733, 52163, 36867, 40808, 85568, 72191, 13140, 97378, 74555, 35515, 41504, 27964, 31121, 1131, 6303, 54212, 97661, 20185, 1515, 78919, 84859, 84284, 32299, 5673, 15193, 33060, 69862, 53659, 91457, 84697, 90059, 80785, 62651, 62050, 94655, 12526, 6137, 33436, 32592, 89304, 5539, 11657, 38412, 55195, 37529, 75518, 11062, 27104, 13389, 50015, 63277, 36321, 44339, 47345, 73925, 65116, 56837, 2775, 21905, 51427, 77727, 75862, 7045, 625, 37485, 98108, 13689, 71581, 12004, 86158, 17925, 3879, 29950, 63343, 13320, 77417, 73383, 1743, 79364, 57517, 96503, 51397, 4418, 71519, 77738, 25566, 94242, 58554, 94780, 78101, 35320, 86402, 79363, 55428, 21290, 44961, 46276, 29943, 37335, 60224, 67630, 90938, 30998, 57186, 82117, 67550, 54261, 50411, 88453, 93502, 46906, 90884, 98898, 43750, 70001, 42763, 26077, 73998, 68368, 41550, 59430, 84904, 34537, 66213, 16571, 14468, 22570, 89738, 30013, 25675, 78857, 70703, 10038, 36032, 6068, 75881, 63630, 34498, 32731, 56116, 59764, 46679, 62142, 67452, 98958, 49983, 79496, 72648, 20178, 19798, 43337, 8280, 96157, 39725, 71786, 49352, 1973, 74198, 66870, 24049, 33259, 91439, 31517, 58513, 18626, 36337, 91771, 13754, 43124, 81398, 98692, 53089, 42731, 6028, 577, 33704, 59835, 85799, 7423, 87378, 41149, 67922, 44146, 11095, 13317, 46934, 76601, 22725, 70204, 97306, 78812, 51290, 33450, 51073, 22394, 80925, 87844, 96284, 54109, 62889, 52729, 73456, 99854, 73715, 12011, 45282, 19032, 9157, 52892, 34377, 55751, 99618, 96100, 39406, 52301, 4453, 39257, 22730, 87073, 90174, 73288, 65287, 83186], thresh: int=238344972151):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=397, beta=852, xs=[0, 310, 417, 420, 427, 1985, 3316, 7060, 7209, 7506, 8380, 9370, 10085, 10575, 10736, 10805, 11616, 11681, 11856, 11933, 12295, 12511, 12522, 12534, 12577, 12708, 13057, 13816, 15895, 16708, 16977, 17027, 17029, 17049, 17074, 17607, 17634, 17646, 17674, 17675, 17676, 17676, 17676, 17680, 18357, 18381, 18392, 18404, 18406, 18409, 18409, 18413, 18413, 18413, 18413, 18413, 18413, 18413, 18413, 18413, 18413, 18413, 18413, 18413, 18413, 18413, 18414, 23427, 23595, 23936, 23985, 24298, 24535, 25069, 25182, 25192, 25194, 25194, 25194, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25195, 25196, 26329, 27715, 31039, 31389, 31638, 33106, 33684, 39132, 39382, 39720, 39771, 39941, 39970, 41426, 41546, 41581, 41615, 41620, 41620, 41634, 41634, 41656, 41656, 41657, 41657, 41657, 41657, 41657, 41658, 41749, 41756, 42795, 43792, 43947, 44013, 44028, 44028, 44028, 44028, 44029, 44230, 44296, 44364, 48033, 48342, 48427, 48516, 48592, 54367, 54516, 55089, 55279, 55985, 56539, 57211, 57250, 57335, 57345, 57345, 57346, 57346, 57347, 57347, 57348, 57737, 58786, 60367, 61317, 62999, 63456, 63496, 63523, 63543, 63547, 63560, 63575, 63749, 67968, 68482, 70142, 70250, 70612, 71240, 71991, 73372, 73906, 74042, 74175, 74302, 74368, 74420, 74688, 75124, 75221, 76883, 77922, 78033, 78389, 78518, 78609, 79131, 79267, 79272, 79330, 79334, 79335, 79341, 79368, 79391, 79712, 79855, 80022, 80226, 80615, 82389, 83945, 88193, 88202, 89724, 97366, 97947, 98333, 98434, 98481, 98500, 98516, 98517, 98547, 98582, 98583, 98585, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98586, 98587, 99849, 100000], ys=[60030, 22966, 69187, 88102, 48514, 82795, 21939, 48145, 53423, 4489, 62539, 98826, 25980, 97737, 71384, 40008, 78896, 13077, 59377, 34328, 27690, 25634, 98205, 35854, 95306, 61919, 93353, 60305, 70769, 4744, 11728, 32120, 40430, 55693, 43987, 52662, 46246, 55238, 59129, 85627, 69289, 31756, 61681, 59862, 58090, 69206, 85608, 86343, 37766, 42312, 95653, 21151, 46668, 99005, 5918, 10274, 73206, 81440, 41139, 11245, 62502, 65907, 36375, 60505, 44733, 68733, 52163, 36867, 40808, 85568, 72191, 13140, 97378, 74555, 35515, 41504, 27964, 31121, 1131, 6303, 54212, 97661, 20185, 1515, 78919, 84859, 84284, 32299, 5673, 15193, 33060, 69862, 53659, 91457, 84697, 90059, 80785, 62651, 62050, 94655, 12526, 6137, 33436, 32592, 89304, 5539, 11657, 38412, 55195, 37529, 75518, 11062, 27104, 13389, 50015, 63277, 36321, 44339, 47345, 73925, 65116, 56837, 2775, 21905, 51427, 77727, 75862, 7045, 625, 37485, 98108, 13689, 71581, 12004, 86158, 17925, 3879, 29950, 63343, 13320, 77417, 73383, 1743, 79364, 57517, 96503, 51397, 4418, 71519, 77738, 25566, 94242, 58554, 94780, 78101, 35320, 86402, 79363, 55428, 21290, 44961, 46276, 29943, 37335, 60224, 67630, 90938, 30998, 57186, 82117, 67550, 54261, 50411, 88453, 93502, 46906, 90884, 98898, 43750, 70001, 42763, 26077, 73998, 68368, 41550, 59430, 84904, 34537, 66213, 16571, 14468, 22570, 89738, 30013, 25675, 78857, 70703, 10038, 36032, 6068, 75881, 63630, 34498, 32731, 56116, 59764, 46679, 62142, 67452, 98958, 49983, 79496, 72648, 20178, 19798, 43337, 8280, 96157, 39725, 71786, 49352, 1973, 74198, 66870, 24049, 33259, 91439, 31517, 58513, 18626, 36337, 91771, 13754, 43124, 81398, 98692, 53089, 42731, 6028, 577, 33704, 59835, 85799, 7423, 87378, 41149, 67922, 44146, 11095, 13317, 46934, 76601, 22725, 70204, 97306, 78812, 51290, 33450, 51073, 22394, 80925, 87844, 96284, 54109, 62889, 52729, 73456, 99854, 73715, 12011, 45282, 19032, 9157, 52892, 34377, 55751, 99618, 96100, 39406, 52301, 4453, 39257, 22730, 87073, 90174, 73288, 65287, 83186], thresh=238344972151):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_38",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=969, beta: int=154, xs: List[int]=[0, 430, 450, 661, 699, 733, 767, 935, 1316, 1373, 1394, 1395, 1395, 1397, 1752, 2267, 2295, 2296, 2332, 2370, 3212, 3277, 3279, 3281, 3281, 3283, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3286, 3365, 3652, 4929, 5343, 5658, 5661, 5670, 5673, 5673, 5673, 5674, 6113, 6296, 6299, 6311, 6524, 7039, 7798, 7836, 7861, 7886, 7892, 7896, 7912, 7917, 7922, 7924, 7925, 7988, 8148, 8755, 9701, 9799, 9855, 9856, 9862, 9863, 9864, 10134, 10280, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10283, 10360, 10505, 10699, 11445, 11504, 11592, 11633, 11943, 12078, 12081, 12082, 12082, 12082, 12082, 12082, 12082, 12082, 12083, 12294, 12294, 12294, 12296, 12296, 12298, 12298, 12298, 12298, 12298, 12298, 12298, 12298, 12298, 12298, 12298, 12298, 12299, 12429, 12502, 12570, 12988, 13145, 13430, 13704, 13898, 14044, 14946, 14981, 15007, 15056, 15114, 15122, 15128, 15129, 15129, 15130, 15317, 15435, 15462, 15494, 15534, 15602, 15723, 15745, 15771, 15773, 15778, 15861, 15897, 15897, 15900, 16006, 16161, 16252, 16386, 16804, 17029, 17235, 17279, 17284, 17284, 17286, 17288, 17288, 17289, 17289, 17289, 17289, 17289, 17289, 17289, 17289, 17289, 17289, 17289, 17289, 17289, 17289, 17289, 17289, 17290, 17476, 17599, 17619, 17995, 18291, 18439, 18455, 18501, 18871, 19790, 20445, 20509, 20690, 20710, 20805, 20829, 20920, 21091, 21098, 21121, 21128, 21143, 21143, 21143, 21143, 21143, 21144, 21144, 21144, 21144, 21144, 21144, 21145, 21386, 21636, 22265, 22580, 22641, 22685, 22717, 22721, 22721, 22722, 22722, 22726, 22754, 22813, 22832, 22858, 22901, 23195, 23278, 23908, 23911, 23963, 23975, 23994, 24000, 24000, 24004, 24005, 24005, 24006, 24082, 24523, 24744, 24768, 24848, 24858, 25092, 25644, 25763, 25776, 25794, 25794, 25797, 25801, 25809, 25866, 25884, 25930, 26093, 26271, 26312, 26754, 26848, 26862, 27005, 27011, 27011, 27044, 27045, 27045, 27046, 27569, 28207, 28890, 28893, 28900, 28908, 28908, 28910, 28910, 28910, 28910, 28910, 28910, 28910, 28910, 28910, 28910, 28911, 28997, 29276, 29281, 29732, 29757, 29802, 29820, 29821, 29822, 29942, 30097, 30177, 30267, 31653, 31676, 31739, 32027, 32034, 32034, 32037, 32039, 32100, 32254, 33082, 33087, 33098, 33135, 33135, 33143, 33149, 33150, 33150, 33150, 33151, 33824, 34029, 34037, 34102, 34655, 34706, 34992, 35039, 35046, 36123, 36294, 36356, 36359, 36372, 36375, 36376, 36376, 36376, 36376, 36376, 36376, 36376, 36376, 36376, 36376, 36376, 36376, 36376, 36376, 36377, 36413, 36507, 36549, 36571, 36604, 36802, 37139, 37281, 37281, 37290, 37622, 37696, 37721, 38435, 39133, 39224, 39358, 39502, 40266, 40520, 40529, 40530, 40533, 40613, 40615, 40626, 40627, 40627, 40627, 40627, 40627, 40627, 40627, 40627, 40627, 40627, 40628, 40764, 41041, 41074, 41083, 41084, 41221, 41329, 41505, 41506, 41513, 41605, 41625, 41776, 41832, 42321, 42329, 42354, 42383, 42412, 42438, 42443, 42458, 42458, 42463, 42464, 42496, 42500, 42507, 42524, 42525, 42530, 42531, 42536, 42785, 43160, 43192, 43227, 43241, 43257, 43478, 43612, 43652, 43811, 44253, 44606, 44781, 44971, 45018, 45019, 45427, 45468, 45533, 45760, 45987, 46023, 46461, 46527, 46528, 46535, 46696, 46762, 47032, 47536, 47835, 48019, 48125, 48151, 48156, 48161, 48734, 48843, 50083, 50321, 50374, 50571, 50778, 50783, 50795, 50797, 50811, 50821, 50821, 50848, 50870, 50883, 50885, 50892, 50898, 50901, 50902, 50920, 51088, 51103, 51282, 51402, 51496, 51502, 51512, 51540, 51665, 51689, 51871, 51932, 52022, 52108, 52146, 52150, 52153, 52271, 52320, 52525, 52533, 52545, 52549, 52634, 52676, 52687, 52687, 52687, 52691, 52697, 52697, 52697, 52697, 52697, 52698, 52757, 53337, 53447, 53570, 53658, 53707, 53737, 53769, 53908, 54043, 54047, 54140, 54268, 54286, 54288, 54290, 54290, 54295, 54440, 54854, 55415, 55576, 55634, 55646, 55646, 55646, 55646, 55646, 55646, 55647, 55694, 55725, 55739, 55844, 56701, 56766, 56812, 56814, 56908, 57001, 57160, 57185, 57195, 57210, 57317, 57319, 57346, 57439, 58067, 58480, 59353, 59380, 59382, 59383, 59383, 59391, 59603, 59633, 59763, 59910, 59985, 60821, 60965, 61079, 61093, 61107, 61181, 61190, 61250, 61418, 61495, 61497, 61508, 61511, 61519, 61527, 61531, 61770, 61862, 62030, 62050, 62052, 62052, 62052, 62052, 62053, 62058, 62062, 62070, 62071, 62153, 62202, 62303, 62357, 62369, 62465, 62533, 62987, 62990, 62991, 63514, 63592, 63756, 63868, 63943, 64190, 64221, 64231, 64232, 64237, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64253, 64306, 65088, 65151, 65475, 65578, 65585, 65599, 65830, 65834, 65837, 65841, 65845, 65845, 65845, 65845, 65845, 65845, 65845, 65845, 65845, 65845, 65846, 65858, 65890, 65891, 65892, 65892, 65892, 65892, 65892, 65892, 65892, 65892, 65892, 65892, 65893, 66427, 66770, 66789, 66923, 66942, 67040, 67101, 67101, 67124, 67248, 67248, 67253, 67257, 67531, 67533, 67642, 67859, 67913, 67948, 67949, 67966, 67968, 67982, 67984, 68025, 68083, 68084, 68088, 68361, 68416, 69007, 69013, 69014, 69017, 69017, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69019, 69574, 69718, 70795, 71949, 71983, 72181, 73596, 73876, 74568, 74962, 75054, 75355, 75379, 75466, 75650, 76304, 77202, 77431, 77706, 77877, 78521, 78540, 78718, 79087, 79108, 79651, 79712, 80549, 80619, 80924, 81002, 82232, 82267, 82422, 84800, 85028, 85048, 85208, 85264, 85589, 85833, 86128, 86865, 87068, 87747, 88141, 88608, 88720, 89073, 89310, 89441, 90149, 90481, 92212, 92254, 93406, 93523, 93719, 94145, 94219, 94300, 94410, 94565, 95029, 95920, 96052, 96648, 96891, 96920, 97594, 98186, 98283, 98387, 99622, 99742, 99883, 99967, 100000], ys: List[int]=[80388, 86635, 14183, 68425, 13120, 84483, 49502, 1920, 81164, 83449, 48160, 60775, 60116, 14044, 80205, 19422, 77699, 72282, 19448, 98465, 5267, 44463, 93552, 61947, 8861, 91048, 61602, 19233, 29086, 72282, 99006, 31447, 51334, 20966, 14335, 7291, 48481, 85149, 35066, 42795, 66792, 53614, 71992, 22302, 38767, 71796, 59160, 12906, 86076, 9319, 95386, 49084, 72951, 94038, 14127, 84875, 6583, 46442, 6820, 81970, 38214, 6068, 13476, 49442, 32636, 99194, 61760, 1699, 1477, 86979, 9337, 30394, 51797, 94476, 83784, 74280, 65235, 287, 21464, 20191, 648, 33476, 56191, 77660, 60048, 56575, 87852, 4512, 5959, 90024, 37203, 24955, 7924, 26030, 68396, 87395, 96049, 71450, 88072, 45136, 16239, 51125, 38376, 36014, 54981, 35823, 29907, 42781, 45546, 10324, 94807, 55756, 82643, 3377, 7048, 12654, 50807, 26052, 58332, 49420, 64996, 53521, 26050, 84509, 2413, 95176, 50549, 64904, 46008, 9311, 61751, 46584, 79896, 86694, 68841, 24955, 16701, 50144, 72299, 17328, 3598, 53281, 51313, 58034, 18592, 68712, 22147, 12952, 5581, 51814, 65710, 11105, 63358, 99510, 89817, 55134, 41523, 53916, 22382, 23556, 51018, 57364, 77055, 27778, 13045, 54625, 89430, 6519, 63479, 79037, 42718, 47463, 40611, 24820, 81566, 49967, 34267, 18598, 33459, 4609, 40514, 52830, 43667, 7929, 13068, 81666, 27329, 95482, 35820, 92977, 56439, 88837, 53669, 74868, 70292, 95862, 15421, 73123, 66075, 15118, 36948, 26277, 39543, 89642, 19726, 55595, 48216, 15086, 18603, 42464, 42968, 9777, 45339, 55335, 62194, 18252, 11757, 97485, 27839, 55226, 38390, 90806, 54536, 25379, 96465, 11684, 48282, 67802, 44122, 10474, 1902, 42735, 76648, 72720, 90615, 8296, 11791, 82996, 23941, 93986, 8684, 44776, 85734, 50223, 66738, 28955, 68037, 28500, 76258, 86156, 71947, 36125, 42435, 94527, 64737, 68775, 66917, 11920, 834, 58329, 67752, 6835, 12943, 79925, 37719, 61734, 87887, 46755, 10838, 2686, 30813, 79303, 30253, 41066, 30651, 99614, 20552, 57215, 30334, 34785, 89090, 69472, 22491, 91462, 3748, 94013, 98291, 97741, 48832, 38271, 81645, 35688, 17625, 82567, 17696, 97263, 62859, 55531, 50054, 24964, 64263, 15128, 74510, 84497, 72983, 32722, 165, 99231, 77134, 64373, 81113, 48817, 55867, 5618, 77227, 9529, 59356, 5268, 37921, 84754, 21105, 60010, 9873, 49272, 55160, 15385, 6688, 47023, 49462, 45361, 50322, 21497, 80762, 10238, 74519, 38186, 9661, 89325, 8157, 72545, 23460, 66685, 34695, 84747, 4960, 21649, 32542, 97473, 70163, 56868, 15935, 79291, 40928, 45222, 90427, 99479, 83897, 57464, 28146, 78733, 81941, 85441, 9314, 78624, 72820, 41336, 67237, 80612, 14038, 51695, 38037, 49455, 17231, 5211, 92722, 59282, 81312, 14154, 46450, 92315, 16246, 7587, 4661, 56274, 71715, 60375, 15631, 8048, 81560, 6688, 15588, 11526, 24189, 6796, 13959, 29687, 69998, 98452, 63395, 31409, 40727, 45692, 96354, 1318, 94426, 36869, 4209, 68439, 10265, 4309, 88604, 61973, 18350, 79557, 51726, 40530, 39684, 82562, 8421, 21519, 9901, 55881, 31092, 55579, 71962, 68238, 20718, 21771, 15452, 77683, 45092, 43152, 12108, 78517, 57789, 35252, 67780, 5830, 28143, 53452, 90187, 40259, 73562, 56043, 96927, 46471, 6082, 58407, 19917, 3680, 76838, 13813, 14365, 47650, 96827, 42043, 21208, 78009, 66799, 27015, 22155, 44305, 56266, 98464, 47534, 91874, 66321, 24113, 37922, 61839, 10539, 93564, 16453, 68184, 12000, 39784, 97434, 20126, 33247, 73715, 43592, 16491, 77834, 32466, 70399, 25319, 11738, 31781, 88039, 66986, 4864, 60522, 75870, 47660, 36296, 97330, 97700, 75756, 85312, 18871, 1150, 73619, 51782, 9090, 58349, 7441, 33932, 72803, 65404, 65044, 40908, 39438, 25158, 89872, 8401, 47749, 60844, 87464, 48150, 65963, 36257, 72371, 53827, 99258, 57114, 87115, 8266, 30958, 54599, 25646, 73989, 45349, 94476, 4712, 584, 60963, 94502, 19393, 7839, 40096, 30140, 75124, 90113, 47496, 54049, 33239, 9450, 74533, 3700, 70478, 68107, 23596, 14021, 87324, 48606, 38858, 616, 93498, 87814, 70495, 64715, 7333, 45969, 83569, 50392, 59897, 23721, 73363, 59775, 60111, 80810, 5517, 83726, 69301, 79340, 92146, 24595, 97144, 2825, 86038, 12742, 21550, 50408, 19960, 62955, 38583, 92994, 47368, 94232, 1652, 23970, 16010, 85911, 66299, 94523, 90842, 41111, 46121, 6604, 36335, 91675, 51653, 47081, 74282, 59278, 65096, 5307, 93207, 73490, 5815, 61614, 65136, 59641, 3206, 64950, 79490, 64805, 99410, 57224, 82252, 6906, 86643, 94388, 42745, 43142, 89229, 73660, 36243, 99092, 25091, 84058, 39865, 29388, 60314, 66258, 3214, 22575, 52733, 32090, 94255, 11881, 2636, 91167, 66474, 77168, 72050, 73353, 41084, 84319, 89655, 73792, 97116, 20304, 8493, 61291, 18131, 80607, 56079, 65175, 29403, 39707, 71121, 54694, 57992, 3909, 64682, 80516, 61182, 69309, 16084, 482, 20720, 35347, 91656, 33188, 39623, 57291, 53865, 74112, 15424, 32414, 60272, 54850, 30083, 29889, 591, 71142, 27568, 60384, 10314, 31688, 47364, 5250, 32054, 55879, 68450, 10139, 43891, 58730, 85953, 81197, 48245, 42091, 14832, 1283, 50947, 22952, 57157, 15755, 51257, 26340, 86470, 27348, 87669, 15976, 76115, 97555, 48747, 1028, 23408, 29249, 17407, 51797, 34988, 31876, 30637, 52934, 77160, 50383, 90918, 21258, 97006, 43983, 7631, 70364, 83139, 79580, 2639, 86421, 18361, 38785, 61917, 2083, 51915, 33036, 27794, 36435, 1596, 1894, 98240, 17538, 21062, 95938, 3693, 70867, 32217, 1090, 35074, 42114, 70553, 88112, 37910, 16181, 98514, 49587, 98281, 81438, 7083, 38942, 42244, 15188, 18476, 65358, 1031, 32814, 71188, 22980, 35806, 81749, 8206, 94399, 16810, 62290, 46722, 29704, 85654, 20290, 84943, 44453, 13896, 67860, 61220, 11180, 51790, 62816, 30511, 73722, 32339, 88125, 23064, 39258, 29272, 2037, 94592, 97198, 62785, 73389, 51430, 55886, 82005, 21194, 84030, 60283, 51601, 34321, 59830, 88878, 49436, 21267, 90243, 55405, 5977, 68872, 34401, 13082, 25083, 13025, 29861, 68249, 68316, 38571, 46352, 65864, 85687, 45601, 96165, 57168, 32067, 90930, 57139, 60479, 14623, 78670, 89008, 44690, 3384, 1576, 19061, 28402, 59205, 60532, 3296, 91512, 23398, 76676, 59186, 54655, 8226, 93771, 15255, 62887, 51064, 93290, 70385, 45097, 67670, 64809, 26032, 17682, 60449, 21440, 62980, 55190, 28436, 7590, 57363, 47705, 17380, 14054, 82320, 64356, 19135, 47871, 78915, 15732, 88731, 21490, 58352, 32674, 98375, 94303, 33702, 19129, 53828, 82576, 63751, 72040, 59910, 99418, 86838, 53019, 82220, 98549, 39891, 24386, 60260, 54932, 86264, 17601, 42976, 73496, 87989, 13916, 41983, 50532, 40842, 12378, 49415, 66822, 76846, 73573, 74862, 43621, 55754, 39705, 25741, 43985, 39134, 3951, 60402, 67246, 63427, 1324, 11305, 52166, 81482, 2467, 1488, 29964, 9257, 41456, 91948, 34554, 24572, 42425, 18200, 13552, 33707, 19003, 58105, 89488, 56424, 98461, 53992, 66719, 71893, 35398, 92386, 36531, 11673, 13059, 29722, 24795, 57893, 5816, 44882, 14735, 2383, 9447, 18641, 90716, 51238, 46136, 2271, 60126, 48109, 28410, 44900, 38945, 37537, 34592, 46614, 40782, 9423, 57408, 17547, 81376, 60732, 39555, 79723, 4731, 15546, 12279, 69475, 39484, 31836, 70979, 86656, 3169], thresh: int=16595108970):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=969, beta=154, xs=[0, 430, 450, 661, 699, 733, 767, 935, 1316, 1373, 1394, 1395, 1395, 1397, 1752, 2267, 2295, 2296, 2332, 2370, 3212, 3277, 3279, 3281, 3281, 3283, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3285, 3286, 3365, 3652, 4929, 5343, 5658, 5661, 5670, 5673, 5673, 5673, 5674, 6113, 6296, 6299, 6311, 6524, 7039, 7798, 7836, 7861, 7886, 7892, 7896, 7912, 7917, 7922, 7924, 7925, 7988, 8148, 8755, 9701, 9799, 9855, 9856, 9862, 9863, 9864, 10134, 10280, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10282, 10283, 10360, 10505, 10699, 11445, 11504, 11592, 11633, 11943, 12078, 12081, 12082, 12082, 12082, 12082, 12082, 12082, 12082, 12083, 12294, 12294, 12294, 12296, 12296, 12298, 12298, 12298, 12298, 12298, 12298, 12298, 12298, 12298, 12298, 12298, 12298, 12299, 12429, 12502, 12570, 12988, 13145, 13430, 13704, 13898, 14044, 14946, 14981, 15007, 15056, 15114, 15122, 15128, 15129, 15129, 15130, 15317, 15435, 15462, 15494, 15534, 15602, 15723, 15745, 15771, 15773, 15778, 15861, 15897, 15897, 15900, 16006, 16161, 16252, 16386, 16804, 17029, 17235, 17279, 17284, 17284, 17286, 17288, 17288, 17289, 17289, 17289, 17289, 17289, 17289, 17289, 17289, 17289, 17289, 17289, 17289, 17289, 17289, 17289, 17289, 17290, 17476, 17599, 17619, 17995, 18291, 18439, 18455, 18501, 18871, 19790, 20445, 20509, 20690, 20710, 20805, 20829, 20920, 21091, 21098, 21121, 21128, 21143, 21143, 21143, 21143, 21143, 21144, 21144, 21144, 21144, 21144, 21144, 21145, 21386, 21636, 22265, 22580, 22641, 22685, 22717, 22721, 22721, 22722, 22722, 22726, 22754, 22813, 22832, 22858, 22901, 23195, 23278, 23908, 23911, 23963, 23975, 23994, 24000, 24000, 24004, 24005, 24005, 24006, 24082, 24523, 24744, 24768, 24848, 24858, 25092, 25644, 25763, 25776, 25794, 25794, 25797, 25801, 25809, 25866, 25884, 25930, 26093, 26271, 26312, 26754, 26848, 26862, 27005, 27011, 27011, 27044, 27045, 27045, 27046, 27569, 28207, 28890, 28893, 28900, 28908, 28908, 28910, 28910, 28910, 28910, 28910, 28910, 28910, 28910, 28910, 28910, 28911, 28997, 29276, 29281, 29732, 29757, 29802, 29820, 29821, 29822, 29942, 30097, 30177, 30267, 31653, 31676, 31739, 32027, 32034, 32034, 32037, 32039, 32100, 32254, 33082, 33087, 33098, 33135, 33135, 33143, 33149, 33150, 33150, 33150, 33151, 33824, 34029, 34037, 34102, 34655, 34706, 34992, 35039, 35046, 36123, 36294, 36356, 36359, 36372, 36375, 36376, 36376, 36376, 36376, 36376, 36376, 36376, 36376, 36376, 36376, 36376, 36376, 36376, 36376, 36377, 36413, 36507, 36549, 36571, 36604, 36802, 37139, 37281, 37281, 37290, 37622, 37696, 37721, 38435, 39133, 39224, 39358, 39502, 40266, 40520, 40529, 40530, 40533, 40613, 40615, 40626, 40627, 40627, 40627, 40627, 40627, 40627, 40627, 40627, 40627, 40627, 40628, 40764, 41041, 41074, 41083, 41084, 41221, 41329, 41505, 41506, 41513, 41605, 41625, 41776, 41832, 42321, 42329, 42354, 42383, 42412, 42438, 42443, 42458, 42458, 42463, 42464, 42496, 42500, 42507, 42524, 42525, 42530, 42531, 42536, 42785, 43160, 43192, 43227, 43241, 43257, 43478, 43612, 43652, 43811, 44253, 44606, 44781, 44971, 45018, 45019, 45427, 45468, 45533, 45760, 45987, 46023, 46461, 46527, 46528, 46535, 46696, 46762, 47032, 47536, 47835, 48019, 48125, 48151, 48156, 48161, 48734, 48843, 50083, 50321, 50374, 50571, 50778, 50783, 50795, 50797, 50811, 50821, 50821, 50848, 50870, 50883, 50885, 50892, 50898, 50901, 50902, 50920, 51088, 51103, 51282, 51402, 51496, 51502, 51512, 51540, 51665, 51689, 51871, 51932, 52022, 52108, 52146, 52150, 52153, 52271, 52320, 52525, 52533, 52545, 52549, 52634, 52676, 52687, 52687, 52687, 52691, 52697, 52697, 52697, 52697, 52697, 52698, 52757, 53337, 53447, 53570, 53658, 53707, 53737, 53769, 53908, 54043, 54047, 54140, 54268, 54286, 54288, 54290, 54290, 54295, 54440, 54854, 55415, 55576, 55634, 55646, 55646, 55646, 55646, 55646, 55646, 55647, 55694, 55725, 55739, 55844, 56701, 56766, 56812, 56814, 56908, 57001, 57160, 57185, 57195, 57210, 57317, 57319, 57346, 57439, 58067, 58480, 59353, 59380, 59382, 59383, 59383, 59391, 59603, 59633, 59763, 59910, 59985, 60821, 60965, 61079, 61093, 61107, 61181, 61190, 61250, 61418, 61495, 61497, 61508, 61511, 61519, 61527, 61531, 61770, 61862, 62030, 62050, 62052, 62052, 62052, 62052, 62053, 62058, 62062, 62070, 62071, 62153, 62202, 62303, 62357, 62369, 62465, 62533, 62987, 62990, 62991, 63514, 63592, 63756, 63868, 63943, 64190, 64221, 64231, 64232, 64237, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64252, 64253, 64306, 65088, 65151, 65475, 65578, 65585, 65599, 65830, 65834, 65837, 65841, 65845, 65845, 65845, 65845, 65845, 65845, 65845, 65845, 65845, 65845, 65846, 65858, 65890, 65891, 65892, 65892, 65892, 65892, 65892, 65892, 65892, 65892, 65892, 65892, 65893, 66427, 66770, 66789, 66923, 66942, 67040, 67101, 67101, 67124, 67248, 67248, 67253, 67257, 67531, 67533, 67642, 67859, 67913, 67948, 67949, 67966, 67968, 67982, 67984, 68025, 68083, 68084, 68088, 68361, 68416, 69007, 69013, 69014, 69017, 69017, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69018, 69019, 69574, 69718, 70795, 71949, 71983, 72181, 73596, 73876, 74568, 74962, 75054, 75355, 75379, 75466, 75650, 76304, 77202, 77431, 77706, 77877, 78521, 78540, 78718, 79087, 79108, 79651, 79712, 80549, 80619, 80924, 81002, 82232, 82267, 82422, 84800, 85028, 85048, 85208, 85264, 85589, 85833, 86128, 86865, 87068, 87747, 88141, 88608, 88720, 89073, 89310, 89441, 90149, 90481, 92212, 92254, 93406, 93523, 93719, 94145, 94219, 94300, 94410, 94565, 95029, 95920, 96052, 96648, 96891, 96920, 97594, 98186, 98283, 98387, 99622, 99742, 99883, 99967, 100000], ys=[80388, 86635, 14183, 68425, 13120, 84483, 49502, 1920, 81164, 83449, 48160, 60775, 60116, 14044, 80205, 19422, 77699, 72282, 19448, 98465, 5267, 44463, 93552, 61947, 8861, 91048, 61602, 19233, 29086, 72282, 99006, 31447, 51334, 20966, 14335, 7291, 48481, 85149, 35066, 42795, 66792, 53614, 71992, 22302, 38767, 71796, 59160, 12906, 86076, 9319, 95386, 49084, 72951, 94038, 14127, 84875, 6583, 46442, 6820, 81970, 38214, 6068, 13476, 49442, 32636, 99194, 61760, 1699, 1477, 86979, 9337, 30394, 51797, 94476, 83784, 74280, 65235, 287, 21464, 20191, 648, 33476, 56191, 77660, 60048, 56575, 87852, 4512, 5959, 90024, 37203, 24955, 7924, 26030, 68396, 87395, 96049, 71450, 88072, 45136, 16239, 51125, 38376, 36014, 54981, 35823, 29907, 42781, 45546, 10324, 94807, 55756, 82643, 3377, 7048, 12654, 50807, 26052, 58332, 49420, 64996, 53521, 26050, 84509, 2413, 95176, 50549, 64904, 46008, 9311, 61751, 46584, 79896, 86694, 68841, 24955, 16701, 50144, 72299, 17328, 3598, 53281, 51313, 58034, 18592, 68712, 22147, 12952, 5581, 51814, 65710, 11105, 63358, 99510, 89817, 55134, 41523, 53916, 22382, 23556, 51018, 57364, 77055, 27778, 13045, 54625, 89430, 6519, 63479, 79037, 42718, 47463, 40611, 24820, 81566, 49967, 34267, 18598, 33459, 4609, 40514, 52830, 43667, 7929, 13068, 81666, 27329, 95482, 35820, 92977, 56439, 88837, 53669, 74868, 70292, 95862, 15421, 73123, 66075, 15118, 36948, 26277, 39543, 89642, 19726, 55595, 48216, 15086, 18603, 42464, 42968, 9777, 45339, 55335, 62194, 18252, 11757, 97485, 27839, 55226, 38390, 90806, 54536, 25379, 96465, 11684, 48282, 67802, 44122, 10474, 1902, 42735, 76648, 72720, 90615, 8296, 11791, 82996, 23941, 93986, 8684, 44776, 85734, 50223, 66738, 28955, 68037, 28500, 76258, 86156, 71947, 36125, 42435, 94527, 64737, 68775, 66917, 11920, 834, 58329, 67752, 6835, 12943, 79925, 37719, 61734, 87887, 46755, 10838, 2686, 30813, 79303, 30253, 41066, 30651, 99614, 20552, 57215, 30334, 34785, 89090, 69472, 22491, 91462, 3748, 94013, 98291, 97741, 48832, 38271, 81645, 35688, 17625, 82567, 17696, 97263, 62859, 55531, 50054, 24964, 64263, 15128, 74510, 84497, 72983, 32722, 165, 99231, 77134, 64373, 81113, 48817, 55867, 5618, 77227, 9529, 59356, 5268, 37921, 84754, 21105, 60010, 9873, 49272, 55160, 15385, 6688, 47023, 49462, 45361, 50322, 21497, 80762, 10238, 74519, 38186, 9661, 89325, 8157, 72545, 23460, 66685, 34695, 84747, 4960, 21649, 32542, 97473, 70163, 56868, 15935, 79291, 40928, 45222, 90427, 99479, 83897, 57464, 28146, 78733, 81941, 85441, 9314, 78624, 72820, 41336, 67237, 80612, 14038, 51695, 38037, 49455, 17231, 5211, 92722, 59282, 81312, 14154, 46450, 92315, 16246, 7587, 4661, 56274, 71715, 60375, 15631, 8048, 81560, 6688, 15588, 11526, 24189, 6796, 13959, 29687, 69998, 98452, 63395, 31409, 40727, 45692, 96354, 1318, 94426, 36869, 4209, 68439, 10265, 4309, 88604, 61973, 18350, 79557, 51726, 40530, 39684, 82562, 8421, 21519, 9901, 55881, 31092, 55579, 71962, 68238, 20718, 21771, 15452, 77683, 45092, 43152, 12108, 78517, 57789, 35252, 67780, 5830, 28143, 53452, 90187, 40259, 73562, 56043, 96927, 46471, 6082, 58407, 19917, 3680, 76838, 13813, 14365, 47650, 96827, 42043, 21208, 78009, 66799, 27015, 22155, 44305, 56266, 98464, 47534, 91874, 66321, 24113, 37922, 61839, 10539, 93564, 16453, 68184, 12000, 39784, 97434, 20126, 33247, 73715, 43592, 16491, 77834, 32466, 70399, 25319, 11738, 31781, 88039, 66986, 4864, 60522, 75870, 47660, 36296, 97330, 97700, 75756, 85312, 18871, 1150, 73619, 51782, 9090, 58349, 7441, 33932, 72803, 65404, 65044, 40908, 39438, 25158, 89872, 8401, 47749, 60844, 87464, 48150, 65963, 36257, 72371, 53827, 99258, 57114, 87115, 8266, 30958, 54599, 25646, 73989, 45349, 94476, 4712, 584, 60963, 94502, 19393, 7839, 40096, 30140, 75124, 90113, 47496, 54049, 33239, 9450, 74533, 3700, 70478, 68107, 23596, 14021, 87324, 48606, 38858, 616, 93498, 87814, 70495, 64715, 7333, 45969, 83569, 50392, 59897, 23721, 73363, 59775, 60111, 80810, 5517, 83726, 69301, 79340, 92146, 24595, 97144, 2825, 86038, 12742, 21550, 50408, 19960, 62955, 38583, 92994, 47368, 94232, 1652, 23970, 16010, 85911, 66299, 94523, 90842, 41111, 46121, 6604, 36335, 91675, 51653, 47081, 74282, 59278, 65096, 5307, 93207, 73490, 5815, 61614, 65136, 59641, 3206, 64950, 79490, 64805, 99410, 57224, 82252, 6906, 86643, 94388, 42745, 43142, 89229, 73660, 36243, 99092, 25091, 84058, 39865, 29388, 60314, 66258, 3214, 22575, 52733, 32090, 94255, 11881, 2636, 91167, 66474, 77168, 72050, 73353, 41084, 84319, 89655, 73792, 97116, 20304, 8493, 61291, 18131, 80607, 56079, 65175, 29403, 39707, 71121, 54694, 57992, 3909, 64682, 80516, 61182, 69309, 16084, 482, 20720, 35347, 91656, 33188, 39623, 57291, 53865, 74112, 15424, 32414, 60272, 54850, 30083, 29889, 591, 71142, 27568, 60384, 10314, 31688, 47364, 5250, 32054, 55879, 68450, 10139, 43891, 58730, 85953, 81197, 48245, 42091, 14832, 1283, 50947, 22952, 57157, 15755, 51257, 26340, 86470, 27348, 87669, 15976, 76115, 97555, 48747, 1028, 23408, 29249, 17407, 51797, 34988, 31876, 30637, 52934, 77160, 50383, 90918, 21258, 97006, 43983, 7631, 70364, 83139, 79580, 2639, 86421, 18361, 38785, 61917, 2083, 51915, 33036, 27794, 36435, 1596, 1894, 98240, 17538, 21062, 95938, 3693, 70867, 32217, 1090, 35074, 42114, 70553, 88112, 37910, 16181, 98514, 49587, 98281, 81438, 7083, 38942, 42244, 15188, 18476, 65358, 1031, 32814, 71188, 22980, 35806, 81749, 8206, 94399, 16810, 62290, 46722, 29704, 85654, 20290, 84943, 44453, 13896, 67860, 61220, 11180, 51790, 62816, 30511, 73722, 32339, 88125, 23064, 39258, 29272, 2037, 94592, 97198, 62785, 73389, 51430, 55886, 82005, 21194, 84030, 60283, 51601, 34321, 59830, 88878, 49436, 21267, 90243, 55405, 5977, 68872, 34401, 13082, 25083, 13025, 29861, 68249, 68316, 38571, 46352, 65864, 85687, 45601, 96165, 57168, 32067, 90930, 57139, 60479, 14623, 78670, 89008, 44690, 3384, 1576, 19061, 28402, 59205, 60532, 3296, 91512, 23398, 76676, 59186, 54655, 8226, 93771, 15255, 62887, 51064, 93290, 70385, 45097, 67670, 64809, 26032, 17682, 60449, 21440, 62980, 55190, 28436, 7590, 57363, 47705, 17380, 14054, 82320, 64356, 19135, 47871, 78915, 15732, 88731, 21490, 58352, 32674, 98375, 94303, 33702, 19129, 53828, 82576, 63751, 72040, 59910, 99418, 86838, 53019, 82220, 98549, 39891, 24386, 60260, 54932, 86264, 17601, 42976, 73496, 87989, 13916, 41983, 50532, 40842, 12378, 49415, 66822, 76846, 73573, 74862, 43621, 55754, 39705, 25741, 43985, 39134, 3951, 60402, 67246, 63427, 1324, 11305, 52166, 81482, 2467, 1488, 29964, 9257, 41456, 91948, 34554, 24572, 42425, 18200, 13552, 33707, 19003, 58105, 89488, 56424, 98461, 53992, 66719, 71893, 35398, 92386, 36531, 11673, 13059, 29722, 24795, 57893, 5816, 44882, 14735, 2383, 9447, 18641, 90716, 51238, 46136, 2271, 60126, 48109, 28410, 44900, 38945, 37537, 34592, 46614, 40782, 9423, 57408, 17547, 81376, 60732, 39555, 79723, 4731, 15546, 12279, 69475, 39484, 31836, 70979, 86656, 3169], thresh=16595108970):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_39",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=0, beta: int=2, xs: List[int]=[0, 6687, 37478, 77944, 95455, 97874, 99164, 99440, 100000], ys: List[int]=[68124, 17446, 18976, 58305, 42368, 63400, 4520, 74165, 4679], thresh: int=5889678728):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=0, beta=2, xs=[0, 6687, 37478, 77944, 95455, 97874, 99164, 99440, 100000], ys=[68124, 17446, 18976, 58305, 42368, 63400, 4520, 74165, 4679], thresh=5889678728):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_40",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=3, beta: int=1, xs: List[int]=[0, 20981, 30883, 40137, 69734, 71538, 100000], ys: List[int]=[74, 80330, 25533, 83592, 50872, 64599, 27632], thresh: int=2314312854):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=3, beta=1, xs=[0, 20981, 30883, 40137, 69734, 71538, 100000], ys=[74, 80330, 25533, 83592, 50872, 64599, 27632], thresh=2314312854):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_41",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=26, beta: int=3, xs: List[int]=[0, 2202, 2327, 2773, 3088, 3224, 3482, 3545, 3553, 3561, 3571, 3572, 3572, 3573, 3573, 3573, 3573, 3573, 3573, 3573, 3573, 3573, 3573, 3573, 3573, 3573, 3573, 3573, 3573, 3574, 8527, 10635, 20705, 22438, 29094, 43260, 43496, 44187, 59748, 59876, 68085, 74130, 74628, 80794, 82997, 93469, 94452, 95822, 100000], ys: List[int]=[54913, 14311, 75, 74887, 88442, 48050, 68625, 78869, 32417, 54141, 24051, 25118, 27066, 28394, 41525, 68122, 22163, 5585, 37569, 91659, 58699, 2523, 5970, 59575, 15278, 2401, 42148, 541, 70626, 47125, 69896, 59769, 80975, 26875, 66523, 17237, 74938, 23518, 39752, 39632, 89494, 96415, 57517, 53195, 43494, 52313, 16189, 58589, 15769], thresh: int=2739198858):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=26, beta=3, xs=[0, 2202, 2327, 2773, 3088, 3224, 3482, 3545, 3553, 3561, 3571, 3572, 3572, 3573, 3573, 3573, 3573, 3573, 3573, 3573, 3573, 3573, 3573, 3573, 3573, 3573, 3573, 3573, 3573, 3574, 8527, 10635, 20705, 22438, 29094, 43260, 43496, 44187, 59748, 59876, 68085, 74130, 74628, 80794, 82997, 93469, 94452, 95822, 100000], ys=[54913, 14311, 75, 74887, 88442, 48050, 68625, 78869, 32417, 54141, 24051, 25118, 27066, 28394, 41525, 68122, 22163, 5585, 37569, 91659, 58699, 2523, 5970, 59575, 15278, 2401, 42148, 541, 70626, 47125, 69896, 59769, 80975, 26875, 66523, 17237, 74938, 23518, 39752, 39632, 89494, 96415, 57517, 53195, 43494, 52313, 16189, 58589, 15769], thresh=2739198858):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_42",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=2, beta: int=7, xs: List[int]=[0, 36046, 81019, 89983, 99283, 100000], ys: List[int]=[41202, 7975, 18633, 4450, 27192, 13797], thresh: int=24425669112):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=2, beta=7, xs=[0, 36046, 81019, 89983, 99283, 100000], ys=[41202, 7975, 18633, 4450, 27192, 13797], thresh=24425669112):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_43",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=471, beta: int=948, xs: List[int]=[0, 139, 216, 22995, 28656, 38641, 56497, 56821, 57038, 58191, 58395, 58524, 58537, 58561, 58562, 58562, 58562, 58563, 58746, 68321, 69026, 70109, 70653, 72362, 81440, 84111, 88054, 91760, 91761, 92440, 93693, 94047, 94456, 96902, 100000], ys: List[int]=[10324, 61840, 49344, 57862, 50177, 27960, 77950, 6986, 61444, 44928, 83801, 12175, 25131, 57835, 42997, 95050, 5727, 70030, 85890, 32129, 79215, 11131, 82476, 45698, 73288, 55404, 70672, 49781, 10522, 60112, 70483, 17923, 57100, 83621, 6007], thresh: int=1142356225284):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=471, beta=948, xs=[0, 139, 216, 22995, 28656, 38641, 56497, 56821, 57038, 58191, 58395, 58524, 58537, 58561, 58562, 58562, 58562, 58563, 58746, 68321, 69026, 70109, 70653, 72362, 81440, 84111, 88054, 91760, 91761, 92440, 93693, 94047, 94456, 96902, 100000], ys=[10324, 61840, 49344, 57862, 50177, 27960, 77950, 6986, 61444, 44928, 83801, 12175, 25131, 57835, 42997, 95050, 5727, 70030, 85890, 32129, 79215, 11131, 82476, 45698, 73288, 55404, 70672, 49781, 10522, 60112, 70483, 17923, 57100, 83621, 6007], thresh=1142356225284):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_44",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=6, beta: int=9, xs: List[int]=[0, 88397, 97271, 99890, 100000], ys: List[int]=[29229, 75981, 25750, 37306, 3719], thresh: int=85218492294):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=6, beta=9, xs=[0, 88397, 97271, 99890, 100000], ys=[29229, 75981, 25750, 37306, 3719], thresh=85218492294):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_45",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=2, beta: int=5, xs: List[int]=[0, 62719, 85663, 100000], ys: List[int]=[43495, 84458, 63102, 16883], thresh: int=50000279244):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=2, beta=5, xs=[0, 62719, 85663, 100000], ys=[43495, 84458, 63102, 16883], thresh=50000279244):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_46",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=3, beta: int=0, xs: List[int]=[0, 10027, 100000], ys: List[int]=[23433, 58570, 5104], thresh: int=514389):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=3, beta=0, xs=[0, 10027, 100000], ys=[23433, 58570, 5104], thresh=514389):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_47",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=36, beta: int=73, xs: List[int]=[0, 2061, 2315, 2395, 2577, 2675, 3053, 3202, 7467, 10009, 10235, 17801, 26821, 27321, 30405, 41243, 42997, 51054, 52570, 55946, 56300, 57349, 57388, 57404, 57553, 58100, 59491, 59736, 60338, 60443, 60455, 60463, 64025, 69208, 70274, 71649, 71671, 72780, 72874, 77796, 80432, 80584, 80723, 81161, 81174, 81961, 83952, 85143, 88313, 89967, 90658, 98435, 99417, 99809, 99942, 99978, 99984, 99998, 99998, 99999, 99999, 99999, 99999, 99999, 99999, 100000], ys: List[int]=[60954, 4073, 1530, 13727, 30884, 98723, 28505, 29304, 9074, 20394, 34030, 19799, 11854, 45906, 41406, 7842, 68060, 89111, 41359, 84144, 51488, 3767, 72072, 16101, 62977, 22979, 3462, 51933, 51395, 59607, 29966, 27688, 96628, 5956, 70107, 19417, 44442, 11183, 86382, 11143, 13981, 26671, 55061, 72021, 79331, 46509, 94848, 19955, 66204, 88712, 39577, 77204, 47152, 87249, 17355, 26824, 37740, 24344, 81562, 11237, 76738, 30243, 31167, 54084, 11811, 6130], thresh: int=39291101588):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=36, beta=73, xs=[0, 2061, 2315, 2395, 2577, 2675, 3053, 3202, 7467, 10009, 10235, 17801, 26821, 27321, 30405, 41243, 42997, 51054, 52570, 55946, 56300, 57349, 57388, 57404, 57553, 58100, 59491, 59736, 60338, 60443, 60455, 60463, 64025, 69208, 70274, 71649, 71671, 72780, 72874, 77796, 80432, 80584, 80723, 81161, 81174, 81961, 83952, 85143, 88313, 89967, 90658, 98435, 99417, 99809, 99942, 99978, 99984, 99998, 99998, 99999, 99999, 99999, 99999, 99999, 99999, 100000], ys=[60954, 4073, 1530, 13727, 30884, 98723, 28505, 29304, 9074, 20394, 34030, 19799, 11854, 45906, 41406, 7842, 68060, 89111, 41359, 84144, 51488, 3767, 72072, 16101, 62977, 22979, 3462, 51933, 51395, 59607, 29966, 27688, 96628, 5956, 70107, 19417, 44442, 11183, 86382, 11143, 13981, 26671, 55061, 72021, 79331, 46509, 94848, 19955, 66204, 88712, 39577, 77204, 47152, 87249, 17355, 26824, 37740, 24344, 81562, 11237, 76738, 30243, 31167, 54084, 11811, 6130], thresh=39291101588):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_48",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=24, beta: int=26, xs: List[int]=[0, 3684, 14871, 16650, 16776, 16811, 16812, 16813, 16813, 16813, 16813, 16813, 16813, 16813, 16813, 16813, 16814, 63386, 73511, 74965, 94785, 97731, 99775, 99903, 99944, 99972, 99992, 99996, 99997, 99998, 100000], ys: List[int]=[11281, 26816, 33293, 76365, 43687, 28719, 64762, 73724, 57656, 17386, 60013, 73025, 47004, 59837, 64538, 90384, 22597, 50641, 2385, 22837, 53181, 47554, 47734, 41540, 50572, 48167, 22381, 31314, 31540, 22271, 14285], thresh: int=73371052208):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=24, beta=26, xs=[0, 3684, 14871, 16650, 16776, 16811, 16812, 16813, 16813, 16813, 16813, 16813, 16813, 16813, 16813, 16813, 16814, 63386, 73511, 74965, 94785, 97731, 99775, 99903, 99944, 99972, 99992, 99996, 99997, 99998, 100000], ys=[11281, 26816, 33293, 76365, 43687, 28719, 64762, 73724, 57656, 17386, 60013, 73025, 47004, 59837, 64538, 90384, 22597, 50641, 2385, 22837, 53181, 47554, 47734, 41540, 50572, 48167, 22381, 31314, 31540, 22271, 14285], thresh=73371052208):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_49",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=23, beta: int=21, xs: List[int]=[0, 3499, 5170, 8823, 8966, 18481, 20518, 26692, 26962, 28365, 29352, 31965, 32371, 32482, 32676, 32710, 32711, 32712, 32712, 32712, 32712, 32712, 32712, 32712, 32712, 32712, 32712, 32712, 32712, 32712, 32712, 32712, 32712, 32712, 32712, 32712, 32712, 32712, 32712, 32713, 38751, 42906, 55472, 59407, 66499, 68778, 84367, 96556, 100000], ys: List[int]=[948, 43758, 37828, 95979, 22221, 32430, 19559, 76337, 74479, 8062, 92905, 68075, 27956, 79477, 42655, 29777, 12772, 2395, 70011, 64288, 93331, 62584, 19177, 67558, 35691, 84222, 88161, 73221, 22958, 25205, 28608, 79335, 10656, 53404, 19880, 91091, 23569, 33247, 49241, 73112, 62708, 84938, 10055, 48773, 58132, 73068, 30745, 53605, 40845], thresh: int=18030875242):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=23, beta=21, xs=[0, 3499, 5170, 8823, 8966, 18481, 20518, 26692, 26962, 28365, 29352, 31965, 32371, 32482, 32676, 32710, 32711, 32712, 32712, 32712, 32712, 32712, 32712, 32712, 32712, 32712, 32712, 32712, 32712, 32712, 32712, 32712, 32712, 32712, 32712, 32712, 32712, 32712, 32712, 32713, 38751, 42906, 55472, 59407, 66499, 68778, 84367, 96556, 100000], ys=[948, 43758, 37828, 95979, 22221, 32430, 19559, 76337, 74479, 8062, 92905, 68075, 27956, 79477, 42655, 29777, 12772, 2395, 70011, 64288, 93331, 62584, 19177, 67558, 35691, 84222, 88161, 73221, 22958, 25205, 28608, 79335, 10656, 53404, 19880, 91091, 23569, 33247, 49241, 73112, 62708, 84938, 10055, 48773, 58132, 73068, 30745, 53605, 40845], thresh=18030875242):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_50",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=90, beta: int=23, xs: List[int]=[0, 9280, 9703, 17554, 22965, 38300, 39379, 40104, 40440, 41220, 41543, 41785, 42459, 42515, 42607, 42619, 42634, 42637, 42637, 42637, 42637, 42637, 42637, 42638, 42638, 42638, 42638, 42638, 42638, 42638, 42638, 42638, 42639, 44085, 46422, 47104, 51667, 53052, 53201, 54310, 54711, 54953, 55700, 56422, 56853, 56917, 56946, 56953, 59234, 64137, 64388, 64422, 64427, 64428, 64430, 64430, 64430, 64431, 64431, 64431, 64431, 64431, 64431, 64431, 64431, 64431, 64431, 64431, 64431, 64431, 64431, 64431, 64431, 64431, 64431, 64431, 64432, 64511, 64854, 66885, 70335, 71017, 71311, 71511, 71763, 71802, 71807, 71809, 71850, 80156, 80321, 87989, 88459, 88732, 93273, 93277, 97559, 97712, 100000], ys: List[int]=[24365, 6217, 522, 66929, 87927, 7019, 75405, 76217, 59050, 50999, 8561, 57492, 49449, 49821, 59608, 63058, 64616, 18926, 30077, 74694, 24641, 74709, 86453, 73704, 15878, 37013, 17804, 89800, 24067, 6662, 70552, 81057, 11693, 67611, 2319, 94348, 94649, 6641, 39310, 29030, 49128, 70450, 45387, 86826, 9499, 79780, 65512, 82790, 80724, 6721, 3479, 57207, 26840, 53208, 8934, 57494, 14938, 24755, 45924, 24713, 2590, 98806, 80578, 61708, 6693, 61842, 24473, 73623, 88606, 70127, 954, 35498, 56067, 43031, 73508, 6257, 28563, 88450, 94305, 57142, 6076, 45200, 65900, 77634, 78106, 32823, 48361, 15745, 22747, 91563, 5278, 29362, 77572, 72197, 54613, 61864, 57069, 89181, 10573], thresh: int=15541161062):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=90, beta=23, xs=[0, 9280, 9703, 17554, 22965, 38300, 39379, 40104, 40440, 41220, 41543, 41785, 42459, 42515, 42607, 42619, 42634, 42637, 42637, 42637, 42637, 42637, 42637, 42638, 42638, 42638, 42638, 42638, 42638, 42638, 42638, 42638, 42639, 44085, 46422, 47104, 51667, 53052, 53201, 54310, 54711, 54953, 55700, 56422, 56853, 56917, 56946, 56953, 59234, 64137, 64388, 64422, 64427, 64428, 64430, 64430, 64430, 64431, 64431, 64431, 64431, 64431, 64431, 64431, 64431, 64431, 64431, 64431, 64431, 64431, 64431, 64431, 64431, 64431, 64431, 64431, 64432, 64511, 64854, 66885, 70335, 71017, 71311, 71511, 71763, 71802, 71807, 71809, 71850, 80156, 80321, 87989, 88459, 88732, 93273, 93277, 97559, 97712, 100000], ys=[24365, 6217, 522, 66929, 87927, 7019, 75405, 76217, 59050, 50999, 8561, 57492, 49449, 49821, 59608, 63058, 64616, 18926, 30077, 74694, 24641, 74709, 86453, 73704, 15878, 37013, 17804, 89800, 24067, 6662, 70552, 81057, 11693, 67611, 2319, 94348, 94649, 6641, 39310, 29030, 49128, 70450, 45387, 86826, 9499, 79780, 65512, 82790, 80724, 6721, 3479, 57207, 26840, 53208, 8934, 57494, 14938, 24755, 45924, 24713, 2590, 98806, 80578, 61708, 6693, 61842, 24473, 73623, 88606, 70127, 954, 35498, 56067, 43031, 73508, 6257, 28563, 88450, 94305, 57142, 6076, 45200, 65900, 77634, 78106, 32823, 48361, 15745, 22747, 91563, 5278, 29362, 77572, 72197, 54613, 61864, 57069, 89181, 10573], thresh=15541161062):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_51",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=18, beta: int=47, xs: List[int]=[0, 621, 2246, 5418, 5768, 7099, 7983, 10001, 10447, 10567, 10656, 10831, 22950, 23577, 23614, 26865, 29377, 30124, 31766, 34108, 34626, 34869, 34901, 34917, 34918, 34926, 34929, 34929, 34929, 34929, 34929, 34930, 39925, 52225, 54826, 57367, 63220, 63908, 65078, 67485, 67699, 69707, 72749, 79287, 79961, 89524, 91891, 95746, 100000], ys: List[int]=[54798, 46043, 20643, 65459, 96376, 38309, 29402, 93586, 56337, 21458, 17184, 84542, 18989, 84041, 73584, 45897, 38719, 97615, 62702, 82413, 8889, 30036, 98056, 19120, 36249, 45732, 51694, 15018, 52871, 4893, 93189, 16523, 3024, 43430, 3487, 23813, 63870, 78231, 64317, 15399, 717, 56908, 29401, 80526, 1745, 84170, 89008, 53182, 51706], thresh: int=28761798184):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=18, beta=47, xs=[0, 621, 2246, 5418, 5768, 7099, 7983, 10001, 10447, 10567, 10656, 10831, 22950, 23577, 23614, 26865, 29377, 30124, 31766, 34108, 34626, 34869, 34901, 34917, 34918, 34926, 34929, 34929, 34929, 34929, 34929, 34930, 39925, 52225, 54826, 57367, 63220, 63908, 65078, 67485, 67699, 69707, 72749, 79287, 79961, 89524, 91891, 95746, 100000], ys=[54798, 46043, 20643, 65459, 96376, 38309, 29402, 93586, 56337, 21458, 17184, 84542, 18989, 84041, 73584, 45897, 38719, 97615, 62702, 82413, 8889, 30036, 98056, 19120, 36249, 45732, 51694, 15018, 52871, 4893, 93189, 16523, 3024, 43430, 3487, 23813, 63870, 78231, 64317, 15399, 717, 56908, 29401, 80526, 1745, 84170, 89008, 53182, 51706], thresh=28761798184):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_52",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=3, beta: int=17, xs: List[int]=[0, 503, 19815, 22228, 24360, 29077, 34290, 35236, 35337, 35451, 35509, 35513, 72600, 100000], ys: List[int]=[78321, 72581, 72184, 11185, 83483, 99469, 70505, 67464, 38722, 90956, 51123, 57481, 88033, 64857], thresh: int=78909641107):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=3, beta=17, xs=[0, 503, 19815, 22228, 24360, 29077, 34290, 35236, 35337, 35451, 35509, 35513, 72600, 100000], ys=[78321, 72581, 72184, 11185, 83483, 99469, 70505, 67464, 38722, 90956, 51123, 57481, 88033, 64857], thresh=78909641107):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_53",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=697, beta: int=1, xs: List[int]=[0, 719, 3862, 3884, 3965, 3971, 3971, 3974, 3985, 4824, 5986, 8497, 9349, 9355, 9356, 9356, 9356, 9356, 9356, 9356, 9357, 10991, 11307, 11591, 11591, 11786, 11843, 11849, 11861, 11861, 11861, 11861, 11861, 11861, 11862, 13335, 14248, 14972, 15069, 15114, 15239, 15313, 15517, 15558, 15702, 16339, 16426, 16438, 16456, 16793, 18790, 18797, 18807, 18815, 19572, 22891, 23339, 23357, 23367, 24940, 25054, 25155, 25234, 25304, 27693, 28473, 28733, 30089, 30317, 31072, 31256, 31287, 31415, 31795, 35644, 38095, 38257, 38365, 38416, 38458, 38460, 38463, 39504, 43121, 43630, 43886, 45105, 45217, 45366, 45384, 45478, 46338, 46920, 47161, 47251, 47910, 49036, 49037, 51361, 52030, 52102, 52271, 52289, 52329, 52329, 52353, 52592, 53820, 55019, 57142, 57243, 57283, 57307, 57342, 57710, 57772, 57930, 58354, 59594, 60595, 61126, 61542, 61671, 62226, 62897, 63138, 63151, 63187, 63622, 63666, 63674, 63703, 63710, 63711, 63713, 63713, 63713, 63713, 63713, 63713, 63714, 64224, 64250, 64325, 64326, 64332, 64354, 65463, 66691, 69039, 69813, 70527, 70662, 70668, 70677, 70679, 70685, 70687, 70688, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70690, 70934, 70987, 71033, 71069, 71861, 74422, 74925, 76090, 77856, 78311, 79697, 82796, 86365, 86649, 89342, 89360, 89417, 89440, 90470, 91472, 92125, 92633, 92819, 92846, 92851, 92852, 92852, 92853, 93336, 93408, 93410, 93412, 93413, 93414, 93580, 93609, 93871, 93876, 93888, 93951, 93985, 94017, 94022, 94022, 94022, 94023, 95866, 96564, 99181, 99340, 99353, 99421, 99464, 99483, 99494, 99495, 99657, 99969, 99994, 99995, 99996, 99997, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 100000], ys: List[int]=[55029, 35013, 90059, 24263, 66927, 94074, 95338, 77344, 50480, 53670, 38606, 33732, 16379, 97742, 91394, 95680, 52884, 36526, 93843, 34493, 95036, 21573, 11184, 92632, 2664, 33197, 10912, 95071, 50529, 41768, 52697, 42970, 32238, 43974, 87440, 93162, 70554, 53239, 66931, 97952, 4180, 20584, 95667, 57015, 14280, 71562, 13372, 93992, 4446, 50694, 32954, 32190, 38256, 96239, 45626, 55743, 21241, 81959, 28010, 89362, 6661, 92440, 20045, 66239, 26468, 76031, 9551, 35579, 2846, 91474, 79197, 3898, 94387, 55714, 44524, 23311, 36387, 3536, 95284, 30831, 9845, 10221, 79595, 63623, 38141, 2457, 50503, 9901, 72185, 86437, 82852, 98666, 48739, 34030, 13155, 1073, 4933, 59680, 10654, 77401, 32640, 96893, 69137, 23245, 4643, 32956, 4416, 44243, 79837, 89284, 50426, 95304, 32334, 32349, 57458, 74400, 76717, 9116, 36644, 178, 2562, 56006, 41191, 25634, 46710, 91411, 41644, 18927, 68075, 98697, 41157, 420, 23508, 95311, 69712, 61451, 77455, 33908, 92596, 9128, 90053, 55848, 28569, 17144, 63185, 77223, 49128, 71304, 47904, 84109, 57849, 23642, 79021, 84831, 51158, 23784, 12192, 44171, 48878, 49469, 34554, 18213, 70919, 63470, 32775, 58275, 61681, 27726, 20574, 84102, 850, 46956, 17800, 39273, 59374, 86151, 88899, 38731, 831, 93454, 28055, 92036, 72483, 26699, 29011, 38256, 44224, 78223, 28515, 1254, 4012, 65540, 3484, 50682, 87363, 64829, 90365, 20544, 12149, 49453, 72502, 59577, 9567, 18997, 20556, 39193, 79078, 42510, 17165, 30539, 34569, 76143, 10683, 47217, 4981, 85251, 10846, 45508, 69479, 72060, 83431, 41165, 33197, 13382, 33829, 89087, 22534, 44985, 1866, 40519, 64362, 55151, 97767, 71045, 79979, 81240, 1005, 53869, 96751, 66007, 97446, 62376, 19391, 12476, 74671, 69287, 14196, 41529, 98575, 60842, 91691, 676, 56126, 55273, 73781, 75332, 31184, 49168, 31131, 21600, 65933, 36456, 50122, 10106, 76373, 26861, 30754, 9164, 37187, 39893, 56918, 72869, 75809, 21639, 4241, 91841, 51036, 50950, 4659], thresh: int=810975514):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=697, beta=1, xs=[0, 719, 3862, 3884, 3965, 3971, 3971, 3974, 3985, 4824, 5986, 8497, 9349, 9355, 9356, 9356, 9356, 9356, 9356, 9356, 9357, 10991, 11307, 11591, 11591, 11786, 11843, 11849, 11861, 11861, 11861, 11861, 11861, 11861, 11862, 13335, 14248, 14972, 15069, 15114, 15239, 15313, 15517, 15558, 15702, 16339, 16426, 16438, 16456, 16793, 18790, 18797, 18807, 18815, 19572, 22891, 23339, 23357, 23367, 24940, 25054, 25155, 25234, 25304, 27693, 28473, 28733, 30089, 30317, 31072, 31256, 31287, 31415, 31795, 35644, 38095, 38257, 38365, 38416, 38458, 38460, 38463, 39504, 43121, 43630, 43886, 45105, 45217, 45366, 45384, 45478, 46338, 46920, 47161, 47251, 47910, 49036, 49037, 51361, 52030, 52102, 52271, 52289, 52329, 52329, 52353, 52592, 53820, 55019, 57142, 57243, 57283, 57307, 57342, 57710, 57772, 57930, 58354, 59594, 60595, 61126, 61542, 61671, 62226, 62897, 63138, 63151, 63187, 63622, 63666, 63674, 63703, 63710, 63711, 63713, 63713, 63713, 63713, 63713, 63713, 63714, 64224, 64250, 64325, 64326, 64332, 64354, 65463, 66691, 69039, 69813, 70527, 70662, 70668, 70677, 70679, 70685, 70687, 70688, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70689, 70690, 70934, 70987, 71033, 71069, 71861, 74422, 74925, 76090, 77856, 78311, 79697, 82796, 86365, 86649, 89342, 89360, 89417, 89440, 90470, 91472, 92125, 92633, 92819, 92846, 92851, 92852, 92852, 92853, 93336, 93408, 93410, 93412, 93413, 93414, 93580, 93609, 93871, 93876, 93888, 93951, 93985, 94017, 94022, 94022, 94022, 94023, 95866, 96564, 99181, 99340, 99353, 99421, 99464, 99483, 99494, 99495, 99657, 99969, 99994, 99995, 99996, 99997, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 99999, 100000], ys=[55029, 35013, 90059, 24263, 66927, 94074, 95338, 77344, 50480, 53670, 38606, 33732, 16379, 97742, 91394, 95680, 52884, 36526, 93843, 34493, 95036, 21573, 11184, 92632, 2664, 33197, 10912, 95071, 50529, 41768, 52697, 42970, 32238, 43974, 87440, 93162, 70554, 53239, 66931, 97952, 4180, 20584, 95667, 57015, 14280, 71562, 13372, 93992, 4446, 50694, 32954, 32190, 38256, 96239, 45626, 55743, 21241, 81959, 28010, 89362, 6661, 92440, 20045, 66239, 26468, 76031, 9551, 35579, 2846, 91474, 79197, 3898, 94387, 55714, 44524, 23311, 36387, 3536, 95284, 30831, 9845, 10221, 79595, 63623, 38141, 2457, 50503, 9901, 72185, 86437, 82852, 98666, 48739, 34030, 13155, 1073, 4933, 59680, 10654, 77401, 32640, 96893, 69137, 23245, 4643, 32956, 4416, 44243, 79837, 89284, 50426, 95304, 32334, 32349, 57458, 74400, 76717, 9116, 36644, 178, 2562, 56006, 41191, 25634, 46710, 91411, 41644, 18927, 68075, 98697, 41157, 420, 23508, 95311, 69712, 61451, 77455, 33908, 92596, 9128, 90053, 55848, 28569, 17144, 63185, 77223, 49128, 71304, 47904, 84109, 57849, 23642, 79021, 84831, 51158, 23784, 12192, 44171, 48878, 49469, 34554, 18213, 70919, 63470, 32775, 58275, 61681, 27726, 20574, 84102, 850, 46956, 17800, 39273, 59374, 86151, 88899, 38731, 831, 93454, 28055, 92036, 72483, 26699, 29011, 38256, 44224, 78223, 28515, 1254, 4012, 65540, 3484, 50682, 87363, 64829, 90365, 20544, 12149, 49453, 72502, 59577, 9567, 18997, 20556, 39193, 79078, 42510, 17165, 30539, 34569, 76143, 10683, 47217, 4981, 85251, 10846, 45508, 69479, 72060, 83431, 41165, 33197, 13382, 33829, 89087, 22534, 44985, 1866, 40519, 64362, 55151, 97767, 71045, 79979, 81240, 1005, 53869, 96751, 66007, 97446, 62376, 19391, 12476, 74671, 69287, 14196, 41529, 98575, 60842, 91691, 676, 56126, 55273, 73781, 75332, 31184, 49168, 31131, 21600, 65933, 36456, 50122, 10106, 76373, 26861, 30754, 9164, 37187, 39893, 56918, 72869, 75809, 21639, 4241, 91841, 51036, 50950, 4659], thresh=810975514):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_54",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=5, beta: int=2, xs: List[int]=[0, 80619, 93060, 94726, 97092, 99423, 99996, 99998, 100000], ys: List[int]=[2876, 30145, 64199, 20173, 12256, 16910, 16845, 17073, 13197], thresh: int=13339384508):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=5, beta=2, xs=[0, 80619, 93060, 94726, 97092, 99423, 99996, 99998, 100000], ys=[2876, 30145, 64199, 20173, 12256, 16910, 16845, 17073, 13197], thresh=13339384508):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_55",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=960, beta: int=188, xs: List[int]=[0, 1886, 2578, 2639, 2689, 2716, 2807, 3081, 3270, 4517, 4879, 4973, 5251, 5271, 5298, 5299, 9606, 9619, 9638, 9651, 9653, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9665, 10111, 13462, 13779, 13835, 14395, 14578, 14814, 14940, 15266, 15301, 15439, 15584, 15879, 16662, 16701, 16781, 17935, 18092, 18161, 18284, 20726, 21358, 21562, 21948, 22050, 32057, 32741, 32751, 32758, 32768, 32770, 32833, 33808, 33844, 33923, 33946, 34034, 34036, 34038, 34038, 34039, 34039, 34039, 34039, 34039, 34039, 34039, 34039, 34039, 34039, 34039, 34039, 34039, 34040, 34215, 34645, 35720, 37056, 37501, 37806, 42075, 42430, 42815, 43066, 43344, 43352, 43352, 43352, 43352, 43353, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43356, 43450, 44412, 44920, 45519, 47269, 47450, 47653, 47933, 48013, 48035, 48081, 48082, 48082, 48082, 48083, 48083, 48083, 48083, 48083, 48083, 48083, 48083, 48083, 48083, 48083, 48083, 48083, 48084, 49202, 51582, 52208, 52619, 52680, 55657, 57845, 58062, 58160, 58276, 58339, 58373, 58463, 59155, 59773, 60014, 60210, 61188, 66887, 67562, 68068, 71509, 74001, 74159, 74320, 74560, 74563, 74563, 74564, 74564, 74565, 80651, 80731, 80747, 82576, 83743, 84752, 85200, 85430, 85436, 85527, 85585, 85627, 85660, 85685, 87524, 87890, 87979, 88057, 89314, 90226, 97691, 99551, 99616, 99888, 99979, 100000], ys: List[int]=[9562, 7994, 72582, 49547, 65476, 75808, 9899, 29860, 4149, 426, 72415, 62446, 87139, 24893, 98404, 58619, 74777, 72262, 33018, 40829, 79947, 3986, 64284, 79338, 37907, 1028, 5452, 27371, 35526, 2389, 88721, 6417, 69132, 89411, 80024, 74380, 7209, 24661, 76028, 88860, 91685, 25452, 81254, 90952, 87021, 27008, 36904, 61127, 32069, 46623, 92178, 56953, 65448, 63653, 7831, 52042, 85737, 16301, 69185, 17755, 16003, 68445, 7253, 92956, 13978, 93189, 49584, 4465, 37268, 73870, 91054, 42249, 5655, 40015, 68830, 60346, 61917, 30391, 13701, 38791, 76119, 20247, 71963, 69472, 83423, 21539, 84896, 74617, 42144, 11923, 53519, 21485, 11326, 23584, 79689, 86538, 75235, 37019, 21714, 16122, 52952, 34306, 64767, 16833, 14627, 87215, 15274, 4512, 88089, 86940, 5806, 83818, 74927, 86361, 25882, 21263, 86740, 15588, 6702, 96632, 39489, 51676, 24389, 15744, 89055, 8929, 8231, 45330, 41326, 60474, 69703, 34572, 17997, 50427, 10912, 90925, 55099, 27741, 77004, 25838, 23287, 19201, 21686, 1231, 88113, 42056, 3653, 61923, 9137, 38964, 54875, 38055, 55470, 52387, 66497, 10051, 55566, 99266, 16592, 165, 67139, 72672, 62390, 79097, 80990, 48223, 64231, 75509, 69471, 55403, 88427, 89908, 340, 23843, 12350, 90096, 14822, 80063, 9966, 59711, 62254, 95856, 36339, 86103, 2749, 65818, 4787, 71643, 55701, 35759, 33569, 53188, 58890, 90120, 43490, 17763, 51892, 59195, 19722, 53306, 39029, 74007, 13935, 70005, 45083, 50903, 19103, 96572, 56829, 45682, 13269, 15367, 5596, 96891, 32139, 73223, 70271, 69713, 5540, 67255, 56833, 68581, 10526, 3715, 70718, 63043, 80164, 57157, 81633, 96210, 5427, 61976, 6958, 82291, 95978, 51863, 69275, 29491, 90718, 21051, 58121, 61629, 71821, 53076, 19655, 30065, 64170, 49210, 80795, 42983, 82730, 75504, 52199, 66750, 7865, 37613, 28251, 57992, 92179, 81707, 68153, 92557, 42710, 74195, 73023, 45152, 15672, 28716, 95130, 50233, 89356, 3515, 87239, 96681, 28652, 70775, 7764, 55220, 18125, 25182, 75774, 87235, 17316, 30427, 85248, 46500, 2849, 13667, 68085, 61552, 87602, 65673, 15196, 65886, 23212, 92874, 28479, 78848, 25391, 18580, 13835, 79764, 74656, 16308, 71111, 40287, 76680, 82011, 22369, 18977, 39659, 43911, 92760, 25366, 73643, 9224, 84393, 19366, 25141, 66695, 64178, 9118, 4754, 67380, 15406, 83379, 9610, 42055, 90766, 9631, 96436, 40938, 15353, 74276, 36114, 59861, 4575, 89274, 62292, 18124, 22337, 23012, 8946, 23422, 47710, 82548, 2172, 12120, 84978, 96025, 92709, 89236, 33145, 52825, 46562, 42873, 70209, 93448, 42506, 18901, 34133, 58495, 96155, 14023, 87964, 25749, 63980, 70101, 2676, 57906, 24176, 715, 88291, 29766, 77085, 12707, 27587, 142, 31667, 94460, 31186, 96418, 79080, 73669, 21352, 68095, 17086, 36320, 84280, 72500, 29903, 81310, 64834, 2617, 28829, 20182, 25675, 47031, 30788, 65695, 53719, 10501, 42993, 53811, 21997, 32531, 81029, 24875, 25676, 94954, 90104, 13611, 48636, 71180, 88693, 99077, 54693, 76525, 20944, 51733, 44230, 90026, 24832, 93379, 48005, 14486, 53717, 86947, 26272, 8678, 66184, 17526, 50514, 25238, 62992, 52310, 48354, 47341, 81713, 18546, 84887, 30262, 14750, 24453, 26014, 50163, 85550, 2607, 77376, 29488, 25326, 60626, 56773, 23379, 40940, 69458, 92099, 30008, 21208, 65192, 67731, 82323, 95417, 93559, 68322, 5540, 92863, 98153, 12606, 52532, 45231, 11814, 24914, 72947, 52246, 8961, 18433, 91953, 77546, 99858, 63332, 21636, 1266, 98694, 86082, 59421, 11265], thresh: int=71309595944):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=960, beta=188, xs=[0, 1886, 2578, 2639, 2689, 2716, 2807, 3081, 3270, 4517, 4879, 4973, 5251, 5271, 5298, 5299, 9606, 9619, 9638, 9651, 9653, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9664, 9665, 10111, 13462, 13779, 13835, 14395, 14578, 14814, 14940, 15266, 15301, 15439, 15584, 15879, 16662, 16701, 16781, 17935, 18092, 18161, 18284, 20726, 21358, 21562, 21948, 22050, 32057, 32741, 32751, 32758, 32768, 32770, 32833, 33808, 33844, 33923, 33946, 34034, 34036, 34038, 34038, 34039, 34039, 34039, 34039, 34039, 34039, 34039, 34039, 34039, 34039, 34039, 34039, 34039, 34040, 34215, 34645, 35720, 37056, 37501, 37806, 42075, 42430, 42815, 43066, 43344, 43352, 43352, 43352, 43352, 43353, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43355, 43356, 43450, 44412, 44920, 45519, 47269, 47450, 47653, 47933, 48013, 48035, 48081, 48082, 48082, 48082, 48083, 48083, 48083, 48083, 48083, 48083, 48083, 48083, 48083, 48083, 48083, 48083, 48083, 48084, 49202, 51582, 52208, 52619, 52680, 55657, 57845, 58062, 58160, 58276, 58339, 58373, 58463, 59155, 59773, 60014, 60210, 61188, 66887, 67562, 68068, 71509, 74001, 74159, 74320, 74560, 74563, 74563, 74564, 74564, 74565, 80651, 80731, 80747, 82576, 83743, 84752, 85200, 85430, 85436, 85527, 85585, 85627, 85660, 85685, 87524, 87890, 87979, 88057, 89314, 90226, 97691, 99551, 99616, 99888, 99979, 100000], ys=[9562, 7994, 72582, 49547, 65476, 75808, 9899, 29860, 4149, 426, 72415, 62446, 87139, 24893, 98404, 58619, 74777, 72262, 33018, 40829, 79947, 3986, 64284, 79338, 37907, 1028, 5452, 27371, 35526, 2389, 88721, 6417, 69132, 89411, 80024, 74380, 7209, 24661, 76028, 88860, 91685, 25452, 81254, 90952, 87021, 27008, 36904, 61127, 32069, 46623, 92178, 56953, 65448, 63653, 7831, 52042, 85737, 16301, 69185, 17755, 16003, 68445, 7253, 92956, 13978, 93189, 49584, 4465, 37268, 73870, 91054, 42249, 5655, 40015, 68830, 60346, 61917, 30391, 13701, 38791, 76119, 20247, 71963, 69472, 83423, 21539, 84896, 74617, 42144, 11923, 53519, 21485, 11326, 23584, 79689, 86538, 75235, 37019, 21714, 16122, 52952, 34306, 64767, 16833, 14627, 87215, 15274, 4512, 88089, 86940, 5806, 83818, 74927, 86361, 25882, 21263, 86740, 15588, 6702, 96632, 39489, 51676, 24389, 15744, 89055, 8929, 8231, 45330, 41326, 60474, 69703, 34572, 17997, 50427, 10912, 90925, 55099, 27741, 77004, 25838, 23287, 19201, 21686, 1231, 88113, 42056, 3653, 61923, 9137, 38964, 54875, 38055, 55470, 52387, 66497, 10051, 55566, 99266, 16592, 165, 67139, 72672, 62390, 79097, 80990, 48223, 64231, 75509, 69471, 55403, 88427, 89908, 340, 23843, 12350, 90096, 14822, 80063, 9966, 59711, 62254, 95856, 36339, 86103, 2749, 65818, 4787, 71643, 55701, 35759, 33569, 53188, 58890, 90120, 43490, 17763, 51892, 59195, 19722, 53306, 39029, 74007, 13935, 70005, 45083, 50903, 19103, 96572, 56829, 45682, 13269, 15367, 5596, 96891, 32139, 73223, 70271, 69713, 5540, 67255, 56833, 68581, 10526, 3715, 70718, 63043, 80164, 57157, 81633, 96210, 5427, 61976, 6958, 82291, 95978, 51863, 69275, 29491, 90718, 21051, 58121, 61629, 71821, 53076, 19655, 30065, 64170, 49210, 80795, 42983, 82730, 75504, 52199, 66750, 7865, 37613, 28251, 57992, 92179, 81707, 68153, 92557, 42710, 74195, 73023, 45152, 15672, 28716, 95130, 50233, 89356, 3515, 87239, 96681, 28652, 70775, 7764, 55220, 18125, 25182, 75774, 87235, 17316, 30427, 85248, 46500, 2849, 13667, 68085, 61552, 87602, 65673, 15196, 65886, 23212, 92874, 28479, 78848, 25391, 18580, 13835, 79764, 74656, 16308, 71111, 40287, 76680, 82011, 22369, 18977, 39659, 43911, 92760, 25366, 73643, 9224, 84393, 19366, 25141, 66695, 64178, 9118, 4754, 67380, 15406, 83379, 9610, 42055, 90766, 9631, 96436, 40938, 15353, 74276, 36114, 59861, 4575, 89274, 62292, 18124, 22337, 23012, 8946, 23422, 47710, 82548, 2172, 12120, 84978, 96025, 92709, 89236, 33145, 52825, 46562, 42873, 70209, 93448, 42506, 18901, 34133, 58495, 96155, 14023, 87964, 25749, 63980, 70101, 2676, 57906, 24176, 715, 88291, 29766, 77085, 12707, 27587, 142, 31667, 94460, 31186, 96418, 79080, 73669, 21352, 68095, 17086, 36320, 84280, 72500, 29903, 81310, 64834, 2617, 28829, 20182, 25675, 47031, 30788, 65695, 53719, 10501, 42993, 53811, 21997, 32531, 81029, 24875, 25676, 94954, 90104, 13611, 48636, 71180, 88693, 99077, 54693, 76525, 20944, 51733, 44230, 90026, 24832, 93379, 48005, 14486, 53717, 86947, 26272, 8678, 66184, 17526, 50514, 25238, 62992, 52310, 48354, 47341, 81713, 18546, 84887, 30262, 14750, 24453, 26014, 50163, 85550, 2607, 77376, 29488, 25326, 60626, 56773, 23379, 40940, 69458, 92099, 30008, 21208, 65192, 67731, 82323, 95417, 93559, 68322, 5540, 92863, 98153, 12606, 52532, 45231, 11814, 24914, 72947, 52246, 8961, 18433, 91953, 77546, 99858, 63332, 21636, 1266, 98694, 86082, 59421, 11265], thresh=71309595944):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_56",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=32, beta: int=62, xs: List[int]=[0, 3786, 6499, 9837, 9875, 10407, 11098, 11957, 12004, 12076, 12088, 16165, 18126, 19938, 21969, 31980, 33161, 42294, 43668, 44085, 44150, 44416, 44563, 46980, 46980, 47002, 47052, 47075, 47075, 47077, 47079, 47991, 51818, 54229, 55787, 56368, 57539, 67708, 83792, 86145, 86823, 87014, 87055, 87059, 87061, 87061, 87061, 87061, 87061, 87062, 87062, 87062, 87062, 87063, 90599, 91121, 91300, 91306, 91306, 91349, 91359, 91360, 91381, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91387, 96466, 100000], ys: List[int]=[76262, 41232, 64427, 69051, 12388, 98598, 92633, 16384, 81791, 92100, 83795, 4055, 50688, 16071, 21230, 96333, 56580, 56755, 39326, 24126, 62006, 54370, 47412, 64807, 90218, 57892, 89494, 56489, 66534, 98125, 40318, 10709, 88541, 45545, 86247, 60356, 19350, 9692, 73, 7988, 13468, 6979, 8781, 44384, 91563, 85974, 77300, 59970, 63564, 39201, 33513, 27370, 69153, 8072, 67885, 43386, 50171, 5592, 67127, 23885, 66462, 39881, 96594, 5338, 55674, 7485, 10155, 12067, 28961, 21682, 70492, 54514, 17768, 92562, 11469, 12900, 14098, 20003, 37127, 31712, 2517, 16169, 63558, 52982, 31334, 3932, 72422, 86510, 36361, 27668, 48183, 36530, 16578, 15317, 28752, 17955, 29518, 73024, 20021], thresh: int=44926073624):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=32, beta=62, xs=[0, 3786, 6499, 9837, 9875, 10407, 11098, 11957, 12004, 12076, 12088, 16165, 18126, 19938, 21969, 31980, 33161, 42294, 43668, 44085, 44150, 44416, 44563, 46980, 46980, 47002, 47052, 47075, 47075, 47077, 47079, 47991, 51818, 54229, 55787, 56368, 57539, 67708, 83792, 86145, 86823, 87014, 87055, 87059, 87061, 87061, 87061, 87061, 87061, 87062, 87062, 87062, 87062, 87063, 90599, 91121, 91300, 91306, 91306, 91349, 91359, 91360, 91381, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91386, 91387, 96466, 100000], ys=[76262, 41232, 64427, 69051, 12388, 98598, 92633, 16384, 81791, 92100, 83795, 4055, 50688, 16071, 21230, 96333, 56580, 56755, 39326, 24126, 62006, 54370, 47412, 64807, 90218, 57892, 89494, 56489, 66534, 98125, 40318, 10709, 88541, 45545, 86247, 60356, 19350, 9692, 73, 7988, 13468, 6979, 8781, 44384, 91563, 85974, 77300, 59970, 63564, 39201, 33513, 27370, 69153, 8072, 67885, 43386, 50171, 5592, 67127, 23885, 66462, 39881, 96594, 5338, 55674, 7485, 10155, 12067, 28961, 21682, 70492, 54514, 17768, 92562, 11469, 12900, 14098, 20003, 37127, 31712, 2517, 16169, 63558, 52982, 31334, 3932, 72422, 86510, 36361, 27668, 48183, 36530, 16578, 15317, 28752, 17955, 29518, 73024, 20021], thresh=44926073624):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_57",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=550, beta: int=33, xs: List[int]=[0, 254, 294, 486, 830, 2027, 2293, 2732, 2776, 7325, 7515, 7533, 7540, 7540, 7540, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7542, 7906, 8630, 8842, 8913, 9017, 9017, 9021, 9035, 9298, 10499, 10733, 10758, 12003, 12668, 15242, 17291, 21774, 22749, 22800, 22842, 22843, 22847, 22847, 22848, 22848, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22850, 24039, 24146, 25857, 26024, 26056, 26077, 26087, 26647, 27474, 27846, 27977, 28050, 28201, 28365, 28500, 28510, 28514, 28515, 28518, 28518, 28518, 28518, 28518, 28518, 28519, 28934, 30257, 30968, 31000, 31001, 31001, 31001, 31002, 31495, 38002, 41836, 41938, 43839, 44087, 44671, 44768, 44859, 44946, 46917, 46920, 46921, 49813, 50114, 50418, 51319, 51676, 51687, 52046, 54211, 56358, 56398, 56440, 56518, 56518, 56522, 56523, 56525, 56525, 56525, 56527, 56527, 56527, 56529, 56529, 56529, 56530, 56846, 57163, 58526, 59742, 59781, 59895, 60185, 60447, 60510, 60633, 60644, 60678, 60694, 60695, 60697, 60699, 60699, 60699, 60699, 60699, 60699, 60699, 60699, 60699, 60699, 60699, 60699, 60699, 60699, 60699, 60699, 60699, 60699, 60699, 60700, 62867, 62969, 62980, 63010, 64178, 66916, 67128, 67608, 67801, 67815, 67862, 67882, 68410, 71305, 72418, 72840, 72995, 73016, 76385, 78424, 79170, 79873, 79983, 81227, 81342, 81447, 82507, 82895, 82897, 83120, 83133, 83137, 83166, 83513, 84149, 84182, 84182, 84364, 84405, 84412, 84412, 84414, 84418, 84424, 84424, 84428, 84483, 84554, 85825, 86799, 87675, 87768, 88705, 88777, 89268, 89978, 90090, 93273, 93506, 93735, 94427, 94733, 95429, 98021, 99848, 100000], ys: List[int]=[70043, 18084, 88740, 49137, 18160, 86479, 14980, 1604, 81941, 91926, 91190, 83576, 31894, 87494, 38050, 50567, 66330, 65359, 40086, 46448, 77208, 66608, 73890, 7673, 36267, 54830, 49962, 51019, 60318, 62837, 40164, 52697, 24275, 17764, 16074, 31695, 90045, 56979, 16392, 45226, 2605, 65757, 94181, 9495, 60279, 12015, 75226, 61108, 71555, 82198, 48516, 93568, 228, 39916, 53295, 26834, 67191, 22147, 3091, 50672, 46616, 54019, 21841, 63048, 6971, 18034, 71751, 95696, 74321, 53694, 40844, 20162, 8135, 63055, 16310, 52964, 95304, 34270, 50906, 92677, 97271, 25379, 5759, 88537, 4462, 73465, 86552, 30266, 59474, 8230, 44136, 54169, 71310, 57802, 30102, 55869, 54355, 6851, 14321, 10712, 80342, 31696, 13188, 41495, 80853, 80377, 68428, 92454, 18985, 26357, 33834, 22684, 38855, 65868, 6280, 43379, 7052, 5447, 76911, 71442, 28667, 58958, 77182, 37519, 48944, 60794, 73318, 23890, 63898, 86254, 53782, 86956, 45251, 63393, 2277, 29160, 63247, 25830, 8821, 53085, 13977, 9264, 57289, 72394, 88208, 56287, 3057, 46636, 14511, 17401, 92411, 64564, 54687, 8384, 51521, 39098, 10744, 64947, 20546, 54092, 13079, 40607, 46568, 27843, 14601, 87646, 56018, 42996, 73157, 25626, 77559, 71027, 91005, 41768, 83701, 76903, 9672, 26243, 75410, 68321, 32444, 23285, 14504, 76033, 32324, 82065, 77576, 8805, 26318, 32695, 44135, 5708, 16500, 18078, 48690, 40446, 85299, 68393, 97399, 50526, 18031, 55761, 15743, 260, 15297, 20803, 63896, 75100, 24944, 41607, 83382, 37273, 77234, 46509, 14513, 49621, 59846, 64476, 8470, 13479, 15830, 65039, 10011, 35341, 81033, 27122, 12914, 76031, 96722, 26993, 83549, 93363, 86293, 31528, 66747, 79112, 72067, 38264, 33801, 92644, 83566, 93796, 57921, 9901, 78344, 42774, 62602, 45486, 70065, 27287, 3932, 80542, 47380, 85500, 31236, 95443, 91318, 150, 90095, 44824, 86891, 56460, 28828, 96156, 51257, 4075, 67438, 7490, 86025, 38831, 14132, 73832, 15791, 90711, 86887, 76903, 62030, 72375, 6276, 83794, 11219, 46458, 80947, 70832, 59092, 6649, 86816, 74141, 12031, 69809, 41433, 17972, 15327, 70446, 1966, 76248, 31065, 85011, 18931, 61619, 75712, 52005, 6910, 19209, 71887, 62084, 9336, 26789, 14010, 10332, 692, 46259, 74048, 33228, 86379, 39498, 7368, 56315, 13127, 30318, 33540, 48388, 21260, 56908, 65127, 60761, 22452, 48192, 30906, 1118, 36910, 45664, 77327, 74895, 88737, 45939, 93751, 84880, 67989, 49485, 81633, 56697, 58629, 87659, 18289, 9609, 64437, 11358, 95064, 69265, 34005, 60956, 46178, 54422, 90826, 28194, 557, 29598, 72694, 60680, 36050, 19670, 80077, 56754, 62654, 76066, 75309, 41971, 53181, 3001, 88946, 78627, 48751, 43928, 53397, 35190, 61638, 216, 84821, 700, 43792, 91272, 48705, 13882, 2356, 93525, 20117, 73046, 24008, 79195, 55303, 23441, 2063, 24852, 8970, 29692, 78920, 87655, 13212, 86106, 82853, 18253, 39282, 41245, 15269, 2271, 91561, 37498, 35393, 87582, 90331, 93600, 43112, 15190, 1397, 89928, 39568, 62005, 6841, 42767, 92390, 89333, 17869, 93957, 24024, 94346, 14496, 53838, 96824, 84579, 34296, 26085, 31072, 89404, 49414, 15844, 35276, 22443, 75779, 87074, 48403, 65228, 34401, 83501, 24766, 25875, 27216, 73430, 42366, 19492, 45238, 51111, 21705, 46334, 80069, 67540, 58465, 83617, 67153, 82018, 30750, 2051, 88738, 71491, 68688, 73534, 3997, 63920, 59125, 17230, 54369, 12021, 20706, 14539, 98091, 27791, 89070, 17128, 29502, 80270, 53210, 77283, 5246, 58665, 83730, 17698, 13312, 91320, 74116, 42825, 54676, 67630, 54432, 61716, 73402, 58571, 16678, 73843, 76800, 29749, 51185, 86673, 78239, 63581, 12166, 26896, 55222, 28303, 27978, 7677, 96457, 45350, 75554, 76316, 5589, 38174, 56202, 41837, 61754, 83842, 53577, 61537, 92849, 96459, 57966, 68474, 54176, 37002, 33904, 56960, 80674, 75342, 29909, 46496, 84688, 20758, 60442, 11816, 58744, 95769, 25251, 7051, 47273, 49971, 4197, 16704, 42901, 16589, 5756, 85332, 38497, 52674, 3559, 96912, 89870, 47852, 60727, 55110, 43867, 69994, 44525, 47753, 73676, 35885, 76325, 34723, 38453, 71324, 52394, 39535, 93918, 220, 66648, 98556, 29145, 45167, 74912, 25124, 5287, 66291, 81581, 66447, 70309, 70951, 27094, 62541, 59022, 24015, 20940, 50587, 22166, 13559, 11702, 32091, 11063, 34649, 34727, 48379, 20194, 57543, 37411, 22149, 36908, 54442, 52719, 88037, 80270, 22780, 67649, 30369, 77445, 73504, 77898, 44291, 20444, 16439, 41815, 58888, 87129, 94423, 3496, 32064, 30814, 70034, 39411, 82926, 40460, 91217, 90426, 13874, 58098, 5033, 44547, 76015, 49717, 35440, 72786, 98786, 25977, 3787, 64383, 91693, 51300], thresh: int=9298806506):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=550, beta=33, xs=[0, 254, 294, 486, 830, 2027, 2293, 2732, 2776, 7325, 7515, 7533, 7540, 7540, 7540, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7541, 7542, 7906, 8630, 8842, 8913, 9017, 9017, 9021, 9035, 9298, 10499, 10733, 10758, 12003, 12668, 15242, 17291, 21774, 22749, 22800, 22842, 22843, 22847, 22847, 22848, 22848, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22849, 22850, 24039, 24146, 25857, 26024, 26056, 26077, 26087, 26647, 27474, 27846, 27977, 28050, 28201, 28365, 28500, 28510, 28514, 28515, 28518, 28518, 28518, 28518, 28518, 28518, 28519, 28934, 30257, 30968, 31000, 31001, 31001, 31001, 31002, 31495, 38002, 41836, 41938, 43839, 44087, 44671, 44768, 44859, 44946, 46917, 46920, 46921, 49813, 50114, 50418, 51319, 51676, 51687, 52046, 54211, 56358, 56398, 56440, 56518, 56518, 56522, 56523, 56525, 56525, 56525, 56527, 56527, 56527, 56529, 56529, 56529, 56530, 56846, 57163, 58526, 59742, 59781, 59895, 60185, 60447, 60510, 60633, 60644, 60678, 60694, 60695, 60697, 60699, 60699, 60699, 60699, 60699, 60699, 60699, 60699, 60699, 60699, 60699, 60699, 60699, 60699, 60699, 60699, 60699, 60699, 60699, 60700, 62867, 62969, 62980, 63010, 64178, 66916, 67128, 67608, 67801, 67815, 67862, 67882, 68410, 71305, 72418, 72840, 72995, 73016, 76385, 78424, 79170, 79873, 79983, 81227, 81342, 81447, 82507, 82895, 82897, 83120, 83133, 83137, 83166, 83513, 84149, 84182, 84182, 84364, 84405, 84412, 84412, 84414, 84418, 84424, 84424, 84428, 84483, 84554, 85825, 86799, 87675, 87768, 88705, 88777, 89268, 89978, 90090, 93273, 93506, 93735, 94427, 94733, 95429, 98021, 99848, 100000], ys=[70043, 18084, 88740, 49137, 18160, 86479, 14980, 1604, 81941, 91926, 91190, 83576, 31894, 87494, 38050, 50567, 66330, 65359, 40086, 46448, 77208, 66608, 73890, 7673, 36267, 54830, 49962, 51019, 60318, 62837, 40164, 52697, 24275, 17764, 16074, 31695, 90045, 56979, 16392, 45226, 2605, 65757, 94181, 9495, 60279, 12015, 75226, 61108, 71555, 82198, 48516, 93568, 228, 39916, 53295, 26834, 67191, 22147, 3091, 50672, 46616, 54019, 21841, 63048, 6971, 18034, 71751, 95696, 74321, 53694, 40844, 20162, 8135, 63055, 16310, 52964, 95304, 34270, 50906, 92677, 97271, 25379, 5759, 88537, 4462, 73465, 86552, 30266, 59474, 8230, 44136, 54169, 71310, 57802, 30102, 55869, 54355, 6851, 14321, 10712, 80342, 31696, 13188, 41495, 80853, 80377, 68428, 92454, 18985, 26357, 33834, 22684, 38855, 65868, 6280, 43379, 7052, 5447, 76911, 71442, 28667, 58958, 77182, 37519, 48944, 60794, 73318, 23890, 63898, 86254, 53782, 86956, 45251, 63393, 2277, 29160, 63247, 25830, 8821, 53085, 13977, 9264, 57289, 72394, 88208, 56287, 3057, 46636, 14511, 17401, 92411, 64564, 54687, 8384, 51521, 39098, 10744, 64947, 20546, 54092, 13079, 40607, 46568, 27843, 14601, 87646, 56018, 42996, 73157, 25626, 77559, 71027, 91005, 41768, 83701, 76903, 9672, 26243, 75410, 68321, 32444, 23285, 14504, 76033, 32324, 82065, 77576, 8805, 26318, 32695, 44135, 5708, 16500, 18078, 48690, 40446, 85299, 68393, 97399, 50526, 18031, 55761, 15743, 260, 15297, 20803, 63896, 75100, 24944, 41607, 83382, 37273, 77234, 46509, 14513, 49621, 59846, 64476, 8470, 13479, 15830, 65039, 10011, 35341, 81033, 27122, 12914, 76031, 96722, 26993, 83549, 93363, 86293, 31528, 66747, 79112, 72067, 38264, 33801, 92644, 83566, 93796, 57921, 9901, 78344, 42774, 62602, 45486, 70065, 27287, 3932, 80542, 47380, 85500, 31236, 95443, 91318, 150, 90095, 44824, 86891, 56460, 28828, 96156, 51257, 4075, 67438, 7490, 86025, 38831, 14132, 73832, 15791, 90711, 86887, 76903, 62030, 72375, 6276, 83794, 11219, 46458, 80947, 70832, 59092, 6649, 86816, 74141, 12031, 69809, 41433, 17972, 15327, 70446, 1966, 76248, 31065, 85011, 18931, 61619, 75712, 52005, 6910, 19209, 71887, 62084, 9336, 26789, 14010, 10332, 692, 46259, 74048, 33228, 86379, 39498, 7368, 56315, 13127, 30318, 33540, 48388, 21260, 56908, 65127, 60761, 22452, 48192, 30906, 1118, 36910, 45664, 77327, 74895, 88737, 45939, 93751, 84880, 67989, 49485, 81633, 56697, 58629, 87659, 18289, 9609, 64437, 11358, 95064, 69265, 34005, 60956, 46178, 54422, 90826, 28194, 557, 29598, 72694, 60680, 36050, 19670, 80077, 56754, 62654, 76066, 75309, 41971, 53181, 3001, 88946, 78627, 48751, 43928, 53397, 35190, 61638, 216, 84821, 700, 43792, 91272, 48705, 13882, 2356, 93525, 20117, 73046, 24008, 79195, 55303, 23441, 2063, 24852, 8970, 29692, 78920, 87655, 13212, 86106, 82853, 18253, 39282, 41245, 15269, 2271, 91561, 37498, 35393, 87582, 90331, 93600, 43112, 15190, 1397, 89928, 39568, 62005, 6841, 42767, 92390, 89333, 17869, 93957, 24024, 94346, 14496, 53838, 96824, 84579, 34296, 26085, 31072, 89404, 49414, 15844, 35276, 22443, 75779, 87074, 48403, 65228, 34401, 83501, 24766, 25875, 27216, 73430, 42366, 19492, 45238, 51111, 21705, 46334, 80069, 67540, 58465, 83617, 67153, 82018, 30750, 2051, 88738, 71491, 68688, 73534, 3997, 63920, 59125, 17230, 54369, 12021, 20706, 14539, 98091, 27791, 89070, 17128, 29502, 80270, 53210, 77283, 5246, 58665, 83730, 17698, 13312, 91320, 74116, 42825, 54676, 67630, 54432, 61716, 73402, 58571, 16678, 73843, 76800, 29749, 51185, 86673, 78239, 63581, 12166, 26896, 55222, 28303, 27978, 7677, 96457, 45350, 75554, 76316, 5589, 38174, 56202, 41837, 61754, 83842, 53577, 61537, 92849, 96459, 57966, 68474, 54176, 37002, 33904, 56960, 80674, 75342, 29909, 46496, 84688, 20758, 60442, 11816, 58744, 95769, 25251, 7051, 47273, 49971, 4197, 16704, 42901, 16589, 5756, 85332, 38497, 52674, 3559, 96912, 89870, 47852, 60727, 55110, 43867, 69994, 44525, 47753, 73676, 35885, 76325, 34723, 38453, 71324, 52394, 39535, 93918, 220, 66648, 98556, 29145, 45167, 74912, 25124, 5287, 66291, 81581, 66447, 70309, 70951, 27094, 62541, 59022, 24015, 20940, 50587, 22166, 13559, 11702, 32091, 11063, 34649, 34727, 48379, 20194, 57543, 37411, 22149, 36908, 54442, 52719, 88037, 80270, 22780, 67649, 30369, 77445, 73504, 77898, 44291, 20444, 16439, 41815, 58888, 87129, 94423, 3496, 32064, 30814, 70034, 39411, 82926, 40460, 91217, 90426, 13874, 58098, 5033, 44547, 76015, 49717, 35440, 72786, 98786, 25977, 3787, 64383, 91693, 51300], thresh=9298806506):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_58",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=1, beta: int=9, xs: List[int]=[0, 85201, 100000], ys: List[int]=[46084, 24656, 8670], thresh: int=67304207808):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=1, beta=9, xs=[0, 85201, 100000], ys=[46084, 24656, 8670], thresh=67304207808):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_59",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=8, beta: int=13, xs: List[int]=[0, 8629, 20032, 20997, 21669, 22559, 27038, 27263, 27684, 43028, 45164, 53937, 61326, 62477, 64572, 70293, 81954, 91759, 100000], ys: List[int]=[39546, 75642, 63241, 35629, 58642, 12434, 60705, 56641, 78165, 84365, 21206, 83304, 61961, 36272, 88136, 22937, 13383, 86318, 86296], thresh: int=12187559762):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=8, beta=13, xs=[0, 8629, 20032, 20997, 21669, 22559, 27038, 27263, 27684, 43028, 45164, 53937, 61326, 62477, 64572, 70293, 81954, 91759, 100000], ys=[39546, 75642, 63241, 35629, 58642, 12434, 60705, 56641, 78165, 84365, 21206, 83304, 61961, 36272, 88136, 22937, 13383, 86318, 86296], thresh=12187559762):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_60",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=1, beta: int=7, xs: List[int]=[0, 4671, 17834, 87567, 92297, 100000], ys: List[int]=[80269, 17892, 53468, 10727, 77045, 43576], thresh: int=35976699479):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=1, beta=7, xs=[0, 4671, 17834, 87567, 92297, 100000], ys=[80269, 17892, 53468, 10727, 77045, 43576], thresh=35976699479):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_61",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=11, beta: int=26, xs: List[int]=[0, 4223, 10090, 67964, 80382, 81300, 83643, 84333, 96262, 97489, 100000], ys: List[int]=[35967, 94597, 12043, 15958, 72364, 45845, 27219, 4931, 53372, 42799, 81824], thresh: int=96539080623):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=11, beta=26, xs=[0, 4223, 10090, 67964, 80382, 81300, 83643, 84333, 96262, 97489, 100000], ys=[35967, 94597, 12043, 15958, 72364, 45845, 27219, 4931, 53372, 42799, 81824], thresh=96539080623):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_62",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=90, beta: int=27, xs: List[int]=[0, 928, 975, 992, 1058, 1071, 1071, 1072, 1381, 4013, 4652, 5998, 6388, 6507, 6573, 6574, 6578, 6591, 6615, 15539, 15607, 18457, 20687, 22211, 32500, 33621, 33653, 33668, 33668, 33670, 37383, 38675, 40028, 42611, 49275, 50578, 52619, 54560, 54560, 54859, 57321, 57903, 58207, 58809, 59718, 65304, 65731, 65827, 67057, 67071, 67079, 67086, 67086, 67086, 67086, 67087, 73855, 75859, 83890, 89549, 94827, 95760, 96241, 97560, 98912, 99014, 100000], ys: List[int]=[60602, 34521, 48965, 4311, 67936, 59124, 26541, 16655, 58723, 76057, 81713, 67389, 2140, 57650, 4736, 95045, 44622, 11403, 3512, 73658, 93205, 59627, 49377, 18150, 91843, 71309, 20696, 99883, 74219, 56313, 48324, 21270, 46100, 21886, 83014, 55194, 37831, 42080, 88232, 48098, 83836, 22135, 16168, 22265, 17355, 30112, 36448, 2502, 25976, 79985, 76411, 63868, 65971, 21466, 79225, 67641, 75910, 23482, 3209, 20388, 70606, 82626, 25102, 2317, 64183, 95693, 70819], thresh: int=14000908482):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=90, beta=27, xs=[0, 928, 975, 992, 1058, 1071, 1071, 1072, 1381, 4013, 4652, 5998, 6388, 6507, 6573, 6574, 6578, 6591, 6615, 15539, 15607, 18457, 20687, 22211, 32500, 33621, 33653, 33668, 33668, 33670, 37383, 38675, 40028, 42611, 49275, 50578, 52619, 54560, 54560, 54859, 57321, 57903, 58207, 58809, 59718, 65304, 65731, 65827, 67057, 67071, 67079, 67086, 67086, 67086, 67086, 67087, 73855, 75859, 83890, 89549, 94827, 95760, 96241, 97560, 98912, 99014, 100000], ys=[60602, 34521, 48965, 4311, 67936, 59124, 26541, 16655, 58723, 76057, 81713, 67389, 2140, 57650, 4736, 95045, 44622, 11403, 3512, 73658, 93205, 59627, 49377, 18150, 91843, 71309, 20696, 99883, 74219, 56313, 48324, 21270, 46100, 21886, 83014, 55194, 37831, 42080, 88232, 48098, 83836, 22135, 16168, 22265, 17355, 30112, 36448, 2502, 25976, 79985, 76411, 63868, 65971, 21466, 79225, 67641, 75910, 23482, 3209, 20388, 70606, 82626, 25102, 2317, 64183, 95693, 70819], thresh=14000908482):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_63",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=2, beta: int=8, xs: List[int]=[0, 5672, 9489, 9704, 12080, 15624, 27314, 31776, 33255, 34404, 46415, 49585, 56490, 63667, 65298, 67096, 87653, 90471, 100000], ys: List[int]=[27506, 71047, 7675, 44137, 93684, 61474, 20699, 45677, 89635, 18930, 41844, 62050, 18733, 76056, 60560, 85027, 33895, 69857, 90616], thresh: int=8048108596):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=2, beta=8, xs=[0, 5672, 9489, 9704, 12080, 15624, 27314, 31776, 33255, 34404, 46415, 49585, 56490, 63667, 65298, 67096, 87653, 90471, 100000], ys=[27506, 71047, 7675, 44137, 93684, 61474, 20699, 45677, 89635, 18930, 41844, 62050, 18733, 76056, 60560, 85027, 33895, 69857, 90616], thresh=8048108596):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_64",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=43, beta: int=11, xs: List[int]=[0, 1574, 2627, 2712, 2822, 2878, 2901, 2938, 3779, 3818, 3852, 5067, 5289, 7395, 8234, 8942, 9605, 9673, 10414, 11496, 11584, 11992, 14156, 14776, 15768, 17431, 17546, 17912, 18095, 24900, 29049, 30023, 30050, 30058, 30073, 31490, 33805, 37345, 38176, 39273, 39343, 39376, 39400, 39447, 39448, 39448, 39448, 39451, 40171, 40586, 40945, 42695, 43618, 43621, 43942, 43950, 46668, 47834, 47883, 48016, 48091, 48166, 48219, 48239, 48270, 49171, 49172, 50363, 50730, 51020, 51089, 51320, 53986, 59877, 59898, 66022, 69513, 70982, 74047, 76240, 77173, 77478, 78156, 79337, 79794, 80143, 80751, 82349, 83376, 90480, 91936, 94080, 94743, 94783, 95763, 96216, 97141, 97548, 100000], ys: List[int]=[92448, 98754, 31849, 44052, 4973, 1348, 4257, 27606, 37987, 13006, 64417, 33706, 28277, 90948, 66092, 14031, 93301, 66327, 13051, 7308, 38863, 4574, 39737, 31266, 91190, 36799, 92007, 20877, 8886, 71545, 49356, 77799, 10246, 16164, 96676, 97195, 1089, 94418, 19306, 32107, 78877, 80051, 15350, 33192, 45413, 7704, 92609, 35825, 2388, 93915, 12465, 38887, 78967, 79058, 35708, 96404, 50364, 60217, 65285, 68491, 45436, 86547, 81198, 5431, 69539, 46435, 23808, 53789, 56550, 98427, 84802, 88371, 17048, 24030, 57578, 54063, 26963, 84160, 51313, 98568, 58731, 87100, 4597, 50202, 90687, 98555, 74728, 84812, 66923, 96218, 37994, 38426, 271, 18185, 8853, 76594, 35122, 56809, 2782], thresh: int=3509351232):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=43, beta=11, xs=[0, 1574, 2627, 2712, 2822, 2878, 2901, 2938, 3779, 3818, 3852, 5067, 5289, 7395, 8234, 8942, 9605, 9673, 10414, 11496, 11584, 11992, 14156, 14776, 15768, 17431, 17546, 17912, 18095, 24900, 29049, 30023, 30050, 30058, 30073, 31490, 33805, 37345, 38176, 39273, 39343, 39376, 39400, 39447, 39448, 39448, 39448, 39451, 40171, 40586, 40945, 42695, 43618, 43621, 43942, 43950, 46668, 47834, 47883, 48016, 48091, 48166, 48219, 48239, 48270, 49171, 49172, 50363, 50730, 51020, 51089, 51320, 53986, 59877, 59898, 66022, 69513, 70982, 74047, 76240, 77173, 77478, 78156, 79337, 79794, 80143, 80751, 82349, 83376, 90480, 91936, 94080, 94743, 94783, 95763, 96216, 97141, 97548, 100000], ys=[92448, 98754, 31849, 44052, 4973, 1348, 4257, 27606, 37987, 13006, 64417, 33706, 28277, 90948, 66092, 14031, 93301, 66327, 13051, 7308, 38863, 4574, 39737, 31266, 91190, 36799, 92007, 20877, 8886, 71545, 49356, 77799, 10246, 16164, 96676, 97195, 1089, 94418, 19306, 32107, 78877, 80051, 15350, 33192, 45413, 7704, 92609, 35825, 2388, 93915, 12465, 38887, 78967, 79058, 35708, 96404, 50364, 60217, 65285, 68491, 45436, 86547, 81198, 5431, 69539, 46435, 23808, 53789, 56550, 98427, 84802, 88371, 17048, 24030, 57578, 54063, 26963, 84160, 51313, 98568, 58731, 87100, 4597, 50202, 90687, 98555, 74728, 84812, 66923, 96218, 37994, 38426, 271, 18185, 8853, 76594, 35122, 56809, 2782], thresh=3509351232):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_65",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=729, beta: int=685, xs: List[int]=[0, 7, 13, 15, 20, 36, 40, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 61, 81, 120, 161, 162, 167, 187, 855, 855, 877, 1117, 1226, 1263, 1367, 1469, 1482, 1559, 1573, 1679, 1692, 1718, 1755, 1824, 1898, 1942, 1949, 1952, 2204, 2353, 2355, 2498, 2529, 2652, 2838, 2864, 2871, 2877, 2887, 2887, 2898, 2900, 2903, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2905, 2946, 2971, 2978, 2983, 2983, 2983, 2983, 2983, 2984, 2984, 2984, 2984, 2984, 2984, 2984, 2984, 2984, 2984, 2984, 2984, 2984, 2984, 2984, 2984, 2984, 2984, 2985, 2985, 3041, 3045, 3049, 3050, 3051, 3051, 3051, 3055, 3094, 3158, 3216, 3596, 3766, 4002, 4246, 4253, 4287, 4301, 4304, 4417, 4435, 4438, 4442, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4447, 4527, 4550, 4599, 4623, 4651, 4709, 5224, 5589, 5618, 5877, 6170, 6397, 6504, 6655, 6779, 6819, 6901, 7176, 7555, 7794, 7939, 7944, 8050, 8197, 8243, 8335, 8530, 8554, 8632, 8724, 9045, 9274, 9315, 9484, 9523, 9575, 9832, 9900, 10102, 10206, 10251, 10330, 10436, 10707, 10790, 10849, 10941, 11030, 11316, 11356, 12063, 12075, 12263, 12403, 12609, 12633, 12776, 12856, 13430, 13563, 13729, 13801, 13821, 13900, 14129, 14163, 14239, 14285, 14357, 14874, 14982, 15005, 15065, 15532, 15550, 15635, 15970, 16127, 16349, 16471, 16923, 17040, 17190, 17383, 17643, 17731, 18079, 18322, 18527, 18581, 18588, 18700, 19049, 19068, 19198, 19283, 19368, 19548, 19640, 20304, 20311, 20373, 20408, 20443, 20444, 20672, 21124, 21307, 21759, 21965, 21988, 22570, 22636, 23014, 23348, 23603, 23740, 24846, 25496, 25503, 25596, 25679, 25691, 26009, 26152, 26255, 26511, 26656, 26719, 27167, 27270, 27433, 27665, 27824, 28084, 28231, 28238, 28292, 28440, 28611, 28678, 28978, 28983, 29062, 29459, 29463, 29564, 29715, 29791, 30046, 30213, 30231, 30289, 30898, 31142, 31258, 31741, 31797, 31848, 31902, 31976, 32195, 32722, 32910, 33046, 33696, 33835, 34393, 34410, 34496, 34916, 35605, 35680, 35781, 35848, 36078, 36127, 36871, 37050, 37692, 38036, 38251, 38279, 38324, 38350, 38609, 38702, 38872, 38927, 39108, 39534, 39799, 39801, 40136, 40343, 40353, 40515, 40616, 40749, 40753, 41050, 41076, 41113, 41464, 41650, 41779, 41944, 42300, 42313, 42941, 43083, 43382, 43442, 43447, 43493, 43625, 43722, 44012, 44448, 44581, 44707, 44978, 45130, 45283, 45451, 45452, 45495, 45726, 45951, 46396, 46687, 46708, 46787, 47491, 47579, 47609, 47943, 48707, 48749, 48756, 48823, 48840, 48917, 48931, 49110, 49153, 49198, 49375, 49497, 49659, 49852, 49926, 50133, 50338, 50501, 50653, 50759, 50770, 51088, 51162, 51501, 51633, 52027, 52111, 52115, 52251, 52431, 52579, 52583, 53151, 53185, 53220, 53369, 53509, 53523, 53571, 53646, 53911, 53945, 54079, 54114, 54162, 54345, 54638, 54722, 54875, 55030, 55078, 55513, 55550, 55558, 55848, 56205, 56218, 56295, 56736, 56738, 56781, 57031, 57148, 57349, 57352, 57739, 57974, 58084, 58397, 58409, 58533, 58652, 58999, 59133, 59142, 59404, 59856, 59895, 60017, 60095, 60182, 60589, 60758, 61058, 61164, 61408, 61805, 61843, 62134, 62205, 62243, 62554, 62662, 62691, 62747, 62754, 63272, 63325, 63333, 63336, 63361, 63389, 63544, 63623, 63628, 63672, 64049, 64441, 64520, 64551, 64640, 64759, 64933, 65052, 65260, 65420, 65458, 66030, 66324, 66418, 66465, 66938, 67079, 67215, 67571, 67660, 67695, 67813, 67842, 67872, 68317, 68338, 68799, 68812, 68887, 69048, 69094, 69181, 69502, 69693, 69792, 69823, 69964, 70075, 70137, 70249, 70313, 70492, 70500, 70650, 70872, 70901, 71754, 71827, 72371, 72407, 72543, 72655, 72671, 72777, 72848, 72986, 72988, 73049, 73054, 73144, 73148, 73363, 73456, 74038, 74190, 74335, 74611, 74657, 74807, 74823, 74943, 75147, 75183, 75892, 75970, 76082, 76394, 76543, 76859, 77140, 77575, 77579, 78604, 78655, 79372, 80050, 80128, 80276, 80288, 80367, 80456, 80686, 81154, 81206, 81346, 81752, 82051, 82102, 82173, 82193, 82655, 82831, 83095, 83195, 83237, 83535, 83636, 83788, 83883, 83901, 84008, 84011, 84024, 84103, 84169, 84262, 84457, 84917, 84996, 85177, 85574, 85617, 85781, 85830, 85877, 85885, 85899, 86019, 86030, 86098, 86132, 86622, 86659, 86676, 86775, 86881, 87076, 87133, 87187, 87256, 87292, 87297, 87737, 87750, 87893, 87938, 87947, 87962, 88164, 88304, 88368, 88471, 88589, 88614, 88843, 89005, 89096, 89485, 89522, 89642, 89873, 89876, 89993, 90445, 90666, 90701, 91307, 91338, 91850, 91893, 91970, 92305, 92333, 92700, 93364, 93681, 93800, 93967, 95317, 95454, 95603, 95733, 95772, 96052, 96188, 96803, 97021, 97058, 97074, 97392, 97438, 97665, 97821, 98407, 98535, 98572, 98764, 98940, 99053, 99600, 100000], ys: List[int]=[53446, 93137, 51308, 60648, 11941, 70255, 76501, 28067, 64064, 87838, 66795, 46500, 59819, 82363, 45756, 31817, 79941, 42876, 87114, 96013, 50900, 5059, 58547, 3539, 56275, 49555, 58014, 12473, 37809, 67443, 9318, 43277, 86455, 10180, 6560, 53711, 44770, 12345, 3043, 63458, 72976, 13845, 74997, 64738, 58310, 35469, 21147, 53133, 37154, 18579, 51712, 60392, 23404, 96560, 79180, 61353, 38519, 69518, 99141, 5554, 70316, 5834, 7752, 1482, 44984, 83526, 60200, 9480, 22511, 16920, 25483, 56130, 44205, 21043, 42043, 21818, 2092, 43071, 8658, 75000, 17578, 39218, 72785, 21988, 3433, 45403, 67401, 30621, 59075, 57626, 75044, 52815, 74406, 98196, 60398, 4815, 89512, 45762, 69291, 47871, 7341, 61325, 9548, 2383, 14651, 21668, 69659, 69932, 37220, 91990, 89303, 85714, 15455, 80562, 75469, 78742, 85021, 56770, 13410, 95970, 40618, 77364, 79393, 65080, 86720, 97625, 86066, 22362, 7739, 76300, 27656, 67071, 25185, 35934, 58904, 92595, 87088, 61256, 61058, 78855, 99818, 22, 5229, 85630, 3257, 13646, 67032, 82865, 96385, 26779, 76214, 51984, 99780, 7992, 83120, 90928, 66159, 9302, 54209, 94006, 5265, 33345, 9286, 27094, 28599, 60328, 50180, 36849, 57827, 32188, 57284, 4683, 59070, 34364, 2895, 97686, 48094, 214, 35570, 57830, 63340, 49903, 6095, 42391, 39804, 49753, 92148, 795, 15090, 16180, 97765, 3371, 71787, 13000, 98659, 3138, 31309, 41187, 15362, 27011, 10501, 276, 93205, 3548, 56446, 46451, 20073, 53064, 22236, 58459, 80744, 95937, 61491, 34344, 22207, 54797, 32415, 13987, 44241, 20682, 96397, 79326, 60956, 26456, 67678, 65620, 63355, 94092, 13480, 45003, 78223, 36527, 46163, 94423, 94687, 97236, 20817, 47006, 26289, 20767, 34363, 26445, 97013, 15711, 99379, 5722, 45308, 72364, 1935, 24029, 42353, 4153, 88442, 64257, 80258, 58861, 95562, 49651, 92327, 97499, 66528, 85187, 47249, 58986, 30222, 62722, 82666, 14572, 96932, 2031, 23187, 80335, 73371, 63451, 5014, 95785, 35924, 63444, 52191, 82582, 14735, 48455, 27005, 56899, 46388, 64322, 11165, 93231, 33240, 79319, 29693, 47432, 96272, 73569, 24744, 77224, 64320, 28887, 81762, 76634, 15754, 41643, 97067, 4242, 43944, 93347, 71448, 996, 71132, 23897, 81475, 67256, 93256, 71819, 64591, 55394, 35, 12140, 57710, 66625, 22176, 79872, 67988, 28394, 89782, 37175, 73801, 77143, 7761, 70143, 38581, 73674, 42178, 96665, 40093, 604, 26388, 50763, 304, 2361, 74946, 41582, 16400, 9784, 84834, 58118, 55880, 11219, 40376, 48703, 74037, 43151, 65162, 93269, 79021, 97170, 19457, 42516, 62976, 78246, 55035, 70305, 74896, 46782, 77557, 24940, 70009, 57342, 53417, 17634, 75478, 2699, 73281, 90437, 70664, 5516, 5526, 71003, 8842, 92307, 6272, 28862, 10228, 45269, 81451, 64177, 9573, 30064, 25806, 71705, 82350, 30208, 68617, 26575, 68182, 39653, 64862, 88975, 65849, 97636, 74370, 24408, 844, 24564, 71501, 17069, 69563, 47242, 1690, 35211, 98050, 48046, 26813, 33895, 98410, 13768, 20479, 60197, 95932, 61724, 55232, 91786, 93560, 77941, 82569, 25319, 92686, 22278, 19487, 34689, 26260, 92987, 13861, 58034, 82285, 43366, 28988, 73817, 36088, 8252, 81010, 31570, 77788, 71955, 90863, 55120, 58193, 77192, 97109, 70247, 31825, 76568, 51699, 72300, 61338, 49402, 67455, 85162, 35038, 61706, 54623, 4598, 67512, 95828, 78458, 90969, 68197, 80451, 549, 76148, 72297, 46671, 9282, 8569, 37330, 86130, 25468, 67013, 87192, 50150, 80581, 1014, 39413, 14661, 97305, 73604, 80727, 99475, 41736, 77101, 7980, 73088, 89536, 32750, 26014, 54270, 40864, 90893, 16501, 83345, 36351, 16873, 11512, 35, 88324, 23076, 95067, 48510, 76849, 67899, 95886, 95280, 72369, 36618, 27209, 52512, 58042, 65959, 11807, 6045, 97169, 85759, 43849, 34946, 78246, 88861, 45643, 26106, 45412, 88950, 70085, 74754, 70771, 76803, 34945, 12812, 10197, 53348, 16516, 49901, 15358, 32760, 18740, 9206, 1433, 56907, 31659, 42736, 3695, 35825, 96900, 23918, 27016, 87566, 88872, 12181, 10615, 18161, 14533, 30195, 47108, 50443, 99236, 33094, 46054, 12402, 89263, 49644, 6429, 92531, 5919, 5054, 82039, 31314, 4769, 40188, 66577, 47207, 17236, 8197, 51127, 58286, 59633, 57370, 36039, 79997, 73937, 82820, 98376, 5964, 34138, 75047, 96545, 41961, 52751, 53067, 65951, 28722, 35442, 82757, 68822, 29406, 26506, 22314, 11922, 9774, 46499, 46723, 37442, 26074, 2182, 74225, 81888, 90698, 77412, 91533, 34119, 37854, 58173, 25029, 59645, 52834, 27366, 63089, 64795, 53158, 33373, 33857, 94269, 42198, 14715, 17768, 45134, 65657, 95406, 55205, 74975, 19062, 58378, 28221, 73174, 84801, 19580, 69029, 59614, 86679, 18247, 60302, 26872, 4313, 78847, 18159, 24782, 35193, 51592, 98802, 69206, 73545, 85174, 58237, 16810, 88213, 8657, 6510, 87139, 56008, 87692, 63648, 31506, 64188, 95589, 62858, 82142, 2177, 6474, 93582, 7172, 82032, 86039, 63270, 97006, 1468, 59759, 82816, 20694, 40893, 45912, 64693, 36275, 41786, 87258, 86506, 53401, 1158, 8049, 49817, 44796, 62017, 90262, 35643, 77932, 42943, 93787, 20886, 32314, 17101, 63035, 86307, 41729, 28078, 71269, 59294, 93961, 24825, 64786, 22399, 55612, 25011, 47803, 25578, 16921, 73777, 33071, 11654, 23256, 11854, 52144, 65877, 68684, 21420, 3799, 51088, 22759, 2632, 47065, 51646, 71495, 85816, 15979, 7750, 12645, 52872, 54212, 85653, 63647, 78622, 6930, 59030, 38775, 29806, 40885, 50655, 52413, 3586, 67527, 77926, 35281, 12238, 11697, 55082, 23233, 13214, 35758, 28923, 80634, 64584, 35318, 51619, 81477, 46832, 62365, 86522, 48885, 23318, 44359, 25374, 68628, 76309, 2638, 94826, 19937, 24568, 59079, 3949, 49561, 18267, 58002, 36402, 29760, 17237, 71359, 25871, 66388, 79040, 9344, 40838, 20873, 26945, 18715, 28155, 41689, 47930, 26136, 44332, 74291, 55201, 38085, 68373, 36295, 79658, 1907, 76519, 83349, 7109, 54365, 53870, 88041, 14944, 54032, 55010, 6457, 14719, 1361, 97383, 46143, 32353, 31578, 86932, 38907, 81471, 28942, 25656, 18410, 12740, 98442, 6460, 96134, 66437, 36089, 65686, 94285, 28681, 65712, 44558, 78548, 62809, 54728, 2837, 57409, 12384, 73229, 52532, 13215, 1313, 50346, 93003, 68404, 53382, 15668, 43523, 21974, 14139, 81953, 58430, 26675, 23800, 59405, 13393, 16895, 7612, 26993, 43708, 94147, 71385, 11765, 57286, 84480, 7312, 14771, 88237, 82647, 55599, 38600, 18923, 36383, 65574, 94462, 39903, 2241, 30596, 53893, 56535, 76995, 68889, 3942, 1626, 62849, 30515, 716, 11676, 18757, 74967, 48425, 43100, 76697, 88447, 3359, 24429, 34487, 41740, 67660, 87290, 48772, 32086, 84680, 45701, 65563, 19465, 86344, 59566, 24647, 67079, 52858, 76623, 30294, 19372, 96637, 33967, 33466, 39123, 31824, 21145, 24520, 31713, 795, 1544, 78211, 21146, 79520, 79765, 50730, 46813, 2337, 27052, 85301, 54467, 90011, 82885, 97703, 14263, 12623, 74774, 66550, 14091, 18216, 2430, 94170, 46619, 78586, 67398, 40902, 58028, 89971, 32393, 3394, 64939, 17669, 56447, 46322, 49261, 61353, 94903, 54307, 17737, 3558, 97287, 19232, 65467, 38301, 71744, 22147, 53476, 86657, 82299, 52579, 23859, 19555, 60862, 90628, 5910, 85711, 57536, 71515, 72969, 94516, 23959, 91793, 29345, 6513], thresh: int=37221559530):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=729, beta=685, xs=[0, 7, 13, 15, 20, 36, 40, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 61, 81, 120, 161, 162, 167, 187, 855, 855, 877, 1117, 1226, 1263, 1367, 1469, 1482, 1559, 1573, 1679, 1692, 1718, 1755, 1824, 1898, 1942, 1949, 1952, 2204, 2353, 2355, 2498, 2529, 2652, 2838, 2864, 2871, 2877, 2887, 2887, 2898, 2900, 2903, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2904, 2905, 2946, 2971, 2978, 2983, 2983, 2983, 2983, 2983, 2984, 2984, 2984, 2984, 2984, 2984, 2984, 2984, 2984, 2984, 2984, 2984, 2984, 2984, 2984, 2984, 2984, 2984, 2985, 2985, 3041, 3045, 3049, 3050, 3051, 3051, 3051, 3055, 3094, 3158, 3216, 3596, 3766, 4002, 4246, 4253, 4287, 4301, 4304, 4417, 4435, 4438, 4442, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4447, 4527, 4550, 4599, 4623, 4651, 4709, 5224, 5589, 5618, 5877, 6170, 6397, 6504, 6655, 6779, 6819, 6901, 7176, 7555, 7794, 7939, 7944, 8050, 8197, 8243, 8335, 8530, 8554, 8632, 8724, 9045, 9274, 9315, 9484, 9523, 9575, 9832, 9900, 10102, 10206, 10251, 10330, 10436, 10707, 10790, 10849, 10941, 11030, 11316, 11356, 12063, 12075, 12263, 12403, 12609, 12633, 12776, 12856, 13430, 13563, 13729, 13801, 13821, 13900, 14129, 14163, 14239, 14285, 14357, 14874, 14982, 15005, 15065, 15532, 15550, 15635, 15970, 16127, 16349, 16471, 16923, 17040, 17190, 17383, 17643, 17731, 18079, 18322, 18527, 18581, 18588, 18700, 19049, 19068, 19198, 19283, 19368, 19548, 19640, 20304, 20311, 20373, 20408, 20443, 20444, 20672, 21124, 21307, 21759, 21965, 21988, 22570, 22636, 23014, 23348, 23603, 23740, 24846, 25496, 25503, 25596, 25679, 25691, 26009, 26152, 26255, 26511, 26656, 26719, 27167, 27270, 27433, 27665, 27824, 28084, 28231, 28238, 28292, 28440, 28611, 28678, 28978, 28983, 29062, 29459, 29463, 29564, 29715, 29791, 30046, 30213, 30231, 30289, 30898, 31142, 31258, 31741, 31797, 31848, 31902, 31976, 32195, 32722, 32910, 33046, 33696, 33835, 34393, 34410, 34496, 34916, 35605, 35680, 35781, 35848, 36078, 36127, 36871, 37050, 37692, 38036, 38251, 38279, 38324, 38350, 38609, 38702, 38872, 38927, 39108, 39534, 39799, 39801, 40136, 40343, 40353, 40515, 40616, 40749, 40753, 41050, 41076, 41113, 41464, 41650, 41779, 41944, 42300, 42313, 42941, 43083, 43382, 43442, 43447, 43493, 43625, 43722, 44012, 44448, 44581, 44707, 44978, 45130, 45283, 45451, 45452, 45495, 45726, 45951, 46396, 46687, 46708, 46787, 47491, 47579, 47609, 47943, 48707, 48749, 48756, 48823, 48840, 48917, 48931, 49110, 49153, 49198, 49375, 49497, 49659, 49852, 49926, 50133, 50338, 50501, 50653, 50759, 50770, 51088, 51162, 51501, 51633, 52027, 52111, 52115, 52251, 52431, 52579, 52583, 53151, 53185, 53220, 53369, 53509, 53523, 53571, 53646, 53911, 53945, 54079, 54114, 54162, 54345, 54638, 54722, 54875, 55030, 55078, 55513, 55550, 55558, 55848, 56205, 56218, 56295, 56736, 56738, 56781, 57031, 57148, 57349, 57352, 57739, 57974, 58084, 58397, 58409, 58533, 58652, 58999, 59133, 59142, 59404, 59856, 59895, 60017, 60095, 60182, 60589, 60758, 61058, 61164, 61408, 61805, 61843, 62134, 62205, 62243, 62554, 62662, 62691, 62747, 62754, 63272, 63325, 63333, 63336, 63361, 63389, 63544, 63623, 63628, 63672, 64049, 64441, 64520, 64551, 64640, 64759, 64933, 65052, 65260, 65420, 65458, 66030, 66324, 66418, 66465, 66938, 67079, 67215, 67571, 67660, 67695, 67813, 67842, 67872, 68317, 68338, 68799, 68812, 68887, 69048, 69094, 69181, 69502, 69693, 69792, 69823, 69964, 70075, 70137, 70249, 70313, 70492, 70500, 70650, 70872, 70901, 71754, 71827, 72371, 72407, 72543, 72655, 72671, 72777, 72848, 72986, 72988, 73049, 73054, 73144, 73148, 73363, 73456, 74038, 74190, 74335, 74611, 74657, 74807, 74823, 74943, 75147, 75183, 75892, 75970, 76082, 76394, 76543, 76859, 77140, 77575, 77579, 78604, 78655, 79372, 80050, 80128, 80276, 80288, 80367, 80456, 80686, 81154, 81206, 81346, 81752, 82051, 82102, 82173, 82193, 82655, 82831, 83095, 83195, 83237, 83535, 83636, 83788, 83883, 83901, 84008, 84011, 84024, 84103, 84169, 84262, 84457, 84917, 84996, 85177, 85574, 85617, 85781, 85830, 85877, 85885, 85899, 86019, 86030, 86098, 86132, 86622, 86659, 86676, 86775, 86881, 87076, 87133, 87187, 87256, 87292, 87297, 87737, 87750, 87893, 87938, 87947, 87962, 88164, 88304, 88368, 88471, 88589, 88614, 88843, 89005, 89096, 89485, 89522, 89642, 89873, 89876, 89993, 90445, 90666, 90701, 91307, 91338, 91850, 91893, 91970, 92305, 92333, 92700, 93364, 93681, 93800, 93967, 95317, 95454, 95603, 95733, 95772, 96052, 96188, 96803, 97021, 97058, 97074, 97392, 97438, 97665, 97821, 98407, 98535, 98572, 98764, 98940, 99053, 99600, 100000], ys=[53446, 93137, 51308, 60648, 11941, 70255, 76501, 28067, 64064, 87838, 66795, 46500, 59819, 82363, 45756, 31817, 79941, 42876, 87114, 96013, 50900, 5059, 58547, 3539, 56275, 49555, 58014, 12473, 37809, 67443, 9318, 43277, 86455, 10180, 6560, 53711, 44770, 12345, 3043, 63458, 72976, 13845, 74997, 64738, 58310, 35469, 21147, 53133, 37154, 18579, 51712, 60392, 23404, 96560, 79180, 61353, 38519, 69518, 99141, 5554, 70316, 5834, 7752, 1482, 44984, 83526, 60200, 9480, 22511, 16920, 25483, 56130, 44205, 21043, 42043, 21818, 2092, 43071, 8658, 75000, 17578, 39218, 72785, 21988, 3433, 45403, 67401, 30621, 59075, 57626, 75044, 52815, 74406, 98196, 60398, 4815, 89512, 45762, 69291, 47871, 7341, 61325, 9548, 2383, 14651, 21668, 69659, 69932, 37220, 91990, 89303, 85714, 15455, 80562, 75469, 78742, 85021, 56770, 13410, 95970, 40618, 77364, 79393, 65080, 86720, 97625, 86066, 22362, 7739, 76300, 27656, 67071, 25185, 35934, 58904, 92595, 87088, 61256, 61058, 78855, 99818, 22, 5229, 85630, 3257, 13646, 67032, 82865, 96385, 26779, 76214, 51984, 99780, 7992, 83120, 90928, 66159, 9302, 54209, 94006, 5265, 33345, 9286, 27094, 28599, 60328, 50180, 36849, 57827, 32188, 57284, 4683, 59070, 34364, 2895, 97686, 48094, 214, 35570, 57830, 63340, 49903, 6095, 42391, 39804, 49753, 92148, 795, 15090, 16180, 97765, 3371, 71787, 13000, 98659, 3138, 31309, 41187, 15362, 27011, 10501, 276, 93205, 3548, 56446, 46451, 20073, 53064, 22236, 58459, 80744, 95937, 61491, 34344, 22207, 54797, 32415, 13987, 44241, 20682, 96397, 79326, 60956, 26456, 67678, 65620, 63355, 94092, 13480, 45003, 78223, 36527, 46163, 94423, 94687, 97236, 20817, 47006, 26289, 20767, 34363, 26445, 97013, 15711, 99379, 5722, 45308, 72364, 1935, 24029, 42353, 4153, 88442, 64257, 80258, 58861, 95562, 49651, 92327, 97499, 66528, 85187, 47249, 58986, 30222, 62722, 82666, 14572, 96932, 2031, 23187, 80335, 73371, 63451, 5014, 95785, 35924, 63444, 52191, 82582, 14735, 48455, 27005, 56899, 46388, 64322, 11165, 93231, 33240, 79319, 29693, 47432, 96272, 73569, 24744, 77224, 64320, 28887, 81762, 76634, 15754, 41643, 97067, 4242, 43944, 93347, 71448, 996, 71132, 23897, 81475, 67256, 93256, 71819, 64591, 55394, 35, 12140, 57710, 66625, 22176, 79872, 67988, 28394, 89782, 37175, 73801, 77143, 7761, 70143, 38581, 73674, 42178, 96665, 40093, 604, 26388, 50763, 304, 2361, 74946, 41582, 16400, 9784, 84834, 58118, 55880, 11219, 40376, 48703, 74037, 43151, 65162, 93269, 79021, 97170, 19457, 42516, 62976, 78246, 55035, 70305, 74896, 46782, 77557, 24940, 70009, 57342, 53417, 17634, 75478, 2699, 73281, 90437, 70664, 5516, 5526, 71003, 8842, 92307, 6272, 28862, 10228, 45269, 81451, 64177, 9573, 30064, 25806, 71705, 82350, 30208, 68617, 26575, 68182, 39653, 64862, 88975, 65849, 97636, 74370, 24408, 844, 24564, 71501, 17069, 69563, 47242, 1690, 35211, 98050, 48046, 26813, 33895, 98410, 13768, 20479, 60197, 95932, 61724, 55232, 91786, 93560, 77941, 82569, 25319, 92686, 22278, 19487, 34689, 26260, 92987, 13861, 58034, 82285, 43366, 28988, 73817, 36088, 8252, 81010, 31570, 77788, 71955, 90863, 55120, 58193, 77192, 97109, 70247, 31825, 76568, 51699, 72300, 61338, 49402, 67455, 85162, 35038, 61706, 54623, 4598, 67512, 95828, 78458, 90969, 68197, 80451, 549, 76148, 72297, 46671, 9282, 8569, 37330, 86130, 25468, 67013, 87192, 50150, 80581, 1014, 39413, 14661, 97305, 73604, 80727, 99475, 41736, 77101, 7980, 73088, 89536, 32750, 26014, 54270, 40864, 90893, 16501, 83345, 36351, 16873, 11512, 35, 88324, 23076, 95067, 48510, 76849, 67899, 95886, 95280, 72369, 36618, 27209, 52512, 58042, 65959, 11807, 6045, 97169, 85759, 43849, 34946, 78246, 88861, 45643, 26106, 45412, 88950, 70085, 74754, 70771, 76803, 34945, 12812, 10197, 53348, 16516, 49901, 15358, 32760, 18740, 9206, 1433, 56907, 31659, 42736, 3695, 35825, 96900, 23918, 27016, 87566, 88872, 12181, 10615, 18161, 14533, 30195, 47108, 50443, 99236, 33094, 46054, 12402, 89263, 49644, 6429, 92531, 5919, 5054, 82039, 31314, 4769, 40188, 66577, 47207, 17236, 8197, 51127, 58286, 59633, 57370, 36039, 79997, 73937, 82820, 98376, 5964, 34138, 75047, 96545, 41961, 52751, 53067, 65951, 28722, 35442, 82757, 68822, 29406, 26506, 22314, 11922, 9774, 46499, 46723, 37442, 26074, 2182, 74225, 81888, 90698, 77412, 91533, 34119, 37854, 58173, 25029, 59645, 52834, 27366, 63089, 64795, 53158, 33373, 33857, 94269, 42198, 14715, 17768, 45134, 65657, 95406, 55205, 74975, 19062, 58378, 28221, 73174, 84801, 19580, 69029, 59614, 86679, 18247, 60302, 26872, 4313, 78847, 18159, 24782, 35193, 51592, 98802, 69206, 73545, 85174, 58237, 16810, 88213, 8657, 6510, 87139, 56008, 87692, 63648, 31506, 64188, 95589, 62858, 82142, 2177, 6474, 93582, 7172, 82032, 86039, 63270, 97006, 1468, 59759, 82816, 20694, 40893, 45912, 64693, 36275, 41786, 87258, 86506, 53401, 1158, 8049, 49817, 44796, 62017, 90262, 35643, 77932, 42943, 93787, 20886, 32314, 17101, 63035, 86307, 41729, 28078, 71269, 59294, 93961, 24825, 64786, 22399, 55612, 25011, 47803, 25578, 16921, 73777, 33071, 11654, 23256, 11854, 52144, 65877, 68684, 21420, 3799, 51088, 22759, 2632, 47065, 51646, 71495, 85816, 15979, 7750, 12645, 52872, 54212, 85653, 63647, 78622, 6930, 59030, 38775, 29806, 40885, 50655, 52413, 3586, 67527, 77926, 35281, 12238, 11697, 55082, 23233, 13214, 35758, 28923, 80634, 64584, 35318, 51619, 81477, 46832, 62365, 86522, 48885, 23318, 44359, 25374, 68628, 76309, 2638, 94826, 19937, 24568, 59079, 3949, 49561, 18267, 58002, 36402, 29760, 17237, 71359, 25871, 66388, 79040, 9344, 40838, 20873, 26945, 18715, 28155, 41689, 47930, 26136, 44332, 74291, 55201, 38085, 68373, 36295, 79658, 1907, 76519, 83349, 7109, 54365, 53870, 88041, 14944, 54032, 55010, 6457, 14719, 1361, 97383, 46143, 32353, 31578, 86932, 38907, 81471, 28942, 25656, 18410, 12740, 98442, 6460, 96134, 66437, 36089, 65686, 94285, 28681, 65712, 44558, 78548, 62809, 54728, 2837, 57409, 12384, 73229, 52532, 13215, 1313, 50346, 93003, 68404, 53382, 15668, 43523, 21974, 14139, 81953, 58430, 26675, 23800, 59405, 13393, 16895, 7612, 26993, 43708, 94147, 71385, 11765, 57286, 84480, 7312, 14771, 88237, 82647, 55599, 38600, 18923, 36383, 65574, 94462, 39903, 2241, 30596, 53893, 56535, 76995, 68889, 3942, 1626, 62849, 30515, 716, 11676, 18757, 74967, 48425, 43100, 76697, 88447, 3359, 24429, 34487, 41740, 67660, 87290, 48772, 32086, 84680, 45701, 65563, 19465, 86344, 59566, 24647, 67079, 52858, 76623, 30294, 19372, 96637, 33967, 33466, 39123, 31824, 21145, 24520, 31713, 795, 1544, 78211, 21146, 79520, 79765, 50730, 46813, 2337, 27052, 85301, 54467, 90011, 82885, 97703, 14263, 12623, 74774, 66550, 14091, 18216, 2430, 94170, 46619, 78586, 67398, 40902, 58028, 89971, 32393, 3394, 64939, 17669, 56447, 46322, 49261, 61353, 94903, 54307, 17737, 3558, 97287, 19232, 65467, 38301, 71744, 22147, 53476, 86657, 82299, 52579, 23859, 19555, 60862, 90628, 5910, 85711, 57536, 71515, 72969, 94516, 23959, 91793, 29345, 6513], thresh=37221559530):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_66",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=2, beta: int=0, xs: List[int]=[0, 46134, 49518, 69590, 83994, 88717, 90830, 100000], ys: List[int]=[14904, 70568, 96764, 65835, 20417, 50404, 12249, 9906], thresh: int=350380):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=2, beta=0, xs=[0, 46134, 49518, 69590, 83994, 88717, 90830, 100000], ys=[14904, 70568, 96764, 65835, 20417, 50404, 12249, 9906], thresh=350380):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_67",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=722, beta: int=28, xs: List[int]=[0, 3, 85, 123, 298, 357, 380, 580, 581, 626, 657, 678, 679, 679, 679, 680, 680, 680, 680, 680, 680, 680, 680, 680, 680, 680, 680, 680, 680, 680, 681, 1180, 1428, 1436, 1494, 1503, 1667, 1668, 1671, 1671, 1672, 1703, 1717, 2406, 2581, 2685, 2740, 2764, 2784, 3408, 3423, 3435, 3459, 3537, 3728, 4127, 4176, 4544, 4688, 4694, 4703, 4704, 4705, 4706, 4756, 4780, 4869, 4883, 4892, 4911, 4917, 4918, 4922, 4930, 4933, 4962, 4985, 4990, 4990, 4995, 5127, 5160, 5175, 5176, 5185, 5185, 5190, 5190, 5192, 5192, 5194, 5617, 6121, 6711, 6825, 6861, 6871, 7110, 7134, 7349, 7350, 7353, 7387, 7434, 7644, 7677, 7689, 7701, 7982, 8263, 8735, 8814, 8830, 8930, 8960, 8962, 9033, 9204, 9277, 9291, 9293, 9362, 9409, 9467, 9554, 9601, 9627, 9767, 9927, 9951, 9962, 10001, 10139, 10141, 10493, 10499, 10521, 10649, 10694, 10762, 10764, 10766, 10809, 10815, 11085, 11830, 11847, 11899, 11899, 11905, 11906, 11908, 11908, 11908, 11909, 12218, 12298, 12347, 12384, 12433, 12445, 12451, 12452, 12455, 12455, 12455, 12455, 12455, 12455, 12456, 12598, 12881, 12886, 12886, 12887, 13069, 13563, 14229, 14490, 14510, 14866, 14927, 14940, 14969, 15073, 15399, 15464, 15650, 15948, 15985, 15991, 15994, 16016, 16773, 16861, 16929, 16933, 16935, 16938, 17158, 17284, 17299, 17335, 17366, 17368, 17369, 17372, 17372, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17374, 17419, 17474, 17484, 17498, 17500, 17500, 17500, 17500, 17501, 17550, 17571, 17658, 17758, 18756, 18777, 19043, 19130, 19187, 19189, 19220, 19228, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19231, 19686, 19802, 19828, 19889, 19918, 19918, 19918, 19918, 19918, 19919, 19976, 20012, 20012, 20012, 20012, 20012, 20012, 20013, 20103, 20109, 20214, 21482, 21490, 21496, 21675, 21734, 21735, 21742, 21742, 21744, 21744, 21744, 21746, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21748, 22253, 22385, 22456, 22502, 22524, 22525, 22525, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22529, 22559, 22705, 22705, 22925, 22925, 22925, 22925, 22925, 22925, 22925, 22925, 22925, 22925, 22925, 22925, 22925, 22925, 22926, 22984, 22984, 22984, 22985, 23123, 23242, 23334, 23384, 23389, 23529, 23553, 23562, 23565, 24128, 24367, 24459, 24604, 24951, 25057, 25240, 25272, 25529, 25702, 26112, 26326, 26341, 26359, 26387, 26411, 26419, 26420, 26420, 26421, 26510, 26792, 26836, 26851, 26854, 26855, 26856, 26856, 26856, 26856, 26856, 26856, 26857, 26857, 26862, 26862, 26870, 27006, 27251, 27252, 27268, 27350, 27361, 27362, 27363, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27367, 28404, 28656, 29081, 29172, 29304, 29609, 29785, 29901, 30144, 30174, 30243, 30320, 30336, 30603, 31163, 31520, 32702, 32952, 33322, 33374, 33837, 33879, 34095, 34295, 34479, 34727, 34928, 35357, 35374, 35544, 35568, 35734, 35823, 35873, 36680, 37008, 37112, 37459, 37755, 38441, 38856, 39188, 39862, 39866, 40145, 40446, 40685, 40727, 40899, 41062, 41712, 41758, 41870, 42398, 42509, 42562, 43473, 44016, 44293, 44461, 45111, 45702, 45849, 46055, 46575, 46636, 46912, 47374, 47405, 47451, 49518, 49881, 50621, 51623, 51657, 54137, 54207, 54383, 54496, 54693, 54880, 54978, 55169, 55179, 55719, 55808, 55863, 55877, 56052, 56194, 56883, 56892, 57245, 57798, 57892, 58450, 58529, 58639, 59290, 59595, 60075, 60221, 60631, 61079, 61379, 61498, 61665, 62432, 62537, 62697, 62791, 63308, 63394, 63483, 63863, 64686, 64737, 64800, 64994, 65025, 65656, 66495, 66513, 66771, 67670, 67903, 68079, 68118, 68627, 69046, 69390, 69920, 70369, 70420, 70630, 70653, 71038, 71665, 71760, 71905, 72007, 72063, 72138, 72448, 72665, 73054, 73101, 73123, 73182, 73211, 73213, 73230, 73592, 74022, 75572, 75772, 75822, 76155, 76171, 76198, 76325, 77038, 77167, 77180, 77214, 77838, 78056, 78307, 78527, 79155, 79213, 79328, 79611, 80348, 80394, 80450, 80558, 80679, 81078, 81084, 81264, 81386, 81779, 82699, 83442, 83495, 84422, 84997, 85029, 85385, 85443, 85487, 85561, 85592, 85864, 86094, 86245, 86353, 86411, 86701, 88086, 88162, 88322, 88375, 88434, 88446, 88833, 88974, 89488, 89559, 89578, 89764, 89894, 90001, 90359, 91052, 91135, 91182, 91840, 92180, 92434, 92761, 93573, 93662, 94243, 94284, 94462, 94562, 94612, 94637, 94778, 94921, 95096, 96223, 96359, 96866, 97779, 97887, 98012, 98365, 98760, 99679, 100000], ys: List[int]=[79351, 44738, 70710, 49146, 96360, 55660, 76631, 86596, 30650, 92071, 95207, 74399, 43193, 93482, 88728, 19525, 43260, 44647, 42408, 20349, 46091, 85655, 67888, 50509, 13509, 27219, 72957, 82225, 77486, 34772, 91175, 75637, 16762, 51999, 66621, 81319, 60580, 56758, 85637, 50395, 36875, 45457, 38197, 48115, 97436, 30729, 80498, 28476, 39867, 68616, 32187, 15337, 18281, 27847, 63147, 43856, 86470, 1495, 11889, 41911, 25794, 14053, 84508, 54286, 62292, 48798, 57099, 6218, 90979, 78502, 29086, 63621, 33968, 49269, 50088, 99280, 27223, 85708, 16266, 55773, 43357, 20431, 46628, 75092, 37279, 45833, 65528, 70401, 75697, 24918, 88238, 34302, 97117, 42328, 40553, 26763, 83256, 12205, 89846, 52617, 497, 83644, 91568, 97878, 53930, 86554, 34924, 71688, 29132, 27548, 29969, 64450, 71300, 77192, 61849, 46419, 94929, 88532, 802, 46427, 86724, 49312, 85788, 19107, 89919, 62483, 34452, 82819, 11104, 96277, 95916, 58308, 68234, 54487, 8851, 47300, 94673, 51559, 7964, 29928, 39723, 283, 64996, 55694, 57554, 29465, 85846, 9470, 1556, 86764, 65556, 66410, 53730, 10575, 33050, 61868, 47313, 26806, 39305, 83724, 65225, 96230, 47460, 50181, 11469, 78151, 60850, 41445, 38400, 81763, 98772, 17736, 31275, 41548, 67787, 19484, 6630, 49060, 5892, 45563, 25380, 581, 60623, 82308, 58442, 56686, 13612, 12856, 11157, 82908, 78328, 78843, 46470, 26850, 93868, 98271, 72221, 64745, 96548, 54328, 38747, 70686, 18664, 25237, 13933, 18876, 41875, 47255, 39637, 61462, 55642, 93965, 21672, 66527, 69657, 54071, 72537, 7412, 2075, 32821, 89762, 99150, 12871, 85939, 78044, 86179, 12059, 2567, 19895, 75633, 3705, 73283, 15112, 69126, 78109, 80208, 64290, 10527, 52663, 98205, 62309, 87201, 60577, 45190, 90168, 84608, 1756, 14148, 76388, 78774, 72555, 22282, 38647, 55728, 29258, 50910, 20849, 90554, 68307, 79972, 42250, 93222, 61230, 89996, 63313, 56527, 55459, 19878, 20031, 28053, 67913, 19082, 91398, 13767, 78256, 18368, 17601, 41491, 16582, 149, 46133, 31724, 52288, 79385, 11012, 71506, 60902, 87160, 91883, 94210, 76480, 94744, 78714, 75070, 74494, 89432, 79761, 56465, 82712, 80804, 8766, 12143, 8466, 25644, 91292, 53549, 61710, 79900, 24316, 82743, 56484, 43466, 76410, 50559, 1630, 40064, 79547, 40414, 71253, 43052, 64984, 43461, 18338, 45322, 23726, 81211, 97477, 4674, 40644, 77483, 15452, 88282, 65059, 913, 16029, 32314, 15264, 29636, 4638, 80386, 56583, 1799, 32786, 82366, 48304, 13537, 19636, 96820, 50051, 47228, 49281, 29070, 7700, 67969, 14317, 18594, 78945, 42840, 82325, 78512, 39720, 23793, 4032, 86438, 47046, 52882, 94635, 80958, 64856, 13721, 39509, 49782, 91504, 44148, 31155, 43720, 15033, 37884, 67050, 88039, 67470, 86517, 39346, 49147, 30603, 3338, 35514, 88533, 67276, 83586, 96650, 76140, 28875, 22466, 33482, 70126, 69785, 90697, 96648, 36299, 75902, 35016, 48524, 37804, 26291, 60148, 96738, 79356, 36039, 84419, 53162, 31878, 69927, 48715, 15172, 38757, 95959, 94859, 59247, 22449, 84858, 21795, 69816, 71560, 39972, 44750, 86158, 7540, 36839, 86665, 82012, 44969, 3318, 31683, 97782, 69987, 29437, 32095, 25098, 16038, 83629, 47292, 23264, 69873, 79299, 48573, 81768, 82579, 66288, 26593, 78023, 15327, 93795, 87302, 87556, 65538, 58982, 72941, 49074, 25063, 8574, 71957, 70332, 7911, 34329, 3446, 96683, 55369, 44687, 39118, 43372, 36763, 93727, 15723, 65625, 14819, 8824, 83160, 31672, 2352, 62801, 18470, 892, 18031, 61143, 55526, 37431, 69113, 94055, 39073, 67051, 47779, 65390, 92339, 6672, 6941, 6275, 5126, 42129, 70680, 49679, 43201, 2817, 45872, 84225, 51520, 97797, 47541, 42585, 66641, 19762, 1510, 29473, 74165, 93540, 79744, 94776, 4739, 84031, 84283, 50170, 92819, 7947, 20752, 99665, 61101, 41562, 83455, 19024, 73616, 13350, 19981, 94283, 72028, 70854, 72994, 35252, 38331, 51691, 84034, 29492, 61287, 1057, 73588, 43052, 16018, 54936, 27597, 72187, 14479, 24739, 54438, 72726, 96028, 56023, 67790, 56001, 51404, 35278, 65087, 9217, 73382, 24306, 1211, 90327, 63511, 68906, 35170, 20592, 90333, 78514, 59680, 32870, 2843, 55774, 59718, 12092, 86593, 72391, 90559, 1678, 6902, 95325, 22731, 82679, 35854, 43608, 94860, 18338, 63836, 52686, 6750, 11616, 16382, 45531, 80549, 29740, 4650, 58706, 86297, 19209, 66974, 66490, 17297, 39209, 68542, 45936, 60946, 79428, 8066, 39319, 90566, 32305, 84974, 23971, 57159, 43093, 58120, 52418, 1307, 65876, 8563, 63713, 69136, 5247, 64587, 39503, 73760, 86964, 72046, 10418, 59326, 57586, 69632, 22415, 14253, 92487, 29059, 48794, 13248, 57819, 89247, 29617, 91385, 84508, 75174, 93149, 15556, 56096, 45491, 39339, 25007, 32571, 75624, 36686, 7141, 50334, 6748, 11475, 74878, 85304, 83819, 51782, 94108, 71788, 86370, 86488, 21087, 10603, 34614, 91412, 23973, 9144, 13988, 62393, 90503, 97136, 23188, 89356, 81801, 74757, 81046, 84335, 16667, 45175, 22496, 87782, 13029, 12403, 83244, 19815, 63640, 13496, 87545, 46786, 7159, 73242, 46767, 83395, 4878, 29161, 24378, 1023, 54799, 62135, 60720, 97575, 52127, 60608, 42577, 99895, 73547, 3699, 62447, 29792, 25172, 64225, 9547, 23816, 68965, 1670, 9793, 20424, 46342, 31205, 30467, 49816, 86546, 69090, 97927, 45107, 52352, 53024, 24872, 91059, 65836, 72010, 89731, 41055, 91277, 88022, 97336, 67848, 16974, 85611, 41963, 46452, 29877, 69520, 51916, 91378, 44239, 38710, 61680, 62391, 90074, 76102, 71171, 3475, 70688, 64212, 48301, 84823, 91858, 74673, 90649, 33544, 38897, 60141, 11097, 49889, 56539, 81684, 35396, 2086, 49841, 25365, 50115, 97723, 6360, 5115, 58770, 86524, 7929, 42876, 13938, 46468, 63994, 34833, 87996, 7355, 38811, 27294, 85778, 38216, 91245, 28158, 29995, 20256, 51951, 21561, 4960, 44954, 54883, 91960, 26248, 52206, 24668, 59630, 60533, 23157, 90656, 87505, 73105, 95145, 99198, 79302, 68335, 61416, 33529, 63002, 84187, 77133, 15405, 92853, 82725, 25300, 58021, 84582, 44791, 62495, 28492, 71321, 15988, 80714, 1327, 91859, 86469, 88477, 85394, 13362, 11261, 16191, 30673, 17853, 4755, 83243, 10164, 50868, 68761, 3183, 9318, 57477, 97974, 12641, 64073, 4242, 2241, 43703, 92547, 52762, 84548, 62164, 90902, 40996, 19223, 82312, 43477, 73900, 52137, 48446, 92563, 18847, 59556, 66590, 54646, 28850, 46627, 23209, 96594, 145, 15335, 75067, 33423, 87689, 26096, 44735, 99734, 10164, 39963, 20517, 96611, 79156, 44938, 93128, 22477, 67894, 46866, 87435, 46645, 61705, 85549, 49108, 34635, 98892, 2951, 37125, 54784, 63059, 2641, 60119, 30110, 85357, 35075, 13540, 69441, 24578, 40948, 42514, 77200, 25029, 16511, 16657, 86099, 93655, 56603, 34070, 69518, 94030, 53498, 30082, 2305, 93907, 67771, 63856, 79566, 10498, 90555, 25238, 27455, 14922, 9789, 85544, 77476, 75366, 70329, 75783, 99378, 50262, 37451, 34750, 26781, 10426, 60217, 54218, 35638, 49518, 18185, 74319, 80458, 26246, 80979, 52383, 34179, 2881, 80300, 74350, 39383, 79869, 71949, 21494, 59080, 86679, 18531, 49413, 29195, 55332, 26723, 83469, 22789, 50206, 28149, 39372, 41058, 73190, 17654, 38720, 92306, 37683, 73416, 87105, 89446, 90943, 13461, 95348, 55645, 38803, 38765, 39113], thresh: int=4517589800):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=722, beta=28, xs=[0, 3, 85, 123, 298, 357, 380, 580, 581, 626, 657, 678, 679, 679, 679, 680, 680, 680, 680, 680, 680, 680, 680, 680, 680, 680, 680, 680, 680, 680, 681, 1180, 1428, 1436, 1494, 1503, 1667, 1668, 1671, 1671, 1672, 1703, 1717, 2406, 2581, 2685, 2740, 2764, 2784, 3408, 3423, 3435, 3459, 3537, 3728, 4127, 4176, 4544, 4688, 4694, 4703, 4704, 4705, 4706, 4756, 4780, 4869, 4883, 4892, 4911, 4917, 4918, 4922, 4930, 4933, 4962, 4985, 4990, 4990, 4995, 5127, 5160, 5175, 5176, 5185, 5185, 5190, 5190, 5192, 5192, 5194, 5617, 6121, 6711, 6825, 6861, 6871, 7110, 7134, 7349, 7350, 7353, 7387, 7434, 7644, 7677, 7689, 7701, 7982, 8263, 8735, 8814, 8830, 8930, 8960, 8962, 9033, 9204, 9277, 9291, 9293, 9362, 9409, 9467, 9554, 9601, 9627, 9767, 9927, 9951, 9962, 10001, 10139, 10141, 10493, 10499, 10521, 10649, 10694, 10762, 10764, 10766, 10809, 10815, 11085, 11830, 11847, 11899, 11899, 11905, 11906, 11908, 11908, 11908, 11909, 12218, 12298, 12347, 12384, 12433, 12445, 12451, 12452, 12455, 12455, 12455, 12455, 12455, 12455, 12456, 12598, 12881, 12886, 12886, 12887, 13069, 13563, 14229, 14490, 14510, 14866, 14927, 14940, 14969, 15073, 15399, 15464, 15650, 15948, 15985, 15991, 15994, 16016, 16773, 16861, 16929, 16933, 16935, 16938, 17158, 17284, 17299, 17335, 17366, 17368, 17369, 17372, 17372, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17373, 17374, 17419, 17474, 17484, 17498, 17500, 17500, 17500, 17500, 17501, 17550, 17571, 17658, 17758, 18756, 18777, 19043, 19130, 19187, 19189, 19220, 19228, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19230, 19231, 19686, 19802, 19828, 19889, 19918, 19918, 19918, 19918, 19918, 19919, 19976, 20012, 20012, 20012, 20012, 20012, 20012, 20013, 20103, 20109, 20214, 21482, 21490, 21496, 21675, 21734, 21735, 21742, 21742, 21744, 21744, 21744, 21746, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21747, 21748, 22253, 22385, 22456, 22502, 22524, 22525, 22525, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22529, 22559, 22705, 22705, 22925, 22925, 22925, 22925, 22925, 22925, 22925, 22925, 22925, 22925, 22925, 22925, 22925, 22925, 22926, 22984, 22984, 22984, 22985, 23123, 23242, 23334, 23384, 23389, 23529, 23553, 23562, 23565, 24128, 24367, 24459, 24604, 24951, 25057, 25240, 25272, 25529, 25702, 26112, 26326, 26341, 26359, 26387, 26411, 26419, 26420, 26420, 26421, 26510, 26792, 26836, 26851, 26854, 26855, 26856, 26856, 26856, 26856, 26856, 26856, 26857, 26857, 26862, 26862, 26870, 27006, 27251, 27252, 27268, 27350, 27361, 27362, 27363, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27366, 27367, 28404, 28656, 29081, 29172, 29304, 29609, 29785, 29901, 30144, 30174, 30243, 30320, 30336, 30603, 31163, 31520, 32702, 32952, 33322, 33374, 33837, 33879, 34095, 34295, 34479, 34727, 34928, 35357, 35374, 35544, 35568, 35734, 35823, 35873, 36680, 37008, 37112, 37459, 37755, 38441, 38856, 39188, 39862, 39866, 40145, 40446, 40685, 40727, 40899, 41062, 41712, 41758, 41870, 42398, 42509, 42562, 43473, 44016, 44293, 44461, 45111, 45702, 45849, 46055, 46575, 46636, 46912, 47374, 47405, 47451, 49518, 49881, 50621, 51623, 51657, 54137, 54207, 54383, 54496, 54693, 54880, 54978, 55169, 55179, 55719, 55808, 55863, 55877, 56052, 56194, 56883, 56892, 57245, 57798, 57892, 58450, 58529, 58639, 59290, 59595, 60075, 60221, 60631, 61079, 61379, 61498, 61665, 62432, 62537, 62697, 62791, 63308, 63394, 63483, 63863, 64686, 64737, 64800, 64994, 65025, 65656, 66495, 66513, 66771, 67670, 67903, 68079, 68118, 68627, 69046, 69390, 69920, 70369, 70420, 70630, 70653, 71038, 71665, 71760, 71905, 72007, 72063, 72138, 72448, 72665, 73054, 73101, 73123, 73182, 73211, 73213, 73230, 73592, 74022, 75572, 75772, 75822, 76155, 76171, 76198, 76325, 77038, 77167, 77180, 77214, 77838, 78056, 78307, 78527, 79155, 79213, 79328, 79611, 80348, 80394, 80450, 80558, 80679, 81078, 81084, 81264, 81386, 81779, 82699, 83442, 83495, 84422, 84997, 85029, 85385, 85443, 85487, 85561, 85592, 85864, 86094, 86245, 86353, 86411, 86701, 88086, 88162, 88322, 88375, 88434, 88446, 88833, 88974, 89488, 89559, 89578, 89764, 89894, 90001, 90359, 91052, 91135, 91182, 91840, 92180, 92434, 92761, 93573, 93662, 94243, 94284, 94462, 94562, 94612, 94637, 94778, 94921, 95096, 96223, 96359, 96866, 97779, 97887, 98012, 98365, 98760, 99679, 100000], ys=[79351, 44738, 70710, 49146, 96360, 55660, 76631, 86596, 30650, 92071, 95207, 74399, 43193, 93482, 88728, 19525, 43260, 44647, 42408, 20349, 46091, 85655, 67888, 50509, 13509, 27219, 72957, 82225, 77486, 34772, 91175, 75637, 16762, 51999, 66621, 81319, 60580, 56758, 85637, 50395, 36875, 45457, 38197, 48115, 97436, 30729, 80498, 28476, 39867, 68616, 32187, 15337, 18281, 27847, 63147, 43856, 86470, 1495, 11889, 41911, 25794, 14053, 84508, 54286, 62292, 48798, 57099, 6218, 90979, 78502, 29086, 63621, 33968, 49269, 50088, 99280, 27223, 85708, 16266, 55773, 43357, 20431, 46628, 75092, 37279, 45833, 65528, 70401, 75697, 24918, 88238, 34302, 97117, 42328, 40553, 26763, 83256, 12205, 89846, 52617, 497, 83644, 91568, 97878, 53930, 86554, 34924, 71688, 29132, 27548, 29969, 64450, 71300, 77192, 61849, 46419, 94929, 88532, 802, 46427, 86724, 49312, 85788, 19107, 89919, 62483, 34452, 82819, 11104, 96277, 95916, 58308, 68234, 54487, 8851, 47300, 94673, 51559, 7964, 29928, 39723, 283, 64996, 55694, 57554, 29465, 85846, 9470, 1556, 86764, 65556, 66410, 53730, 10575, 33050, 61868, 47313, 26806, 39305, 83724, 65225, 96230, 47460, 50181, 11469, 78151, 60850, 41445, 38400, 81763, 98772, 17736, 31275, 41548, 67787, 19484, 6630, 49060, 5892, 45563, 25380, 581, 60623, 82308, 58442, 56686, 13612, 12856, 11157, 82908, 78328, 78843, 46470, 26850, 93868, 98271, 72221, 64745, 96548, 54328, 38747, 70686, 18664, 25237, 13933, 18876, 41875, 47255, 39637, 61462, 55642, 93965, 21672, 66527, 69657, 54071, 72537, 7412, 2075, 32821, 89762, 99150, 12871, 85939, 78044, 86179, 12059, 2567, 19895, 75633, 3705, 73283, 15112, 69126, 78109, 80208, 64290, 10527, 52663, 98205, 62309, 87201, 60577, 45190, 90168, 84608, 1756, 14148, 76388, 78774, 72555, 22282, 38647, 55728, 29258, 50910, 20849, 90554, 68307, 79972, 42250, 93222, 61230, 89996, 63313, 56527, 55459, 19878, 20031, 28053, 67913, 19082, 91398, 13767, 78256, 18368, 17601, 41491, 16582, 149, 46133, 31724, 52288, 79385, 11012, 71506, 60902, 87160, 91883, 94210, 76480, 94744, 78714, 75070, 74494, 89432, 79761, 56465, 82712, 80804, 8766, 12143, 8466, 25644, 91292, 53549, 61710, 79900, 24316, 82743, 56484, 43466, 76410, 50559, 1630, 40064, 79547, 40414, 71253, 43052, 64984, 43461, 18338, 45322, 23726, 81211, 97477, 4674, 40644, 77483, 15452, 88282, 65059, 913, 16029, 32314, 15264, 29636, 4638, 80386, 56583, 1799, 32786, 82366, 48304, 13537, 19636, 96820, 50051, 47228, 49281, 29070, 7700, 67969, 14317, 18594, 78945, 42840, 82325, 78512, 39720, 23793, 4032, 86438, 47046, 52882, 94635, 80958, 64856, 13721, 39509, 49782, 91504, 44148, 31155, 43720, 15033, 37884, 67050, 88039, 67470, 86517, 39346, 49147, 30603, 3338, 35514, 88533, 67276, 83586, 96650, 76140, 28875, 22466, 33482, 70126, 69785, 90697, 96648, 36299, 75902, 35016, 48524, 37804, 26291, 60148, 96738, 79356, 36039, 84419, 53162, 31878, 69927, 48715, 15172, 38757, 95959, 94859, 59247, 22449, 84858, 21795, 69816, 71560, 39972, 44750, 86158, 7540, 36839, 86665, 82012, 44969, 3318, 31683, 97782, 69987, 29437, 32095, 25098, 16038, 83629, 47292, 23264, 69873, 79299, 48573, 81768, 82579, 66288, 26593, 78023, 15327, 93795, 87302, 87556, 65538, 58982, 72941, 49074, 25063, 8574, 71957, 70332, 7911, 34329, 3446, 96683, 55369, 44687, 39118, 43372, 36763, 93727, 15723, 65625, 14819, 8824, 83160, 31672, 2352, 62801, 18470, 892, 18031, 61143, 55526, 37431, 69113, 94055, 39073, 67051, 47779, 65390, 92339, 6672, 6941, 6275, 5126, 42129, 70680, 49679, 43201, 2817, 45872, 84225, 51520, 97797, 47541, 42585, 66641, 19762, 1510, 29473, 74165, 93540, 79744, 94776, 4739, 84031, 84283, 50170, 92819, 7947, 20752, 99665, 61101, 41562, 83455, 19024, 73616, 13350, 19981, 94283, 72028, 70854, 72994, 35252, 38331, 51691, 84034, 29492, 61287, 1057, 73588, 43052, 16018, 54936, 27597, 72187, 14479, 24739, 54438, 72726, 96028, 56023, 67790, 56001, 51404, 35278, 65087, 9217, 73382, 24306, 1211, 90327, 63511, 68906, 35170, 20592, 90333, 78514, 59680, 32870, 2843, 55774, 59718, 12092, 86593, 72391, 90559, 1678, 6902, 95325, 22731, 82679, 35854, 43608, 94860, 18338, 63836, 52686, 6750, 11616, 16382, 45531, 80549, 29740, 4650, 58706, 86297, 19209, 66974, 66490, 17297, 39209, 68542, 45936, 60946, 79428, 8066, 39319, 90566, 32305, 84974, 23971, 57159, 43093, 58120, 52418, 1307, 65876, 8563, 63713, 69136, 5247, 64587, 39503, 73760, 86964, 72046, 10418, 59326, 57586, 69632, 22415, 14253, 92487, 29059, 48794, 13248, 57819, 89247, 29617, 91385, 84508, 75174, 93149, 15556, 56096, 45491, 39339, 25007, 32571, 75624, 36686, 7141, 50334, 6748, 11475, 74878, 85304, 83819, 51782, 94108, 71788, 86370, 86488, 21087, 10603, 34614, 91412, 23973, 9144, 13988, 62393, 90503, 97136, 23188, 89356, 81801, 74757, 81046, 84335, 16667, 45175, 22496, 87782, 13029, 12403, 83244, 19815, 63640, 13496, 87545, 46786, 7159, 73242, 46767, 83395, 4878, 29161, 24378, 1023, 54799, 62135, 60720, 97575, 52127, 60608, 42577, 99895, 73547, 3699, 62447, 29792, 25172, 64225, 9547, 23816, 68965, 1670, 9793, 20424, 46342, 31205, 30467, 49816, 86546, 69090, 97927, 45107, 52352, 53024, 24872, 91059, 65836, 72010, 89731, 41055, 91277, 88022, 97336, 67848, 16974, 85611, 41963, 46452, 29877, 69520, 51916, 91378, 44239, 38710, 61680, 62391, 90074, 76102, 71171, 3475, 70688, 64212, 48301, 84823, 91858, 74673, 90649, 33544, 38897, 60141, 11097, 49889, 56539, 81684, 35396, 2086, 49841, 25365, 50115, 97723, 6360, 5115, 58770, 86524, 7929, 42876, 13938, 46468, 63994, 34833, 87996, 7355, 38811, 27294, 85778, 38216, 91245, 28158, 29995, 20256, 51951, 21561, 4960, 44954, 54883, 91960, 26248, 52206, 24668, 59630, 60533, 23157, 90656, 87505, 73105, 95145, 99198, 79302, 68335, 61416, 33529, 63002, 84187, 77133, 15405, 92853, 82725, 25300, 58021, 84582, 44791, 62495, 28492, 71321, 15988, 80714, 1327, 91859, 86469, 88477, 85394, 13362, 11261, 16191, 30673, 17853, 4755, 83243, 10164, 50868, 68761, 3183, 9318, 57477, 97974, 12641, 64073, 4242, 2241, 43703, 92547, 52762, 84548, 62164, 90902, 40996, 19223, 82312, 43477, 73900, 52137, 48446, 92563, 18847, 59556, 66590, 54646, 28850, 46627, 23209, 96594, 145, 15335, 75067, 33423, 87689, 26096, 44735, 99734, 10164, 39963, 20517, 96611, 79156, 44938, 93128, 22477, 67894, 46866, 87435, 46645, 61705, 85549, 49108, 34635, 98892, 2951, 37125, 54784, 63059, 2641, 60119, 30110, 85357, 35075, 13540, 69441, 24578, 40948, 42514, 77200, 25029, 16511, 16657, 86099, 93655, 56603, 34070, 69518, 94030, 53498, 30082, 2305, 93907, 67771, 63856, 79566, 10498, 90555, 25238, 27455, 14922, 9789, 85544, 77476, 75366, 70329, 75783, 99378, 50262, 37451, 34750, 26781, 10426, 60217, 54218, 35638, 49518, 18185, 74319, 80458, 26246, 80979, 52383, 34179, 2881, 80300, 74350, 39383, 79869, 71949, 21494, 59080, 86679, 18531, 49413, 29195, 55332, 26723, 83469, 22789, 50206, 28149, 39372, 41058, 73190, 17654, 38720, 92306, 37683, 73416, 87105, 89446, 90943, 13461, 95348, 55645, 38803, 38765, 39113], thresh=4517589800):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_68",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=6, beta: int=3, xs: List[int]=[0, 15989, 32938, 66505, 86686, 100000], ys: List[int]=[40787, 83343, 93027, 9254, 54410, 70615], thresh: int=15023700750):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=6, beta=3, xs=[0, 15989, 32938, 66505, 86686, 100000], ys=[40787, 83343, 93027, 9254, 54410, 70615], thresh=15023700750):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_69",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=2, beta: int=13, xs: List[int]=[0, 63459, 86225, 88032, 100000], ys: List[int]=[1724, 63562, 41854, 66017, 5475], thresh: int=60994480966):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=2, beta=13, xs=[0, 63459, 86225, 88032, 100000], ys=[1724, 63562, 41854, 66017, 5475], thresh=60994480966):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_70",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=35, beta: int=19, xs: List[int]=[0, 589, 3437, 3455, 3526, 3542, 3637, 4780, 7256, 8198, 8618, 9054, 9259, 9452, 12929, 12961, 14026, 16381, 17107, 19173, 19297, 19635, 19712, 22651, 31928, 37858, 38818, 38828, 38931, 39176, 40249, 40841, 42266, 43862, 46925, 46989, 50009, 50404, 50489, 50676, 59069, 64647, 64650, 64659, 77735, 85218, 86828, 95016, 100000], ys: List[int]=[85261, 82954, 79121, 42221, 30663, 74998, 48688, 25810, 36494, 22805, 91824, 77004, 34500, 27848, 32905, 40175, 87882, 26688, 56044, 74988, 15311, 95663, 3563, 77920, 90428, 87241, 50893, 46930, 28942, 63749, 36965, 27664, 95337, 19466, 65483, 76577, 56639, 2222, 42837, 13736, 12976, 12157, 23955, 46564, 14523, 4931, 79284, 95412, 46500], thresh: int=11842985237):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=35, beta=19, xs=[0, 589, 3437, 3455, 3526, 3542, 3637, 4780, 7256, 8198, 8618, 9054, 9259, 9452, 12929, 12961, 14026, 16381, 17107, 19173, 19297, 19635, 19712, 22651, 31928, 37858, 38818, 38828, 38931, 39176, 40249, 40841, 42266, 43862, 46925, 46989, 50009, 50404, 50489, 50676, 59069, 64647, 64650, 64659, 77735, 85218, 86828, 95016, 100000], ys=[85261, 82954, 79121, 42221, 30663, 74998, 48688, 25810, 36494, 22805, 91824, 77004, 34500, 27848, 32905, 40175, 87882, 26688, 56044, 74988, 15311, 95663, 3563, 77920, 90428, 87241, 50893, 46930, 28942, 63749, 36965, 27664, 95337, 19466, 65483, 76577, 56639, 2222, 42837, 13736, 12976, 12157, 23955, 46564, 14523, 4931, 79284, 95412, 46500], thresh=11842985237):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_71",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=503, beta: int=807, xs: List[int]=[0, 7433, 9156, 17145, 28908, 31630, 33063, 41143, 100000], ys: List[int]=[13620, 80330, 33112, 45349, 65371, 41258, 24028, 83166, 1234], thresh: int=3833850582844):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=503, beta=807, xs=[0, 7433, 9156, 17145, 28908, 31630, 33063, 41143, 100000], ys=[13620, 80330, 33112, 45349, 65371, 41258, 24028, 83166, 1234], thresh=3833850582844):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_72",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=563, beta: int=49, xs: List[int]=[0, 465, 532, 982, 1005, 1016, 1018, 1020, 1021, 1021, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1023, 1243, 1260, 1399, 1708, 1762, 1857, 1928, 2167, 3310, 3780, 3814, 3952, 3958, 4048, 4093, 4125, 4127, 4127, 4127, 4128, 4834, 4872, 5003, 5067, 5581, 5622, 6062, 6143, 6401, 6406, 6430, 6553, 6589, 6593, 6593, 6594, 6595, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6598, 6919, 6957, 6958, 6958, 6958, 6958, 6958, 6959, 7241, 7250, 7277, 7302, 7305, 7305, 7306, 7306, 7306, 7306, 7306, 7306, 7306, 7306, 7306, 7306, 7306, 7306, 7306, 7306, 7306, 7306, 7307, 7344, 7824, 10679, 10720, 10886, 10997, 11390, 11425, 11433, 11486, 11492, 11496, 11505, 11517, 12590, 12826, 13115, 13264, 13352, 13564, 13601, 13612, 13641, 13644, 13645, 13767, 14354, 14384, 14394, 14401, 14404, 14415, 14544, 14576, 14583, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14585, 14661, 14761, 15004, 15176, 15178, 15227, 15301, 15308, 15371, 17234, 18013, 18891, 19588, 19605, 19688, 19877, 20001, 20006, 20021, 20047, 20205, 20268, 20957, 20960, 20965, 20987, 21569, 21833, 21872, 22107, 22138, 22208, 22230, 22234, 22234, 22234, 22234, 22234, 22235, 22357, 22931, 23081, 23168, 23451, 23618, 24027, 24542, 26597, 26929, 26962, 26981, 28399, 28575, 28609, 28693, 28759, 28771, 28909, 28942, 28948, 28951, 29104, 29354, 29625, 29641, 29771, 29946, 29950, 29954, 29962, 29983, 29984, 30003, 30119, 30123, 30123, 30123, 30123, 30123, 30123, 30123, 30123, 30123, 30123, 30123, 30123, 30124, 30138, 30271, 30431, 30688, 30774, 30848, 30853, 30856, 30856, 30856, 30856, 30856, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30858, 30865, 31020, 31054, 31395, 31436, 31442, 31443, 31443, 31443, 31443, 31443, 31443, 31443, 31444, 31527, 31539, 31554, 31717, 31804, 32703, 32703, 32705, 32705, 32707, 33289, 33292, 33300, 33300, 33300, 33300, 33300, 33300, 33301, 33317, 33321, 33586, 33594, 34908, 34920, 34988, 35015, 35016, 35037, 35063, 35336, 35438, 35880, 35949, 36395, 36458, 36605, 36720, 37425, 37585, 37612, 37619, 37627, 37627, 37627, 37627, 37627, 37627, 37628, 37633, 37707, 37820, 37856, 37863, 37864, 37864, 37865, 38383, 38451, 40046, 40240, 40323, 40406, 40412, 40422, 40422, 40423, 40424, 40786, 43744, 43770, 43772, 43844, 43851, 43857, 43857, 43857, 43857, 43857, 43857, 43857, 43857, 43857, 43857, 43857, 43857, 43857, 43857, 43857, 43858, 45068, 45090, 45176, 45198, 45213, 45214, 46275, 46402, 46745, 46752, 46764, 46786, 46786, 46788, 46791, 46791, 46791, 46791, 46791, 46791, 46791, 46791, 46791, 46791, 46791, 46792, 47304, 48623, 48702, 49667, 49798, 49908, 50247, 50335, 50417, 50425, 50521, 50773, 51137, 51621, 52344, 52525, 52527, 52529, 52609, 52624, 52638, 52642, 52647, 52649, 52694, 52725, 52900, 53002, 53017, 53028, 53030, 53678, 53780, 53993, 53995, 53999, 54061, 54063, 54067, 54365, 54801, 55718, 56874, 57320, 57971, 58036, 58562, 58564, 58567, 58570, 58820, 58858, 59188, 59865, 60455, 60751, 60810, 60864, 60884, 60886, 60886, 60886, 60886, 60886, 60886, 60886, 60886, 60886, 60886, 60886, 60886, 60886, 60886, 60886, 60887, 61176, 61352, 61352, 61353, 62748, 63058, 63483, 63506, 63524, 63755, 63787, 63885, 64172, 64369, 64971, 65054, 65167, 65637, 65809, 65821, 66678, 66993, 67202, 67218, 67228, 67228, 67232, 67289, 67398, 68131, 68354, 68515, 69146, 69148, 69151, 69199, 69215, 69225, 69225, 69234, 69855, 71416, 71422, 71444, 71454, 71472, 71625, 71704, 71737, 71742, 71742, 71746, 71759, 71762, 71762, 71762, 71763, 73300, 73651, 73656, 73670, 73673, 73688, 73688, 73689, 73689, 73689, 73689, 73689, 73689, 73689, 73690, 74356, 74868, 74874, 74878, 74882, 74885, 74886, 75176, 75193, 75566, 76145, 76223, 76279, 76371, 76420, 76467, 76470, 76473, 76475, 76475, 76475, 76476, 76964, 77033, 77092, 77136, 77181, 77255, 77390, 77393, 77404, 77405, 77405, 77405, 77405, 77405, 77405, 77405, 77405, 77405, 77405, 77405, 77405, 77405, 77405, 77405, 77405, 77405, 77405, 77406, 77425, 77485, 77699, 77766, 77781, 77791, 77826, 77839, 77842, 77975, 78481, 78507, 78571, 78571, 78589, 78611, 78614, 78614, 78614, 78616, 78616, 78616, 78616, 78616, 78616, 78616, 78616, 78616, 78616, 78616, 78616, 78616, 78616, 78616, 78617, 78877, 78924, 79068, 79114, 79830, 79861, 79865, 80079, 80080, 80091, 80294, 81051, 81465, 81580, 81613, 81613, 81623, 81652, 81712, 81746, 81831, 81832, 81834, 81939, 81939, 81983, 83666, 83704, 83762, 83900, 84124, 85359, 85600, 86211, 86300, 86457, 86468, 86468, 86468, 86469, 86469, 86469, 86469, 86469, 86469, 86469, 86469, 86470, 86713, 87729, 87772, 89115, 89346, 89558, 89591, 89596, 89603, 90401, 90800, 91061, 91082, 91764, 92797, 92960, 93508, 93540, 93555, 93624, 94392, 94534, 95866, 95881, 95896, 95900, 95919, 95932, 95932, 95932, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95934, 96445, 96532, 98707, 99041, 99541, 100000], ys: List[int]=[33533, 21413, 2356, 76369, 29620, 77050, 84305, 79327, 6016, 81307, 17369, 54897, 31328, 5223, 75678, 96206, 11419, 67707, 85639, 70163, 18052, 54122, 57362, 80277, 88679, 70367, 99319, 42230, 65753, 80295, 51060, 34199, 48892, 42540, 62814, 92647, 76882, 94481, 47295, 23101, 25342, 78512, 97646, 95859, 86738, 27974, 10522, 61783, 35892, 16291, 97679, 49379, 44146, 483, 76278, 79465, 41276, 25393, 7341, 73608, 67302, 26270, 76597, 66593, 65865, 3918, 93527, 7364, 59604, 55568, 22123, 58329, 35964, 4845, 55971, 82876, 89339, 80235, 61824, 31745, 21175, 76261, 39249, 53089, 31035, 71299, 247, 54421, 21445, 84920, 66360, 42620, 15399, 52090, 1763, 71197, 77469, 1291, 23246, 92749, 69862, 70813, 33302, 99579, 46696, 57166, 85331, 16858, 37733, 99256, 87363, 9552, 48676, 79923, 96101, 51298, 55135, 44001, 76617, 25975, 83045, 94499, 68284, 60659, 60362, 55391, 14501, 15943, 83815, 23242, 5262, 9407, 21560, 51520, 43971, 26781, 51630, 67197, 31224, 38857, 64919, 87117, 76077, 93328, 52141, 72375, 11129, 92, 82937, 42727, 20728, 14783, 15399, 54566, 61618, 78391, 94290, 3122, 28070, 21068, 27419, 62894, 20432, 8128, 10441, 80342, 1603, 39026, 70016, 96339, 77226, 50214, 50623, 17301, 36377, 11214, 13788, 503, 14788, 27681, 23953, 86842, 32297, 11486, 40872, 18295, 9493, 81577, 9821, 2603, 84264, 63957, 45124, 76460, 10117, 70378, 86102, 74150, 78848, 46076, 21015, 91003, 3869, 31152, 31415, 90734, 33271, 44429, 59540, 50285, 47170, 28753, 81292, 57135, 82880, 82735, 63806, 39222, 48727, 46099, 56946, 33093, 49600, 1415, 28649, 11148, 50183, 60372, 19266, 39451, 50904, 27949, 16004, 16345, 77803, 81407, 74808, 453, 80210, 53993, 48015, 91878, 4170, 75533, 75043, 31029, 55157, 89905, 54253, 43116, 22652, 16306, 49006, 70603, 21203, 73842, 50504, 18301, 620, 94728, 66120, 52386, 28181, 76353, 91925, 9680, 63858, 69618, 11203, 47296, 88713, 2842, 99435, 31930, 83978, 17450, 21034, 12670, 56642, 44245, 20018, 56333, 46469, 59490, 50515, 37127, 32728, 17120, 26528, 67452, 98309, 8327, 97231, 68055, 35346, 63306, 69108, 84114, 18031, 3321, 34058, 31225, 85055, 11374, 15903, 59564, 95732, 20551, 21749, 4886, 35294, 17774, 70564, 69369, 28030, 29584, 25085, 38344, 47626, 32548, 38065, 39679, 63298, 52266, 12242, 23936, 43029, 82350, 91255, 4997, 56585, 40874, 68336, 22813, 13477, 23060, 98868, 70479, 1412, 37367, 85260, 80220, 61940, 67284, 41430, 11233, 13895, 29077, 63847, 90307, 10787, 81128, 97428, 58835, 88515, 41870, 90010, 3048, 67537, 7335, 24233, 24078, 37947, 50239, 41174, 1808, 68960, 11878, 94286, 31597, 8201, 64852, 15931, 30382, 46139, 94943, 65508, 2173, 22551, 18279, 47787, 73089, 54744, 22266, 29233, 100, 74222, 93686, 48445, 47177, 35493, 61559, 76310, 46977, 6015, 28449, 63880, 80875, 15666, 92971, 72429, 20596, 23956, 95394, 65685, 49156, 11959, 90759, 8070, 34791, 64391, 27706, 3903, 23262, 68835, 9384, 34625, 60224, 98462, 60263, 43680, 41662, 84170, 445, 33068, 92997, 57730, 34767, 15241, 52807, 46053, 17368, 85905, 12614, 51667, 99295, 16680, 33429, 92721, 52133, 56578, 8070, 3597, 63115, 34412, 68007, 42291, 12561, 97362, 32186, 46751, 74605, 70445, 96024, 29756, 2804, 26897, 3093, 92544, 32265, 18348, 45176, 89794, 26032, 78418, 92043, 42969, 56605, 26470, 88581, 57541, 40604, 20605, 38061, 40110, 83390, 18791, 57253, 67595, 58708, 55553, 34526, 89524, 69085, 36894, 74039, 40360, 69870, 36228, 96080, 50348, 85419, 13190, 7611, 54945, 42259, 41769, 16885, 31019, 80627, 36659, 84635, 61429, 94036, 89547, 10721, 89690, 15195, 25769, 31353, 33716, 5645, 82830, 99665, 97522, 99576, 50387, 62895, 92651, 16235, 38845, 37484, 44557, 3167, 62934, 78326, 14460, 39598, 81827, 88478, 14908, 44371, 94552, 11117, 77552, 90038, 64775, 77402, 43804, 97718, 35944, 45603, 64493, 14678, 95352, 99547, 69864, 49115, 72511, 16007, 4747, 58993, 62296, 18327, 45036, 43135, 32758, 65364, 51930, 73505, 7354, 96046, 26095, 14018, 7329, 83997, 702, 47988, 3382, 97105, 8868, 90180, 23366, 32875, 39714, 22547, 58725, 58740, 81433, 62399, 82344, 95890, 32839, 58130, 71557, 45311, 18515, 71347, 81066, 7177, 56897, 78019, 74565, 94243, 13067, 88917, 60266, 50330, 90926, 14821, 62439, 3709, 98089, 23302, 16535, 87373, 72261, 23301, 11591, 43370, 88225, 16778, 61600, 96782, 10139, 97574, 32055, 41395, 47915, 8196, 60917, 5193, 25067, 11875, 34664, 79941, 32991, 7596, 71483, 23649, 26755, 32454, 63007, 56755, 78746, 6157, 66547, 22357, 16616, 98932, 24430, 16238, 88959, 3299, 30535, 91435, 8384, 70361, 28517, 65670, 9994, 48350, 54395, 93701, 79580, 49143, 73110, 58803, 52032, 79663, 80920, 30002, 30385, 12929, 20659, 98408, 61724, 72103, 28533, 935, 69331, 20545, 98586, 84540, 92096, 79915, 51446, 64517, 41571, 39807, 10030, 98944, 81896, 73634, 91195, 79964, 73720, 29276, 79517, 46491, 35989, 8599, 47499, 53836, 3291, 66515, 21134, 63791, 31359, 24918, 23499, 62265, 67090, 72465, 41287, 86696, 9122, 94965, 93963, 34736, 6997, 35814, 62026, 85869, 70668, 56712, 46131, 80808, 85327, 61395, 60950, 80435, 43303, 64018, 12006, 94190, 22842, 93333, 59969, 42629, 34401, 57883, 26738, 63973, 54481, 77591, 50174, 73460, 77063, 89191, 11643, 87509, 37598, 53137, 64563, 65365, 11215, 74385, 84409, 77385, 20715, 45366, 76708, 35475, 68251, 13940, 65820, 98547, 73967, 32889, 2327, 79652, 85880, 99314, 23192, 54386, 12639, 77071, 59114, 17268, 1162, 43969, 93335, 24469, 56599, 50368, 5012, 24918, 62421, 92864, 24055, 27781, 4441, 65313, 79874, 53209, 57494, 66989, 76421, 39396, 48326, 24189, 98099, 68482, 89970, 36137, 97553, 30644, 10882, 20739, 83284, 47093, 80611, 70568, 13553, 54512, 11279, 72249, 55854, 11308, 72446, 40745, 31734, 87816, 63425, 13620, 45406, 25664, 29391, 99052, 54810, 20477, 90185, 91172, 69013, 49135, 85843, 15751, 12366, 41762, 95894, 80501, 2582, 89887, 90558, 32181, 90964, 34721, 17591, 20582, 18156, 91272, 89538, 22860, 92251, 66692, 71518, 72423, 70491, 26580, 94002, 53439, 5788, 4513, 97963, 82133, 32750, 83989, 5420, 93759, 54300, 16333, 55212, 7881, 25206, 53680, 65577, 95517, 92954, 89515, 47198, 85552, 72167, 5317, 81625, 39119, 32956, 27795, 68686, 79326, 11916, 83202, 68197, 92591, 57930, 86636, 66433, 23105, 7791, 88770, 5034, 55045, 7218, 52856, 4285, 89856, 88432, 63817, 73003, 77890, 86368, 60159, 97325, 52196, 9312, 78772, 89399, 22056, 30846, 86401, 27568, 4251, 71433, 43249, 42468, 4852, 14338, 25239, 13274, 5906, 35901, 37944, 43253, 96703, 13579, 21710, 17767, 59659, 64569, 19326, 68217, 1516, 4242, 41012, 38139, 74449, 4228, 97775, 58771, 98164, 52881, 29067, 49201, 25948, 23215, 56397, 68492, 60430, 30822, 94137, 25806, 68188, 16349, 86662, 55549, 56983, 10828, 78032, 37633, 28213, 38155, 98259, 36066, 75787, 92954, 43492, 61456, 41945, 31885, 36916, 52088, 27435, 72355, 17075, 17104, 67158, 1330, 96129, 7795, 84701, 98593, 79996, 94678, 70460, 49972, 18673, 11726, 90207, 24496, 56985, 83384, 59486, 77677, 11643, 31133, 87415, 83473, 356, 74086], thresh: int=7146354959):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=563, beta=49, xs=[0, 465, 532, 982, 1005, 1016, 1018, 1020, 1021, 1021, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1023, 1243, 1260, 1399, 1708, 1762, 1857, 1928, 2167, 3310, 3780, 3814, 3952, 3958, 4048, 4093, 4125, 4127, 4127, 4127, 4128, 4834, 4872, 5003, 5067, 5581, 5622, 6062, 6143, 6401, 6406, 6430, 6553, 6589, 6593, 6593, 6594, 6595, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6598, 6919, 6957, 6958, 6958, 6958, 6958, 6958, 6959, 7241, 7250, 7277, 7302, 7305, 7305, 7306, 7306, 7306, 7306, 7306, 7306, 7306, 7306, 7306, 7306, 7306, 7306, 7306, 7306, 7306, 7306, 7307, 7344, 7824, 10679, 10720, 10886, 10997, 11390, 11425, 11433, 11486, 11492, 11496, 11505, 11517, 12590, 12826, 13115, 13264, 13352, 13564, 13601, 13612, 13641, 13644, 13645, 13767, 14354, 14384, 14394, 14401, 14404, 14415, 14544, 14576, 14583, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14584, 14585, 14661, 14761, 15004, 15176, 15178, 15227, 15301, 15308, 15371, 17234, 18013, 18891, 19588, 19605, 19688, 19877, 20001, 20006, 20021, 20047, 20205, 20268, 20957, 20960, 20965, 20987, 21569, 21833, 21872, 22107, 22138, 22208, 22230, 22234, 22234, 22234, 22234, 22234, 22235, 22357, 22931, 23081, 23168, 23451, 23618, 24027, 24542, 26597, 26929, 26962, 26981, 28399, 28575, 28609, 28693, 28759, 28771, 28909, 28942, 28948, 28951, 29104, 29354, 29625, 29641, 29771, 29946, 29950, 29954, 29962, 29983, 29984, 30003, 30119, 30123, 30123, 30123, 30123, 30123, 30123, 30123, 30123, 30123, 30123, 30123, 30123, 30124, 30138, 30271, 30431, 30688, 30774, 30848, 30853, 30856, 30856, 30856, 30856, 30856, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30857, 30858, 30865, 31020, 31054, 31395, 31436, 31442, 31443, 31443, 31443, 31443, 31443, 31443, 31443, 31444, 31527, 31539, 31554, 31717, 31804, 32703, 32703, 32705, 32705, 32707, 33289, 33292, 33300, 33300, 33300, 33300, 33300, 33300, 33301, 33317, 33321, 33586, 33594, 34908, 34920, 34988, 35015, 35016, 35037, 35063, 35336, 35438, 35880, 35949, 36395, 36458, 36605, 36720, 37425, 37585, 37612, 37619, 37627, 37627, 37627, 37627, 37627, 37627, 37628, 37633, 37707, 37820, 37856, 37863, 37864, 37864, 37865, 38383, 38451, 40046, 40240, 40323, 40406, 40412, 40422, 40422, 40423, 40424, 40786, 43744, 43770, 43772, 43844, 43851, 43857, 43857, 43857, 43857, 43857, 43857, 43857, 43857, 43857, 43857, 43857, 43857, 43857, 43857, 43857, 43858, 45068, 45090, 45176, 45198, 45213, 45214, 46275, 46402, 46745, 46752, 46764, 46786, 46786, 46788, 46791, 46791, 46791, 46791, 46791, 46791, 46791, 46791, 46791, 46791, 46791, 46792, 47304, 48623, 48702, 49667, 49798, 49908, 50247, 50335, 50417, 50425, 50521, 50773, 51137, 51621, 52344, 52525, 52527, 52529, 52609, 52624, 52638, 52642, 52647, 52649, 52694, 52725, 52900, 53002, 53017, 53028, 53030, 53678, 53780, 53993, 53995, 53999, 54061, 54063, 54067, 54365, 54801, 55718, 56874, 57320, 57971, 58036, 58562, 58564, 58567, 58570, 58820, 58858, 59188, 59865, 60455, 60751, 60810, 60864, 60884, 60886, 60886, 60886, 60886, 60886, 60886, 60886, 60886, 60886, 60886, 60886, 60886, 60886, 60886, 60886, 60887, 61176, 61352, 61352, 61353, 62748, 63058, 63483, 63506, 63524, 63755, 63787, 63885, 64172, 64369, 64971, 65054, 65167, 65637, 65809, 65821, 66678, 66993, 67202, 67218, 67228, 67228, 67232, 67289, 67398, 68131, 68354, 68515, 69146, 69148, 69151, 69199, 69215, 69225, 69225, 69234, 69855, 71416, 71422, 71444, 71454, 71472, 71625, 71704, 71737, 71742, 71742, 71746, 71759, 71762, 71762, 71762, 71763, 73300, 73651, 73656, 73670, 73673, 73688, 73688, 73689, 73689, 73689, 73689, 73689, 73689, 73689, 73690, 74356, 74868, 74874, 74878, 74882, 74885, 74886, 75176, 75193, 75566, 76145, 76223, 76279, 76371, 76420, 76467, 76470, 76473, 76475, 76475, 76475, 76476, 76964, 77033, 77092, 77136, 77181, 77255, 77390, 77393, 77404, 77405, 77405, 77405, 77405, 77405, 77405, 77405, 77405, 77405, 77405, 77405, 77405, 77405, 77405, 77405, 77405, 77405, 77405, 77406, 77425, 77485, 77699, 77766, 77781, 77791, 77826, 77839, 77842, 77975, 78481, 78507, 78571, 78571, 78589, 78611, 78614, 78614, 78614, 78616, 78616, 78616, 78616, 78616, 78616, 78616, 78616, 78616, 78616, 78616, 78616, 78616, 78616, 78616, 78617, 78877, 78924, 79068, 79114, 79830, 79861, 79865, 80079, 80080, 80091, 80294, 81051, 81465, 81580, 81613, 81613, 81623, 81652, 81712, 81746, 81831, 81832, 81834, 81939, 81939, 81983, 83666, 83704, 83762, 83900, 84124, 85359, 85600, 86211, 86300, 86457, 86468, 86468, 86468, 86469, 86469, 86469, 86469, 86469, 86469, 86469, 86469, 86470, 86713, 87729, 87772, 89115, 89346, 89558, 89591, 89596, 89603, 90401, 90800, 91061, 91082, 91764, 92797, 92960, 93508, 93540, 93555, 93624, 94392, 94534, 95866, 95881, 95896, 95900, 95919, 95932, 95932, 95932, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95933, 95934, 96445, 96532, 98707, 99041, 99541, 100000], ys=[33533, 21413, 2356, 76369, 29620, 77050, 84305, 79327, 6016, 81307, 17369, 54897, 31328, 5223, 75678, 96206, 11419, 67707, 85639, 70163, 18052, 54122, 57362, 80277, 88679, 70367, 99319, 42230, 65753, 80295, 51060, 34199, 48892, 42540, 62814, 92647, 76882, 94481, 47295, 23101, 25342, 78512, 97646, 95859, 86738, 27974, 10522, 61783, 35892, 16291, 97679, 49379, 44146, 483, 76278, 79465, 41276, 25393, 7341, 73608, 67302, 26270, 76597, 66593, 65865, 3918, 93527, 7364, 59604, 55568, 22123, 58329, 35964, 4845, 55971, 82876, 89339, 80235, 61824, 31745, 21175, 76261, 39249, 53089, 31035, 71299, 247, 54421, 21445, 84920, 66360, 42620, 15399, 52090, 1763, 71197, 77469, 1291, 23246, 92749, 69862, 70813, 33302, 99579, 46696, 57166, 85331, 16858, 37733, 99256, 87363, 9552, 48676, 79923, 96101, 51298, 55135, 44001, 76617, 25975, 83045, 94499, 68284, 60659, 60362, 55391, 14501, 15943, 83815, 23242, 5262, 9407, 21560, 51520, 43971, 26781, 51630, 67197, 31224, 38857, 64919, 87117, 76077, 93328, 52141, 72375, 11129, 92, 82937, 42727, 20728, 14783, 15399, 54566, 61618, 78391, 94290, 3122, 28070, 21068, 27419, 62894, 20432, 8128, 10441, 80342, 1603, 39026, 70016, 96339, 77226, 50214, 50623, 17301, 36377, 11214, 13788, 503, 14788, 27681, 23953, 86842, 32297, 11486, 40872, 18295, 9493, 81577, 9821, 2603, 84264, 63957, 45124, 76460, 10117, 70378, 86102, 74150, 78848, 46076, 21015, 91003, 3869, 31152, 31415, 90734, 33271, 44429, 59540, 50285, 47170, 28753, 81292, 57135, 82880, 82735, 63806, 39222, 48727, 46099, 56946, 33093, 49600, 1415, 28649, 11148, 50183, 60372, 19266, 39451, 50904, 27949, 16004, 16345, 77803, 81407, 74808, 453, 80210, 53993, 48015, 91878, 4170, 75533, 75043, 31029, 55157, 89905, 54253, 43116, 22652, 16306, 49006, 70603, 21203, 73842, 50504, 18301, 620, 94728, 66120, 52386, 28181, 76353, 91925, 9680, 63858, 69618, 11203, 47296, 88713, 2842, 99435, 31930, 83978, 17450, 21034, 12670, 56642, 44245, 20018, 56333, 46469, 59490, 50515, 37127, 32728, 17120, 26528, 67452, 98309, 8327, 97231, 68055, 35346, 63306, 69108, 84114, 18031, 3321, 34058, 31225, 85055, 11374, 15903, 59564, 95732, 20551, 21749, 4886, 35294, 17774, 70564, 69369, 28030, 29584, 25085, 38344, 47626, 32548, 38065, 39679, 63298, 52266, 12242, 23936, 43029, 82350, 91255, 4997, 56585, 40874, 68336, 22813, 13477, 23060, 98868, 70479, 1412, 37367, 85260, 80220, 61940, 67284, 41430, 11233, 13895, 29077, 63847, 90307, 10787, 81128, 97428, 58835, 88515, 41870, 90010, 3048, 67537, 7335, 24233, 24078, 37947, 50239, 41174, 1808, 68960, 11878, 94286, 31597, 8201, 64852, 15931, 30382, 46139, 94943, 65508, 2173, 22551, 18279, 47787, 73089, 54744, 22266, 29233, 100, 74222, 93686, 48445, 47177, 35493, 61559, 76310, 46977, 6015, 28449, 63880, 80875, 15666, 92971, 72429, 20596, 23956, 95394, 65685, 49156, 11959, 90759, 8070, 34791, 64391, 27706, 3903, 23262, 68835, 9384, 34625, 60224, 98462, 60263, 43680, 41662, 84170, 445, 33068, 92997, 57730, 34767, 15241, 52807, 46053, 17368, 85905, 12614, 51667, 99295, 16680, 33429, 92721, 52133, 56578, 8070, 3597, 63115, 34412, 68007, 42291, 12561, 97362, 32186, 46751, 74605, 70445, 96024, 29756, 2804, 26897, 3093, 92544, 32265, 18348, 45176, 89794, 26032, 78418, 92043, 42969, 56605, 26470, 88581, 57541, 40604, 20605, 38061, 40110, 83390, 18791, 57253, 67595, 58708, 55553, 34526, 89524, 69085, 36894, 74039, 40360, 69870, 36228, 96080, 50348, 85419, 13190, 7611, 54945, 42259, 41769, 16885, 31019, 80627, 36659, 84635, 61429, 94036, 89547, 10721, 89690, 15195, 25769, 31353, 33716, 5645, 82830, 99665, 97522, 99576, 50387, 62895, 92651, 16235, 38845, 37484, 44557, 3167, 62934, 78326, 14460, 39598, 81827, 88478, 14908, 44371, 94552, 11117, 77552, 90038, 64775, 77402, 43804, 97718, 35944, 45603, 64493, 14678, 95352, 99547, 69864, 49115, 72511, 16007, 4747, 58993, 62296, 18327, 45036, 43135, 32758, 65364, 51930, 73505, 7354, 96046, 26095, 14018, 7329, 83997, 702, 47988, 3382, 97105, 8868, 90180, 23366, 32875, 39714, 22547, 58725, 58740, 81433, 62399, 82344, 95890, 32839, 58130, 71557, 45311, 18515, 71347, 81066, 7177, 56897, 78019, 74565, 94243, 13067, 88917, 60266, 50330, 90926, 14821, 62439, 3709, 98089, 23302, 16535, 87373, 72261, 23301, 11591, 43370, 88225, 16778, 61600, 96782, 10139, 97574, 32055, 41395, 47915, 8196, 60917, 5193, 25067, 11875, 34664, 79941, 32991, 7596, 71483, 23649, 26755, 32454, 63007, 56755, 78746, 6157, 66547, 22357, 16616, 98932, 24430, 16238, 88959, 3299, 30535, 91435, 8384, 70361, 28517, 65670, 9994, 48350, 54395, 93701, 79580, 49143, 73110, 58803, 52032, 79663, 80920, 30002, 30385, 12929, 20659, 98408, 61724, 72103, 28533, 935, 69331, 20545, 98586, 84540, 92096, 79915, 51446, 64517, 41571, 39807, 10030, 98944, 81896, 73634, 91195, 79964, 73720, 29276, 79517, 46491, 35989, 8599, 47499, 53836, 3291, 66515, 21134, 63791, 31359, 24918, 23499, 62265, 67090, 72465, 41287, 86696, 9122, 94965, 93963, 34736, 6997, 35814, 62026, 85869, 70668, 56712, 46131, 80808, 85327, 61395, 60950, 80435, 43303, 64018, 12006, 94190, 22842, 93333, 59969, 42629, 34401, 57883, 26738, 63973, 54481, 77591, 50174, 73460, 77063, 89191, 11643, 87509, 37598, 53137, 64563, 65365, 11215, 74385, 84409, 77385, 20715, 45366, 76708, 35475, 68251, 13940, 65820, 98547, 73967, 32889, 2327, 79652, 85880, 99314, 23192, 54386, 12639, 77071, 59114, 17268, 1162, 43969, 93335, 24469, 56599, 50368, 5012, 24918, 62421, 92864, 24055, 27781, 4441, 65313, 79874, 53209, 57494, 66989, 76421, 39396, 48326, 24189, 98099, 68482, 89970, 36137, 97553, 30644, 10882, 20739, 83284, 47093, 80611, 70568, 13553, 54512, 11279, 72249, 55854, 11308, 72446, 40745, 31734, 87816, 63425, 13620, 45406, 25664, 29391, 99052, 54810, 20477, 90185, 91172, 69013, 49135, 85843, 15751, 12366, 41762, 95894, 80501, 2582, 89887, 90558, 32181, 90964, 34721, 17591, 20582, 18156, 91272, 89538, 22860, 92251, 66692, 71518, 72423, 70491, 26580, 94002, 53439, 5788, 4513, 97963, 82133, 32750, 83989, 5420, 93759, 54300, 16333, 55212, 7881, 25206, 53680, 65577, 95517, 92954, 89515, 47198, 85552, 72167, 5317, 81625, 39119, 32956, 27795, 68686, 79326, 11916, 83202, 68197, 92591, 57930, 86636, 66433, 23105, 7791, 88770, 5034, 55045, 7218, 52856, 4285, 89856, 88432, 63817, 73003, 77890, 86368, 60159, 97325, 52196, 9312, 78772, 89399, 22056, 30846, 86401, 27568, 4251, 71433, 43249, 42468, 4852, 14338, 25239, 13274, 5906, 35901, 37944, 43253, 96703, 13579, 21710, 17767, 59659, 64569, 19326, 68217, 1516, 4242, 41012, 38139, 74449, 4228, 97775, 58771, 98164, 52881, 29067, 49201, 25948, 23215, 56397, 68492, 60430, 30822, 94137, 25806, 68188, 16349, 86662, 55549, 56983, 10828, 78032, 37633, 28213, 38155, 98259, 36066, 75787, 92954, 43492, 61456, 41945, 31885, 36916, 52088, 27435, 72355, 17075, 17104, 67158, 1330, 96129, 7795, 84701, 98593, 79996, 94678, 70460, 49972, 18673, 11726, 90207, 24496, 56985, 83384, 59486, 77677, 11643, 31133, 87415, 83473, 356, 74086], thresh=7146354959):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_73",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=787, beta: int=987, xs: List[int]=[0, 9, 53, 106, 122, 123, 154, 178, 193, 200, 232, 236, 237, 237, 237, 238, 866, 1131, 1212, 1214, 1219, 1220, 1220, 1222, 1278, 1862, 1903, 1940, 1963, 1967, 2026, 2030, 2062, 2116, 2139, 2140, 2173, 2254, 2256, 2260, 2264, 2264, 2264, 2265, 2402, 2798, 2897, 3122, 3159, 3169, 4330, 4534, 4569, 4598, 4601, 5022, 5243, 5361, 5587, 5912, 6101, 6104, 6108, 6108, 6109, 6110, 6110, 6110, 6110, 6110, 6110, 6110, 6110, 6110, 6110, 6110, 6110, 6110, 6110, 6110, 6110, 6110, 6110, 6110, 6110, 6111, 6143, 6199, 6221, 6256, 6256, 6270, 6270, 6282, 6553, 6615, 6684, 6710, 6980, 7161, 7219, 7219, 7219, 7219, 7219, 7219, 7219, 7219, 7220, 7369, 7370, 7370, 7385, 7395, 7395, 7397, 7397, 7398, 7408, 7413, 7413, 7417, 7564, 7823, 7853, 7958, 7960, 7962, 8009, 8141, 8144, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8147, 8355, 8376, 8384, 8396, 8444, 8446, 8532, 8532, 8538, 8542, 8543, 8543, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8545, 8550, 8578, 8627, 8650, 8799, 9069, 9171, 9435, 9562, 9578, 9623, 9655, 9826, 9893, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9895, 10163, 10412, 10420, 10425, 10535, 10602, 10635, 10833, 11469, 11610, 11985, 12191, 12257, 12322, 12358, 12369, 12370, 12370, 12376, 12376, 12376, 12376, 12376, 12376, 12376, 12376, 12377, 12500, 12584, 12769, 12865, 12985, 13022, 13407, 13619, 13631, 13644, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13649, 13694, 13697, 13747, 13758, 13921, 14094, 14445, 14517, 14570, 14859, 15256, 15428, 15500, 15538, 15684, 15689, 15833, 15844, 16191, 16362, 16372, 16395, 16399, 16613, 16626, 16658, 16663, 16670, 16670, 16673, 16680, 16695, 16701, 16702, 16704, 16705, 16705, 16705, 16705, 16705, 16705, 16705, 16705, 16705, 16705, 16705, 16706, 16834, 16863, 17017, 17027, 17030, 17104, 17477, 17484, 17508, 17701, 18031, 18058, 18258, 18803, 18833, 18840, 18840, 18848, 18851, 18851, 18851, 18851, 18851, 18851, 18851, 18851, 18851, 18851, 18851, 18851, 18852, 18857, 18858, 18860, 18876, 18878, 18878, 18878, 18878, 18879, 18927, 19116, 19260, 19394, 19433, 19507, 19527, 19539, 19540, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19542, 19576, 19597, 19622, 19645, 21138, 21213, 21268, 21297, 21298, 21628, 21710, 21710, 21710, 21710, 21710, 21710, 21710, 21710, 21710, 21710, 21710, 21710, 21710, 21710, 21711, 21846, 21864, 22048, 22087, 22152, 22163, 22164, 22209, 22603, 22693, 22705, 22708, 22716, 22932, 23001, 23026, 23150, 23170, 23177, 23183, 23187, 23234, 23250, 23306, 23525, 23833, 23865, 23901, 24015, 24023, 24148, 24154, 24178, 24251, 24281, 24574, 24632, 24656, 24657, 24657, 24657, 24657, 24657, 24657, 24657, 24657, 24657, 24657, 24657, 24657, 24658, 24776, 25098, 25123, 25313, 25329, 25515, 25568, 25579, 25600, 25600, 25600, 25601, 25602, 25603, 25605, 25666, 25684, 25688, 25706, 25719, 25729, 25806, 25810, 25816, 25819, 25820, 25822, 25884, 26005, 26136, 26169, 26173, 26176, 26179, 26179, 26180, 26223, 26335, 26360, 26377, 26410, 26415, 27076, 28094, 28127, 28175, 28188, 28200, 28201, 28210, 28213, 28225, 28225, 28225, 28225, 28225, 28225, 28225, 28225, 28225, 28225, 28225, 28226, 28287, 28292, 28334, 28549, 28618, 28619, 28795, 28842, 28939, 28998, 29069, 29071, 29082, 29083, 29205, 29223, 29296, 29395, 29430, 29712, 29713, 29725, 29727, 29798, 29815, 29828, 29828, 29828, 29828, 29828, 29828, 29829, 29832, 30223, 30250, 30393, 30438, 30515, 30638, 30961, 30983, 30992, 31508, 31719, 32032, 32253, 32263, 32268, 32268, 32270, 32270, 32270, 32270, 32270, 32270, 32270, 32270, 32270, 32270, 32271, 32355, 32364, 32587, 32609, 32629, 32646, 32657, 32661, 32671, 32751, 32772, 32777, 32777, 32778, 32805, 33008, 33008, 33166, 33230, 33575, 33580, 33580, 33580, 33581, 33687, 34024, 34084, 34095, 34116, 34135, 34170, 34194, 34199, 34246, 34248, 34250, 34268, 34271, 34454, 34820, 34823, 34880, 34945, 35015, 35034, 35178, 35879, 35882, 35900, 36809, 37131, 37241, 37321, 37350, 37356, 37582, 38775, 38872, 38997, 39009, 39122, 39172, 39518, 40147, 40227, 40266, 40362, 40859, 41081, 41129, 41340, 41630, 41700, 41724, 42004, 42177, 42397, 42742, 42955, 43226, 44007, 44124, 44459, 44468, 44876, 44997, 45054, 45308, 45672, 45853, 45864, 45937, 45960, 46030, 46814, 47145, 47243, 47702, 47924, 48803, 48841, 48972, 49500, 49599, 49610, 49864, 49960, 49994, 50540, 50703, 51036, 51498, 51573, 52636, 52641, 52732, 53365, 53423, 53607, 53733, 53801, 54667, 54869, 55136, 55137, 55213, 55369, 55608, 56033, 56140, 56298, 56500, 56586, 56998, 57008, 57180, 57503, 57932, 58422, 58671, 58832, 59699, 60041, 60129, 60435, 60495, 60810, 60853, 61016, 61086, 61487, 61489, 61542, 61723, 61897, 62120, 62970, 63194, 63373, 63611, 63647, 63693, 63949, 64411, 64431, 64587, 65741, 65870, 66238, 66380, 66604, 67176, 67227, 67475, 67500, 67526, 67888, 67950, 68853, 69381, 69588, 69851, 69926, 70029, 70095, 70667, 70983, 71370, 71418, 71724, 71946, 72019, 72080, 72150, 72270, 72437, 72548, 72890, 73033, 73810, 73945, 73960, 74046, 74060, 74334, 74846, 75051, 75073, 75637, 75714, 75974, 75987, 76289, 76410, 76648, 76716, 77068, 77518, 78182, 78362, 78458, 78803, 78967, 79293, 79319, 79355, 79391, 79588, 79717, 79737, 79839, 79869, 80076, 80867, 81889, 82019, 82111, 82846, 82864, 83077, 83565, 83987, 84293, 84549, 84677, 84744, 84787, 84906, 85855, 85858, 86513, 86622, 86961, 87139, 87517, 87577, 87736, 87978, 88101, 88566, 88917, 89061, 89343, 89788, 90426, 90544, 90631, 90775, 90998, 91400, 91528, 91747, 92008, 92463, 92538, 92843, 92899, 93308, 93333, 93530, 93630, 93980, 94179, 94195, 94435, 94740, 94890, 94952, 95008, 95015, 95142, 95590, 95893, 96700, 96823, 96877, 97088, 97118, 97180, 97395, 97403, 97529, 97560, 97726, 97881, 98497, 98936, 99112, 99242, 99732, 99987, 100000], ys: List[int]=[5479, 51912, 91249, 59109, 597, 96042, 77506, 72009, 70333, 78565, 50582, 71505, 19282, 90001, 909, 17255, 24079, 5552, 85238, 95191, 63567, 78347, 43255, 26147, 51881, 11112, 36663, 84249, 80981, 9246, 48397, 41534, 91043, 87442, 99186, 60037, 76793, 71733, 8032, 54675, 34021, 77517, 43045, 61211, 51550, 59299, 78445, 62895, 60446, 30476, 77647, 70528, 37652, 73793, 97238, 73465, 44882, 20283, 11626, 10636, 84568, 67372, 37070, 94867, 65354, 25950, 44825, 27467, 35981, 59259, 94157, 31404, 72308, 82209, 81264, 19559, 26054, 82724, 96039, 92829, 57742, 48378, 69959, 94604, 70586, 64132, 22305, 90169, 85922, 73953, 79852, 53831, 33513, 61916, 11607, 74092, 62425, 37196, 41441, 27334, 75544, 29738, 76623, 10356, 51465, 68972, 3572, 96413, 33423, 11948, 21448, 4666, 10539, 22157, 43680, 17707, 54396, 35347, 27706, 14861, 61156, 8508, 94829, 81095, 98567, 15593, 9002, 36089, 44791, 49981, 41107, 75071, 98681, 88598, 846, 89274, 54228, 441, 45435, 42217, 10571, 81317, 89556, 48029, 12938, 86656, 98904, 10131, 70915, 41350, 97668, 88720, 6523, 31792, 85471, 22840, 2218, 29798, 37911, 17776, 36853, 35587, 20427, 65709, 35657, 5031, 51761, 78903, 36642, 63418, 54673, 90113, 56979, 66406, 42019, 72153, 21994, 97030, 92892, 8874, 17762, 50042, 16370, 77912, 97022, 88523, 9125, 59156, 87926, 28204, 38475, 13533, 15877, 34884, 70454, 3191, 3730, 30414, 18438, 88334, 49725, 84434, 69146, 20415, 21803, 29120, 93903, 32604, 20972, 47207, 48391, 93684, 17122, 64113, 46073, 32393, 83164, 91476, 73652, 42157, 60277, 74333, 24334, 62252, 24458, 49654, 6252, 54085, 70056, 48177, 16907, 58909, 24612, 32386, 50818, 79339, 80288, 33669, 35310, 84292, 33422, 67279, 48302, 5243, 75437, 14002, 82461, 20329, 70592, 36511, 30007, 30220, 81447, 2338, 60913, 11501, 88679, 5225, 56903, 82995, 17933, 32785, 41549, 53931, 4560, 53188, 33208, 85338, 9010, 37492, 10582, 8853, 10091, 50704, 96296, 67450, 59604, 40858, 69419, 80090, 1072, 52505, 12911, 90662, 78657, 50973, 67927, 506, 14580, 81228, 20373, 57539, 12405, 72896, 34161, 29420, 36073, 71476, 9742, 2682, 82334, 20193, 68356, 39242, 52153, 65775, 74357, 71032, 31715, 72280, 21257, 29025, 94767, 7248, 52994, 11999, 34409, 58129, 84883, 6461, 25834, 48246, 69117, 39763, 77726, 80214, 78683, 33072, 15180, 57777, 79214, 3596, 29027, 29947, 27915, 90266, 69219, 11660, 24743, 42239, 88613, 30722, 36514, 2569, 79077, 48275, 5107, 44255, 57810, 33595, 9726, 39233, 64920, 10897, 6717, 34484, 25526, 51463, 87441, 41821, 90907, 11334, 30092, 46873, 41522, 65120, 10244, 72154, 47157, 63637, 93590, 94555, 89271, 66965, 42503, 1795, 96733, 18254, 4580, 13195, 7839, 59266, 3880, 64939, 69459, 7862, 83592, 55345, 80654, 474, 8810, 25422, 51668, 59622, 53027, 20364, 82888, 82701, 22875, 86174, 52675, 89938, 27706, 55592, 80665, 43814, 4366, 17751, 37520, 79509, 83049, 21000, 29135, 98467, 50797, 8554, 30757, 79161, 15442, 15861, 97748, 25398, 23960, 45481, 93233, 8805, 59859, 61573, 61949, 87615, 88251, 91841, 22497, 12627, 28178, 33561, 14707, 23792, 57029, 93442, 67391, 39329, 9371, 66081, 70667, 65587, 55319, 92854, 76264, 44841, 86269, 23192, 17029, 22088, 88412, 38528, 78647, 983, 85180, 26820, 46003, 32382, 76183, 8450, 12292, 25845, 9980, 35504, 29574, 48918, 69495, 82365, 21658, 10361, 83654, 39342, 59982, 65518, 95813, 24625, 58650, 95840, 19070, 91472, 51223, 54422, 98669, 18701, 40261, 36935, 45625, 41458, 72415, 16388, 90552, 21796, 98844, 15044, 86133, 89572, 49893, 66264, 36481, 15765, 18074, 70849, 49934, 74581, 60499, 10313, 44696, 1352, 70633, 88438, 40336, 68347, 7546, 39812, 62616, 28850, 89518, 99583, 78771, 39246, 97556, 86394, 36786, 25567, 22158, 60199, 4780, 50695, 43125, 80569, 79482, 65747, 44735, 78077, 33801, 2781, 95801, 654, 46208, 6413, 46990, 70796, 23722, 28555, 57962, 89882, 13268, 62695, 31403, 78931, 50013, 34532, 78181, 97898, 994, 93453, 59767, 4081, 63595, 31091, 56666, 97982, 9254, 85824, 21561, 26909, 64422, 43749, 15606, 78969, 96272, 50195, 11633, 64167, 90665, 84923, 14971, 12455, 23130, 65312, 22030, 16825, 79900, 99796, 98325, 44450, 65140, 98634, 65320, 75101, 16208, 85717, 22762, 92982, 47203, 61290, 50155, 69629, 65836, 83860, 22227, 15480, 48578, 85896, 22579, 57546, 98093, 21809, 40192, 46972, 83701, 27129, 56360, 11132, 76190, 69751, 61751, 32143, 11157, 16153, 63077, 4545, 98775, 49777, 32598, 49399, 94664, 70293, 56720, 1724, 86514, 43422, 4318, 40163, 92852, 33534, 14389, 86319, 83793, 1296, 24044, 49617, 32496, 23085, 75934, 19405, 47207, 82846, 28347, 43290, 96190, 94898, 38686, 39677, 39858, 50592, 45222, 44982, 26570, 72626, 16802, 56610, 4106, 84446, 27510, 83796, 39824, 9728, 23136, 80623, 10616, 41329, 33966, 67021, 78992, 77049, 19746, 54831, 63723, 87804, 97048, 69505, 10563, 1646, 29492, 87433, 32965, 44559, 65060, 99215, 18957, 40238, 33409, 73834, 71659, 22594, 97688, 3159, 21209, 29238, 13017, 35838, 17260, 78934, 95150, 67201, 9917, 80671, 27623, 95589, 14455, 16333, 16320, 79970, 18319, 26281, 59731, 89297, 78155, 98609, 81255, 44130, 91155, 93216, 31604, 9925, 43133, 42087, 64021, 47882, 47712, 3657, 80565, 47940, 36863, 53620, 48692, 12453, 3671, 58216, 45092, 25913, 68515, 6640, 1510, 62030, 3831, 46312, 27428, 3274, 6579, 69632, 35974, 74334, 13448, 9136, 28917, 33645, 50683, 85195, 61726, 97482, 55526, 12300, 65732, 49511, 63266, 56606, 89357, 65956, 81211, 27267, 92998, 74990, 4302, 72485, 17469, 12719, 92044, 69288, 47051, 87665, 797, 28159, 53435, 67820, 69605, 76809, 41759, 45278, 35971, 93915, 74905, 792, 35239, 22499, 52206, 71724, 46131, 35584, 74099, 83308, 97509, 65375, 39424, 10072, 61505, 76476, 77330, 76104, 22857, 9492, 72392, 38463, 53027, 24232, 30768, 51627, 84534, 94607, 1707, 12479, 47738, 49264, 36418, 47746, 43997, 15351, 12928, 68542, 79088, 14248, 299, 33346, 31864, 51607, 33897, 96095, 82131, 83134, 75776, 28238, 13095, 12756, 1513, 8954, 55602, 27502, 92814, 77186, 46721, 63056, 56127, 59326, 71464, 85448, 26144, 48634, 61071, 27914, 73651, 45396, 62002, 19827, 57111, 70127, 43909, 54921, 67545, 88090, 56637, 96985, 24163, 97721, 7070, 89788, 66813, 4209, 7121, 14215, 32118, 31260, 4620, 76354, 56907, 87806, 97827, 53416, 92474, 13987, 44843, 8698, 17842, 74542, 72583, 85973, 17061, 9941, 51836, 4092, 36919, 7305, 92376, 5243, 12127, 86592, 20091, 62934, 3334, 49396, 75127, 38063, 61218, 99737, 98438, 92850, 85015, 19845, 49872, 29084, 51465, 90687, 91336, 98108, 54517, 48534, 74626, 94354, 48952, 76800, 92489, 10255, 47231, 88274, 1871, 82591, 99524, 86114, 97106, 25758, 56683, 1199, 13851, 40468, 44141, 49192, 28203, 850, 82919, 20788, 26857, 39106, 54566, 35080, 34137, 98274, 75591, 41982, 65435, 14836, 82170, 62843, 61482, 97770, 60394, 17947, 59559, 39701, 59126, 27177, 35134, 56335, 54791, 10850, 36231, 98656, 15382, 19736, 34254, 64839, 5499, 52397, 93255, 3362, 37548, 3134, 20575, 64173, 58506, 63970, 31594, 9546, 91106, 50721, 38064], thresh: int=55489539609):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=787, beta=987, xs=[0, 9, 53, 106, 122, 123, 154, 178, 193, 200, 232, 236, 237, 237, 237, 238, 866, 1131, 1212, 1214, 1219, 1220, 1220, 1222, 1278, 1862, 1903, 1940, 1963, 1967, 2026, 2030, 2062, 2116, 2139, 2140, 2173, 2254, 2256, 2260, 2264, 2264, 2264, 2265, 2402, 2798, 2897, 3122, 3159, 3169, 4330, 4534, 4569, 4598, 4601, 5022, 5243, 5361, 5587, 5912, 6101, 6104, 6108, 6108, 6109, 6110, 6110, 6110, 6110, 6110, 6110, 6110, 6110, 6110, 6110, 6110, 6110, 6110, 6110, 6110, 6110, 6110, 6110, 6110, 6110, 6111, 6143, 6199, 6221, 6256, 6256, 6270, 6270, 6282, 6553, 6615, 6684, 6710, 6980, 7161, 7219, 7219, 7219, 7219, 7219, 7219, 7219, 7219, 7220, 7369, 7370, 7370, 7385, 7395, 7395, 7397, 7397, 7398, 7408, 7413, 7413, 7417, 7564, 7823, 7853, 7958, 7960, 7962, 8009, 8141, 8144, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8146, 8147, 8355, 8376, 8384, 8396, 8444, 8446, 8532, 8532, 8538, 8542, 8543, 8543, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8544, 8545, 8550, 8578, 8627, 8650, 8799, 9069, 9171, 9435, 9562, 9578, 9623, 9655, 9826, 9893, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9894, 9895, 10163, 10412, 10420, 10425, 10535, 10602, 10635, 10833, 11469, 11610, 11985, 12191, 12257, 12322, 12358, 12369, 12370, 12370, 12376, 12376, 12376, 12376, 12376, 12376, 12376, 12376, 12377, 12500, 12584, 12769, 12865, 12985, 13022, 13407, 13619, 13631, 13644, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13648, 13649, 13694, 13697, 13747, 13758, 13921, 14094, 14445, 14517, 14570, 14859, 15256, 15428, 15500, 15538, 15684, 15689, 15833, 15844, 16191, 16362, 16372, 16395, 16399, 16613, 16626, 16658, 16663, 16670, 16670, 16673, 16680, 16695, 16701, 16702, 16704, 16705, 16705, 16705, 16705, 16705, 16705, 16705, 16705, 16705, 16705, 16705, 16706, 16834, 16863, 17017, 17027, 17030, 17104, 17477, 17484, 17508, 17701, 18031, 18058, 18258, 18803, 18833, 18840, 18840, 18848, 18851, 18851, 18851, 18851, 18851, 18851, 18851, 18851, 18851, 18851, 18851, 18851, 18852, 18857, 18858, 18860, 18876, 18878, 18878, 18878, 18878, 18879, 18927, 19116, 19260, 19394, 19433, 19507, 19527, 19539, 19540, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19541, 19542, 19576, 19597, 19622, 19645, 21138, 21213, 21268, 21297, 21298, 21628, 21710, 21710, 21710, 21710, 21710, 21710, 21710, 21710, 21710, 21710, 21710, 21710, 21710, 21710, 21711, 21846, 21864, 22048, 22087, 22152, 22163, 22164, 22209, 22603, 22693, 22705, 22708, 22716, 22932, 23001, 23026, 23150, 23170, 23177, 23183, 23187, 23234, 23250, 23306, 23525, 23833, 23865, 23901, 24015, 24023, 24148, 24154, 24178, 24251, 24281, 24574, 24632, 24656, 24657, 24657, 24657, 24657, 24657, 24657, 24657, 24657, 24657, 24657, 24657, 24657, 24658, 24776, 25098, 25123, 25313, 25329, 25515, 25568, 25579, 25600, 25600, 25600, 25601, 25602, 25603, 25605, 25666, 25684, 25688, 25706, 25719, 25729, 25806, 25810, 25816, 25819, 25820, 25822, 25884, 26005, 26136, 26169, 26173, 26176, 26179, 26179, 26180, 26223, 26335, 26360, 26377, 26410, 26415, 27076, 28094, 28127, 28175, 28188, 28200, 28201, 28210, 28213, 28225, 28225, 28225, 28225, 28225, 28225, 28225, 28225, 28225, 28225, 28225, 28226, 28287, 28292, 28334, 28549, 28618, 28619, 28795, 28842, 28939, 28998, 29069, 29071, 29082, 29083, 29205, 29223, 29296, 29395, 29430, 29712, 29713, 29725, 29727, 29798, 29815, 29828, 29828, 29828, 29828, 29828, 29828, 29829, 29832, 30223, 30250, 30393, 30438, 30515, 30638, 30961, 30983, 30992, 31508, 31719, 32032, 32253, 32263, 32268, 32268, 32270, 32270, 32270, 32270, 32270, 32270, 32270, 32270, 32270, 32270, 32271, 32355, 32364, 32587, 32609, 32629, 32646, 32657, 32661, 32671, 32751, 32772, 32777, 32777, 32778, 32805, 33008, 33008, 33166, 33230, 33575, 33580, 33580, 33580, 33581, 33687, 34024, 34084, 34095, 34116, 34135, 34170, 34194, 34199, 34246, 34248, 34250, 34268, 34271, 34454, 34820, 34823, 34880, 34945, 35015, 35034, 35178, 35879, 35882, 35900, 36809, 37131, 37241, 37321, 37350, 37356, 37582, 38775, 38872, 38997, 39009, 39122, 39172, 39518, 40147, 40227, 40266, 40362, 40859, 41081, 41129, 41340, 41630, 41700, 41724, 42004, 42177, 42397, 42742, 42955, 43226, 44007, 44124, 44459, 44468, 44876, 44997, 45054, 45308, 45672, 45853, 45864, 45937, 45960, 46030, 46814, 47145, 47243, 47702, 47924, 48803, 48841, 48972, 49500, 49599, 49610, 49864, 49960, 49994, 50540, 50703, 51036, 51498, 51573, 52636, 52641, 52732, 53365, 53423, 53607, 53733, 53801, 54667, 54869, 55136, 55137, 55213, 55369, 55608, 56033, 56140, 56298, 56500, 56586, 56998, 57008, 57180, 57503, 57932, 58422, 58671, 58832, 59699, 60041, 60129, 60435, 60495, 60810, 60853, 61016, 61086, 61487, 61489, 61542, 61723, 61897, 62120, 62970, 63194, 63373, 63611, 63647, 63693, 63949, 64411, 64431, 64587, 65741, 65870, 66238, 66380, 66604, 67176, 67227, 67475, 67500, 67526, 67888, 67950, 68853, 69381, 69588, 69851, 69926, 70029, 70095, 70667, 70983, 71370, 71418, 71724, 71946, 72019, 72080, 72150, 72270, 72437, 72548, 72890, 73033, 73810, 73945, 73960, 74046, 74060, 74334, 74846, 75051, 75073, 75637, 75714, 75974, 75987, 76289, 76410, 76648, 76716, 77068, 77518, 78182, 78362, 78458, 78803, 78967, 79293, 79319, 79355, 79391, 79588, 79717, 79737, 79839, 79869, 80076, 80867, 81889, 82019, 82111, 82846, 82864, 83077, 83565, 83987, 84293, 84549, 84677, 84744, 84787, 84906, 85855, 85858, 86513, 86622, 86961, 87139, 87517, 87577, 87736, 87978, 88101, 88566, 88917, 89061, 89343, 89788, 90426, 90544, 90631, 90775, 90998, 91400, 91528, 91747, 92008, 92463, 92538, 92843, 92899, 93308, 93333, 93530, 93630, 93980, 94179, 94195, 94435, 94740, 94890, 94952, 95008, 95015, 95142, 95590, 95893, 96700, 96823, 96877, 97088, 97118, 97180, 97395, 97403, 97529, 97560, 97726, 97881, 98497, 98936, 99112, 99242, 99732, 99987, 100000], ys=[5479, 51912, 91249, 59109, 597, 96042, 77506, 72009, 70333, 78565, 50582, 71505, 19282, 90001, 909, 17255, 24079, 5552, 85238, 95191, 63567, 78347, 43255, 26147, 51881, 11112, 36663, 84249, 80981, 9246, 48397, 41534, 91043, 87442, 99186, 60037, 76793, 71733, 8032, 54675, 34021, 77517, 43045, 61211, 51550, 59299, 78445, 62895, 60446, 30476, 77647, 70528, 37652, 73793, 97238, 73465, 44882, 20283, 11626, 10636, 84568, 67372, 37070, 94867, 65354, 25950, 44825, 27467, 35981, 59259, 94157, 31404, 72308, 82209, 81264, 19559, 26054, 82724, 96039, 92829, 57742, 48378, 69959, 94604, 70586, 64132, 22305, 90169, 85922, 73953, 79852, 53831, 33513, 61916, 11607, 74092, 62425, 37196, 41441, 27334, 75544, 29738, 76623, 10356, 51465, 68972, 3572, 96413, 33423, 11948, 21448, 4666, 10539, 22157, 43680, 17707, 54396, 35347, 27706, 14861, 61156, 8508, 94829, 81095, 98567, 15593, 9002, 36089, 44791, 49981, 41107, 75071, 98681, 88598, 846, 89274, 54228, 441, 45435, 42217, 10571, 81317, 89556, 48029, 12938, 86656, 98904, 10131, 70915, 41350, 97668, 88720, 6523, 31792, 85471, 22840, 2218, 29798, 37911, 17776, 36853, 35587, 20427, 65709, 35657, 5031, 51761, 78903, 36642, 63418, 54673, 90113, 56979, 66406, 42019, 72153, 21994, 97030, 92892, 8874, 17762, 50042, 16370, 77912, 97022, 88523, 9125, 59156, 87926, 28204, 38475, 13533, 15877, 34884, 70454, 3191, 3730, 30414, 18438, 88334, 49725, 84434, 69146, 20415, 21803, 29120, 93903, 32604, 20972, 47207, 48391, 93684, 17122, 64113, 46073, 32393, 83164, 91476, 73652, 42157, 60277, 74333, 24334, 62252, 24458, 49654, 6252, 54085, 70056, 48177, 16907, 58909, 24612, 32386, 50818, 79339, 80288, 33669, 35310, 84292, 33422, 67279, 48302, 5243, 75437, 14002, 82461, 20329, 70592, 36511, 30007, 30220, 81447, 2338, 60913, 11501, 88679, 5225, 56903, 82995, 17933, 32785, 41549, 53931, 4560, 53188, 33208, 85338, 9010, 37492, 10582, 8853, 10091, 50704, 96296, 67450, 59604, 40858, 69419, 80090, 1072, 52505, 12911, 90662, 78657, 50973, 67927, 506, 14580, 81228, 20373, 57539, 12405, 72896, 34161, 29420, 36073, 71476, 9742, 2682, 82334, 20193, 68356, 39242, 52153, 65775, 74357, 71032, 31715, 72280, 21257, 29025, 94767, 7248, 52994, 11999, 34409, 58129, 84883, 6461, 25834, 48246, 69117, 39763, 77726, 80214, 78683, 33072, 15180, 57777, 79214, 3596, 29027, 29947, 27915, 90266, 69219, 11660, 24743, 42239, 88613, 30722, 36514, 2569, 79077, 48275, 5107, 44255, 57810, 33595, 9726, 39233, 64920, 10897, 6717, 34484, 25526, 51463, 87441, 41821, 90907, 11334, 30092, 46873, 41522, 65120, 10244, 72154, 47157, 63637, 93590, 94555, 89271, 66965, 42503, 1795, 96733, 18254, 4580, 13195, 7839, 59266, 3880, 64939, 69459, 7862, 83592, 55345, 80654, 474, 8810, 25422, 51668, 59622, 53027, 20364, 82888, 82701, 22875, 86174, 52675, 89938, 27706, 55592, 80665, 43814, 4366, 17751, 37520, 79509, 83049, 21000, 29135, 98467, 50797, 8554, 30757, 79161, 15442, 15861, 97748, 25398, 23960, 45481, 93233, 8805, 59859, 61573, 61949, 87615, 88251, 91841, 22497, 12627, 28178, 33561, 14707, 23792, 57029, 93442, 67391, 39329, 9371, 66081, 70667, 65587, 55319, 92854, 76264, 44841, 86269, 23192, 17029, 22088, 88412, 38528, 78647, 983, 85180, 26820, 46003, 32382, 76183, 8450, 12292, 25845, 9980, 35504, 29574, 48918, 69495, 82365, 21658, 10361, 83654, 39342, 59982, 65518, 95813, 24625, 58650, 95840, 19070, 91472, 51223, 54422, 98669, 18701, 40261, 36935, 45625, 41458, 72415, 16388, 90552, 21796, 98844, 15044, 86133, 89572, 49893, 66264, 36481, 15765, 18074, 70849, 49934, 74581, 60499, 10313, 44696, 1352, 70633, 88438, 40336, 68347, 7546, 39812, 62616, 28850, 89518, 99583, 78771, 39246, 97556, 86394, 36786, 25567, 22158, 60199, 4780, 50695, 43125, 80569, 79482, 65747, 44735, 78077, 33801, 2781, 95801, 654, 46208, 6413, 46990, 70796, 23722, 28555, 57962, 89882, 13268, 62695, 31403, 78931, 50013, 34532, 78181, 97898, 994, 93453, 59767, 4081, 63595, 31091, 56666, 97982, 9254, 85824, 21561, 26909, 64422, 43749, 15606, 78969, 96272, 50195, 11633, 64167, 90665, 84923, 14971, 12455, 23130, 65312, 22030, 16825, 79900, 99796, 98325, 44450, 65140, 98634, 65320, 75101, 16208, 85717, 22762, 92982, 47203, 61290, 50155, 69629, 65836, 83860, 22227, 15480, 48578, 85896, 22579, 57546, 98093, 21809, 40192, 46972, 83701, 27129, 56360, 11132, 76190, 69751, 61751, 32143, 11157, 16153, 63077, 4545, 98775, 49777, 32598, 49399, 94664, 70293, 56720, 1724, 86514, 43422, 4318, 40163, 92852, 33534, 14389, 86319, 83793, 1296, 24044, 49617, 32496, 23085, 75934, 19405, 47207, 82846, 28347, 43290, 96190, 94898, 38686, 39677, 39858, 50592, 45222, 44982, 26570, 72626, 16802, 56610, 4106, 84446, 27510, 83796, 39824, 9728, 23136, 80623, 10616, 41329, 33966, 67021, 78992, 77049, 19746, 54831, 63723, 87804, 97048, 69505, 10563, 1646, 29492, 87433, 32965, 44559, 65060, 99215, 18957, 40238, 33409, 73834, 71659, 22594, 97688, 3159, 21209, 29238, 13017, 35838, 17260, 78934, 95150, 67201, 9917, 80671, 27623, 95589, 14455, 16333, 16320, 79970, 18319, 26281, 59731, 89297, 78155, 98609, 81255, 44130, 91155, 93216, 31604, 9925, 43133, 42087, 64021, 47882, 47712, 3657, 80565, 47940, 36863, 53620, 48692, 12453, 3671, 58216, 45092, 25913, 68515, 6640, 1510, 62030, 3831, 46312, 27428, 3274, 6579, 69632, 35974, 74334, 13448, 9136, 28917, 33645, 50683, 85195, 61726, 97482, 55526, 12300, 65732, 49511, 63266, 56606, 89357, 65956, 81211, 27267, 92998, 74990, 4302, 72485, 17469, 12719, 92044, 69288, 47051, 87665, 797, 28159, 53435, 67820, 69605, 76809, 41759, 45278, 35971, 93915, 74905, 792, 35239, 22499, 52206, 71724, 46131, 35584, 74099, 83308, 97509, 65375, 39424, 10072, 61505, 76476, 77330, 76104, 22857, 9492, 72392, 38463, 53027, 24232, 30768, 51627, 84534, 94607, 1707, 12479, 47738, 49264, 36418, 47746, 43997, 15351, 12928, 68542, 79088, 14248, 299, 33346, 31864, 51607, 33897, 96095, 82131, 83134, 75776, 28238, 13095, 12756, 1513, 8954, 55602, 27502, 92814, 77186, 46721, 63056, 56127, 59326, 71464, 85448, 26144, 48634, 61071, 27914, 73651, 45396, 62002, 19827, 57111, 70127, 43909, 54921, 67545, 88090, 56637, 96985, 24163, 97721, 7070, 89788, 66813, 4209, 7121, 14215, 32118, 31260, 4620, 76354, 56907, 87806, 97827, 53416, 92474, 13987, 44843, 8698, 17842, 74542, 72583, 85973, 17061, 9941, 51836, 4092, 36919, 7305, 92376, 5243, 12127, 86592, 20091, 62934, 3334, 49396, 75127, 38063, 61218, 99737, 98438, 92850, 85015, 19845, 49872, 29084, 51465, 90687, 91336, 98108, 54517, 48534, 74626, 94354, 48952, 76800, 92489, 10255, 47231, 88274, 1871, 82591, 99524, 86114, 97106, 25758, 56683, 1199, 13851, 40468, 44141, 49192, 28203, 850, 82919, 20788, 26857, 39106, 54566, 35080, 34137, 98274, 75591, 41982, 65435, 14836, 82170, 62843, 61482, 97770, 60394, 17947, 59559, 39701, 59126, 27177, 35134, 56335, 54791, 10850, 36231, 98656, 15382, 19736, 34254, 64839, 5499, 52397, 93255, 3362, 37548, 3134, 20575, 64173, 58506, 63970, 31594, 9546, 91106, 50721, 38064], thresh=55489539609):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_74",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=39, beta: int=70, xs: List[int]=[0, 2349, 4228, 6020, 6058, 6068, 6089, 6093, 6101, 6101, 6101, 6101, 6101, 6101, 6102, 6291, 6842, 7122, 7122, 7122, 7122, 7122, 7122, 7122, 7122, 7122, 7123, 8791, 10373, 18607, 22646, 24614, 25315, 26621, 29060, 30704, 33823, 35312, 39072, 42909, 50474, 53694, 70211, 74551, 78462, 87734, 88225, 89125, 90039, 90130, 90215, 90268, 90289, 90289, 90289, 90289, 90289, 90289, 90289, 90290, 96126, 96415, 96907, 96927, 97176, 97177, 97179, 97191, 97212, 97215, 97233, 97245, 97250, 97250, 97251, 97251, 97251, 97251, 97251, 97251, 97251, 97251, 97251, 97251, 97252, 99205, 100000], ys: List[int]=[64778, 94336, 77762, 66065, 70409, 2907, 69646, 93757, 78992, 23461, 23422, 24168, 77866, 51608, 1027, 80498, 3833, 66743, 32583, 19141, 90943, 24003, 15896, 81881, 32580, 12732, 71244, 67793, 64169, 54493, 7890, 66329, 86713, 76316, 4077, 33975, 57815, 83871, 1630, 47636, 75269, 13732, 64670, 55304, 53899, 83830, 36650, 42072, 45011, 64353, 52288, 97059, 36220, 93912, 35001, 36245, 56066, 28317, 28455, 35491, 3376, 80774, 85137, 76871, 75478, 20181, 61603, 61275, 88812, 54907, 44854, 11331, 45445, 16355, 66232, 28866, 63141, 880, 71377, 89578, 37373, 58893, 91804, 86048, 75609, 7927, 32709], thresh: int=46192611825):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=39, beta=70, xs=[0, 2349, 4228, 6020, 6058, 6068, 6089, 6093, 6101, 6101, 6101, 6101, 6101, 6101, 6102, 6291, 6842, 7122, 7122, 7122, 7122, 7122, 7122, 7122, 7122, 7122, 7123, 8791, 10373, 18607, 22646, 24614, 25315, 26621, 29060, 30704, 33823, 35312, 39072, 42909, 50474, 53694, 70211, 74551, 78462, 87734, 88225, 89125, 90039, 90130, 90215, 90268, 90289, 90289, 90289, 90289, 90289, 90289, 90289, 90290, 96126, 96415, 96907, 96927, 97176, 97177, 97179, 97191, 97212, 97215, 97233, 97245, 97250, 97250, 97251, 97251, 97251, 97251, 97251, 97251, 97251, 97251, 97251, 97251, 97252, 99205, 100000], ys=[64778, 94336, 77762, 66065, 70409, 2907, 69646, 93757, 78992, 23461, 23422, 24168, 77866, 51608, 1027, 80498, 3833, 66743, 32583, 19141, 90943, 24003, 15896, 81881, 32580, 12732, 71244, 67793, 64169, 54493, 7890, 66329, 86713, 76316, 4077, 33975, 57815, 83871, 1630, 47636, 75269, 13732, 64670, 55304, 53899, 83830, 36650, 42072, 45011, 64353, 52288, 97059, 36220, 93912, 35001, 36245, 56066, 28317, 28455, 35491, 3376, 80774, 85137, 76871, 75478, 20181, 61603, 61275, 88812, 54907, 44854, 11331, 45445, 16355, 66232, 28866, 63141, 880, 71377, 89578, 37373, 58893, 91804, 86048, 75609, 7927, 32709], thresh=46192611825):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_75",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=34, beta: int=12, xs: List[int]=[0, 271, 290, 291, 293, 970, 978, 1041, 1057, 1151, 1176, 1180, 1185, 1189, 1189, 1189, 1192, 2231, 4944, 8334, 9690, 14580, 22844, 23602, 26867, 30386, 34146, 39677, 40034, 44703, 47275, 47574, 47799, 56007, 64750, 65059, 78640, 79842, 80334, 84568, 85241, 87286, 88195, 88596, 89268, 90315, 90772, 94047, 100000], ys: List[int]=[38890, 49237, 82920, 76524, 73166, 39191, 26056, 43728, 19838, 58696, 46508, 45235, 46307, 35759, 21568, 25301, 62668, 9269, 57665, 55370, 29457, 73710, 69513, 36460, 93993, 77608, 55983, 68452, 41116, 2333, 45218, 73064, 54620, 17573, 43966, 74034, 25595, 45725, 74632, 5838, 68514, 62012, 92412, 10914, 46366, 73228, 12522, 30228, 83264], thresh: int=7417337754):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=34, beta=12, xs=[0, 271, 290, 291, 293, 970, 978, 1041, 1057, 1151, 1176, 1180, 1185, 1189, 1189, 1189, 1192, 2231, 4944, 8334, 9690, 14580, 22844, 23602, 26867, 30386, 34146, 39677, 40034, 44703, 47275, 47574, 47799, 56007, 64750, 65059, 78640, 79842, 80334, 84568, 85241, 87286, 88195, 88596, 89268, 90315, 90772, 94047, 100000], ys=[38890, 49237, 82920, 76524, 73166, 39191, 26056, 43728, 19838, 58696, 46508, 45235, 46307, 35759, 21568, 25301, 62668, 9269, 57665, 55370, 29457, 73710, 69513, 36460, 93993, 77608, 55983, 68452, 41116, 2333, 45218, 73064, 54620, 17573, 43966, 74034, 25595, 45725, 74632, 5838, 68514, 62012, 92412, 10914, 46366, 73228, 12522, 30228, 83264], thresh=7417337754):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_76",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=0, beta: int=8, xs: List[int]=[0, 18878, 77333, 91897, 93722, 95870, 100000], ys: List[int]=[27385, 82691, 35425, 33746, 43313, 33270, 27167], thresh: int=49740035312):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=0, beta=8, xs=[0, 18878, 77333, 91897, 93722, 95870, 100000], ys=[27385, 82691, 35425, 33746, 43313, 33270, 27167], thresh=49740035312):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_77",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=3, beta: int=4, xs: List[int]=[0, 9026, 10762, 24563, 57542, 100000], ys: List[int]=[50597, 45783, 38180, 57031, 30450, 42423], thresh: int=12661991320):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=3, beta=4, xs=[0, 9026, 10762, 24563, 57542, 100000], ys=[50597, 45783, 38180, 57031, 30450, 42423], thresh=12661991320):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_78",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=37, beta: int=32, xs: List[int]=[0, 1937, 6368, 6415, 6437, 7091, 8139, 8409, 8497, 8521, 10732, 11731, 11783, 13790, 15119, 15137, 15142, 15142, 15142, 15142, 15142, 15142, 15142, 15142, 15143, 15670, 23675, 25159, 28082, 29359, 30271, 30670, 30781, 30842, 30845, 30849, 36031, 42126, 42827, 47670, 47846, 47873, 66737, 75147, 78006, 83093, 93717, 96633, 100000], ys: List[int]=[87055, 80343, 41705, 12679, 72512, 95271, 92813, 60357, 68883, 80430, 56550, 15618, 51819, 86422, 85384, 63250, 37597, 68993, 9228, 40493, 34308, 48685, 76205, 27558, 25523, 75524, 16522, 2669, 11076, 59360, 92441, 7904, 39789, 29636, 55576, 69726, 69534, 49995, 95435, 90827, 60540, 57744, 39266, 87380, 88742, 91178, 70039, 73098, 77669], thresh: int=25508723208):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=37, beta=32, xs=[0, 1937, 6368, 6415, 6437, 7091, 8139, 8409, 8497, 8521, 10732, 11731, 11783, 13790, 15119, 15137, 15142, 15142, 15142, 15142, 15142, 15142, 15142, 15142, 15143, 15670, 23675, 25159, 28082, 29359, 30271, 30670, 30781, 30842, 30845, 30849, 36031, 42126, 42827, 47670, 47846, 47873, 66737, 75147, 78006, 83093, 93717, 96633, 100000], ys=[87055, 80343, 41705, 12679, 72512, 95271, 92813, 60357, 68883, 80430, 56550, 15618, 51819, 86422, 85384, 63250, 37597, 68993, 9228, 40493, 34308, 48685, 76205, 27558, 25523, 75524, 16522, 2669, 11076, 59360, 92441, 7904, 39789, 29636, 55576, 69726, 69534, 49995, 95435, 90827, 60540, 57744, 39266, 87380, 88742, 91178, 70039, 73098, 77669], thresh=25508723208):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_79",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=3, beta: int=4, xs: List[int]=[0, 46561, 65973, 66906, 67062, 67062, 67062, 67063, 100000], ys: List[int]=[33499, 18894, 829, 12040, 25378, 25234, 8621, 52971, 52877], thresh: int=14523260958):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=3, beta=4, xs=[0, 46561, 65973, 66906, 67062, 67062, 67062, 67063, 100000], ys=[33499, 18894, 829, 12040, 25378, 25234, 8621, 52971, 52877], thresh=14523260958):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_80",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=5, beta: int=3, xs: List[int]=[0, 17, 26537, 59005, 69931, 88595, 100000], ys: List[int]=[84648, 16336, 61525, 14616, 13873, 6340, 25460], thresh: int=7068220340):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=5, beta=3, xs=[0, 17, 26537, 59005, 69931, 88595, 100000], ys=[84648, 16336, 61525, 14616, 13873, 6340, 25460], thresh=7068220340):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_81",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=3, beta: int=36, xs: List[int]=[0, 2113, 6010, 7395, 7582, 8351, 11307, 11464, 11478, 13509, 22791, 28381, 31048, 37025, 75533, 79671, 87013, 89058, 89446, 89875, 90580, 91157, 93968, 95905, 96690, 99345, 99776, 99915, 100000], ys: List[int]=[67741, 20594, 40286, 52132, 66974, 72262, 81816, 72036, 29945, 21537, 72350, 7185, 58680, 80959, 56401, 91508, 34189, 22225, 12235, 46914, 36479, 60836, 32035, 73398, 35860, 68455, 72158, 29227, 43362], thresh: int=80443427892):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=3, beta=36, xs=[0, 2113, 6010, 7395, 7582, 8351, 11307, 11464, 11478, 13509, 22791, 28381, 31048, 37025, 75533, 79671, 87013, 89058, 89446, 89875, 90580, 91157, 93968, 95905, 96690, 99345, 99776, 99915, 100000], ys=[67741, 20594, 40286, 52132, 66974, 72262, 81816, 72036, 29945, 21537, 72350, 7185, 58680, 80959, 56401, 91508, 34189, 22225, 12235, 46914, 36479, 60836, 32035, 73398, 35860, 68455, 72158, 29227, 43362], thresh=80443427892):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_82",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=4, beta: int=83, xs: List[int]=[0, 129, 224, 288, 288, 288, 289, 289, 290, 3235, 4720, 5180, 5285, 6489, 6737, 8335, 8610, 9040, 9133, 9385, 9425, 9426, 9426, 9427, 9431, 9431, 9433, 9433, 9433, 9433, 9433, 9434, 9931, 10448, 10657, 10940, 10951, 10980, 10987, 11979, 12879, 13781, 14004, 14542, 14574, 14612, 14712, 15092, 15114, 15123, 15676, 16221, 16799, 17292, 17645, 17648, 17649, 17649, 17650, 22233, 23287, 23846, 25179, 25873, 27369, 28400, 32451, 35505, 41356, 44026, 45294, 46720, 47657, 49467, 49490, 54261, 55838, 57257, 57620, 58935, 58988, 63623, 64077, 65209, 65238, 65970, 68544, 70122, 70388, 73722, 78282, 84407, 86396, 86856, 86921, 91966, 94462, 98250, 100000], ys: List[int]=[36649, 41417, 69424, 29361, 8826, 44752, 52604, 50607, 71211, 97496, 81096, 28176, 43633, 67193, 29026, 50942, 19208, 61086, 39812, 30504, 51607, 17936, 9347, 38972, 84934, 88325, 28584, 45512, 34657, 52602, 43314, 20598, 69259, 89127, 78641, 88493, 68100, 49626, 89164, 11422, 53838, 97601, 83512, 53302, 58906, 53977, 49538, 50008, 36408, 75842, 26516, 24666, 25889, 60354, 13942, 2084, 13246, 96452, 62701, 45640, 1003, 88481, 11896, 2045, 97531, 96277, 1260, 49258, 54941, 47514, 79481, 5177, 48614, 33657, 68786, 27648, 84315, 90066, 74349, 74383, 64595, 45770, 86051, 77788, 85996, 35431, 39544, 36742, 41002, 36799, 6379, 94875, 70522, 1577, 42055, 78042, 6202, 85199, 82045], thresh: int=25576100038):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=4, beta=83, xs=[0, 129, 224, 288, 288, 288, 289, 289, 290, 3235, 4720, 5180, 5285, 6489, 6737, 8335, 8610, 9040, 9133, 9385, 9425, 9426, 9426, 9427, 9431, 9431, 9433, 9433, 9433, 9433, 9433, 9434, 9931, 10448, 10657, 10940, 10951, 10980, 10987, 11979, 12879, 13781, 14004, 14542, 14574, 14612, 14712, 15092, 15114, 15123, 15676, 16221, 16799, 17292, 17645, 17648, 17649, 17649, 17650, 22233, 23287, 23846, 25179, 25873, 27369, 28400, 32451, 35505, 41356, 44026, 45294, 46720, 47657, 49467, 49490, 54261, 55838, 57257, 57620, 58935, 58988, 63623, 64077, 65209, 65238, 65970, 68544, 70122, 70388, 73722, 78282, 84407, 86396, 86856, 86921, 91966, 94462, 98250, 100000], ys=[36649, 41417, 69424, 29361, 8826, 44752, 52604, 50607, 71211, 97496, 81096, 28176, 43633, 67193, 29026, 50942, 19208, 61086, 39812, 30504, 51607, 17936, 9347, 38972, 84934, 88325, 28584, 45512, 34657, 52602, 43314, 20598, 69259, 89127, 78641, 88493, 68100, 49626, 89164, 11422, 53838, 97601, 83512, 53302, 58906, 53977, 49538, 50008, 36408, 75842, 26516, 24666, 25889, 60354, 13942, 2084, 13246, 96452, 62701, 45640, 1003, 88481, 11896, 2045, 97531, 96277, 1260, 49258, 54941, 47514, 79481, 5177, 48614, 33657, 68786, 27648, 84315, 90066, 74349, 74383, 64595, 45770, 86051, 77788, 85996, 35431, 39544, 36742, 41002, 36799, 6379, 94875, 70522, 1577, 42055, 78042, 6202, 85199, 82045], thresh=25576100038):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_83",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=15, beta: int=41, xs: List[int]=[0, 2622, 2718, 5628, 5968, 6439, 6725, 7015, 7910, 7980, 9178, 9513, 11288, 12134, 12271, 20052, 23854, 24175, 25349, 26107, 26126, 26126, 26131, 26131, 26134, 26135, 26135, 26135, 26136, 30491, 31451, 32469, 37364, 37556, 37728, 38149, 38213, 39464, 39918, 39973, 41414, 60070, 64350, 64432, 73518, 79188, 82691, 86004, 100000], ys: List[int]=[86383, 22385, 22103, 62713, 36261, 13200, 67532, 73346, 79836, 139, 79363, 28217, 11950, 86389, 68220, 84043, 37649, 96281, 10307, 64365, 22163, 56303, 80420, 36769, 62965, 20056, 18365, 94689, 5563, 64774, 93968, 34678, 31465, 9204, 19428, 64245, 14691, 24097, 31535, 78487, 89538, 45221, 66513, 64570, 51066, 55414, 31792, 4166, 56536], thresh: int=34813108249):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=15, beta=41, xs=[0, 2622, 2718, 5628, 5968, 6439, 6725, 7015, 7910, 7980, 9178, 9513, 11288, 12134, 12271, 20052, 23854, 24175, 25349, 26107, 26126, 26126, 26131, 26131, 26134, 26135, 26135, 26135, 26136, 30491, 31451, 32469, 37364, 37556, 37728, 38149, 38213, 39464, 39918, 39973, 41414, 60070, 64350, 64432, 73518, 79188, 82691, 86004, 100000], ys=[86383, 22385, 22103, 62713, 36261, 13200, 67532, 73346, 79836, 139, 79363, 28217, 11950, 86389, 68220, 84043, 37649, 96281, 10307, 64365, 22163, 56303, 80420, 36769, 62965, 20056, 18365, 94689, 5563, 64774, 93968, 34678, 31465, 9204, 19428, 64245, 14691, 24097, 31535, 78487, 89538, 45221, 66513, 64570, 51066, 55414, 31792, 4166, 56536], thresh=34813108249):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_84",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=349, beta: int=484, xs: List[int]=[0, 793, 2503, 2534, 2551, 5000, 5280, 5570, 5952, 7246, 7882, 9055, 9183, 10057, 10627, 12753, 12942, 12972, 14141, 14313, 14555, 14685, 15843, 15927, 15932, 15945, 15958, 15960, 15960, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15962, 23045, 25168, 26383, 28945, 29231, 29243, 29269, 29351, 29373, 29387, 29556, 29601, 31087, 31457, 31516, 31814, 31829, 31849, 32176, 32958, 38413, 38533, 38550, 44036, 44169, 44836, 46153, 48481, 49372, 52092, 53514, 53892, 53979, 53993, 54136, 59812, 59987, 60083, 60164, 60225, 60292, 60341, 60506, 62920, 63112, 63528, 63786, 63844, 63849, 63849, 63849, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63851, 65959, 66030, 66682, 68041, 69065, 69071, 69098, 69439, 70445, 70861, 71127, 71133, 71133, 71135, 71135, 71135, 71135, 71135, 71135, 71135, 71135, 71135, 71135, 71136, 71562, 71665, 71720, 72198, 72677, 73461, 74634, 74763, 75461, 75523, 75535, 75547, 75554, 75557, 76098, 76309, 76324, 81172, 81619, 82303, 82593, 82857, 82884, 85699, 88346, 90974, 90981, 91879, 93548, 93740, 93831, 94128, 94130, 94130, 94130, 94130, 94130, 94130, 94130, 94130, 94130, 94130, 94130, 94130, 94130, 94131, 94749, 95613, 95617, 95626, 95628, 95629, 95630, 95631, 95632, 95978, 96013, 96022, 96025, 98696, 100000], ys: List[int]=[52731, 38521, 62934, 25925, 1842, 61129, 93296, 7449, 36619, 9831, 21653, 67831, 37317, 50566, 59432, 15198, 55622, 6031, 70986, 57298, 50145, 79045, 29883, 92124, 53700, 12957, 39852, 15237, 67644, 29879, 23799, 37621, 86563, 23588, 67301, 80496, 41425, 42599, 63182, 72108, 98025, 47711, 5469, 58402, 1870, 1677, 41279, 92654, 19041, 9126, 36156, 77166, 86436, 88528, 69254, 6188, 54101, 83728, 23696, 45789, 92990, 2047, 84588, 90252, 63947, 85817, 62039, 60342, 59338, 21587, 96734, 64301, 67917, 17437, 21806, 98984, 73490, 69758, 96391, 40327, 91577, 97093, 92755, 52038, 19072, 7488, 86894, 23138, 66799, 1393, 9017, 464, 20059, 32607, 91932, 32593, 2345, 96320, 63208, 46371, 92101, 4347, 43518, 23838, 49732, 47990, 94212, 39012, 63802, 13280, 13768, 43009, 6909, 14291, 56002, 20954, 90300, 94838, 65427, 47482, 85119, 27427, 50507, 59974, 54734, 75987, 56763, 86799, 33352, 32522, 49279, 57239, 17810, 9485, 8114, 38789, 67578, 83984, 69564, 56529, 18612, 79130, 4134, 11316, 76649, 5165, 82695, 35820, 46561, 78546, 88683, 29125, 11804, 77069, 8669, 91793, 79686, 62162, 44425, 13622, 41250, 1091, 16575, 46316, 2081, 83217, 54851, 26111, 20397, 68615, 49620, 98709, 98137, 56317, 1149, 71740, 97316, 48723, 7788, 67268, 5960, 31129, 21573, 31584, 43731, 48717, 106, 2315, 70945, 46602, 51000, 64837, 93084, 183, 96425, 28612, 42618, 71298, 73399, 93169, 85801, 17571, 9299, 28056, 29990, 54331, 6661, 75680, 68072, 21492, 32942, 50057, 22385, 31712, 37103, 73407, 15593, 16379, 22056, 2463, 91568, 48890, 71647, 90432, 22171, 52120, 30829, 28553, 4028, 24118, 40630, 56592, 14471, 14674, 87124, 94860, 78912, 43364, 60351, 13437, 78612, 13875, 13539, 70435], thresh: int=135689103232):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=349, beta=484, xs=[0, 793, 2503, 2534, 2551, 5000, 5280, 5570, 5952, 7246, 7882, 9055, 9183, 10057, 10627, 12753, 12942, 12972, 14141, 14313, 14555, 14685, 15843, 15927, 15932, 15945, 15958, 15960, 15960, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15961, 15962, 23045, 25168, 26383, 28945, 29231, 29243, 29269, 29351, 29373, 29387, 29556, 29601, 31087, 31457, 31516, 31814, 31829, 31849, 32176, 32958, 38413, 38533, 38550, 44036, 44169, 44836, 46153, 48481, 49372, 52092, 53514, 53892, 53979, 53993, 54136, 59812, 59987, 60083, 60164, 60225, 60292, 60341, 60506, 62920, 63112, 63528, 63786, 63844, 63849, 63849, 63849, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63850, 63851, 65959, 66030, 66682, 68041, 69065, 69071, 69098, 69439, 70445, 70861, 71127, 71133, 71133, 71135, 71135, 71135, 71135, 71135, 71135, 71135, 71135, 71135, 71135, 71136, 71562, 71665, 71720, 72198, 72677, 73461, 74634, 74763, 75461, 75523, 75535, 75547, 75554, 75557, 76098, 76309, 76324, 81172, 81619, 82303, 82593, 82857, 82884, 85699, 88346, 90974, 90981, 91879, 93548, 93740, 93831, 94128, 94130, 94130, 94130, 94130, 94130, 94130, 94130, 94130, 94130, 94130, 94130, 94130, 94130, 94131, 94749, 95613, 95617, 95626, 95628, 95629, 95630, 95631, 95632, 95978, 96013, 96022, 96025, 98696, 100000], ys=[52731, 38521, 62934, 25925, 1842, 61129, 93296, 7449, 36619, 9831, 21653, 67831, 37317, 50566, 59432, 15198, 55622, 6031, 70986, 57298, 50145, 79045, 29883, 92124, 53700, 12957, 39852, 15237, 67644, 29879, 23799, 37621, 86563, 23588, 67301, 80496, 41425, 42599, 63182, 72108, 98025, 47711, 5469, 58402, 1870, 1677, 41279, 92654, 19041, 9126, 36156, 77166, 86436, 88528, 69254, 6188, 54101, 83728, 23696, 45789, 92990, 2047, 84588, 90252, 63947, 85817, 62039, 60342, 59338, 21587, 96734, 64301, 67917, 17437, 21806, 98984, 73490, 69758, 96391, 40327, 91577, 97093, 92755, 52038, 19072, 7488, 86894, 23138, 66799, 1393, 9017, 464, 20059, 32607, 91932, 32593, 2345, 96320, 63208, 46371, 92101, 4347, 43518, 23838, 49732, 47990, 94212, 39012, 63802, 13280, 13768, 43009, 6909, 14291, 56002, 20954, 90300, 94838, 65427, 47482, 85119, 27427, 50507, 59974, 54734, 75987, 56763, 86799, 33352, 32522, 49279, 57239, 17810, 9485, 8114, 38789, 67578, 83984, 69564, 56529, 18612, 79130, 4134, 11316, 76649, 5165, 82695, 35820, 46561, 78546, 88683, 29125, 11804, 77069, 8669, 91793, 79686, 62162, 44425, 13622, 41250, 1091, 16575, 46316, 2081, 83217, 54851, 26111, 20397, 68615, 49620, 98709, 98137, 56317, 1149, 71740, 97316, 48723, 7788, 67268, 5960, 31129, 21573, 31584, 43731, 48717, 106, 2315, 70945, 46602, 51000, 64837, 93084, 183, 96425, 28612, 42618, 71298, 73399, 93169, 85801, 17571, 9299, 28056, 29990, 54331, 6661, 75680, 68072, 21492, 32942, 50057, 22385, 31712, 37103, 73407, 15593, 16379, 22056, 2463, 91568, 48890, 71647, 90432, 22171, 52120, 30829, 28553, 4028, 24118, 40630, 56592, 14471, 14674, 87124, 94860, 78912, 43364, 60351, 13437, 78612, 13875, 13539, 70435], thresh=135689103232):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_85",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=3, beta: int=2, xs: List[int]=[0, 38713, 60209, 72204, 100000], ys: List[int]=[5646, 1584, 67498, 49522, 40085], thresh: int=5755551047):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=3, beta=2, xs=[0, 38713, 60209, 72204, 100000], ys=[5646, 1584, 67498, 49522, 40085], thresh=5755551047):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_86",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=34, beta: int=5, xs: List[int]=[0, 5481, 6329, 6344, 6494, 6503, 6542, 6565, 6577, 6577, 6578, 6581, 6581, 6581, 6581, 6581, 6581, 6581, 6581, 6582, 11060, 11872, 18611, 18939, 21416, 26471, 27195, 28024, 28610, 28688, 28691, 28695, 28699, 28699, 28699, 28699, 28699, 28699, 28699, 28699, 28699, 28700, 37822, 40385, 41736, 41850, 44807, 87511, 100000], ys: List[int]=[88107, 56803, 82619, 93468, 72601, 83504, 39496, 80666, 92274, 63835, 29425, 22556, 57287, 44479, 9157, 29471, 11941, 69921, 38795, 87311, 77918, 33967, 57570, 49306, 88462, 3307, 5727, 90401, 94499, 14287, 12848, 13897, 2977, 17014, 18710, 19077, 87982, 67066, 91660, 49322, 64198, 30375, 74207, 89955, 35428, 65, 61676, 72777, 44818], thresh: int=11078204384):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=34, beta=5, xs=[0, 5481, 6329, 6344, 6494, 6503, 6542, 6565, 6577, 6577, 6578, 6581, 6581, 6581, 6581, 6581, 6581, 6581, 6581, 6582, 11060, 11872, 18611, 18939, 21416, 26471, 27195, 28024, 28610, 28688, 28691, 28695, 28699, 28699, 28699, 28699, 28699, 28699, 28699, 28699, 28699, 28700, 37822, 40385, 41736, 41850, 44807, 87511, 100000], ys=[88107, 56803, 82619, 93468, 72601, 83504, 39496, 80666, 92274, 63835, 29425, 22556, 57287, 44479, 9157, 29471, 11941, 69921, 38795, 87311, 77918, 33967, 57570, 49306, 88462, 3307, 5727, 90401, 94499, 14287, 12848, 13897, 2977, 17014, 18710, 19077, 87982, 67066, 91660, 49322, 64198, 30375, 74207, 89955, 35428, 65, 61676, 72777, 44818], thresh=11078204384):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_87",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=556, beta: int=125, xs: List[int]=[0, 211, 246, 311, 1421, 1433, 1881, 2215, 2340, 2472, 2488, 2498, 2543, 2546, 2546, 2546, 2546, 2546, 2546, 2547, 2547, 2547, 2547, 2547, 2548, 2555, 2581, 3291, 3360, 3477, 3487, 3492, 3494, 3631, 3784, 4041, 4722, 5071, 5805, 5846, 5870, 5961, 6235, 6418, 6458, 6467, 6525, 6643, 7074, 7092, 7107, 7108, 7126, 7159, 7171, 7171, 7171, 7172, 7235, 7239, 7243, 7245, 7245, 7245, 7245, 7245, 7245, 7245, 7245, 7245, 7245, 7246, 7258, 7517, 7588, 7667, 8023, 8123, 8333, 8438, 8480, 8488, 8524, 8533, 8542, 8552, 8796, 9082, 9082, 9114, 9127, 9170, 9171, 9178, 9178, 9178, 9178, 9178, 9179, 9229, 9252, 9255, 9262, 9263, 9267, 9268, 9269, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9272, 9457, 9727, 9740, 10122, 10143, 10208, 10259, 10676, 10872, 11470, 12042, 12209, 12644, 12981, 13223, 13395, 14574, 14626, 15167, 16126, 16285, 16306, 16333, 17373, 17441, 17535, 17791, 18762, 19075, 19081, 19817, 20131, 20371, 20518, 20858, 20997, 21078, 21208, 22374, 23373, 24640, 24804, 24893, 25429, 25956, 26185, 26487, 26786, 27090, 27154, 27222, 27301, 27448, 27527, 27705, 27780, 27957, 28145, 28327, 28387, 28534, 28554, 28597, 28670, 28893, 29193, 29217, 29419, 29611, 30425, 31504, 31526, 31896, 31964, 32181, 32739, 32907, 33043, 33218, 33769, 34436, 34475, 35569, 36316, 36791, 37315, 37552, 37953, 38291, 38396, 39475, 40020, 40858, 41274, 41913, 42438, 42588, 42808, 43086, 43165, 43296, 43320, 43458, 43687, 43831, 43879, 44104, 44226, 44396, 44756, 45932, 47142, 47433, 47506, 47866, 48358, 48611, 48622, 48687, 48725, 49039, 49314, 49759, 49795, 49891, 49934, 50077, 51049, 51112, 52028, 52254, 53188, 53237, 53406, 53481, 53568, 53578, 53629, 53735, 54117, 54182, 54224, 54492, 55175, 55690, 55792, 56194, 56801, 56826, 56906, 56979, 57526, 57827, 58042, 58467, 58787, 58917, 58927, 58993, 59478, 59525, 59577, 59613, 60050, 60129, 60589, 60658, 60895, 61077, 61189, 61919, 62140, 62757, 62881, 63476, 63638, 63678, 63703, 63884, 64042, 64511, 64769, 65057, 66623, 66796, 67337, 67520, 67701, 68486, 68887, 68891, 70026, 70369, 70683, 71002, 72078, 72163, 72392, 73080, 73100, 73745, 74047, 74063, 74152, 74187, 74418, 75028, 75060, 75170, 75242, 75488, 76626, 76699, 76836, 76869, 78123, 78214, 78385, 79260, 79581, 79656, 79716, 79907, 80347, 81173, 81210, 81939, 82056, 82126, 83043, 83801, 83922, 83950, 84179, 84310, 86279, 86611, 87104, 88109, 88252, 88265, 89222, 89656, 89935, 89985, 92092, 92164, 92188, 92260, 92388, 92508, 92767, 92976, 93677, 93996, 94310, 94537, 94558, 94639, 96238, 96801, 97059, 97234, 97654, 97724, 98721, 98801, 99092, 99178, 99365, 99660, 100000], ys: List[int]=[88759, 19601, 72230, 7002, 85148, 27925, 84184, 76688, 84982, 4451, 11637, 43331, 43603, 22369, 7336, 27919, 83067, 55072, 40131, 61633, 90877, 97162, 24078, 97568, 88465, 63431, 65957, 54362, 43476, 6694, 65794, 96494, 68792, 74363, 95620, 54328, 23323, 28689, 91115, 88029, 4516, 78369, 11591, 52655, 50703, 73060, 13582, 94031, 43971, 31057, 42070, 82411, 37292, 36289, 94937, 50846, 92677, 44085, 60601, 30637, 44701, 68796, 12736, 65055, 36928, 83826, 97029, 46279, 42928, 20150, 59544, 32758, 95737, 53429, 75890, 10813, 16965, 40907, 90036, 93750, 42344, 11116, 10271, 69986, 89202, 88214, 34152, 71335, 50330, 98293, 28736, 88846, 319, 53249, 11795, 46931, 70684, 34895, 2092, 77085, 53256, 21298, 16367, 72375, 37386, 51424, 70513, 96484, 63910, 68010, 86727, 58594, 63587, 38298, 93512, 18243, 24229, 93558, 51276, 76969, 71189, 12614, 75870, 66398, 56273, 4543, 64733, 1106, 87226, 16248, 81754, 70122, 41579, 64842, 13417, 47643, 12915, 1871, 9233, 56369, 23022, 8806, 35824, 5165, 69745, 37977, 63236, 65724, 42953, 83966, 10833, 753, 790, 8167, 77642, 48966, 74224, 30647, 35508, 43174, 86968, 8083, 45272, 42970, 87051, 88427, 61525, 99010, 11621, 20284, 89209, 56813, 85997, 78581, 19969, 58281, 77389, 694, 4128, 56621, 92839, 14819, 97491, 308, 36554, 39686, 81852, 44170, 73138, 59423, 96187, 4508, 87696, 84281, 72188, 48189, 4182, 31405, 19317, 39099, 644, 11142, 83268, 48421, 96892, 44636, 69189, 28457, 61574, 16648, 99763, 42501, 57641, 85627, 65297, 82126, 30923, 16791, 34643, 31717, 29109, 87817, 6995, 83975, 70343, 63578, 41162, 38095, 63599, 93640, 33022, 58985, 29950, 57055, 46664, 45570, 71857, 43161, 880, 17024, 51279, 62460, 2019, 34212, 17595, 7169, 52938, 46448, 11089, 22526, 43407, 48689, 8085, 14930, 63928, 48833, 85135, 63643, 86379, 49408, 95527, 63433, 55672, 74915, 97140, 38609, 664, 83209, 68999, 61629, 98288, 20611, 94103, 70293, 18707, 81074, 59926, 43902, 58039, 18340, 83480, 12263, 14178, 20125, 74095, 77085, 63565, 91012, 4783, 95851, 5504, 34309, 79307, 33422, 32389, 67070, 12262, 47313, 13355, 1338, 78207, 22567, 34614, 18982, 6181, 16144, 1224, 92875, 22717, 86359, 19647, 8200, 58476, 87499, 9786, 16410, 39627, 16925, 11337, 25893, 91659, 59774, 81358, 72484, 81385, 37138, 48806, 73937, 63791, 75358, 64470, 84574, 7852, 61638, 72904, 65339, 34693, 47889, 39798, 98864, 70765, 67222, 3465, 165, 5124, 18445, 55346, 81627, 79791, 82724, 18018, 91751, 44034, 59285, 15576, 19415, 87044, 4445, 55989, 51575, 37032, 62936, 79648, 20592, 58432, 56107, 32625, 51875, 59512, 18889, 62370, 40573, 95824, 77224, 6818, 6189, 59268, 69987, 78363, 87890, 28166, 47120, 42355, 42257, 30775, 61021, 18632, 25561, 4487, 3357, 5930, 71665, 68788, 88574, 39213, 82841, 98360, 74674, 46639, 26085, 18918, 51737, 26787, 76960, 14065, 35530, 56555, 47507, 79076, 77974, 30449, 15274, 800, 11526, 40709, 38386, 43109, 40390, 78774, 54624, 87004, 41401, 82749, 41274, 63580, 13796, 68257, 38586, 68637, 493, 91288, 36593, 17031, 82087, 60126, 18851, 19507, 49517, 41922, 52325, 28062, 44305, 47435, 97377, 37241, 66966, 8771, 76125, 3531, 79499, 67061, 571, 25613, 27833, 49954, 55551, 5987, 5937, 42409, 43138, 22511, 46896, 33456, 69209, 3426, 27338, 67208, 20202, 74756, 35218, 17232, 21745, 99546, 81655, 66453, 89825, 76597, 98369, 64960, 45294, 22972, 70801, 92968, 75071, 74589, 13276, 78894, 25630, 70081, 13987, 92087, 66378, 2570, 56735, 57803, 22669, 91210, 94659, 29051, 97123, 54005, 94667, 71779, 94012, 68834, 88875, 20853, 32932, 75679, 16986, 82154, 25493, 97842, 74528, 78147, 97000, 17936, 44646, 60262, 96491, 85695, 75139, 31677, 2806, 30231, 79541, 78441, 9602, 69753, 45641, 84685, 42099, 24057, 85420, 75915, 10481, 21235, 44777, 47443, 16895, 3081, 35915, 24238, 38003, 97320, 45725, 67832, 64226, 32063, 92764, 62951, 36486, 68324, 8969, 75547, 89234, 44723, 22719, 22732, 1193, 93814, 53941, 15908, 70715, 38697, 37108, 29677, 89385, 39439, 49190, 5348, 66950, 96423, 4580, 21703, 33709, 77524, 78583, 54406, 13806, 81262, 10721, 23339, 26480, 44920, 44305, 66085, 3807, 70696, 49974, 45732, 87476, 12721, 55596, 11111, 25110, 37097, 14435, 1997, 2316, 61413, 33202, 54117, 70595, 76717, 99391, 6868, 45783, 80623, 32718, 31772, 36974, 73355, 91287, 73132, 74033, 9599, 91684, 47994, 94485, 41701, 51876, 69025, 99695, 29219, 71605, 59105, 51664, 6078, 21541, 4651, 11782, 64272, 72130, 47497, 9400, 54884, 71703, 44589, 93077, 94825, 40804, 27829, 61426, 75965, 65086, 44293, 27078, 34263, 27505, 59476, 27359, 67376, 41558, 67973, 79024, 36076, 9726, 933, 23204, 3273, 22972, 14114, 26092, 35702, 53766, 22345, 56202, 57869, 59992, 28241, 72809, 49553, 37965, 17233, 27460, 18317, 35675, 92226, 36381, 34785, 66776, 60940, 25795, 99503, 55677, 49583, 49748, 99787, 74132, 14681, 56341, 30776, 5656, 92767, 79378, 97239, 78258, 77945, 48999, 71039, 1782, 5033, 93565, 16852, 52566, 95176, 28427, 39192, 55519, 96762, 50374, 50630, 91497, 22, 57908, 10224, 34914, 31917, 76382, 88932, 65498, 81119, 59954, 61652, 2633, 55179, 46424, 59857, 64497, 78361, 17710, 5678, 91927, 50332, 48547, 10914, 27154, 48601, 45096, 8586, 14856, 90377, 9150, 24954, 87103, 92957, 79403, 87483, 56803, 44401, 8164, 98834, 15122, 3331, 76531, 25268, 30315, 40979, 62515, 20722, 71885, 38684, 13294, 58748, 8504, 62944, 22639, 67653, 70240, 45670, 60512, 77286, 25540, 77177, 83253, 52109, 85510, 50629, 33117, 80742, 61338, 60007, 78856, 28936, 69639, 82715, 32307, 99682, 57613, 40753, 91579, 55459, 44720, 63188, 34464, 74377, 88881, 14564, 20097, 82863, 75699, 64514, 18959, 93701, 60491, 72025, 37669, 1796, 97268, 11824, 48397, 85341, 46797, 50565, 33255, 27103, 33401, 98831, 9328, 34214, 2062, 41124, 18616, 76155, 61907, 14859, 25670, 74437, 37912, 75997, 22683, 44833, 56814, 48166, 76510, 38808, 45163, 28248, 95107, 92514, 74518, 27634, 78638, 16179, 39196, 42232, 99224, 55425, 81859, 62867, 28372, 15112, 11122, 95791, 12517, 95912, 95601, 37212, 65709, 9688, 11445, 67459, 95926, 12356, 78556, 56366, 19631, 83126, 94029, 38986, 40851, 32698, 77532, 10778, 82769, 49427, 20904, 42248, 7150, 60086, 16040, 16689, 11853, 12676, 70134, 73716, 8747, 15282, 77733, 61412, 30755, 26783, 40667, 30210, 63805, 25616, 53311, 15106, 26527, 5407, 642, 35869, 10784, 30742, 30403, 86237, 83367, 16612, 70905, 86992, 5366, 87578, 48772, 51778, 23068, 97848, 22703, 40510, 80619, 56639, 58390, 1298, 62198, 28803, 3465, 5809, 21061, 46074, 12276, 73647, 35556, 99597, 90124, 23963, 93777, 44599, 89723, 72617, 76501, 58676, 32107, 66160, 16561, 57090, 85770, 90227, 60537, 54366, 5842, 59644, 41521, 41007, 20662, 79602, 75942, 76529, 33505, 13877, 16149, 33355, 83718, 38916, 89287, 84457, 37754, 41860, 91769, 60583, 45886, 60329, 67553, 29578, 91748, 23176, 30734, 95718, 2742, 2681, 57270, 28489, 5605, 57371, 65017, 57939, 67012, 27658, 70352, 38317, 76743, 75190, 86133, 34174, 54813, 95060, 52373, 53179, 4463, 44220], thresh: int=13149109130):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=556, beta=125, xs=[0, 211, 246, 311, 1421, 1433, 1881, 2215, 2340, 2472, 2488, 2498, 2543, 2546, 2546, 2546, 2546, 2546, 2546, 2547, 2547, 2547, 2547, 2547, 2548, 2555, 2581, 3291, 3360, 3477, 3487, 3492, 3494, 3631, 3784, 4041, 4722, 5071, 5805, 5846, 5870, 5961, 6235, 6418, 6458, 6467, 6525, 6643, 7074, 7092, 7107, 7108, 7126, 7159, 7171, 7171, 7171, 7172, 7235, 7239, 7243, 7245, 7245, 7245, 7245, 7245, 7245, 7245, 7245, 7245, 7245, 7246, 7258, 7517, 7588, 7667, 8023, 8123, 8333, 8438, 8480, 8488, 8524, 8533, 8542, 8552, 8796, 9082, 9082, 9114, 9127, 9170, 9171, 9178, 9178, 9178, 9178, 9178, 9179, 9229, 9252, 9255, 9262, 9263, 9267, 9268, 9269, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9271, 9272, 9457, 9727, 9740, 10122, 10143, 10208, 10259, 10676, 10872, 11470, 12042, 12209, 12644, 12981, 13223, 13395, 14574, 14626, 15167, 16126, 16285, 16306, 16333, 17373, 17441, 17535, 17791, 18762, 19075, 19081, 19817, 20131, 20371, 20518, 20858, 20997, 21078, 21208, 22374, 23373, 24640, 24804, 24893, 25429, 25956, 26185, 26487, 26786, 27090, 27154, 27222, 27301, 27448, 27527, 27705, 27780, 27957, 28145, 28327, 28387, 28534, 28554, 28597, 28670, 28893, 29193, 29217, 29419, 29611, 30425, 31504, 31526, 31896, 31964, 32181, 32739, 32907, 33043, 33218, 33769, 34436, 34475, 35569, 36316, 36791, 37315, 37552, 37953, 38291, 38396, 39475, 40020, 40858, 41274, 41913, 42438, 42588, 42808, 43086, 43165, 43296, 43320, 43458, 43687, 43831, 43879, 44104, 44226, 44396, 44756, 45932, 47142, 47433, 47506, 47866, 48358, 48611, 48622, 48687, 48725, 49039, 49314, 49759, 49795, 49891, 49934, 50077, 51049, 51112, 52028, 52254, 53188, 53237, 53406, 53481, 53568, 53578, 53629, 53735, 54117, 54182, 54224, 54492, 55175, 55690, 55792, 56194, 56801, 56826, 56906, 56979, 57526, 57827, 58042, 58467, 58787, 58917, 58927, 58993, 59478, 59525, 59577, 59613, 60050, 60129, 60589, 60658, 60895, 61077, 61189, 61919, 62140, 62757, 62881, 63476, 63638, 63678, 63703, 63884, 64042, 64511, 64769, 65057, 66623, 66796, 67337, 67520, 67701, 68486, 68887, 68891, 70026, 70369, 70683, 71002, 72078, 72163, 72392, 73080, 73100, 73745, 74047, 74063, 74152, 74187, 74418, 75028, 75060, 75170, 75242, 75488, 76626, 76699, 76836, 76869, 78123, 78214, 78385, 79260, 79581, 79656, 79716, 79907, 80347, 81173, 81210, 81939, 82056, 82126, 83043, 83801, 83922, 83950, 84179, 84310, 86279, 86611, 87104, 88109, 88252, 88265, 89222, 89656, 89935, 89985, 92092, 92164, 92188, 92260, 92388, 92508, 92767, 92976, 93677, 93996, 94310, 94537, 94558, 94639, 96238, 96801, 97059, 97234, 97654, 97724, 98721, 98801, 99092, 99178, 99365, 99660, 100000], ys=[88759, 19601, 72230, 7002, 85148, 27925, 84184, 76688, 84982, 4451, 11637, 43331, 43603, 22369, 7336, 27919, 83067, 55072, 40131, 61633, 90877, 97162, 24078, 97568, 88465, 63431, 65957, 54362, 43476, 6694, 65794, 96494, 68792, 74363, 95620, 54328, 23323, 28689, 91115, 88029, 4516, 78369, 11591, 52655, 50703, 73060, 13582, 94031, 43971, 31057, 42070, 82411, 37292, 36289, 94937, 50846, 92677, 44085, 60601, 30637, 44701, 68796, 12736, 65055, 36928, 83826, 97029, 46279, 42928, 20150, 59544, 32758, 95737, 53429, 75890, 10813, 16965, 40907, 90036, 93750, 42344, 11116, 10271, 69986, 89202, 88214, 34152, 71335, 50330, 98293, 28736, 88846, 319, 53249, 11795, 46931, 70684, 34895, 2092, 77085, 53256, 21298, 16367, 72375, 37386, 51424, 70513, 96484, 63910, 68010, 86727, 58594, 63587, 38298, 93512, 18243, 24229, 93558, 51276, 76969, 71189, 12614, 75870, 66398, 56273, 4543, 64733, 1106, 87226, 16248, 81754, 70122, 41579, 64842, 13417, 47643, 12915, 1871, 9233, 56369, 23022, 8806, 35824, 5165, 69745, 37977, 63236, 65724, 42953, 83966, 10833, 753, 790, 8167, 77642, 48966, 74224, 30647, 35508, 43174, 86968, 8083, 45272, 42970, 87051, 88427, 61525, 99010, 11621, 20284, 89209, 56813, 85997, 78581, 19969, 58281, 77389, 694, 4128, 56621, 92839, 14819, 97491, 308, 36554, 39686, 81852, 44170, 73138, 59423, 96187, 4508, 87696, 84281, 72188, 48189, 4182, 31405, 19317, 39099, 644, 11142, 83268, 48421, 96892, 44636, 69189, 28457, 61574, 16648, 99763, 42501, 57641, 85627, 65297, 82126, 30923, 16791, 34643, 31717, 29109, 87817, 6995, 83975, 70343, 63578, 41162, 38095, 63599, 93640, 33022, 58985, 29950, 57055, 46664, 45570, 71857, 43161, 880, 17024, 51279, 62460, 2019, 34212, 17595, 7169, 52938, 46448, 11089, 22526, 43407, 48689, 8085, 14930, 63928, 48833, 85135, 63643, 86379, 49408, 95527, 63433, 55672, 74915, 97140, 38609, 664, 83209, 68999, 61629, 98288, 20611, 94103, 70293, 18707, 81074, 59926, 43902, 58039, 18340, 83480, 12263, 14178, 20125, 74095, 77085, 63565, 91012, 4783, 95851, 5504, 34309, 79307, 33422, 32389, 67070, 12262, 47313, 13355, 1338, 78207, 22567, 34614, 18982, 6181, 16144, 1224, 92875, 22717, 86359, 19647, 8200, 58476, 87499, 9786, 16410, 39627, 16925, 11337, 25893, 91659, 59774, 81358, 72484, 81385, 37138, 48806, 73937, 63791, 75358, 64470, 84574, 7852, 61638, 72904, 65339, 34693, 47889, 39798, 98864, 70765, 67222, 3465, 165, 5124, 18445, 55346, 81627, 79791, 82724, 18018, 91751, 44034, 59285, 15576, 19415, 87044, 4445, 55989, 51575, 37032, 62936, 79648, 20592, 58432, 56107, 32625, 51875, 59512, 18889, 62370, 40573, 95824, 77224, 6818, 6189, 59268, 69987, 78363, 87890, 28166, 47120, 42355, 42257, 30775, 61021, 18632, 25561, 4487, 3357, 5930, 71665, 68788, 88574, 39213, 82841, 98360, 74674, 46639, 26085, 18918, 51737, 26787, 76960, 14065, 35530, 56555, 47507, 79076, 77974, 30449, 15274, 800, 11526, 40709, 38386, 43109, 40390, 78774, 54624, 87004, 41401, 82749, 41274, 63580, 13796, 68257, 38586, 68637, 493, 91288, 36593, 17031, 82087, 60126, 18851, 19507, 49517, 41922, 52325, 28062, 44305, 47435, 97377, 37241, 66966, 8771, 76125, 3531, 79499, 67061, 571, 25613, 27833, 49954, 55551, 5987, 5937, 42409, 43138, 22511, 46896, 33456, 69209, 3426, 27338, 67208, 20202, 74756, 35218, 17232, 21745, 99546, 81655, 66453, 89825, 76597, 98369, 64960, 45294, 22972, 70801, 92968, 75071, 74589, 13276, 78894, 25630, 70081, 13987, 92087, 66378, 2570, 56735, 57803, 22669, 91210, 94659, 29051, 97123, 54005, 94667, 71779, 94012, 68834, 88875, 20853, 32932, 75679, 16986, 82154, 25493, 97842, 74528, 78147, 97000, 17936, 44646, 60262, 96491, 85695, 75139, 31677, 2806, 30231, 79541, 78441, 9602, 69753, 45641, 84685, 42099, 24057, 85420, 75915, 10481, 21235, 44777, 47443, 16895, 3081, 35915, 24238, 38003, 97320, 45725, 67832, 64226, 32063, 92764, 62951, 36486, 68324, 8969, 75547, 89234, 44723, 22719, 22732, 1193, 93814, 53941, 15908, 70715, 38697, 37108, 29677, 89385, 39439, 49190, 5348, 66950, 96423, 4580, 21703, 33709, 77524, 78583, 54406, 13806, 81262, 10721, 23339, 26480, 44920, 44305, 66085, 3807, 70696, 49974, 45732, 87476, 12721, 55596, 11111, 25110, 37097, 14435, 1997, 2316, 61413, 33202, 54117, 70595, 76717, 99391, 6868, 45783, 80623, 32718, 31772, 36974, 73355, 91287, 73132, 74033, 9599, 91684, 47994, 94485, 41701, 51876, 69025, 99695, 29219, 71605, 59105, 51664, 6078, 21541, 4651, 11782, 64272, 72130, 47497, 9400, 54884, 71703, 44589, 93077, 94825, 40804, 27829, 61426, 75965, 65086, 44293, 27078, 34263, 27505, 59476, 27359, 67376, 41558, 67973, 79024, 36076, 9726, 933, 23204, 3273, 22972, 14114, 26092, 35702, 53766, 22345, 56202, 57869, 59992, 28241, 72809, 49553, 37965, 17233, 27460, 18317, 35675, 92226, 36381, 34785, 66776, 60940, 25795, 99503, 55677, 49583, 49748, 99787, 74132, 14681, 56341, 30776, 5656, 92767, 79378, 97239, 78258, 77945, 48999, 71039, 1782, 5033, 93565, 16852, 52566, 95176, 28427, 39192, 55519, 96762, 50374, 50630, 91497, 22, 57908, 10224, 34914, 31917, 76382, 88932, 65498, 81119, 59954, 61652, 2633, 55179, 46424, 59857, 64497, 78361, 17710, 5678, 91927, 50332, 48547, 10914, 27154, 48601, 45096, 8586, 14856, 90377, 9150, 24954, 87103, 92957, 79403, 87483, 56803, 44401, 8164, 98834, 15122, 3331, 76531, 25268, 30315, 40979, 62515, 20722, 71885, 38684, 13294, 58748, 8504, 62944, 22639, 67653, 70240, 45670, 60512, 77286, 25540, 77177, 83253, 52109, 85510, 50629, 33117, 80742, 61338, 60007, 78856, 28936, 69639, 82715, 32307, 99682, 57613, 40753, 91579, 55459, 44720, 63188, 34464, 74377, 88881, 14564, 20097, 82863, 75699, 64514, 18959, 93701, 60491, 72025, 37669, 1796, 97268, 11824, 48397, 85341, 46797, 50565, 33255, 27103, 33401, 98831, 9328, 34214, 2062, 41124, 18616, 76155, 61907, 14859, 25670, 74437, 37912, 75997, 22683, 44833, 56814, 48166, 76510, 38808, 45163, 28248, 95107, 92514, 74518, 27634, 78638, 16179, 39196, 42232, 99224, 55425, 81859, 62867, 28372, 15112, 11122, 95791, 12517, 95912, 95601, 37212, 65709, 9688, 11445, 67459, 95926, 12356, 78556, 56366, 19631, 83126, 94029, 38986, 40851, 32698, 77532, 10778, 82769, 49427, 20904, 42248, 7150, 60086, 16040, 16689, 11853, 12676, 70134, 73716, 8747, 15282, 77733, 61412, 30755, 26783, 40667, 30210, 63805, 25616, 53311, 15106, 26527, 5407, 642, 35869, 10784, 30742, 30403, 86237, 83367, 16612, 70905, 86992, 5366, 87578, 48772, 51778, 23068, 97848, 22703, 40510, 80619, 56639, 58390, 1298, 62198, 28803, 3465, 5809, 21061, 46074, 12276, 73647, 35556, 99597, 90124, 23963, 93777, 44599, 89723, 72617, 76501, 58676, 32107, 66160, 16561, 57090, 85770, 90227, 60537, 54366, 5842, 59644, 41521, 41007, 20662, 79602, 75942, 76529, 33505, 13877, 16149, 33355, 83718, 38916, 89287, 84457, 37754, 41860, 91769, 60583, 45886, 60329, 67553, 29578, 91748, 23176, 30734, 95718, 2742, 2681, 57270, 28489, 5605, 57371, 65017, 57939, 67012, 27658, 70352, 38317, 76743, 75190, 86133, 34174, 54813, 95060, 52373, 53179, 4463, 44220], thresh=13149109130):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_88",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=17, beta: int=11, xs: List[int]=[0, 37, 114, 136, 154, 159, 160, 161, 16382, 19601, 25681, 44507, 56351, 68782, 71556, 82398, 82737, 98911, 100000], ys: List[int]=[11445, 99360, 80642, 15716, 99630, 1190, 21325, 76450, 77556, 42579, 32562, 90416, 45124, 45793, 77594, 7381, 43471, 77266, 44143], thresh: int=14836891150):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=17, beta=11, xs=[0, 37, 114, 136, 154, 159, 160, 161, 16382, 19601, 25681, 44507, 56351, 68782, 71556, 82398, 82737, 98911, 100000], ys=[11445, 99360, 80642, 15716, 99630, 1190, 21325, 76450, 77556, 42579, 32562, 90416, 45124, 45793, 77594, 7381, 43471, 77266, 44143], thresh=14836891150):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_89",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=995, beta: int=243, xs: List[int]=[0, 45, 82, 95, 96, 96, 96, 96, 97, 116, 209, 220, 256, 277, 284, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 286, 392, 551, 594, 610, 623, 648, 650, 730, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 736, 956, 958, 971, 991, 992, 1005, 1030, 1085, 1147, 1209, 1214, 1214, 1215, 1219, 1219, 1219, 1219, 1219, 1220, 1226, 1248, 1356, 1522, 1548, 1692, 1768, 1776, 1780, 1780, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1786, 1840, 1856, 2267, 2281, 2323, 2342, 2351, 2358, 2558, 2681, 2701, 2715, 2723, 2727, 2731, 2732, 2733, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2735, 2758, 3325, 3411, 3713, 3839, 4017, 4161, 4226, 4496, 4777, 4826, 5053, 5297, 5433, 5514, 5913, 5915, 5922, 6014, 6015, 6022, 6253, 6346, 6566, 6729, 6764, 6917, 6943, 7075, 7194, 7293, 7363, 7385, 7434, 7750, 8104, 8116, 8314, 8343, 8527, 8714, 9092, 9106, 9150, 9174, 9183, 9314, 9348, 9414, 9494, 10297, 10541, 10776, 10851, 11369, 11598, 11634, 11739, 11911, 12011, 12094, 12620, 12755, 12760, 12948, 13859, 13871, 13988, 14139, 14194, 14211, 14244, 14391, 14403, 14596, 14603, 14615, 14776, 14912, 15665, 15734, 15762, 16304, 16475, 16495, 16686, 16719, 16864, 16954, 17111, 17151, 17442, 17474, 17535, 17869, 18033, 18413, 18579, 18656, 18739, 18982, 19029, 19114, 19280, 19383, 19436, 19694, 19795, 19917, 20221, 21386, 21483, 21514, 21521, 21535, 21941, 22279, 22449, 22513, 22726, 22948, 23064, 23176, 23223, 23737, 24007, 24195, 24496, 24531, 24614, 24645, 24928, 24986, 25176, 25220, 25232, 25379, 25663, 25784, 25920, 25951, 26032, 26212, 26986, 27048, 27198, 28018, 28072, 28542, 28571, 28830, 29032, 29173, 29563, 29903, 29941, 30183, 30212, 30384, 30562, 30582, 30671, 30702, 30833, 30903, 30908, 31189, 31243, 31901, 31952, 31974, 32099, 32351, 32754, 32953, 33013, 33125, 33158, 34337, 34449, 34890, 34906, 35103, 35402, 35411, 35481, 35523, 35616, 35755, 36209, 36632, 36982, 37209, 37405, 37605, 37672, 38091, 38645, 38822, 38843, 39019, 39790, 39910, 39962, 40236, 40677, 40680, 41026, 41728, 41796, 42027, 42326, 42495, 42641, 42680, 42699, 42744, 42746, 42923, 43089, 43115, 43178, 43181, 43552, 43644, 43838, 44147, 44293, 44332, 44471, 44533, 44557, 44613, 44620, 44647, 44695, 45176, 45231, 45330, 45408, 45446, 45561, 45744, 45752, 46023, 46129, 46226, 46703, 46818, 46857, 47091, 47170, 47205, 47329, 47341, 47396, 47806, 47832, 48050, 48071, 48256, 48334, 48366, 48987, 49137, 49248, 49321, 49402, 49552, 49728, 49825, 49905, 50501, 50708, 50757, 50896, 50949, 51139, 51299, 51337, 51536, 51806, 51830, 51899, 52327, 52628, 52778, 53161, 53191, 53302, 53696, 53770, 54158, 54475, 54594, 54606, 54761, 54861, 54901, 54936, 55430, 55510, 55632, 55685, 55943, 56048, 56241, 56401, 56587, 56786, 56801, 57107, 57289, 57307, 57412, 57952, 58050, 58181, 58562, 58625, 58690, 58941, 58979, 59099, 59111, 59322, 59351, 59442, 59574, 59621, 59825, 59919, 60291, 60313, 60615, 61547, 61564, 61629, 61848, 61937, 62002, 62123, 62518, 62692, 62705, 62724, 62930, 63110, 63140, 63313, 63317, 63464, 64061, 64125, 64129, 64553, 65050, 65086, 65308, 65318, 65475, 65796, 66096, 66139, 66174, 66334, 66628, 66787, 66806, 66831, 66931, 67167, 67456, 67526, 67655, 67901, 67948, 68243, 68309, 68431, 68846, 68908, 69185, 69424, 69444, 69686, 69789, 69953, 70000, 70028, 70117, 70285, 70341, 70451, 70728, 70792, 71071, 71129, 72100, 72181, 72335, 72361, 72453, 72967, 73247, 73328, 73409, 73518, 73539, 73659, 73678, 73976, 74167, 74269, 74537, 74597, 74655, 74839, 74978, 75065, 75084, 75092, 75112, 75137, 75435, 75454, 75460, 75480, 76597, 76668, 76934, 76958, 77197, 77218, 77293, 77620, 77664, 77906, 77966, 78541, 78783, 78980, 79280, 79481, 79542, 79644, 79752, 79767, 79831, 79981, 80161, 80250, 80285, 80369, 80551, 80560, 80585, 80650, 80669, 80774, 80805, 80874, 81005, 81472, 81487, 81594, 81811, 82005, 82012, 82174, 82278, 82336, 82649, 83032, 83343, 83424, 83588, 83611, 84000, 84131, 84391, 84642, 84887, 84987, 85046, 85373, 85884, 86056, 86161, 86358, 86684, 86836, 86868, 87532, 87545, 87656, 87748, 88051, 88200, 88256, 88424, 88638, 88673, 88925, 88979, 89069, 89392, 89393, 89453, 89663, 89677, 89959, 90025, 90259, 90296, 90593, 90686, 90941, 90978, 91209, 91312, 91432, 91600, 91609, 91627, 91649, 91891, 92120, 92266, 92310, 92466, 92609, 92649, 92883, 92905, 93341, 93397, 93452, 94064, 94238, 94433, 95197, 95206, 95366, 95588, 95817, 96024, 96226, 96689, 97036, 97038, 97057, 97216, 97538, 97619, 97732, 98279, 98321, 98331, 98658, 98672, 98702, 98727, 99133, 99175, 99373, 99655, 99872, 100000], ys: List[int]=[44626, 10851, 62298, 48193, 68931, 61292, 54396, 9155, 70107, 37461, 46755, 44652, 50678, 20655, 92769, 22499, 82923, 80648, 98408, 14538, 98208, 78233, 60971, 68805, 2280, 13435, 92586, 5679, 35986, 79210, 46624, 92148, 63303, 83563, 85628, 33125, 18776, 43843, 7424, 18170, 44799, 35740, 51831, 38976, 64858, 15335, 86704, 64064, 63697, 53923, 53627, 7077, 24633, 60541, 11884, 56321, 58058, 65295, 31527, 72394, 14188, 72802, 85366, 13482, 69290, 55235, 20305, 76337, 61535, 11660, 88216, 55154, 37761, 72704, 33017, 74140, 94851, 20259, 88594, 34850, 39710, 29010, 99644, 8978, 19006, 26484, 55654, 64460, 87613, 11955, 16864, 43598, 68841, 38203, 9220, 89724, 22614, 25195, 51235, 58577, 34768, 59201, 97110, 44012, 68542, 15595, 77175, 83754, 1083, 80212, 9586, 92100, 11590, 7924, 7709, 7469, 77332, 90894, 10025, 64487, 85756, 21661, 21601, 27235, 4004, 56366, 21259, 80528, 34040, 3803, 86047, 82040, 37837, 2836, 82662, 96726, 81263, 66934, 26795, 28281, 12684, 88741, 36744, 10576, 697, 43637, 7897, 89986, 64036, 56282, 91985, 15908, 99531, 25868, 34216, 22922, 73038, 73532, 46494, 87862, 78973, 19895, 35368, 29762, 67750, 54186, 71275, 95942, 71593, 76487, 54248, 88247, 4526, 3681, 99781, 22776, 20907, 51999, 36858, 79596, 96056, 71695, 46639, 97655, 5110, 65086, 33506, 13378, 38960, 93049, 74644, 19954, 97430, 2193, 9757, 11917, 55273, 86432, 92763, 27230, 73825, 21721, 50924, 54027, 20306, 39274, 9934, 27426, 84842, 32083, 40044, 29091, 817, 85088, 62903, 52123, 63265, 33616, 9818, 46789, 41992, 74865, 34137, 26965, 33335, 72350, 81725, 65726, 63608, 52807, 37553, 238, 23389, 36378, 86541, 5001, 87049, 47846, 19096, 74741, 30068, 24484, 76612, 94006, 374, 96945, 9571, 13718, 70373, 68530, 56495, 89714, 51490, 75734, 5577, 40586, 83034, 25900, 46368, 41155, 32711, 61918, 43986, 72585, 84253, 72670, 30116, 42769, 27289, 47023, 91435, 10426, 9876, 51579, 20270, 39112, 91910, 6982, 54665, 5817, 95701, 20178, 19103, 44139, 98277, 49405, 7755, 13962, 43984, 73983, 6239, 40187, 74170, 58658, 54133, 93669, 22488, 92731, 49547, 85208, 82200, 2326, 26893, 16589, 68641, 25735, 75481, 2947, 37724, 44979, 53181, 2291, 95510, 65669, 63313, 44109, 8273, 5522, 1500, 65199, 69273, 58768, 27185, 56770, 88068, 13045, 79601, 94011, 82261, 49703, 21270, 16079, 99192, 57841, 46591, 85639, 71108, 88577, 26931, 40714, 4255, 49740, 70001, 93431, 67989, 95012, 89194, 86899, 66896, 90964, 74491, 63631, 30251, 6077, 18311, 16712, 24153, 25003, 18921, 37594, 51778, 66837, 51232, 99339, 7179, 4836, 48663, 54327, 97729, 36562, 18068, 56125, 35594, 26364, 81712, 51800, 34439, 49336, 39566, 48639, 12408, 47876, 66690, 11680, 87718, 51183, 51008, 47267, 16076, 70514, 31025, 65924, 86612, 1707, 6201, 82526, 62906, 52987, 65009, 26741, 96212, 11480, 64750, 43831, 14327, 28620, 60165, 41026, 13087, 77086, 85811, 13901, 34253, 98876, 78408, 18136, 53830, 92225, 18287, 15072, 13993, 67360, 78126, 84753, 17725, 38061, 73668, 82247, 88199, 99693, 63243, 26310, 86063, 72386, 58620, 90901, 45546, 33755, 1237, 90419, 77357, 49090, 69471, 16680, 8007, 72810, 40323, 1070, 98965, 77502, 41124, 21690, 58258, 1371, 90856, 21899, 39549, 99099, 65597, 880, 68380, 2053, 59032, 9096, 60713, 80662, 23442, 83813, 23262, 26199, 14367, 887, 43227, 50987, 9067, 85825, 90174, 12729, 9099, 49952, 10546, 56468, 43879, 62839, 22661, 58280, 97884, 41268, 12866, 44923, 61337, 44808, 32012, 54769, 82793, 60520, 71287, 65411, 81209, 92642, 20756, 65192, 82799, 66278, 60699, 44525, 90491, 80142, 21212, 57710, 76824, 16004, 54091, 32532, 69832, 70771, 59119, 67504, 15322, 56258, 9982, 94563, 13435, 78686, 44269, 89036, 95307, 45237, 59928, 12488, 51434, 80953, 82263, 35143, 90443, 92031, 56695, 8630, 84222, 88369, 97411, 7859, 39025, 32352, 11459, 27531, 46416, 94958, 80394, 24398, 62837, 52553, 91190, 89980, 45100, 87459, 90312, 3830, 62435, 23200, 52624, 38523, 98248, 64888, 13368, 89372, 34511, 69676, 52624, 95402, 56705, 16298, 9687, 4405, 36778, 9563, 91591, 3778, 63904, 44615, 10564, 46040, 12668, 52502, 20996, 98293, 13237, 67585, 2570, 28711, 29184, 4231, 27632, 78865, 14001, 84017, 25526, 97074, 24219, 80805, 25605, 34594, 58613, 36118, 46040, 81225, 90328, 2505, 28087, 6619, 86087, 11781, 11632, 75929, 23822, 56037, 81686, 98544, 20291, 44542, 95066, 50895, 16715, 11209, 24591, 84825, 18006, 45657, 15418, 68970, 34828, 10066, 52200, 10899, 27464, 25612, 23495, 73845, 6107, 95876, 43920, 2393, 11855, 64676, 83410, 34258, 15862, 50455, 15652, 222, 64995, 57894, 40386, 81106, 95761, 61444, 22357, 35533, 10684, 49523, 29032, 15595, 25499, 76245, 83649, 37439, 89621, 31206, 14352, 33605, 40417, 86368, 34238, 94818, 38670, 8441, 96082, 69313, 3169, 91354, 86824, 46999, 68583, 27165, 26594, 92344, 68305, 98621, 56108, 36723, 74358, 37241, 79641, 49691, 46144, 45851, 3837, 12023, 27110, 74132, 93933, 27768, 9142, 54824, 10489, 38615, 5209, 19347, 52357, 2529, 15482, 18003, 70878, 94588, 73281, 26175, 16592, 7120, 88858, 55258, 40441, 96364, 34845, 52247, 29167, 55309, 27334, 27725, 79243, 77998, 37767, 44884, 10343, 56328, 70070, 96399, 17129, 64682, 67189, 50126, 82945, 32499, 91185, 63286, 76211, 9942, 75121, 4056, 16686, 87819, 90136, 27208, 25203, 87981, 1155, 10523, 27125, 43096, 5340, 59258, 8235, 42492, 27515, 54245, 81595, 8440, 36773, 87553, 54191, 99309, 46286, 18881, 74271, 31802, 83765, 44800, 93067, 14603, 79939, 49587, 86986, 32882, 63565, 78012, 891, 62212, 5144, 69532, 20625, 60637, 84365, 19233, 80868, 46358, 61334, 76855, 57565, 9830, 12289, 59434, 77185, 64141, 67734, 27104, 25104, 77593, 64616, 19254, 19779, 55396, 30359, 23659, 98024, 49219, 82593, 16939, 23256, 45303, 58065, 79318, 83247, 1078, 77105, 38788, 47514, 21148, 11132, 9796, 81250, 86170, 88196, 10195, 21978, 30845, 62946, 7089, 72150, 56812, 49667, 63254, 77285, 25415, 9406, 32969, 58128, 54632, 45908, 11909, 44717, 32313, 40394, 25376, 40630, 31001, 84726, 7987, 51982, 80984, 67688, 48077, 55415, 79695, 31232, 51765, 25389, 8752, 43876, 81997, 47329, 59140, 41198, 52521, 81275, 97552, 26551, 81972, 29003, 64543, 98092, 26865, 79996, 29921, 27884, 1155, 29811, 18555, 28607, 67296, 87172, 675, 60276, 31824, 76376, 32245, 33581, 63483, 82705, 46385, 81396, 81596, 48179, 80283, 37961, 13814, 42251, 43808, 78431, 28330, 82639, 90257, 89389, 25675, 68085, 93269, 62920, 65979, 51406, 16154, 57553, 92914, 80088, 81487, 51269, 3087, 39900, 28304, 90846, 79499, 98362, 95138, 94, 70134, 34021, 20604, 29767, 80202, 63662, 2460, 1074, 83394, 54665, 29404, 29733, 68267, 56461, 70859, 90732, 24646, 36, 77451, 84033, 95525, 20602, 82373, 61362, 52234, 67230, 15365, 57830, 86370, 64547, 69344, 1204, 70395, 62559, 66663, 28297, 16598, 90077, 5553, 62168, 62799, 9288, 4799, 49929, 75152, 45690, 75134, 8548, 55333, 54860, 92797, 88727, 70535, 70937, 1723, 77205, 59606, 43976, 58055, 18249, 61257, 73871, 11303, 64399, 46824, 1854, 17127, 40773], thresh: int=19045484877):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=995, beta=243, xs=[0, 45, 82, 95, 96, 96, 96, 96, 97, 116, 209, 220, 256, 277, 284, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 286, 392, 551, 594, 610, 623, 648, 650, 730, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 735, 736, 956, 958, 971, 991, 992, 1005, 1030, 1085, 1147, 1209, 1214, 1214, 1215, 1219, 1219, 1219, 1219, 1219, 1220, 1226, 1248, 1356, 1522, 1548, 1692, 1768, 1776, 1780, 1780, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1786, 1840, 1856, 2267, 2281, 2323, 2342, 2351, 2358, 2558, 2681, 2701, 2715, 2723, 2727, 2731, 2732, 2733, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2735, 2758, 3325, 3411, 3713, 3839, 4017, 4161, 4226, 4496, 4777, 4826, 5053, 5297, 5433, 5514, 5913, 5915, 5922, 6014, 6015, 6022, 6253, 6346, 6566, 6729, 6764, 6917, 6943, 7075, 7194, 7293, 7363, 7385, 7434, 7750, 8104, 8116, 8314, 8343, 8527, 8714, 9092, 9106, 9150, 9174, 9183, 9314, 9348, 9414, 9494, 10297, 10541, 10776, 10851, 11369, 11598, 11634, 11739, 11911, 12011, 12094, 12620, 12755, 12760, 12948, 13859, 13871, 13988, 14139, 14194, 14211, 14244, 14391, 14403, 14596, 14603, 14615, 14776, 14912, 15665, 15734, 15762, 16304, 16475, 16495, 16686, 16719, 16864, 16954, 17111, 17151, 17442, 17474, 17535, 17869, 18033, 18413, 18579, 18656, 18739, 18982, 19029, 19114, 19280, 19383, 19436, 19694, 19795, 19917, 20221, 21386, 21483, 21514, 21521, 21535, 21941, 22279, 22449, 22513, 22726, 22948, 23064, 23176, 23223, 23737, 24007, 24195, 24496, 24531, 24614, 24645, 24928, 24986, 25176, 25220, 25232, 25379, 25663, 25784, 25920, 25951, 26032, 26212, 26986, 27048, 27198, 28018, 28072, 28542, 28571, 28830, 29032, 29173, 29563, 29903, 29941, 30183, 30212, 30384, 30562, 30582, 30671, 30702, 30833, 30903, 30908, 31189, 31243, 31901, 31952, 31974, 32099, 32351, 32754, 32953, 33013, 33125, 33158, 34337, 34449, 34890, 34906, 35103, 35402, 35411, 35481, 35523, 35616, 35755, 36209, 36632, 36982, 37209, 37405, 37605, 37672, 38091, 38645, 38822, 38843, 39019, 39790, 39910, 39962, 40236, 40677, 40680, 41026, 41728, 41796, 42027, 42326, 42495, 42641, 42680, 42699, 42744, 42746, 42923, 43089, 43115, 43178, 43181, 43552, 43644, 43838, 44147, 44293, 44332, 44471, 44533, 44557, 44613, 44620, 44647, 44695, 45176, 45231, 45330, 45408, 45446, 45561, 45744, 45752, 46023, 46129, 46226, 46703, 46818, 46857, 47091, 47170, 47205, 47329, 47341, 47396, 47806, 47832, 48050, 48071, 48256, 48334, 48366, 48987, 49137, 49248, 49321, 49402, 49552, 49728, 49825, 49905, 50501, 50708, 50757, 50896, 50949, 51139, 51299, 51337, 51536, 51806, 51830, 51899, 52327, 52628, 52778, 53161, 53191, 53302, 53696, 53770, 54158, 54475, 54594, 54606, 54761, 54861, 54901, 54936, 55430, 55510, 55632, 55685, 55943, 56048, 56241, 56401, 56587, 56786, 56801, 57107, 57289, 57307, 57412, 57952, 58050, 58181, 58562, 58625, 58690, 58941, 58979, 59099, 59111, 59322, 59351, 59442, 59574, 59621, 59825, 59919, 60291, 60313, 60615, 61547, 61564, 61629, 61848, 61937, 62002, 62123, 62518, 62692, 62705, 62724, 62930, 63110, 63140, 63313, 63317, 63464, 64061, 64125, 64129, 64553, 65050, 65086, 65308, 65318, 65475, 65796, 66096, 66139, 66174, 66334, 66628, 66787, 66806, 66831, 66931, 67167, 67456, 67526, 67655, 67901, 67948, 68243, 68309, 68431, 68846, 68908, 69185, 69424, 69444, 69686, 69789, 69953, 70000, 70028, 70117, 70285, 70341, 70451, 70728, 70792, 71071, 71129, 72100, 72181, 72335, 72361, 72453, 72967, 73247, 73328, 73409, 73518, 73539, 73659, 73678, 73976, 74167, 74269, 74537, 74597, 74655, 74839, 74978, 75065, 75084, 75092, 75112, 75137, 75435, 75454, 75460, 75480, 76597, 76668, 76934, 76958, 77197, 77218, 77293, 77620, 77664, 77906, 77966, 78541, 78783, 78980, 79280, 79481, 79542, 79644, 79752, 79767, 79831, 79981, 80161, 80250, 80285, 80369, 80551, 80560, 80585, 80650, 80669, 80774, 80805, 80874, 81005, 81472, 81487, 81594, 81811, 82005, 82012, 82174, 82278, 82336, 82649, 83032, 83343, 83424, 83588, 83611, 84000, 84131, 84391, 84642, 84887, 84987, 85046, 85373, 85884, 86056, 86161, 86358, 86684, 86836, 86868, 87532, 87545, 87656, 87748, 88051, 88200, 88256, 88424, 88638, 88673, 88925, 88979, 89069, 89392, 89393, 89453, 89663, 89677, 89959, 90025, 90259, 90296, 90593, 90686, 90941, 90978, 91209, 91312, 91432, 91600, 91609, 91627, 91649, 91891, 92120, 92266, 92310, 92466, 92609, 92649, 92883, 92905, 93341, 93397, 93452, 94064, 94238, 94433, 95197, 95206, 95366, 95588, 95817, 96024, 96226, 96689, 97036, 97038, 97057, 97216, 97538, 97619, 97732, 98279, 98321, 98331, 98658, 98672, 98702, 98727, 99133, 99175, 99373, 99655, 99872, 100000], ys=[44626, 10851, 62298, 48193, 68931, 61292, 54396, 9155, 70107, 37461, 46755, 44652, 50678, 20655, 92769, 22499, 82923, 80648, 98408, 14538, 98208, 78233, 60971, 68805, 2280, 13435, 92586, 5679, 35986, 79210, 46624, 92148, 63303, 83563, 85628, 33125, 18776, 43843, 7424, 18170, 44799, 35740, 51831, 38976, 64858, 15335, 86704, 64064, 63697, 53923, 53627, 7077, 24633, 60541, 11884, 56321, 58058, 65295, 31527, 72394, 14188, 72802, 85366, 13482, 69290, 55235, 20305, 76337, 61535, 11660, 88216, 55154, 37761, 72704, 33017, 74140, 94851, 20259, 88594, 34850, 39710, 29010, 99644, 8978, 19006, 26484, 55654, 64460, 87613, 11955, 16864, 43598, 68841, 38203, 9220, 89724, 22614, 25195, 51235, 58577, 34768, 59201, 97110, 44012, 68542, 15595, 77175, 83754, 1083, 80212, 9586, 92100, 11590, 7924, 7709, 7469, 77332, 90894, 10025, 64487, 85756, 21661, 21601, 27235, 4004, 56366, 21259, 80528, 34040, 3803, 86047, 82040, 37837, 2836, 82662, 96726, 81263, 66934, 26795, 28281, 12684, 88741, 36744, 10576, 697, 43637, 7897, 89986, 64036, 56282, 91985, 15908, 99531, 25868, 34216, 22922, 73038, 73532, 46494, 87862, 78973, 19895, 35368, 29762, 67750, 54186, 71275, 95942, 71593, 76487, 54248, 88247, 4526, 3681, 99781, 22776, 20907, 51999, 36858, 79596, 96056, 71695, 46639, 97655, 5110, 65086, 33506, 13378, 38960, 93049, 74644, 19954, 97430, 2193, 9757, 11917, 55273, 86432, 92763, 27230, 73825, 21721, 50924, 54027, 20306, 39274, 9934, 27426, 84842, 32083, 40044, 29091, 817, 85088, 62903, 52123, 63265, 33616, 9818, 46789, 41992, 74865, 34137, 26965, 33335, 72350, 81725, 65726, 63608, 52807, 37553, 238, 23389, 36378, 86541, 5001, 87049, 47846, 19096, 74741, 30068, 24484, 76612, 94006, 374, 96945, 9571, 13718, 70373, 68530, 56495, 89714, 51490, 75734, 5577, 40586, 83034, 25900, 46368, 41155, 32711, 61918, 43986, 72585, 84253, 72670, 30116, 42769, 27289, 47023, 91435, 10426, 9876, 51579, 20270, 39112, 91910, 6982, 54665, 5817, 95701, 20178, 19103, 44139, 98277, 49405, 7755, 13962, 43984, 73983, 6239, 40187, 74170, 58658, 54133, 93669, 22488, 92731, 49547, 85208, 82200, 2326, 26893, 16589, 68641, 25735, 75481, 2947, 37724, 44979, 53181, 2291, 95510, 65669, 63313, 44109, 8273, 5522, 1500, 65199, 69273, 58768, 27185, 56770, 88068, 13045, 79601, 94011, 82261, 49703, 21270, 16079, 99192, 57841, 46591, 85639, 71108, 88577, 26931, 40714, 4255, 49740, 70001, 93431, 67989, 95012, 89194, 86899, 66896, 90964, 74491, 63631, 30251, 6077, 18311, 16712, 24153, 25003, 18921, 37594, 51778, 66837, 51232, 99339, 7179, 4836, 48663, 54327, 97729, 36562, 18068, 56125, 35594, 26364, 81712, 51800, 34439, 49336, 39566, 48639, 12408, 47876, 66690, 11680, 87718, 51183, 51008, 47267, 16076, 70514, 31025, 65924, 86612, 1707, 6201, 82526, 62906, 52987, 65009, 26741, 96212, 11480, 64750, 43831, 14327, 28620, 60165, 41026, 13087, 77086, 85811, 13901, 34253, 98876, 78408, 18136, 53830, 92225, 18287, 15072, 13993, 67360, 78126, 84753, 17725, 38061, 73668, 82247, 88199, 99693, 63243, 26310, 86063, 72386, 58620, 90901, 45546, 33755, 1237, 90419, 77357, 49090, 69471, 16680, 8007, 72810, 40323, 1070, 98965, 77502, 41124, 21690, 58258, 1371, 90856, 21899, 39549, 99099, 65597, 880, 68380, 2053, 59032, 9096, 60713, 80662, 23442, 83813, 23262, 26199, 14367, 887, 43227, 50987, 9067, 85825, 90174, 12729, 9099, 49952, 10546, 56468, 43879, 62839, 22661, 58280, 97884, 41268, 12866, 44923, 61337, 44808, 32012, 54769, 82793, 60520, 71287, 65411, 81209, 92642, 20756, 65192, 82799, 66278, 60699, 44525, 90491, 80142, 21212, 57710, 76824, 16004, 54091, 32532, 69832, 70771, 59119, 67504, 15322, 56258, 9982, 94563, 13435, 78686, 44269, 89036, 95307, 45237, 59928, 12488, 51434, 80953, 82263, 35143, 90443, 92031, 56695, 8630, 84222, 88369, 97411, 7859, 39025, 32352, 11459, 27531, 46416, 94958, 80394, 24398, 62837, 52553, 91190, 89980, 45100, 87459, 90312, 3830, 62435, 23200, 52624, 38523, 98248, 64888, 13368, 89372, 34511, 69676, 52624, 95402, 56705, 16298, 9687, 4405, 36778, 9563, 91591, 3778, 63904, 44615, 10564, 46040, 12668, 52502, 20996, 98293, 13237, 67585, 2570, 28711, 29184, 4231, 27632, 78865, 14001, 84017, 25526, 97074, 24219, 80805, 25605, 34594, 58613, 36118, 46040, 81225, 90328, 2505, 28087, 6619, 86087, 11781, 11632, 75929, 23822, 56037, 81686, 98544, 20291, 44542, 95066, 50895, 16715, 11209, 24591, 84825, 18006, 45657, 15418, 68970, 34828, 10066, 52200, 10899, 27464, 25612, 23495, 73845, 6107, 95876, 43920, 2393, 11855, 64676, 83410, 34258, 15862, 50455, 15652, 222, 64995, 57894, 40386, 81106, 95761, 61444, 22357, 35533, 10684, 49523, 29032, 15595, 25499, 76245, 83649, 37439, 89621, 31206, 14352, 33605, 40417, 86368, 34238, 94818, 38670, 8441, 96082, 69313, 3169, 91354, 86824, 46999, 68583, 27165, 26594, 92344, 68305, 98621, 56108, 36723, 74358, 37241, 79641, 49691, 46144, 45851, 3837, 12023, 27110, 74132, 93933, 27768, 9142, 54824, 10489, 38615, 5209, 19347, 52357, 2529, 15482, 18003, 70878, 94588, 73281, 26175, 16592, 7120, 88858, 55258, 40441, 96364, 34845, 52247, 29167, 55309, 27334, 27725, 79243, 77998, 37767, 44884, 10343, 56328, 70070, 96399, 17129, 64682, 67189, 50126, 82945, 32499, 91185, 63286, 76211, 9942, 75121, 4056, 16686, 87819, 90136, 27208, 25203, 87981, 1155, 10523, 27125, 43096, 5340, 59258, 8235, 42492, 27515, 54245, 81595, 8440, 36773, 87553, 54191, 99309, 46286, 18881, 74271, 31802, 83765, 44800, 93067, 14603, 79939, 49587, 86986, 32882, 63565, 78012, 891, 62212, 5144, 69532, 20625, 60637, 84365, 19233, 80868, 46358, 61334, 76855, 57565, 9830, 12289, 59434, 77185, 64141, 67734, 27104, 25104, 77593, 64616, 19254, 19779, 55396, 30359, 23659, 98024, 49219, 82593, 16939, 23256, 45303, 58065, 79318, 83247, 1078, 77105, 38788, 47514, 21148, 11132, 9796, 81250, 86170, 88196, 10195, 21978, 30845, 62946, 7089, 72150, 56812, 49667, 63254, 77285, 25415, 9406, 32969, 58128, 54632, 45908, 11909, 44717, 32313, 40394, 25376, 40630, 31001, 84726, 7987, 51982, 80984, 67688, 48077, 55415, 79695, 31232, 51765, 25389, 8752, 43876, 81997, 47329, 59140, 41198, 52521, 81275, 97552, 26551, 81972, 29003, 64543, 98092, 26865, 79996, 29921, 27884, 1155, 29811, 18555, 28607, 67296, 87172, 675, 60276, 31824, 76376, 32245, 33581, 63483, 82705, 46385, 81396, 81596, 48179, 80283, 37961, 13814, 42251, 43808, 78431, 28330, 82639, 90257, 89389, 25675, 68085, 93269, 62920, 65979, 51406, 16154, 57553, 92914, 80088, 81487, 51269, 3087, 39900, 28304, 90846, 79499, 98362, 95138, 94, 70134, 34021, 20604, 29767, 80202, 63662, 2460, 1074, 83394, 54665, 29404, 29733, 68267, 56461, 70859, 90732, 24646, 36, 77451, 84033, 95525, 20602, 82373, 61362, 52234, 67230, 15365, 57830, 86370, 64547, 69344, 1204, 70395, 62559, 66663, 28297, 16598, 90077, 5553, 62168, 62799, 9288, 4799, 49929, 75152, 45690, 75134, 8548, 55333, 54860, 92797, 88727, 70535, 70937, 1723, 77205, 59606, 43976, 58055, 18249, 61257, 73871, 11303, 64399, 46824, 1854, 17127, 40773], thresh=19045484877):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_90",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=13, beta: int=1, xs: List[int]=[0, 3999, 6229, 27028, 27914, 30250, 37601, 38790, 39051, 40239, 40814, 41056, 70019, 71126, 71699, 80722, 82111, 90137, 100000], ys: List[int]=[84197, 52960, 96040, 52673, 34990, 54731, 21231, 61313, 15731, 70389, 868, 11038, 82668, 26001, 81059, 80917, 63821, 30400, 19861], thresh: int=1889842373):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=13, beta=1, xs=[0, 3999, 6229, 27028, 27914, 30250, 37601, 38790, 39051, 40239, 40814, 41056, 70019, 71126, 71699, 80722, 82111, 90137, 100000], ys=[84197, 52960, 96040, 52673, 34990, 54731, 21231, 61313, 15731, 70389, 868, 11038, 82668, 26001, 81059, 80917, 63821, 30400, 19861], thresh=1889842373):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_91",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=323, beta: int=760, xs: List[int]=[0, 1104, 1399, 1507, 5589, 6896, 7098, 7105, 7105, 7105, 7105, 7106, 8233, 8996, 9173, 9190, 12423, 15909, 16373, 17407, 17626, 17934, 19634, 20944, 22398, 22536, 22748, 22753, 22753, 22753, 22753, 22754, 23120, 24093, 24270, 24517, 28098, 30143, 31471, 33594, 33660, 34062, 38234, 39522, 39897, 42950, 46868, 47153, 47346, 55706, 57147, 59148, 59150, 59189, 59193, 60248, 60469, 60532, 60840, 61613, 61733, 61737, 61751, 61755, 61756, 63303, 64112, 67712, 68781, 69063, 69100, 72756, 74432, 75188, 79823, 79994, 80652, 80743, 81608, 82723, 82876, 82922, 83132, 83675, 84521, 84910, 89521, 89716, 90065, 90529, 90625, 92517, 92518, 93230, 93758, 93917, 94556, 94742, 94743, 94755, 94762, 94765, 94767, 94769, 94770, 94770, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94772, 96485, 97004, 97019, 97019, 97043, 98180, 99531, 99905, 100000], ys: List[int]=[15675, 16230, 1365, 81347, 15900, 1836, 92129, 24760, 53790, 69304, 11577, 67170, 25119, 25996, 35481, 30659, 59148, 46719, 72239, 79986, 74212, 59145, 62, 84124, 82502, 29328, 11425, 48221, 42106, 57853, 52364, 622, 25499, 8132, 44819, 27605, 36932, 91154, 95495, 67869, 66132, 53137, 2420, 73681, 22169, 43545, 82421, 26910, 91002, 56097, 108, 49828, 33056, 28266, 52508, 80691, 50217, 93120, 31612, 10057, 67623, 97222, 7918, 56917, 55561, 31599, 57057, 71879, 73503, 17114, 91223, 15329, 1833, 72005, 71499, 2212, 48712, 69909, 74099, 20464, 75830, 12856, 16551, 30775, 87069, 15639, 13267, 83090, 9404, 27608, 12378, 38960, 79508, 33243, 8863, 29437, 58895, 83810, 37347, 9974, 66494, 93160, 22695, 70195, 52598, 58171, 79966, 41959, 11609, 60697, 23368, 84053, 49585, 43945, 79529, 31048, 14262, 53210, 44138, 22653, 74917, 42416, 6780, 94168, 49168, 71956, 64882, 75771, 45841, 36900, 50464, 1298, 77855, 35286, 20659, 86314, 12921, 78602, 41725, 30273, 2706], thresh: int=222679487684):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=323, beta=760, xs=[0, 1104, 1399, 1507, 5589, 6896, 7098, 7105, 7105, 7105, 7105, 7106, 8233, 8996, 9173, 9190, 12423, 15909, 16373, 17407, 17626, 17934, 19634, 20944, 22398, 22536, 22748, 22753, 22753, 22753, 22753, 22754, 23120, 24093, 24270, 24517, 28098, 30143, 31471, 33594, 33660, 34062, 38234, 39522, 39897, 42950, 46868, 47153, 47346, 55706, 57147, 59148, 59150, 59189, 59193, 60248, 60469, 60532, 60840, 61613, 61733, 61737, 61751, 61755, 61756, 63303, 64112, 67712, 68781, 69063, 69100, 72756, 74432, 75188, 79823, 79994, 80652, 80743, 81608, 82723, 82876, 82922, 83132, 83675, 84521, 84910, 89521, 89716, 90065, 90529, 90625, 92517, 92518, 93230, 93758, 93917, 94556, 94742, 94743, 94755, 94762, 94765, 94767, 94769, 94770, 94770, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94771, 94772, 96485, 97004, 97019, 97019, 97043, 98180, 99531, 99905, 100000], ys=[15675, 16230, 1365, 81347, 15900, 1836, 92129, 24760, 53790, 69304, 11577, 67170, 25119, 25996, 35481, 30659, 59148, 46719, 72239, 79986, 74212, 59145, 62, 84124, 82502, 29328, 11425, 48221, 42106, 57853, 52364, 622, 25499, 8132, 44819, 27605, 36932, 91154, 95495, 67869, 66132, 53137, 2420, 73681, 22169, 43545, 82421, 26910, 91002, 56097, 108, 49828, 33056, 28266, 52508, 80691, 50217, 93120, 31612, 10057, 67623, 97222, 7918, 56917, 55561, 31599, 57057, 71879, 73503, 17114, 91223, 15329, 1833, 72005, 71499, 2212, 48712, 69909, 74099, 20464, 75830, 12856, 16551, 30775, 87069, 15639, 13267, 83090, 9404, 27608, 12378, 38960, 79508, 33243, 8863, 29437, 58895, 83810, 37347, 9974, 66494, 93160, 22695, 70195, 52598, 58171, 79966, 41959, 11609, 60697, 23368, 84053, 49585, 43945, 79529, 31048, 14262, 53210, 44138, 22653, 74917, 42416, 6780, 94168, 49168, 71956, 64882, 75771, 45841, 36900, 50464, 1298, 77855, 35286, 20659, 86314, 12921, 78602, 41725, 30273, 2706], thresh=222679487684):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_92",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=806, beta: int=216, xs: List[int]=[0, 1031, 2869, 2892, 2978, 4926, 5018, 5096, 5197, 5279, 5302, 5321, 5323, 5335, 5366, 5938, 5973, 6021, 6031, 6031, 6034, 6039, 6039, 6040, 6190, 6193, 9382, 9502, 11603, 13454, 13715, 13747, 13776, 14906, 15023, 15047, 15094, 15512, 15549, 15550, 15563, 15569, 15576, 17848, 17989, 18116, 18221, 18355, 19830, 30088, 31662, 31940, 32198, 32898, 33146, 33374, 35106, 35152, 35528, 39675, 39847, 40096, 40402, 40620, 40875, 40966, 40972, 40973, 40973, 40973, 40973, 40973, 40973, 40973, 40974, 41084, 41706, 42455, 42457, 42468, 42468, 42469, 42473, 42473, 42473, 42473, 42473, 42473, 42473, 42473, 42473, 42473, 42473, 42473, 42473, 42473, 42473, 42473, 42473, 42473, 42473, 42474, 44388, 45537, 47839, 51649, 52863, 53956, 53977, 54112, 55227, 55436, 56618, 57465, 59591, 62419, 62435, 62562, 62884, 62941, 62941, 62942, 63042, 63484, 63693, 63713, 63724, 63724, 63726, 63727, 63728, 63728, 63728, 63729, 64079, 64690, 64922, 65041, 65067, 65187, 65188, 65189, 65189, 65189, 65190, 67088, 67371, 67448, 67588, 67631, 67635, 70079, 71436, 71873, 71956, 71964, 71968, 71972, 71972, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71974, 74604, 78042, 78434, 78581, 79987, 79988, 80175, 80210, 90098, 90320, 90780, 92024, 92872, 93968, 95553, 95590, 95597, 96792, 96959, 96973, 97059, 97145, 97479, 97686, 97686, 97686, 97686, 97686, 97686, 97687, 99476, 100000], ys: List[int]=[65069, 44568, 86761, 74155, 62345, 43170, 1542, 49899, 62831, 26998, 36474, 75129, 31639, 46920, 80818, 93927, 35568, 47, 19629, 18094, 65545, 17518, 62036, 85802, 48909, 29322, 93043, 61962, 9186, 3101, 7808, 13987, 51046, 54642, 2494, 53162, 96903, 32718, 46421, 98952, 85527, 74444, 71476, 31470, 60402, 27276, 82548, 39036, 32702, 29448, 92627, 18275, 1067, 64805, 77601, 64720, 51873, 92511, 84983, 94570, 18211, 25869, 65935, 19510, 65073, 34387, 60501, 37919, 65071, 81815, 67867, 12463, 31705, 30842, 38131, 69755, 25344, 35429, 46779, 1197, 56660, 55444, 76326, 66117, 28948, 73832, 96376, 78292, 48400, 89077, 45915, 48355, 93635, 57142, 15020, 39718, 79847, 6856, 84741, 67669, 13540, 4998, 71241, 19703, 74492, 91676, 48725, 61873, 87343, 29247, 10761, 96757, 46689, 56882, 57841, 54079, 79499, 78957, 63843, 27097, 36166, 4821, 5074, 74750, 68910, 96817, 88030, 61406, 787, 28341, 15370, 30327, 43451, 88409, 70077, 95318, 18967, 90259, 88201, 46228, 82297, 10774, 98346, 62015, 13688, 90235, 44418, 43183, 97679, 64559, 39350, 81013, 29464, 74129, 92567, 59624, 41737, 68114, 43564, 55209, 95644, 11551, 77530, 6146, 16408, 80125, 29326, 71933, 88978, 91205, 84018, 73722, 43574, 62736, 67780, 82727, 17169, 83131, 33046, 55056, 39825, 63129, 35126, 97604, 85648, 14175, 32191, 75905, 16737, 82291, 32432, 69810, 5151, 49820, 94647, 67170, 92415, 48085, 63776, 36713, 96068, 15992, 19925, 81402, 27658, 73889, 81335, 28333, 41813, 22675, 726, 68380, 46141, 81754, 9556, 87387, 75577, 25367, 57764, 8887, 34705, 94380, 48617, 8791, 54378, 56262, 99339, 31127, 57655, 10521, 38174, 4481, 80897, 91700, 25780, 10770, 3736, 9824, 71133, 53238, 80021, 21148, 65790], thresh: int=78791132442):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=806, beta=216, xs=[0, 1031, 2869, 2892, 2978, 4926, 5018, 5096, 5197, 5279, 5302, 5321, 5323, 5335, 5366, 5938, 5973, 6021, 6031, 6031, 6034, 6039, 6039, 6040, 6190, 6193, 9382, 9502, 11603, 13454, 13715, 13747, 13776, 14906, 15023, 15047, 15094, 15512, 15549, 15550, 15563, 15569, 15576, 17848, 17989, 18116, 18221, 18355, 19830, 30088, 31662, 31940, 32198, 32898, 33146, 33374, 35106, 35152, 35528, 39675, 39847, 40096, 40402, 40620, 40875, 40966, 40972, 40973, 40973, 40973, 40973, 40973, 40973, 40973, 40974, 41084, 41706, 42455, 42457, 42468, 42468, 42469, 42473, 42473, 42473, 42473, 42473, 42473, 42473, 42473, 42473, 42473, 42473, 42473, 42473, 42473, 42473, 42473, 42473, 42473, 42473, 42474, 44388, 45537, 47839, 51649, 52863, 53956, 53977, 54112, 55227, 55436, 56618, 57465, 59591, 62419, 62435, 62562, 62884, 62941, 62941, 62942, 63042, 63484, 63693, 63713, 63724, 63724, 63726, 63727, 63728, 63728, 63728, 63729, 64079, 64690, 64922, 65041, 65067, 65187, 65188, 65189, 65189, 65189, 65190, 67088, 67371, 67448, 67588, 67631, 67635, 70079, 71436, 71873, 71956, 71964, 71968, 71972, 71972, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71973, 71974, 74604, 78042, 78434, 78581, 79987, 79988, 80175, 80210, 90098, 90320, 90780, 92024, 92872, 93968, 95553, 95590, 95597, 96792, 96959, 96973, 97059, 97145, 97479, 97686, 97686, 97686, 97686, 97686, 97686, 97687, 99476, 100000], ys=[65069, 44568, 86761, 74155, 62345, 43170, 1542, 49899, 62831, 26998, 36474, 75129, 31639, 46920, 80818, 93927, 35568, 47, 19629, 18094, 65545, 17518, 62036, 85802, 48909, 29322, 93043, 61962, 9186, 3101, 7808, 13987, 51046, 54642, 2494, 53162, 96903, 32718, 46421, 98952, 85527, 74444, 71476, 31470, 60402, 27276, 82548, 39036, 32702, 29448, 92627, 18275, 1067, 64805, 77601, 64720, 51873, 92511, 84983, 94570, 18211, 25869, 65935, 19510, 65073, 34387, 60501, 37919, 65071, 81815, 67867, 12463, 31705, 30842, 38131, 69755, 25344, 35429, 46779, 1197, 56660, 55444, 76326, 66117, 28948, 73832, 96376, 78292, 48400, 89077, 45915, 48355, 93635, 57142, 15020, 39718, 79847, 6856, 84741, 67669, 13540, 4998, 71241, 19703, 74492, 91676, 48725, 61873, 87343, 29247, 10761, 96757, 46689, 56882, 57841, 54079, 79499, 78957, 63843, 27097, 36166, 4821, 5074, 74750, 68910, 96817, 88030, 61406, 787, 28341, 15370, 30327, 43451, 88409, 70077, 95318, 18967, 90259, 88201, 46228, 82297, 10774, 98346, 62015, 13688, 90235, 44418, 43183, 97679, 64559, 39350, 81013, 29464, 74129, 92567, 59624, 41737, 68114, 43564, 55209, 95644, 11551, 77530, 6146, 16408, 80125, 29326, 71933, 88978, 91205, 84018, 73722, 43574, 62736, 67780, 82727, 17169, 83131, 33046, 55056, 39825, 63129, 35126, 97604, 85648, 14175, 32191, 75905, 16737, 82291, 32432, 69810, 5151, 49820, 94647, 67170, 92415, 48085, 63776, 36713, 96068, 15992, 19925, 81402, 27658, 73889, 81335, 28333, 41813, 22675, 726, 68380, 46141, 81754, 9556, 87387, 75577, 25367, 57764, 8887, 34705, 94380, 48617, 8791, 54378, 56262, 99339, 31127, 57655, 10521, 38174, 4481, 80897, 91700, 25780, 10770, 3736, 9824, 71133, 53238, 80021, 21148, 65790], thresh=78791132442):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_93",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=198, beta: int=481, xs: List[int]=[0, 77, 128, 174, 183, 183, 186, 210, 276, 306, 397, 414, 425, 427, 427, 427, 427, 428, 522, 542, 543, 545, 548, 553, 556, 559, 563, 723, 781, 789, 792, 806, 816, 919, 1080, 1088, 1102, 1139, 1146, 1241, 1244, 1245, 1246, 1248, 1249, 1249, 1249, 1249, 1250, 1251, 1254, 1262, 1407, 1446, 1606, 1623, 2049, 2067, 2077, 2077, 2078, 2078, 2078, 2078, 2078, 2078, 2078, 2079, 2213, 2246, 2275, 2282, 2447, 2808, 2839, 2915, 2925, 2928, 2930, 2964, 2975, 2980, 2980, 2981, 2992, 2997, 3032, 3032, 3035, 3150, 3174, 3177, 3202, 3205, 3206, 3207, 3207, 3207, 3207, 3207, 3207, 3207, 3207, 3207, 3207, 3207, 3208, 3211, 3212, 3226, 3229, 3309, 3372, 3390, 3394, 3400, 3403, 3405, 3406, 3462, 3495, 3521, 3525, 3529, 3529, 3532, 3611, 3615, 3615, 3615, 3615, 3617, 3617, 3617, 3617, 3617, 3617, 3617, 3617, 3617, 3618, 3641, 3677, 3685, 3695, 3704, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3706, 3728, 3750, 3761, 3764, 3808, 3831, 3861, 3863, 3894, 3915, 3924, 3938, 4233, 4435, 4455, 4511, 4654, 4722, 4846, 4967, 4982, 5000, 5054, 5146, 5184, 5412, 5567, 5641, 5684, 5739, 5787, 5811, 5926, 5987, 6239, 6365, 7396, 7515, 8001, 8025, 8064, 8147, 8163, 8226, 8230, 8259, 8275, 8321, 8725, 8737, 8853, 9012, 9476, 9706, 9796, 9811, 9812, 9931, 9991, 10037, 10045, 10198, 10248, 10315, 10515, 10525, 10969, 10970, 11248, 11258, 11311, 11356, 11406, 11477, 11591, 11621, 11804, 11816, 11831, 12007, 12542, 12629, 12656, 12779, 12912, 12920, 13479, 13514, 13617, 13643, 13723, 13823, 14063, 14101, 14122, 14186, 14276, 14679, 14718, 14881, 14994, 15043, 15052, 15158, 15443, 15471, 15575, 15597, 15680, 15971, 15975, 16106, 16135, 16261, 16601, 16820, 17110, 17185, 17188, 17308, 17340, 17417, 17596, 17637, 17715, 17728, 17893, 17919, 17932, 18047, 18118, 18164, 18240, 18289, 18350, 18417, 18582, 18892, 19087, 19357, 19377, 19458, 19510, 19582, 19931, 20017, 20029, 20135, 20188, 20204, 20206, 20299, 20458, 20464, 20543, 20770, 20833, 20920, 20979, 20983, 21250, 21308, 21433, 21459, 21466, 21520, 21555, 21595, 21791, 21846, 21853, 22290, 22309, 22371, 22608, 22856, 23006, 23018, 23090, 23284, 23473, 23562, 23598, 23719, 23818, 23894, 24007, 24062, 24151, 24204, 24322, 24431, 24463, 24554, 24626, 24697, 24811, 24937, 25304, 25512, 25519, 25531, 25573, 25607, 25628, 25716, 25794, 25942, 25955, 26081, 26097, 26571, 26745, 26846, 27094, 27124, 27128, 27240, 27314, 27360, 27418, 27533, 27598, 27702, 27747, 27898, 28057, 28395, 28409, 28741, 28867, 29137, 29393, 29896, 30139, 30398, 30444, 30532, 30554, 30690, 30700, 30747, 30898, 30900, 31036, 31148, 31165, 31268, 31287, 31293, 31306, 31309, 31745, 31826, 32179, 32290, 32310, 32358, 32545, 32914, 32946, 33103, 33153, 33245, 33274, 33314, 33463, 33711, 33846, 33857, 33900, 33933, 34219, 34265, 34274, 34281, 34309, 34486, 34523, 34914, 35003, 35065, 35077, 35137, 35200, 35306, 35367, 35436, 35443, 35455, 35466, 35636, 35649, 35690, 35768, 35805, 36200, 36227, 36241, 36471, 36715, 36858, 36879, 36945, 36983, 37000, 37137, 37182, 37205, 37564, 37819, 37863, 37888, 38140, 38147, 38150, 38261, 38510, 38879, 39366, 39383, 39693, 39989, 40059, 40142, 40374, 40439, 40474, 40625, 40658, 40714, 40784, 41208, 41255, 41307, 41384, 41435, 41464, 41488, 41686, 41974, 41990, 42057, 42158, 42450, 42454, 42560, 42771, 43013, 43027, 43114, 43123, 43185, 43334, 43383, 43530, 43650, 43915, 44043, 44124, 44129, 44563, 44699, 44741, 44953, 45138, 45205, 45280, 45312, 45755, 45829, 46016, 46172, 46430, 46671, 46848, 46976, 47067, 47364, 47411, 47425, 47589, 47981, 48023, 48077, 48133, 48182, 48278, 48331, 48615, 48780, 48931, 49053, 49136, 49315, 50182, 50257, 50439, 50713, 50796, 51055, 51304, 51309, 51528, 51615, 51770, 51859, 51990, 52180, 52271, 52361, 52381, 52386, 52445, 52494, 52588, 52764, 52926, 52931, 52968, 53114, 53265, 53344, 53491, 53500, 53620, 53766, 53770, 53827, 54075, 54187, 54198, 54227, 54471, 54504, 54655, 54710, 54959, 55073, 55361, 55362, 55394, 55396, 55464, 55675, 55721, 56068, 56159, 56171, 56222, 56223, 56230, 56262, 56340, 56346, 56388, 56414, 56793, 56843, 56878, 56973, 57200, 57260, 57310, 57323, 57458, 57598, 57637, 57754, 57880, 57983, 58122, 58225, 58531, 58532, 58533, 58822, 59074, 59112, 59132, 59161, 59166, 59226, 59469, 59503, 59504, 59630, 59850, 59959, 60067, 60391, 60532, 60948, 60978, 61087, 61420, 61471, 61549, 61607, 61947, 62049, 62108, 62151, 62253, 62298, 62340, 62617, 62776, 62816, 63227, 63233, 63278, 63279, 63380, 63480, 63524, 63526, 63928, 64049, 64107, 64114, 64191, 64579, 64717, 64728, 65033, 65072, 65168, 65188, 65208, 65253, 65313, 65409, 65482, 65681, 65900, 66121, 66125, 66149, 66182, 66364, 66380, 66418, 66734, 66799, 66866, 67043, 67145, 67176, 67273, 67284, 67372, 67382, 67655, 68019, 68118, 68175, 68239, 68277, 68282, 68721, 68817, 69042, 69142, 69271, 69278, 69361, 69526, 69619, 69870, 69963, 69975, 69999, 70159, 70213, 70675, 70698, 70885, 71137, 71153, 71162, 71208, 71280, 71395, 71401, 71412, 71414, 71446, 71493, 71722, 71889, 71986, 72077, 72088, 72200, 72270, 72377, 72424, 72507, 72562, 72591, 72770, 72794, 72857, 73008, 73361, 73460, 73580, 73835, 74011, 74061, 74234, 74293, 74383, 74443, 74741, 75038, 75042, 75359, 75473, 75682, 75685, 75722, 75725, 76365, 76423, 76518, 77038, 77098, 77236, 77499, 77842, 77936, 77945, 78289, 78355, 78738, 79117, 79203, 79218, 79234, 79395, 79527, 79620, 79697, 79961, 80021, 80028, 80081, 80130, 80286, 80408, 80485, 80712, 80713, 80773, 80899, 80974, 81445, 81455, 81852, 81912, 81992, 81999, 82002, 82072, 82149, 82335, 82395, 82441, 82444, 82584, 82781, 82802, 82979, 83030, 83037, 83068, 83150, 83365, 83398, 83409, 83496, 83566, 83660, 83670, 83717, 83822, 83953, 83986, 84033, 84066, 84127, 84322, 84522, 84833, 84848, 85193, 85201, 85314, 85372, 85379, 85433, 85470, 85505, 86063, 86162, 86275, 86423, 86435, 86536, 86737, 86837, 86948, 86968, 87068, 87125, 87302, 87577, 87699, 87798, 87867, 88018, 88184, 88304, 88395, 88547, 88588, 88596, 88702, 88725, 88749, 89079, 89335, 89337, 89384, 89545, 89641, 89787, 90261, 90296, 90317, 90690, 90775, 90870, 91045, 91056, 91172, 91233, 91268, 91338, 91401, 91470, 91478, 91525, 91570, 91581, 91740, 92059, 92257, 92273, 92393, 92502, 92574, 92581, 92779, 92780, 92870, 93033, 93189, 93323, 93367, 93382, 93588, 93645, 93658, 93982, 94002, 94042, 94434, 94655, 94800, 94802, 94911, 95012, 95236, 95244, 95313, 95450, 95649, 95658, 95669, 95671, 95766, 95781, 96164, 96201, 96223, 96392, 96422, 96467, 96571, 96593, 96629, 96652, 96793, 97013, 97072, 97303, 97326, 97555, 97911, 97953, 98143, 98324, 99024, 99093, 99142, 99328, 99380, 99403, 99465, 99602, 99609, 99922, 99974, 99979, 100000], ys: List[int]=[28529, 75392, 68327, 82911, 77484, 56257, 49802, 76975, 18442, 19013, 15034, 44095, 71921, 81326, 72940, 20103, 42058, 81826, 5775, 96687, 84996, 43558, 96153, 14089, 27137, 77059, 32801, 32607, 63033, 82324, 26983, 59127, 33069, 73124, 75360, 73526, 54521, 21644, 39797, 50170, 43452, 54302, 11336, 3955, 38793, 8373, 7137, 45605, 80269, 50723, 13719, 53602, 10132, 78292, 5612, 34481, 55818, 5806, 69831, 93780, 72049, 28747, 91633, 36202, 44703, 31529, 54060, 3900, 96043, 70636, 89777, 4102, 67147, 12360, 20591, 56964, 77981, 45711, 24834, 26532, 40123, 570, 62764, 74484, 55308, 66003, 33667, 95920, 52913, 66683, 69353, 86533, 41198, 46060, 74962, 79901, 49293, 9572, 44861, 77103, 10064, 85692, 98584, 49677, 44976, 33121, 47119, 2065, 45725, 69857, 40543, 45423, 36031, 10391, 56279, 8078, 60431, 61323, 24710, 90243, 42361, 82877, 5805, 91144, 88798, 94119, 5235, 34744, 63649, 27221, 12720, 66635, 62766, 56339, 91194, 89686, 10073, 22782, 39068, 93132, 68920, 78980, 42534, 17411, 61428, 16597, 95964, 38847, 46832, 67364, 92103, 19731, 71827, 95983, 71901, 84583, 85198, 83455, 27531, 86265, 17143, 83485, 38368, 76689, 41675, 19290, 82998, 95269, 57268, 77621, 74765, 54951, 5996, 25660, 84809, 10406, 32040, 66471, 73378, 18838, 18875, 91811, 32324, 2734, 89791, 27763, 89027, 12469, 53797, 71636, 42998, 65334, 61860, 20399, 78279, 98427, 6291, 33790, 18871, 1731, 10190, 95758, 55467, 60984, 87913, 48783, 55408, 58785, 44504, 93960, 74685, 72566, 95878, 65567, 73167, 15435, 9610, 25290, 37811, 49082, 97928, 17750, 15166, 4042, 81751, 13090, 77986, 52073, 4262, 97039, 9528, 99471, 58727, 77215, 97122, 29657, 78561, 9248, 36705, 49851, 74294, 44959, 73428, 27248, 63432, 39425, 20237, 96868, 13792, 74361, 49445, 82966, 86416, 39134, 55715, 41543, 59165, 20307, 76895, 25081, 7187, 46828, 85528, 50876, 58426, 50206, 41122, 28010, 30949, 89318, 46915, 85928, 45686, 96676, 86528, 94523, 55373, 81432, 46970, 89327, 56516, 36343, 86503, 93823, 48769, 47892, 9785, 53042, 13955, 41289, 98894, 51395, 96719, 7362, 12634, 77326, 52853, 67078, 90567, 66039, 18773, 76411, 49533, 48903, 37107, 20282, 54001, 87151, 30540, 46642, 90717, 89055, 395, 24005, 57403, 39332, 22760, 9144, 63413, 27100, 71776, 29399, 1579, 7440, 49706, 12971, 20133, 19623, 54657, 38238, 51475, 62690, 79825, 63822, 33339, 12349, 1940, 9092, 81523, 25435, 51696, 9702, 68950, 64820, 25180, 43666, 93512, 2940, 7335, 15158, 90884, 24558, 54885, 72054, 99542, 9850, 12353, 82308, 44465, 311, 46659, 3939, 98333, 34382, 8539, 50735, 89125, 65139, 58359, 36502, 35210, 48569, 99535, 53386, 58955, 47500, 91492, 11310, 40010, 33362, 20677, 93606, 12815, 54685, 73614, 84292, 71177, 11019, 91701, 21355, 50444, 56636, 41449, 13924, 17499, 97566, 20817, 37926, 25762, 73850, 27486, 95963, 57597, 22498, 86959, 88754, 51938, 77409, 9413, 66065, 68966, 15132, 15487, 44745, 28114, 56899, 12070, 7152, 38919, 57466, 88982, 96849, 20198, 87959, 77059, 24795, 78911, 74666, 13914, 11739, 68246, 43338, 75203, 2273, 27595, 98847, 97122, 20918, 34412, 22242, 60180, 89826, 46755, 66281, 6085, 19598, 13255, 89354, 56496, 81603, 97005, 42983, 8643, 38970, 64082, 80264, 67332, 77664, 1559, 49861, 33456, 25268, 67057, 89006, 98565, 8863, 33302, 90111, 15922, 96382, 47106, 47194, 23535, 91473, 98520, 64796, 45393, 99395, 34264, 17725, 71450, 59592, 42442, 28750, 75201, 59400, 71209, 83552, 41246, 54180, 65241, 459, 26418, 48887, 53153, 83989, 87489, 63222, 8517, 64089, 32621, 1300, 121, 80071, 25467, 1894, 80320, 80415, 91101, 24895, 84683, 45848, 62462, 50835, 62477, 541, 70267, 40981, 10015, 38430, 26210, 23917, 57245, 26855, 6080, 34354, 70185, 31836, 47754, 87174, 97851, 44125, 30687, 87774, 48222, 58268, 79643, 12416, 88873, 58502, 35691, 59989, 50780, 13557, 82060, 29382, 9933, 22059, 40786, 67790, 52071, 41434, 70909, 81035, 77253, 87517, 50566, 24307, 96744, 10272, 38619, 12116, 87370, 58784, 79780, 59288, 94207, 85278, 62043, 99, 17832, 61441, 27148, 68462, 9130, 26074, 82407, 35407, 33421, 49440, 79486, 94965, 28606, 44245, 13248, 53189, 58649, 90925, 83542, 21291, 72273, 28956, 37282, 36201, 78217, 22942, 67465, 32983, 18609, 7054, 78784, 91818, 81553, 52859, 3541, 42094, 14617, 84302, 851, 87546, 82484, 5125, 2144, 94810, 39809, 84956, 71190, 95867, 8696, 96195, 42103, 64644, 65310, 63235, 59185, 5334, 52151, 33267, 27842, 77242, 40243, 46926, 13042, 35571, 71622, 64061, 16442, 36282, 10478, 12558, 54021, 19276, 94013, 48531, 86725, 95187, 85725, 28294, 8843, 92673, 5684, 38439, 35269, 12606, 31718, 80982, 858, 10211, 73457, 92439, 12747, 69576, 38987, 846, 99735, 41922, 95222, 74846, 54726, 18621, 51278, 65081, 22703, 47764, 23575, 90471, 77083, 13650, 8783, 90031, 37115, 87620, 85574, 38483, 41394, 3991, 96017, 39543, 92007, 34492, 56518, 39956, 52640, 26734, 13961, 92432, 97464, 30631, 44289, 34563, 93324, 62778, 67198, 5192, 73326, 78229, 12666, 7615, 85446, 8344, 95278, 43723, 61298, 4905, 75913, 51393, 74096, 67541, 54939, 58560, 22174, 38865, 88231, 85379, 32489, 57363, 45446, 75042, 34991, 63889, 72188, 24971, 94988, 43005, 68811, 64960, 35864, 48954, 35909, 3330, 35348, 71652, 69070, 66715, 22184, 49229, 75293, 57041, 22444, 90772, 59897, 87397, 61095, 8285, 84874, 51568, 34531, 33749, 33824, 19946, 88865, 53138, 80006, 54680, 29267, 95810, 48663, 53209, 21048, 15601, 63350, 2713, 12590, 30286, 51668, 59785, 9289, 70629, 70411, 79764, 69650, 84028, 96280, 19546, 89, 80586, 63343, 17790, 92931, 42451, 83771, 3170, 72183, 35077, 75631, 53113, 65325, 73030, 28479, 96281, 25138, 31127, 66744, 86624, 13623, 15639, 34629, 68165, 13966, 97611, 73544, 45281, 2330, 59332, 90281, 40555, 91314, 39715, 18585, 34700, 4346, 15419, 28487, 84482, 43778, 57440, 82776, 39450, 5013, 5123, 19948, 85118, 77780, 85882, 72022, 1310, 99362, 77808, 39300, 14559, 55003, 22628, 67790, 15561, 16167, 11809, 24375, 95037, 80638, 88610, 31326, 24887, 80530, 72977, 21594, 95637, 95832, 20136, 90818, 87667, 85127, 53819, 4695, 75153, 14205, 86210, 92930, 38943, 7583, 70592, 53098, 47039, 20477, 67677, 74001, 37356, 58854, 48980, 44413, 59073, 92393, 46618, 39577, 59470, 32306, 44531, 54283, 79944, 55926, 10395, 28022, 43023, 30533, 34121, 30310, 55505, 44065, 20913, 94755, 19197, 53884, 41059, 56951, 74181, 61376, 49178, 77932, 91775, 35646, 8413, 2580, 88923, 50792, 98933, 66865, 89427, 93187, 76684, 16978, 31614, 71861, 64018, 74822, 46145, 29174, 20386, 36963, 33458, 56208, 51099, 95897, 26095, 76390, 32352, 76679, 6696, 45004, 65115, 8250, 53841, 33372, 5934, 38546, 81172, 80743, 50024, 66394, 85713, 56752, 5723, 63829, 77739, 1518, 2966, 17009, 81920, 81624, 74820, 89468, 55332, 93255, 95120, 15189, 67999, 47069, 61270, 11055, 73602, 18302, 80459, 92362, 49301, 72312, 55385, 74666, 33097, 17930, 85475, 23780, 93538, 96895, 9037, 43514, 86739, 28680, 37013, 64261, 78463, 30359, 7156, 98826, 48226, 84423, 70684, 36881, 23557, 30133, 34079, 67898], thresh: int=16577921144):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=198, beta=481, xs=[0, 77, 128, 174, 183, 183, 186, 210, 276, 306, 397, 414, 425, 427, 427, 427, 427, 428, 522, 542, 543, 545, 548, 553, 556, 559, 563, 723, 781, 789, 792, 806, 816, 919, 1080, 1088, 1102, 1139, 1146, 1241, 1244, 1245, 1246, 1248, 1249, 1249, 1249, 1249, 1250, 1251, 1254, 1262, 1407, 1446, 1606, 1623, 2049, 2067, 2077, 2077, 2078, 2078, 2078, 2078, 2078, 2078, 2078, 2079, 2213, 2246, 2275, 2282, 2447, 2808, 2839, 2915, 2925, 2928, 2930, 2964, 2975, 2980, 2980, 2981, 2992, 2997, 3032, 3032, 3035, 3150, 3174, 3177, 3202, 3205, 3206, 3207, 3207, 3207, 3207, 3207, 3207, 3207, 3207, 3207, 3207, 3207, 3208, 3211, 3212, 3226, 3229, 3309, 3372, 3390, 3394, 3400, 3403, 3405, 3406, 3462, 3495, 3521, 3525, 3529, 3529, 3532, 3611, 3615, 3615, 3615, 3615, 3617, 3617, 3617, 3617, 3617, 3617, 3617, 3617, 3617, 3618, 3641, 3677, 3685, 3695, 3704, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3706, 3728, 3750, 3761, 3764, 3808, 3831, 3861, 3863, 3894, 3915, 3924, 3938, 4233, 4435, 4455, 4511, 4654, 4722, 4846, 4967, 4982, 5000, 5054, 5146, 5184, 5412, 5567, 5641, 5684, 5739, 5787, 5811, 5926, 5987, 6239, 6365, 7396, 7515, 8001, 8025, 8064, 8147, 8163, 8226, 8230, 8259, 8275, 8321, 8725, 8737, 8853, 9012, 9476, 9706, 9796, 9811, 9812, 9931, 9991, 10037, 10045, 10198, 10248, 10315, 10515, 10525, 10969, 10970, 11248, 11258, 11311, 11356, 11406, 11477, 11591, 11621, 11804, 11816, 11831, 12007, 12542, 12629, 12656, 12779, 12912, 12920, 13479, 13514, 13617, 13643, 13723, 13823, 14063, 14101, 14122, 14186, 14276, 14679, 14718, 14881, 14994, 15043, 15052, 15158, 15443, 15471, 15575, 15597, 15680, 15971, 15975, 16106, 16135, 16261, 16601, 16820, 17110, 17185, 17188, 17308, 17340, 17417, 17596, 17637, 17715, 17728, 17893, 17919, 17932, 18047, 18118, 18164, 18240, 18289, 18350, 18417, 18582, 18892, 19087, 19357, 19377, 19458, 19510, 19582, 19931, 20017, 20029, 20135, 20188, 20204, 20206, 20299, 20458, 20464, 20543, 20770, 20833, 20920, 20979, 20983, 21250, 21308, 21433, 21459, 21466, 21520, 21555, 21595, 21791, 21846, 21853, 22290, 22309, 22371, 22608, 22856, 23006, 23018, 23090, 23284, 23473, 23562, 23598, 23719, 23818, 23894, 24007, 24062, 24151, 24204, 24322, 24431, 24463, 24554, 24626, 24697, 24811, 24937, 25304, 25512, 25519, 25531, 25573, 25607, 25628, 25716, 25794, 25942, 25955, 26081, 26097, 26571, 26745, 26846, 27094, 27124, 27128, 27240, 27314, 27360, 27418, 27533, 27598, 27702, 27747, 27898, 28057, 28395, 28409, 28741, 28867, 29137, 29393, 29896, 30139, 30398, 30444, 30532, 30554, 30690, 30700, 30747, 30898, 30900, 31036, 31148, 31165, 31268, 31287, 31293, 31306, 31309, 31745, 31826, 32179, 32290, 32310, 32358, 32545, 32914, 32946, 33103, 33153, 33245, 33274, 33314, 33463, 33711, 33846, 33857, 33900, 33933, 34219, 34265, 34274, 34281, 34309, 34486, 34523, 34914, 35003, 35065, 35077, 35137, 35200, 35306, 35367, 35436, 35443, 35455, 35466, 35636, 35649, 35690, 35768, 35805, 36200, 36227, 36241, 36471, 36715, 36858, 36879, 36945, 36983, 37000, 37137, 37182, 37205, 37564, 37819, 37863, 37888, 38140, 38147, 38150, 38261, 38510, 38879, 39366, 39383, 39693, 39989, 40059, 40142, 40374, 40439, 40474, 40625, 40658, 40714, 40784, 41208, 41255, 41307, 41384, 41435, 41464, 41488, 41686, 41974, 41990, 42057, 42158, 42450, 42454, 42560, 42771, 43013, 43027, 43114, 43123, 43185, 43334, 43383, 43530, 43650, 43915, 44043, 44124, 44129, 44563, 44699, 44741, 44953, 45138, 45205, 45280, 45312, 45755, 45829, 46016, 46172, 46430, 46671, 46848, 46976, 47067, 47364, 47411, 47425, 47589, 47981, 48023, 48077, 48133, 48182, 48278, 48331, 48615, 48780, 48931, 49053, 49136, 49315, 50182, 50257, 50439, 50713, 50796, 51055, 51304, 51309, 51528, 51615, 51770, 51859, 51990, 52180, 52271, 52361, 52381, 52386, 52445, 52494, 52588, 52764, 52926, 52931, 52968, 53114, 53265, 53344, 53491, 53500, 53620, 53766, 53770, 53827, 54075, 54187, 54198, 54227, 54471, 54504, 54655, 54710, 54959, 55073, 55361, 55362, 55394, 55396, 55464, 55675, 55721, 56068, 56159, 56171, 56222, 56223, 56230, 56262, 56340, 56346, 56388, 56414, 56793, 56843, 56878, 56973, 57200, 57260, 57310, 57323, 57458, 57598, 57637, 57754, 57880, 57983, 58122, 58225, 58531, 58532, 58533, 58822, 59074, 59112, 59132, 59161, 59166, 59226, 59469, 59503, 59504, 59630, 59850, 59959, 60067, 60391, 60532, 60948, 60978, 61087, 61420, 61471, 61549, 61607, 61947, 62049, 62108, 62151, 62253, 62298, 62340, 62617, 62776, 62816, 63227, 63233, 63278, 63279, 63380, 63480, 63524, 63526, 63928, 64049, 64107, 64114, 64191, 64579, 64717, 64728, 65033, 65072, 65168, 65188, 65208, 65253, 65313, 65409, 65482, 65681, 65900, 66121, 66125, 66149, 66182, 66364, 66380, 66418, 66734, 66799, 66866, 67043, 67145, 67176, 67273, 67284, 67372, 67382, 67655, 68019, 68118, 68175, 68239, 68277, 68282, 68721, 68817, 69042, 69142, 69271, 69278, 69361, 69526, 69619, 69870, 69963, 69975, 69999, 70159, 70213, 70675, 70698, 70885, 71137, 71153, 71162, 71208, 71280, 71395, 71401, 71412, 71414, 71446, 71493, 71722, 71889, 71986, 72077, 72088, 72200, 72270, 72377, 72424, 72507, 72562, 72591, 72770, 72794, 72857, 73008, 73361, 73460, 73580, 73835, 74011, 74061, 74234, 74293, 74383, 74443, 74741, 75038, 75042, 75359, 75473, 75682, 75685, 75722, 75725, 76365, 76423, 76518, 77038, 77098, 77236, 77499, 77842, 77936, 77945, 78289, 78355, 78738, 79117, 79203, 79218, 79234, 79395, 79527, 79620, 79697, 79961, 80021, 80028, 80081, 80130, 80286, 80408, 80485, 80712, 80713, 80773, 80899, 80974, 81445, 81455, 81852, 81912, 81992, 81999, 82002, 82072, 82149, 82335, 82395, 82441, 82444, 82584, 82781, 82802, 82979, 83030, 83037, 83068, 83150, 83365, 83398, 83409, 83496, 83566, 83660, 83670, 83717, 83822, 83953, 83986, 84033, 84066, 84127, 84322, 84522, 84833, 84848, 85193, 85201, 85314, 85372, 85379, 85433, 85470, 85505, 86063, 86162, 86275, 86423, 86435, 86536, 86737, 86837, 86948, 86968, 87068, 87125, 87302, 87577, 87699, 87798, 87867, 88018, 88184, 88304, 88395, 88547, 88588, 88596, 88702, 88725, 88749, 89079, 89335, 89337, 89384, 89545, 89641, 89787, 90261, 90296, 90317, 90690, 90775, 90870, 91045, 91056, 91172, 91233, 91268, 91338, 91401, 91470, 91478, 91525, 91570, 91581, 91740, 92059, 92257, 92273, 92393, 92502, 92574, 92581, 92779, 92780, 92870, 93033, 93189, 93323, 93367, 93382, 93588, 93645, 93658, 93982, 94002, 94042, 94434, 94655, 94800, 94802, 94911, 95012, 95236, 95244, 95313, 95450, 95649, 95658, 95669, 95671, 95766, 95781, 96164, 96201, 96223, 96392, 96422, 96467, 96571, 96593, 96629, 96652, 96793, 97013, 97072, 97303, 97326, 97555, 97911, 97953, 98143, 98324, 99024, 99093, 99142, 99328, 99380, 99403, 99465, 99602, 99609, 99922, 99974, 99979, 100000], ys=[28529, 75392, 68327, 82911, 77484, 56257, 49802, 76975, 18442, 19013, 15034, 44095, 71921, 81326, 72940, 20103, 42058, 81826, 5775, 96687, 84996, 43558, 96153, 14089, 27137, 77059, 32801, 32607, 63033, 82324, 26983, 59127, 33069, 73124, 75360, 73526, 54521, 21644, 39797, 50170, 43452, 54302, 11336, 3955, 38793, 8373, 7137, 45605, 80269, 50723, 13719, 53602, 10132, 78292, 5612, 34481, 55818, 5806, 69831, 93780, 72049, 28747, 91633, 36202, 44703, 31529, 54060, 3900, 96043, 70636, 89777, 4102, 67147, 12360, 20591, 56964, 77981, 45711, 24834, 26532, 40123, 570, 62764, 74484, 55308, 66003, 33667, 95920, 52913, 66683, 69353, 86533, 41198, 46060, 74962, 79901, 49293, 9572, 44861, 77103, 10064, 85692, 98584, 49677, 44976, 33121, 47119, 2065, 45725, 69857, 40543, 45423, 36031, 10391, 56279, 8078, 60431, 61323, 24710, 90243, 42361, 82877, 5805, 91144, 88798, 94119, 5235, 34744, 63649, 27221, 12720, 66635, 62766, 56339, 91194, 89686, 10073, 22782, 39068, 93132, 68920, 78980, 42534, 17411, 61428, 16597, 95964, 38847, 46832, 67364, 92103, 19731, 71827, 95983, 71901, 84583, 85198, 83455, 27531, 86265, 17143, 83485, 38368, 76689, 41675, 19290, 82998, 95269, 57268, 77621, 74765, 54951, 5996, 25660, 84809, 10406, 32040, 66471, 73378, 18838, 18875, 91811, 32324, 2734, 89791, 27763, 89027, 12469, 53797, 71636, 42998, 65334, 61860, 20399, 78279, 98427, 6291, 33790, 18871, 1731, 10190, 95758, 55467, 60984, 87913, 48783, 55408, 58785, 44504, 93960, 74685, 72566, 95878, 65567, 73167, 15435, 9610, 25290, 37811, 49082, 97928, 17750, 15166, 4042, 81751, 13090, 77986, 52073, 4262, 97039, 9528, 99471, 58727, 77215, 97122, 29657, 78561, 9248, 36705, 49851, 74294, 44959, 73428, 27248, 63432, 39425, 20237, 96868, 13792, 74361, 49445, 82966, 86416, 39134, 55715, 41543, 59165, 20307, 76895, 25081, 7187, 46828, 85528, 50876, 58426, 50206, 41122, 28010, 30949, 89318, 46915, 85928, 45686, 96676, 86528, 94523, 55373, 81432, 46970, 89327, 56516, 36343, 86503, 93823, 48769, 47892, 9785, 53042, 13955, 41289, 98894, 51395, 96719, 7362, 12634, 77326, 52853, 67078, 90567, 66039, 18773, 76411, 49533, 48903, 37107, 20282, 54001, 87151, 30540, 46642, 90717, 89055, 395, 24005, 57403, 39332, 22760, 9144, 63413, 27100, 71776, 29399, 1579, 7440, 49706, 12971, 20133, 19623, 54657, 38238, 51475, 62690, 79825, 63822, 33339, 12349, 1940, 9092, 81523, 25435, 51696, 9702, 68950, 64820, 25180, 43666, 93512, 2940, 7335, 15158, 90884, 24558, 54885, 72054, 99542, 9850, 12353, 82308, 44465, 311, 46659, 3939, 98333, 34382, 8539, 50735, 89125, 65139, 58359, 36502, 35210, 48569, 99535, 53386, 58955, 47500, 91492, 11310, 40010, 33362, 20677, 93606, 12815, 54685, 73614, 84292, 71177, 11019, 91701, 21355, 50444, 56636, 41449, 13924, 17499, 97566, 20817, 37926, 25762, 73850, 27486, 95963, 57597, 22498, 86959, 88754, 51938, 77409, 9413, 66065, 68966, 15132, 15487, 44745, 28114, 56899, 12070, 7152, 38919, 57466, 88982, 96849, 20198, 87959, 77059, 24795, 78911, 74666, 13914, 11739, 68246, 43338, 75203, 2273, 27595, 98847, 97122, 20918, 34412, 22242, 60180, 89826, 46755, 66281, 6085, 19598, 13255, 89354, 56496, 81603, 97005, 42983, 8643, 38970, 64082, 80264, 67332, 77664, 1559, 49861, 33456, 25268, 67057, 89006, 98565, 8863, 33302, 90111, 15922, 96382, 47106, 47194, 23535, 91473, 98520, 64796, 45393, 99395, 34264, 17725, 71450, 59592, 42442, 28750, 75201, 59400, 71209, 83552, 41246, 54180, 65241, 459, 26418, 48887, 53153, 83989, 87489, 63222, 8517, 64089, 32621, 1300, 121, 80071, 25467, 1894, 80320, 80415, 91101, 24895, 84683, 45848, 62462, 50835, 62477, 541, 70267, 40981, 10015, 38430, 26210, 23917, 57245, 26855, 6080, 34354, 70185, 31836, 47754, 87174, 97851, 44125, 30687, 87774, 48222, 58268, 79643, 12416, 88873, 58502, 35691, 59989, 50780, 13557, 82060, 29382, 9933, 22059, 40786, 67790, 52071, 41434, 70909, 81035, 77253, 87517, 50566, 24307, 96744, 10272, 38619, 12116, 87370, 58784, 79780, 59288, 94207, 85278, 62043, 99, 17832, 61441, 27148, 68462, 9130, 26074, 82407, 35407, 33421, 49440, 79486, 94965, 28606, 44245, 13248, 53189, 58649, 90925, 83542, 21291, 72273, 28956, 37282, 36201, 78217, 22942, 67465, 32983, 18609, 7054, 78784, 91818, 81553, 52859, 3541, 42094, 14617, 84302, 851, 87546, 82484, 5125, 2144, 94810, 39809, 84956, 71190, 95867, 8696, 96195, 42103, 64644, 65310, 63235, 59185, 5334, 52151, 33267, 27842, 77242, 40243, 46926, 13042, 35571, 71622, 64061, 16442, 36282, 10478, 12558, 54021, 19276, 94013, 48531, 86725, 95187, 85725, 28294, 8843, 92673, 5684, 38439, 35269, 12606, 31718, 80982, 858, 10211, 73457, 92439, 12747, 69576, 38987, 846, 99735, 41922, 95222, 74846, 54726, 18621, 51278, 65081, 22703, 47764, 23575, 90471, 77083, 13650, 8783, 90031, 37115, 87620, 85574, 38483, 41394, 3991, 96017, 39543, 92007, 34492, 56518, 39956, 52640, 26734, 13961, 92432, 97464, 30631, 44289, 34563, 93324, 62778, 67198, 5192, 73326, 78229, 12666, 7615, 85446, 8344, 95278, 43723, 61298, 4905, 75913, 51393, 74096, 67541, 54939, 58560, 22174, 38865, 88231, 85379, 32489, 57363, 45446, 75042, 34991, 63889, 72188, 24971, 94988, 43005, 68811, 64960, 35864, 48954, 35909, 3330, 35348, 71652, 69070, 66715, 22184, 49229, 75293, 57041, 22444, 90772, 59897, 87397, 61095, 8285, 84874, 51568, 34531, 33749, 33824, 19946, 88865, 53138, 80006, 54680, 29267, 95810, 48663, 53209, 21048, 15601, 63350, 2713, 12590, 30286, 51668, 59785, 9289, 70629, 70411, 79764, 69650, 84028, 96280, 19546, 89, 80586, 63343, 17790, 92931, 42451, 83771, 3170, 72183, 35077, 75631, 53113, 65325, 73030, 28479, 96281, 25138, 31127, 66744, 86624, 13623, 15639, 34629, 68165, 13966, 97611, 73544, 45281, 2330, 59332, 90281, 40555, 91314, 39715, 18585, 34700, 4346, 15419, 28487, 84482, 43778, 57440, 82776, 39450, 5013, 5123, 19948, 85118, 77780, 85882, 72022, 1310, 99362, 77808, 39300, 14559, 55003, 22628, 67790, 15561, 16167, 11809, 24375, 95037, 80638, 88610, 31326, 24887, 80530, 72977, 21594, 95637, 95832, 20136, 90818, 87667, 85127, 53819, 4695, 75153, 14205, 86210, 92930, 38943, 7583, 70592, 53098, 47039, 20477, 67677, 74001, 37356, 58854, 48980, 44413, 59073, 92393, 46618, 39577, 59470, 32306, 44531, 54283, 79944, 55926, 10395, 28022, 43023, 30533, 34121, 30310, 55505, 44065, 20913, 94755, 19197, 53884, 41059, 56951, 74181, 61376, 49178, 77932, 91775, 35646, 8413, 2580, 88923, 50792, 98933, 66865, 89427, 93187, 76684, 16978, 31614, 71861, 64018, 74822, 46145, 29174, 20386, 36963, 33458, 56208, 51099, 95897, 26095, 76390, 32352, 76679, 6696, 45004, 65115, 8250, 53841, 33372, 5934, 38546, 81172, 80743, 50024, 66394, 85713, 56752, 5723, 63829, 77739, 1518, 2966, 17009, 81920, 81624, 74820, 89468, 55332, 93255, 95120, 15189, 67999, 47069, 61270, 11055, 73602, 18302, 80459, 92362, 49301, 72312, 55385, 74666, 33097, 17930, 85475, 23780, 93538, 96895, 9037, 43514, 86739, 28680, 37013, 64261, 78463, 30359, 7156, 98826, 48226, 84423, 70684, 36881, 23557, 30133, 34079, 67898], thresh=16577921144):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_94",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=11, beta: int=14, xs: List[int]=[0, 1383, 5477, 6983, 20834, 36544, 42406, 54401, 56783, 62234, 69606, 71284, 80200, 88236, 89141, 94417, 99358, 99573, 100000], ys: List[int]=[42230, 44644, 24751, 63914, 36851, 81530, 54166, 67436, 89430, 90947, 75585, 3404, 14929, 22240, 12681, 53845, 37070, 6802, 57793], thresh: int=12999828040):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=11, beta=14, xs=[0, 1383, 5477, 6983, 20834, 36544, 42406, 54401, 56783, 62234, 69606, 71284, 80200, 88236, 89141, 94417, 99358, 99573, 100000], ys=[42230, 44644, 24751, 63914, 36851, 81530, 54166, 67436, 89430, 90947, 75585, 3404, 14929, 22240, 12681, 53845, 37070, 6802, 57793], thresh=12999828040):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_95",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=5, beta: int=38, xs: List[int]=[0, 1531, 2489, 4263, 4385, 4745, 8614, 12420, 12931, 12965, 13058, 13540, 23035, 23102, 23222, 28521, 32905, 32910, 32910, 32910, 32910, 32910, 32910, 32910, 32910, 32910, 32910, 32910, 32910, 32910, 32910, 32911, 34157, 36352, 38412, 40888, 41213, 47690, 51102, 58003, 67270, 67777, 71942, 76660, 92996, 93971, 94379, 96777, 100000], ys: List[int]=[9393, 97586, 70907, 56090, 87257, 12014, 5154, 83091, 64800, 37652, 71273, 16028, 57593, 90686, 37286, 79340, 24019, 36770, 85657, 44393, 77887, 70323, 91216, 26721, 17746, 27963, 17741, 17080, 27048, 43205, 51046, 93610, 31987, 7056, 51727, 71060, 21099, 74928, 2043, 10008, 53, 31017, 71096, 17556, 18199, 47053, 39218, 97698, 40288], thresh: int=26681984127):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=5, beta=38, xs=[0, 1531, 2489, 4263, 4385, 4745, 8614, 12420, 12931, 12965, 13058, 13540, 23035, 23102, 23222, 28521, 32905, 32910, 32910, 32910, 32910, 32910, 32910, 32910, 32910, 32910, 32910, 32910, 32910, 32910, 32910, 32911, 34157, 36352, 38412, 40888, 41213, 47690, 51102, 58003, 67270, 67777, 71942, 76660, 92996, 93971, 94379, 96777, 100000], ys=[9393, 97586, 70907, 56090, 87257, 12014, 5154, 83091, 64800, 37652, 71273, 16028, 57593, 90686, 37286, 79340, 24019, 36770, 85657, 44393, 77887, 70323, 91216, 26721, 17746, 27963, 17741, 17080, 27048, 43205, 51046, 93610, 31987, 7056, 51727, 71060, 21099, 74928, 2043, 10008, 53, 31017, 71096, 17556, 18199, 47053, 39218, 97698, 40288], thresh=26681984127):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_96",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=705, beta: int=570, xs: List[int]=[0, 3029, 3127, 5382, 5429, 5597, 5620, 5621, 5621, 5623, 5623, 5623, 5624, 8931, 9444, 9498, 9673, 9694, 9911, 11829, 12064, 12626, 12743, 13215, 13271, 13546, 13596, 13740, 13821, 13888, 13895, 13896, 13896, 13896, 13896, 13896, 13896, 13896, 13896, 13897, 14342, 14344, 14378, 14559, 14739, 15681, 17172, 17708, 18619, 18769, 19330, 19738, 20040, 20615, 21514, 21632, 21684, 22028, 23192, 23682, 26318, 26495, 26762, 26784, 26798, 27872, 28916, 28984, 29005, 29016, 29022, 29028, 29770, 29847, 30230, 30266, 30272, 30305, 30307, 30380, 30393, 30399, 30409, 30418, 30419, 30438, 31264, 31576, 31693, 31734, 31750, 31757, 32725, 33041, 33200, 33807, 34006, 34877, 34888, 34891, 34893, 34895, 35379, 35867, 37009, 37130, 37131, 37133, 37303, 37438, 37638, 37867, 37987, 38050, 38053, 38053, 38054, 38054, 38054, 38054, 38054, 38054, 38054, 38054, 38054, 38054, 38055, 38498, 38875, 39175, 40264, 40707, 40771, 40811, 40839, 40861, 41007, 41214, 41639, 41893, 42661, 43154, 43567, 43773, 45439, 46627, 46637, 46644, 46644, 46644, 46644, 46644, 46644, 46645, 46645, 46646, 46646, 46648, 46648, 46648, 46648, 46648, 46648, 46648, 46648, 46648, 46648, 46648, 46648, 46649, 50058, 52319, 52743, 52918, 52926, 52945, 53021, 53025, 53025, 53025, 53027, 53055, 53278, 53954, 54647, 54683, 54975, 57748, 59395, 65335, 65633, 65639, 65639, 65639, 65644, 65648, 65650, 65650, 65650, 65650, 65650, 65650, 65650, 65651, 67470, 67733, 68735, 68764, 68799, 69318, 70017, 70104, 70111, 70111, 70112, 70112, 70112, 70112, 70112, 70112, 70112, 70112, 70112, 70112, 70112, 70112, 70112, 70112, 70112, 70112, 70112, 70112, 70112, 70112, 70112, 70113, 71414, 71610, 71699, 71818, 72644, 73069, 73078, 82401, 82631, 82636, 82637, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82643, 82941, 85814, 86090, 86286, 86545, 86545, 86581, 86581, 86583, 86584, 86584, 86584, 86584, 86584, 86585, 86600, 87258, 87666, 87754, 87806, 87812, 87817, 88048, 88502, 88663, 88663, 88665, 88667, 88667, 88667, 88668, 88778, 88789, 89247, 92080, 95953, 95974, 96252, 96958, 97605, 97619, 97672, 97768, 97797, 97914, 98080, 98115, 98483, 98562, 98585, 99208, 99410, 100000], ys: List[int]=[4304, 66124, 92833, 56375, 74017, 9319, 76882, 38891, 453, 59716, 72731, 68422, 71123, 72403, 71474, 88383, 44324, 80585, 26332, 41886, 50134, 81310, 83852, 55824, 75671, 10564, 82922, 80329, 98981, 44944, 52704, 92202, 62302, 22534, 9071, 77291, 84391, 43711, 83871, 51446, 60838, 80577, 90086, 94613, 54980, 54565, 67235, 6665, 31093, 61394, 55473, 57280, 66016, 75388, 42700, 1210, 27716, 5274, 9336, 78349, 51869, 79361, 5446, 44627, 26952, 59393, 13128, 74244, 35011, 23784, 29628, 2008, 18123, 21902, 51596, 75654, 88998, 3246, 82391, 6007, 91274, 86800, 95785, 99575, 30302, 45163, 39581, 12549, 58378, 24028, 26466, 95266, 16540, 43982, 39828, 56125, 35586, 52838, 42845, 1746, 8211, 62184, 16887, 68491, 8697, 71783, 10638, 41579, 32431, 97727, 36770, 1818, 90726, 45201, 22820, 70324, 51123, 27733, 38342, 6924, 36748, 10980, 597, 6390, 94378, 67219, 34015, 80711, 52125, 38527, 38896, 62369, 8986, 82395, 97170, 10616, 15810, 46246, 67780, 87193, 23633, 46778, 7651, 70474, 58946, 97064, 58964, 29858, 24778, 41446, 12322, 51178, 7336, 59186, 72553, 10937, 11798, 14009, 59140, 27550, 13461, 49108, 10599, 59682, 57082, 11236, 40527, 56793, 61767, 31088, 1090, 76705, 76161, 83578, 31731, 22858, 71006, 45271, 1448, 8720, 17844, 8474, 8223, 91455, 55778, 67528, 13482, 48504, 69116, 58322, 8533, 93585, 3808, 98231, 36276, 78785, 7862, 43326, 23620, 14763, 45534, 7936, 89726, 45554, 40989, 87077, 62468, 17399, 23503, 65316, 47627, 68570, 1642, 3771, 64341, 57401, 18651, 49371, 73078, 42725, 55278, 83783, 16677, 24889, 12539, 18905, 38478, 97094, 20770, 36832, 77544, 57695, 97318, 34171, 12932, 17907, 56017, 25407, 21692, 86437, 57879, 89204, 27582, 63955, 1199, 21742, 28147, 71164, 5944, 17159, 76634, 1149, 34112, 20991, 43229, 54095, 63610, 31003, 46304, 71010, 59905, 69371, 51680, 59177, 23414, 27032, 27289, 21195, 14269, 54040, 53143, 7661, 87623, 2445, 52684, 23796, 42858, 48618, 15690, 61058, 16899, 58078, 22516, 59337, 61088, 31902, 23397, 82995, 55920, 59712, 48945, 55100, 92578, 51657, 96479, 97878, 43541, 78111, 60453, 84558, 4446, 47114, 24662, 53935, 21169, 67357, 39661, 91228, 41297, 34113, 70911, 8788, 44374, 50514, 52657, 19924, 40084, 50435, 42428, 95472, 50978, 18329, 56805, 57923, 29051, 69446, 82565, 54027], thresh: int=148749071025):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=705, beta=570, xs=[0, 3029, 3127, 5382, 5429, 5597, 5620, 5621, 5621, 5623, 5623, 5623, 5624, 8931, 9444, 9498, 9673, 9694, 9911, 11829, 12064, 12626, 12743, 13215, 13271, 13546, 13596, 13740, 13821, 13888, 13895, 13896, 13896, 13896, 13896, 13896, 13896, 13896, 13896, 13897, 14342, 14344, 14378, 14559, 14739, 15681, 17172, 17708, 18619, 18769, 19330, 19738, 20040, 20615, 21514, 21632, 21684, 22028, 23192, 23682, 26318, 26495, 26762, 26784, 26798, 27872, 28916, 28984, 29005, 29016, 29022, 29028, 29770, 29847, 30230, 30266, 30272, 30305, 30307, 30380, 30393, 30399, 30409, 30418, 30419, 30438, 31264, 31576, 31693, 31734, 31750, 31757, 32725, 33041, 33200, 33807, 34006, 34877, 34888, 34891, 34893, 34895, 35379, 35867, 37009, 37130, 37131, 37133, 37303, 37438, 37638, 37867, 37987, 38050, 38053, 38053, 38054, 38054, 38054, 38054, 38054, 38054, 38054, 38054, 38054, 38054, 38055, 38498, 38875, 39175, 40264, 40707, 40771, 40811, 40839, 40861, 41007, 41214, 41639, 41893, 42661, 43154, 43567, 43773, 45439, 46627, 46637, 46644, 46644, 46644, 46644, 46644, 46644, 46645, 46645, 46646, 46646, 46648, 46648, 46648, 46648, 46648, 46648, 46648, 46648, 46648, 46648, 46648, 46648, 46649, 50058, 52319, 52743, 52918, 52926, 52945, 53021, 53025, 53025, 53025, 53027, 53055, 53278, 53954, 54647, 54683, 54975, 57748, 59395, 65335, 65633, 65639, 65639, 65639, 65644, 65648, 65650, 65650, 65650, 65650, 65650, 65650, 65650, 65651, 67470, 67733, 68735, 68764, 68799, 69318, 70017, 70104, 70111, 70111, 70112, 70112, 70112, 70112, 70112, 70112, 70112, 70112, 70112, 70112, 70112, 70112, 70112, 70112, 70112, 70112, 70112, 70112, 70112, 70112, 70112, 70113, 71414, 71610, 71699, 71818, 72644, 73069, 73078, 82401, 82631, 82636, 82637, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82642, 82643, 82941, 85814, 86090, 86286, 86545, 86545, 86581, 86581, 86583, 86584, 86584, 86584, 86584, 86584, 86585, 86600, 87258, 87666, 87754, 87806, 87812, 87817, 88048, 88502, 88663, 88663, 88665, 88667, 88667, 88667, 88668, 88778, 88789, 89247, 92080, 95953, 95974, 96252, 96958, 97605, 97619, 97672, 97768, 97797, 97914, 98080, 98115, 98483, 98562, 98585, 99208, 99410, 100000], ys=[4304, 66124, 92833, 56375, 74017, 9319, 76882, 38891, 453, 59716, 72731, 68422, 71123, 72403, 71474, 88383, 44324, 80585, 26332, 41886, 50134, 81310, 83852, 55824, 75671, 10564, 82922, 80329, 98981, 44944, 52704, 92202, 62302, 22534, 9071, 77291, 84391, 43711, 83871, 51446, 60838, 80577, 90086, 94613, 54980, 54565, 67235, 6665, 31093, 61394, 55473, 57280, 66016, 75388, 42700, 1210, 27716, 5274, 9336, 78349, 51869, 79361, 5446, 44627, 26952, 59393, 13128, 74244, 35011, 23784, 29628, 2008, 18123, 21902, 51596, 75654, 88998, 3246, 82391, 6007, 91274, 86800, 95785, 99575, 30302, 45163, 39581, 12549, 58378, 24028, 26466, 95266, 16540, 43982, 39828, 56125, 35586, 52838, 42845, 1746, 8211, 62184, 16887, 68491, 8697, 71783, 10638, 41579, 32431, 97727, 36770, 1818, 90726, 45201, 22820, 70324, 51123, 27733, 38342, 6924, 36748, 10980, 597, 6390, 94378, 67219, 34015, 80711, 52125, 38527, 38896, 62369, 8986, 82395, 97170, 10616, 15810, 46246, 67780, 87193, 23633, 46778, 7651, 70474, 58946, 97064, 58964, 29858, 24778, 41446, 12322, 51178, 7336, 59186, 72553, 10937, 11798, 14009, 59140, 27550, 13461, 49108, 10599, 59682, 57082, 11236, 40527, 56793, 61767, 31088, 1090, 76705, 76161, 83578, 31731, 22858, 71006, 45271, 1448, 8720, 17844, 8474, 8223, 91455, 55778, 67528, 13482, 48504, 69116, 58322, 8533, 93585, 3808, 98231, 36276, 78785, 7862, 43326, 23620, 14763, 45534, 7936, 89726, 45554, 40989, 87077, 62468, 17399, 23503, 65316, 47627, 68570, 1642, 3771, 64341, 57401, 18651, 49371, 73078, 42725, 55278, 83783, 16677, 24889, 12539, 18905, 38478, 97094, 20770, 36832, 77544, 57695, 97318, 34171, 12932, 17907, 56017, 25407, 21692, 86437, 57879, 89204, 27582, 63955, 1199, 21742, 28147, 71164, 5944, 17159, 76634, 1149, 34112, 20991, 43229, 54095, 63610, 31003, 46304, 71010, 59905, 69371, 51680, 59177, 23414, 27032, 27289, 21195, 14269, 54040, 53143, 7661, 87623, 2445, 52684, 23796, 42858, 48618, 15690, 61058, 16899, 58078, 22516, 59337, 61088, 31902, 23397, 82995, 55920, 59712, 48945, 55100, 92578, 51657, 96479, 97878, 43541, 78111, 60453, 84558, 4446, 47114, 24662, 53935, 21169, 67357, 39661, 91228, 41297, 34113, 70911, 8788, 44374, 50514, 52657, 19924, 40084, 50435, 42428, 95472, 50978, 18329, 56805, 57923, 29051, 69446, 82565, 54027], thresh=148749071025):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_97",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=79, beta: int=68, xs: List[int]=[0, 159, 168, 242, 1475, 1604, 1606, 1655, 3174, 6427, 7549, 7591, 7634, 7660, 7671, 7678, 7679, 7679, 7681, 9175, 11010, 15469, 18053, 19045, 21753, 22597, 24207, 25720, 25846, 25982, 25986, 25986, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25988, 28149, 29852, 30220, 35058, 40295, 45975, 48525, 48824, 49488, 57151, 57330, 65527, 70271, 71435, 71631, 72364, 82271, 82814, 90770, 94860, 96178, 100000], ys: List[int]=[39578, 79361, 14669, 52969, 29768, 48962, 43917, 51290, 36940, 14080, 23655, 68703, 37629, 90891, 578, 64123, 18264, 70633, 32890, 50448, 68053, 22982, 66750, 32273, 49598, 45512, 325, 23857, 90268, 85630, 12553, 6202, 87885, 89976, 92709, 17271, 78683, 28284, 14190, 46254, 84407, 40258, 52144, 42580, 72107, 91255, 84839, 90871, 73212, 56380, 11500, 30842, 31386, 71293, 27091, 58664, 47648, 92808, 86267, 27557, 3803, 5930, 77435, 94817, 69729, 31299, 7497, 52710, 32006, 63124, 39206, 82360, 33235, 46509, 4782, 90888, 6825, 60823, 21094, 77938, 56194, 9403, 84319, 32247, 15538, 77991, 47498, 90510, 49986, 15759, 42730, 33457, 48411, 85977, 51123, 86791, 83424, 40702, 42921], thresh: int=34498855041):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=79, beta=68, xs=[0, 159, 168, 242, 1475, 1604, 1606, 1655, 3174, 6427, 7549, 7591, 7634, 7660, 7671, 7678, 7679, 7679, 7681, 9175, 11010, 15469, 18053, 19045, 21753, 22597, 24207, 25720, 25846, 25982, 25986, 25986, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25987, 25988, 28149, 29852, 30220, 35058, 40295, 45975, 48525, 48824, 49488, 57151, 57330, 65527, 70271, 71435, 71631, 72364, 82271, 82814, 90770, 94860, 96178, 100000], ys=[39578, 79361, 14669, 52969, 29768, 48962, 43917, 51290, 36940, 14080, 23655, 68703, 37629, 90891, 578, 64123, 18264, 70633, 32890, 50448, 68053, 22982, 66750, 32273, 49598, 45512, 325, 23857, 90268, 85630, 12553, 6202, 87885, 89976, 92709, 17271, 78683, 28284, 14190, 46254, 84407, 40258, 52144, 42580, 72107, 91255, 84839, 90871, 73212, 56380, 11500, 30842, 31386, 71293, 27091, 58664, 47648, 92808, 86267, 27557, 3803, 5930, 77435, 94817, 69729, 31299, 7497, 52710, 32006, 63124, 39206, 82360, 33235, 46509, 4782, 90888, 6825, 60823, 21094, 77938, 56194, 9403, 84319, 32247, 15538, 77991, 47498, 90510, 49986, 15759, 42730, 33457, 48411, 85977, 51123, 86791, 83424, 40702, 42921], thresh=34498855041):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_98",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=99, beta: int=3, xs: List[int]=[0, 9551, 10346, 11102, 13744, 15038, 16451, 17160, 19641, 24933, 28199, 30807, 32314, 33321, 34588, 38639, 38810, 38845, 38981, 39042, 39046, 39047, 39049, 39049, 39050, 39184, 39346, 42578, 43325, 45122, 45551, 46986, 47262, 48125, 48125, 48134, 48145, 48148, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48160, 68689, 78729, 95786, 100000], ys: List[int]=[28474, 71017, 39239, 95292, 90687, 45684, 63673, 95200, 77838, 64803, 45823, 57711, 71151, 46443, 2573, 4585, 49659, 68939, 60631, 99051, 70674, 52048, 4512, 3748, 40442, 2720, 26322, 34492, 42199, 36999, 24867, 25420, 38506, 72599, 15070, 64389, 5648, 39795, 70873, 60166, 8208, 88857, 17317, 64144, 97447, 26585, 75107, 40320, 1884, 91051, 10964, 68494, 97596, 11302, 38232, 4336, 59918, 15500, 78739, 10053, 41534, 20619, 30663, 49472, 74780, 55564, 32655, 34464, 55084, 41854, 76790, 67628, 34509, 6737, 51533, 61676, 48225, 23715, 12461, 24690, 35525, 87487, 21990, 74592, 80032, 31108, 14413, 67285, 91805, 88249, 36833, 83694, 96432, 50989, 25335, 40344, 44002, 86229, 9692], thresh: int=3205572657):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=99, beta=3, xs=[0, 9551, 10346, 11102, 13744, 15038, 16451, 17160, 19641, 24933, 28199, 30807, 32314, 33321, 34588, 38639, 38810, 38845, 38981, 39042, 39046, 39047, 39049, 39049, 39050, 39184, 39346, 42578, 43325, 45122, 45551, 46986, 47262, 48125, 48125, 48134, 48145, 48148, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48159, 48160, 68689, 78729, 95786, 100000], ys=[28474, 71017, 39239, 95292, 90687, 45684, 63673, 95200, 77838, 64803, 45823, 57711, 71151, 46443, 2573, 4585, 49659, 68939, 60631, 99051, 70674, 52048, 4512, 3748, 40442, 2720, 26322, 34492, 42199, 36999, 24867, 25420, 38506, 72599, 15070, 64389, 5648, 39795, 70873, 60166, 8208, 88857, 17317, 64144, 97447, 26585, 75107, 40320, 1884, 91051, 10964, 68494, 97596, 11302, 38232, 4336, 59918, 15500, 78739, 10053, 41534, 20619, 30663, 49472, 74780, 55564, 32655, 34464, 55084, 41854, 76790, 67628, 34509, 6737, 51533, 61676, 48225, 23715, 12461, 24690, 35525, 87487, 21990, 74592, 80032, 31108, 14413, 67285, 91805, 88249, 36833, 83694, 96432, 50989, 25335, 40344, 44002, 86229, 9692], thresh=3205572657):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  },
  {
    "name": "OptimalBridges_99",
    "sat": "def sat(indices: List[int], H: int=100000, alpha: int=903, beta: int=958, xs: List[int]=[0, 997, 3885, 4292, 4966, 7913, 9990, 10641, 11982, 12017, 12022, 17030, 17345, 17408, 17435, 17435, 17455, 19503, 20488, 20661, 20668, 20672, 20885, 20915, 21002, 21003, 21003, 21042, 23236, 24849, 28451, 28780, 29235, 41394, 43288, 43484, 43829, 43893, 43904, 43915, 43916, 43921, 43928, 43928, 43929, 45050, 45997, 62023, 62942, 66472, 68810, 70223, 70916, 73059, 73670, 74054, 74224, 76488, 80389, 82511, 83274, 83738, 84866, 84866, 84878, 84892, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84894, 85028, 89180, 89295, 89571, 89654, 89768, 89904, 89911, 92589, 93237, 94253, 94269, 94529, 94658, 94696, 94702, 94810, 94815, 94818, 94818, 94818, 94818, 94818, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94820, 96308, 96527, 96629, 96676, 96688, 96689, 96689, 96690, 97182, 97939, 98546, 99014, 99231, 99234, 99238, 99238, 99242, 99247, 99248, 99648, 100000], ys: List[int]=[3248, 32957, 24335, 97631, 63797, 70175, 24861, 56577, 27248, 90162, 4270, 46736, 32692, 52037, 58008, 42017, 20275, 8661, 60528, 64214, 81189, 81911, 89947, 82751, 71130, 52323, 66689, 55625, 92402, 3412, 36748, 45625, 9794, 16357, 62108, 29791, 47152, 50680, 23543, 1591, 5965, 42045, 89737, 29557, 52085, 37748, 74279, 84613, 7899, 48618, 78680, 48406, 62368, 25383, 74854, 46841, 94469, 70126, 26172, 53106, 54072, 6014, 33631, 94216, 13627, 40006, 48605, 17447, 53092, 25138, 16667, 59723, 17245, 14417, 1515, 28413, 40212, 43110, 13741, 48376, 88223, 55700, 24832, 30848, 36874, 8689, 81026, 58220, 26930, 57728, 73282, 49543, 64545, 60119, 32551, 89666, 20589, 79619, 2414, 71186, 56796, 41678, 48403, 95492, 75712, 15690, 34695, 80246, 49931, 25291, 46433, 41034, 70795, 56009, 60527, 43036, 30458, 62255, 75569, 85797, 3149, 47464, 70581, 69612, 80716, 13784, 58148, 47900, 46154, 19837, 12437, 8398, 15458, 72713, 64279, 91995, 92197, 93614, 73428, 37893, 29696, 86551, 63083, 23503, 37283, 28861, 5688, 38537, 87944, 44897, 45531, 26561, 96296, 37180, 53862, 84652, 94654, 52399, 76805, 41033, 74697, 34174, 26974, 55043, 3620, 17496, 22331, 2267, 40013, 83442, 54964, 23462, 789, 14075, 87648, 12732, 24008, 94644, 522, 21067, 94652, 52320, 27511, 95330, 57796, 8907, 22874, 39269, 85734, 43089, 71234, 36216, 71865, 1820, 66771, 89435, 66739, 34718, 52670, 65435, 61307, 39436, 23255, 55801, 32189, 61781, 96253, 8488, 3888, 63885, 26698, 62211, 15478, 50797, 20807, 30687, 42556, 89903, 49823, 46684, 6226, 31173, 17238, 90268, 42591, 76423, 23742, 40383, 29587, 33129, 76852, 81825, 52693, 20962, 16177, 87533, 21943, 8285, 75479, 67222, 17593, 64669, 85009, 24128, 76543, 76695, 23634, 73103, 24201, 43235, 14028, 60278, 57214, 40040, 77254, 41786, 60179, 11689, 21144, 49872, 53631, 244, 62202, 12469, 58308, 73047, 9275, 62082, 49927, 92275, 4273, 37732, 89013, 49352, 34959, 57076, 43072, 61922, 5514, 50632, 4920, 6353, 46840, 5580, 374, 22418, 13472, 92679, 78917, 51049, 2539, 35456, 1038, 71028, 19612, 89888, 95497, 97320, 72944, 8094, 57718, 50764, 88262, 92331, 35070, 66749, 89082, 52762, 78933, 57993, 11642, 90591, 82095, 15994, 54419, 85380, 36818, 4947, 24858, 94554, 52959, 17591, 17442, 77752, 74647, 26865, 75739, 20884, 91887, 70313, 65243, 71983, 82548, 41083, 27930, 40227, 21865, 4499, 295, 10636, 45144, 60088, 58028, 44178, 94480, 2970, 53362, 63377, 97093, 50817, 20232, 36547, 61018, 42187, 40198, 89035, 62972, 81556, 20279, 33418, 55912, 30899, 80488, 62712, 96150, 39206, 55271, 19877, 24117, 31339, 72955, 67337, 94538, 21770, 22083, 74000, 90443, 18575, 21672, 13701, 9894, 47087, 69173, 48064, 67701, 5236, 14193, 62358, 31468, 62602, 36865, 13247, 21173, 15996, 67740, 48078, 30535, 91505, 32843, 51660, 75110, 9271, 61872, 88530, 24905, 36353, 67888, 14223, 34200, 30861, 97294, 13642, 86042, 41106, 1952, 30045, 63160, 4869, 46657, 3648, 56918, 86448, 22565, 4612, 31228, 15603, 78479, 14598, 14647, 36303, 57476, 78423, 93751, 78819, 86646, 2087, 69193, 91658, 92495, 59898, 85760, 11952, 81604, 74053, 6458, 52596, 59435, 29244, 93235, 68552, 65944, 45, 55470, 50346, 73191, 90606, 8675, 2475, 29939, 94214, 8174, 78899, 7970, 85347, 6821, 12407, 75531, 72372, 93032, 78985, 64839, 11211, 66367, 35081, 4615, 64821, 4370, 30289, 6407, 11982, 23927, 73494, 40918, 59189, 83115, 80314, 63188, 32528, 51630, 18974, 48457, 28184, 13786, 90623, 74020, 2390, 13981, 54523, 33535, 95952, 13532, 89856, 68649, 24368, 26840, 38684, 31440, 58619, 50357, 50575, 59667, 69380, 3943, 58195, 63565, 80592, 32401, 60261, 87492, 45532, 1322, 66967, 41021, 67613, 81789, 93003, 86611, 62803, 49989, 76220, 56007, 96644, 1358, 80476, 61431, 83643, 5269, 97578, 73515, 81630, 14054, 28109, 33443, 81202, 1984, 45596, 82470, 14592, 46858, 60263, 47364, 1373, 51599, 67027, 18741, 93791, 49708, 41271, 46764, 34554, 16277, 60104, 36575, 18815, 81758, 80500, 28449, 41003, 16372, 59011, 17655, 32639, 42274, 18196, 26569, 35715, 43359, 76188, 3484, 95859, 52558, 32876, 43807, 82144, 79233, 48373, 45351, 7938, 97033, 62913, 66427, 62921, 71066, 83948, 90424, 95054, 52355, 33007, 59332, 38189, 57482, 32557, 69304, 63297, 36478, 71814, 90593, 45222, 34907, 40615, 49782, 28123, 10832, 46202, 68226, 38486, 82548, 52828, 579, 95564, 68248, 19869, 37772, 7569, 6954, 51019, 83366, 34729, 58112, 34080, 16707, 74046, 61809, 78664, 10046, 16127, 45372, 87905, 37881, 34216, 9567, 31532, 36236, 33210, 5978, 91714, 11533, 70966, 11867, 58945, 64988, 66046, 91902, 23386, 52870, 65744, 94924, 12223, 68866, 64151, 19539, 50197, 24997, 72362, 76680, 43119, 42759, 23535, 15772, 89445, 46096, 34175, 64668, 38988, 70569, 61202, 59856, 79372, 46248, 78475, 59389, 28136, 73222, 48803, 52333, 53413, 15223, 83223, 19255, 5819, 60678, 44424, 94912, 74961, 82491, 39226, 45766, 42992, 13821, 70743, 66433, 35785, 71257, 53247, 1535, 7354, 58634, 14866, 89998, 36960, 58304, 9661, 2737, 73667, 6972, 68237, 70166, 28846, 78423, 93151, 64296, 25507, 69349, 92466, 24967, 45188, 24545, 18323, 69467, 69250, 41342, 22825, 84785, 11405, 26657, 55545, 96015, 75537, 20079, 76220, 54800, 54103, 35952, 74476, 72399, 30207, 62551, 63233, 23964, 15667, 62015, 68140, 94982, 89487, 31305, 32557, 3486, 38425, 91878, 83135, 54052, 74976, 5660, 96417, 42756, 50514, 65526, 62882, 83544, 54709, 42446, 69466, 77594, 59798, 75269, 63265, 48159, 48600, 66326, 25885, 8138, 80526, 44391, 57062, 29636, 69887, 70156, 52338, 95742, 32595, 61243, 17831, 71232, 52530, 90311, 1621, 538, 7289, 49758, 31631, 51281, 48711, 14579, 28918, 24259, 84862, 62614, 89744, 20983, 38164, 45118, 85471, 83861, 19634, 87334, 71257, 62625, 23395, 38389, 79878, 66919, 12528, 23583, 6303, 26151, 35527, 19068, 80090, 64082, 5707, 81451, 36778, 70723, 3903], thresh: int=549504902753):\n    assert type(indices) is list and all(type(a) is int for a in indices), 'indices must be of type List[int]'\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "sols": [
      "def sol(H=100000, alpha=903, beta=958, xs=[0, 997, 3885, 4292, 4966, 7913, 9990, 10641, 11982, 12017, 12022, 17030, 17345, 17408, 17435, 17435, 17455, 19503, 20488, 20661, 20668, 20672, 20885, 20915, 21002, 21003, 21003, 21042, 23236, 24849, 28451, 28780, 29235, 41394, 43288, 43484, 43829, 43893, 43904, 43915, 43916, 43921, 43928, 43928, 43929, 45050, 45997, 62023, 62942, 66472, 68810, 70223, 70916, 73059, 73670, 74054, 74224, 76488, 80389, 82511, 83274, 83738, 84866, 84866, 84878, 84892, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84893, 84894, 85028, 89180, 89295, 89571, 89654, 89768, 89904, 89911, 92589, 93237, 94253, 94269, 94529, 94658, 94696, 94702, 94810, 94815, 94818, 94818, 94818, 94818, 94818, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94819, 94820, 96308, 96527, 96629, 96676, 96688, 96689, 96689, 96690, 97182, 97939, 98546, 99014, 99231, 99234, 99238, 99238, 99242, 99247, 99248, 99648, 100000], ys=[3248, 32957, 24335, 97631, 63797, 70175, 24861, 56577, 27248, 90162, 4270, 46736, 32692, 52037, 58008, 42017, 20275, 8661, 60528, 64214, 81189, 81911, 89947, 82751, 71130, 52323, 66689, 55625, 92402, 3412, 36748, 45625, 9794, 16357, 62108, 29791, 47152, 50680, 23543, 1591, 5965, 42045, 89737, 29557, 52085, 37748, 74279, 84613, 7899, 48618, 78680, 48406, 62368, 25383, 74854, 46841, 94469, 70126, 26172, 53106, 54072, 6014, 33631, 94216, 13627, 40006, 48605, 17447, 53092, 25138, 16667, 59723, 17245, 14417, 1515, 28413, 40212, 43110, 13741, 48376, 88223, 55700, 24832, 30848, 36874, 8689, 81026, 58220, 26930, 57728, 73282, 49543, 64545, 60119, 32551, 89666, 20589, 79619, 2414, 71186, 56796, 41678, 48403, 95492, 75712, 15690, 34695, 80246, 49931, 25291, 46433, 41034, 70795, 56009, 60527, 43036, 30458, 62255, 75569, 85797, 3149, 47464, 70581, 69612, 80716, 13784, 58148, 47900, 46154, 19837, 12437, 8398, 15458, 72713, 64279, 91995, 92197, 93614, 73428, 37893, 29696, 86551, 63083, 23503, 37283, 28861, 5688, 38537, 87944, 44897, 45531, 26561, 96296, 37180, 53862, 84652, 94654, 52399, 76805, 41033, 74697, 34174, 26974, 55043, 3620, 17496, 22331, 2267, 40013, 83442, 54964, 23462, 789, 14075, 87648, 12732, 24008, 94644, 522, 21067, 94652, 52320, 27511, 95330, 57796, 8907, 22874, 39269, 85734, 43089, 71234, 36216, 71865, 1820, 66771, 89435, 66739, 34718, 52670, 65435, 61307, 39436, 23255, 55801, 32189, 61781, 96253, 8488, 3888, 63885, 26698, 62211, 15478, 50797, 20807, 30687, 42556, 89903, 49823, 46684, 6226, 31173, 17238, 90268, 42591, 76423, 23742, 40383, 29587, 33129, 76852, 81825, 52693, 20962, 16177, 87533, 21943, 8285, 75479, 67222, 17593, 64669, 85009, 24128, 76543, 76695, 23634, 73103, 24201, 43235, 14028, 60278, 57214, 40040, 77254, 41786, 60179, 11689, 21144, 49872, 53631, 244, 62202, 12469, 58308, 73047, 9275, 62082, 49927, 92275, 4273, 37732, 89013, 49352, 34959, 57076, 43072, 61922, 5514, 50632, 4920, 6353, 46840, 5580, 374, 22418, 13472, 92679, 78917, 51049, 2539, 35456, 1038, 71028, 19612, 89888, 95497, 97320, 72944, 8094, 57718, 50764, 88262, 92331, 35070, 66749, 89082, 52762, 78933, 57993, 11642, 90591, 82095, 15994, 54419, 85380, 36818, 4947, 24858, 94554, 52959, 17591, 17442, 77752, 74647, 26865, 75739, 20884, 91887, 70313, 65243, 71983, 82548, 41083, 27930, 40227, 21865, 4499, 295, 10636, 45144, 60088, 58028, 44178, 94480, 2970, 53362, 63377, 97093, 50817, 20232, 36547, 61018, 42187, 40198, 89035, 62972, 81556, 20279, 33418, 55912, 30899, 80488, 62712, 96150, 39206, 55271, 19877, 24117, 31339, 72955, 67337, 94538, 21770, 22083, 74000, 90443, 18575, 21672, 13701, 9894, 47087, 69173, 48064, 67701, 5236, 14193, 62358, 31468, 62602, 36865, 13247, 21173, 15996, 67740, 48078, 30535, 91505, 32843, 51660, 75110, 9271, 61872, 88530, 24905, 36353, 67888, 14223, 34200, 30861, 97294, 13642, 86042, 41106, 1952, 30045, 63160, 4869, 46657, 3648, 56918, 86448, 22565, 4612, 31228, 15603, 78479, 14598, 14647, 36303, 57476, 78423, 93751, 78819, 86646, 2087, 69193, 91658, 92495, 59898, 85760, 11952, 81604, 74053, 6458, 52596, 59435, 29244, 93235, 68552, 65944, 45, 55470, 50346, 73191, 90606, 8675, 2475, 29939, 94214, 8174, 78899, 7970, 85347, 6821, 12407, 75531, 72372, 93032, 78985, 64839, 11211, 66367, 35081, 4615, 64821, 4370, 30289, 6407, 11982, 23927, 73494, 40918, 59189, 83115, 80314, 63188, 32528, 51630, 18974, 48457, 28184, 13786, 90623, 74020, 2390, 13981, 54523, 33535, 95952, 13532, 89856, 68649, 24368, 26840, 38684, 31440, 58619, 50357, 50575, 59667, 69380, 3943, 58195, 63565, 80592, 32401, 60261, 87492, 45532, 1322, 66967, 41021, 67613, 81789, 93003, 86611, 62803, 49989, 76220, 56007, 96644, 1358, 80476, 61431, 83643, 5269, 97578, 73515, 81630, 14054, 28109, 33443, 81202, 1984, 45596, 82470, 14592, 46858, 60263, 47364, 1373, 51599, 67027, 18741, 93791, 49708, 41271, 46764, 34554, 16277, 60104, 36575, 18815, 81758, 80500, 28449, 41003, 16372, 59011, 17655, 32639, 42274, 18196, 26569, 35715, 43359, 76188, 3484, 95859, 52558, 32876, 43807, 82144, 79233, 48373, 45351, 7938, 97033, 62913, 66427, 62921, 71066, 83948, 90424, 95054, 52355, 33007, 59332, 38189, 57482, 32557, 69304, 63297, 36478, 71814, 90593, 45222, 34907, 40615, 49782, 28123, 10832, 46202, 68226, 38486, 82548, 52828, 579, 95564, 68248, 19869, 37772, 7569, 6954, 51019, 83366, 34729, 58112, 34080, 16707, 74046, 61809, 78664, 10046, 16127, 45372, 87905, 37881, 34216, 9567, 31532, 36236, 33210, 5978, 91714, 11533, 70966, 11867, 58945, 64988, 66046, 91902, 23386, 52870, 65744, 94924, 12223, 68866, 64151, 19539, 50197, 24997, 72362, 76680, 43119, 42759, 23535, 15772, 89445, 46096, 34175, 64668, 38988, 70569, 61202, 59856, 79372, 46248, 78475, 59389, 28136, 73222, 48803, 52333, 53413, 15223, 83223, 19255, 5819, 60678, 44424, 94912, 74961, 82491, 39226, 45766, 42992, 13821, 70743, 66433, 35785, 71257, 53247, 1535, 7354, 58634, 14866, 89998, 36960, 58304, 9661, 2737, 73667, 6972, 68237, 70166, 28846, 78423, 93151, 64296, 25507, 69349, 92466, 24967, 45188, 24545, 18323, 69467, 69250, 41342, 22825, 84785, 11405, 26657, 55545, 96015, 75537, 20079, 76220, 54800, 54103, 35952, 74476, 72399, 30207, 62551, 63233, 23964, 15667, 62015, 68140, 94982, 89487, 31305, 32557, 3486, 38425, 91878, 83135, 54052, 74976, 5660, 96417, 42756, 50514, 65526, 62882, 83544, 54709, 42446, 69466, 77594, 59798, 75269, 63265, 48159, 48600, 66326, 25885, 8138, 80526, 44391, 57062, 29636, 69887, 70156, 52338, 95742, 32595, 61243, 17831, 71232, 52530, 90311, 1621, 538, 7289, 49758, 31631, 51281, 48711, 14579, 28918, 24259, 84862, 62614, 89744, 20983, 38164, 45118, 85471, 83861, 19634, 87334, 71257, 62625, 23395, 38389, 79878, 66919, 12528, 23583, 6303, 26151, 35527, 19068, 80090, 64082, 5707, 81451, 36778, 70723, 3903], thresh=549504902753):  # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ]
  }
]